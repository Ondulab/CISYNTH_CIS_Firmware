
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024524  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055c0  080247c8  080247c8  000347c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d88  08029d88  00043620  2**0
                  CONTENTS
  4 .ARM          00000008  08029d88  08029d88  00039d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d90  08029d90  00043620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029d90  08029d90  00039d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d94  08029d94  00039d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003620  24000000  08029d98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c34  24003620  0802d3b8  00043620  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400b254  0802d3b8  0004b254  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802d3b8  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00043620  2**0
                  CONTENTS, READONLY
 13 .debug_info   00077977  00000000  00000000  0004364e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c226  00000000  00000000  000bafc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e68  00000000  00000000  000c71f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bd0  00000000  00000000  000ca058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00052e47  00000000  00000000  000ccc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00050e25  00000000  00000000  0011fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0691  00000000  00000000  00170894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00330f25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d7c4  00000000  00000000  00330f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003620 	.word	0x24003620
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080247ac 	.word	0x080247ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003624 	.word	0x24003624
 80002dc:	080247ac 	.word	0x080247ac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01e f91c 	bl	801ecc4 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	printf("Start BW ifft mode \n");
 8000a92:	489d      	ldr	r0, [pc, #628]	; (8000d08 <cisynth_ifft+0x298>)
 8000a94:	f01f f894 	bl	801fbc0 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f942 	bl	8000d20 <cisynth_ifft_SetHint>
	pcm5102_Init();
 8000a9c:	f01d fc34 	bl	801e308 <pcm5102_Init>
	cis_Init(IFFT_MODE);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f01c ffa5 	bl	801d9f0 <cis_Init>
	synth_IfftInit();
 8000aa6:	f011 fad9 	bl	801205c <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	int32_t i = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t note = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	while (1)
	{
		start_tick = HAL_GetTick();
 8000ab6:	f003 fc2b 	bl	8004310 <HAL_GetTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a93      	ldr	r2, [pc, #588]	; (8000d0c <cisynth_ifft+0x29c>)
 8000abe:	6013      	str	r3, [r2, #0]
//		synth_SetImageData(50, 32760); //for testing
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac0:	e002      	b.n	8000ac8 <cisynth_ifft+0x58>
		{
			synth_AudioProcess(IFFT_MODE);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f011 fdb0 	bl	8012628 <synth_AudioProcess>
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac8:	4b91      	ldr	r3, [pc, #580]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000ad0:	d3f7      	bcc.n	8000ac2 <cisynth_ifft+0x52>
		}

		latency = HAL_GetTick() - start_tick;
 8000ad2:	f003 fc1d 	bl	8004310 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <cisynth_ifft+0x29c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		sprintf((char *)FreqStr, "%dHz", (int)((synth_process_cnt * 1000) / latency));
 8000ae2:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aea:	fb02 f203 	mul.w	r2, r2, r3
 8000aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	463b      	mov	r3, r7
 8000afa:	4986      	ldr	r1, [pc, #536]	; (8000d14 <cisynth_ifft+0x2a4>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f01f f8bd 	bl	801fc7c <siprintf>
		synth_process_cnt = 0;
 8000b02:	4b83      	ldr	r3, [pc, #524]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	231c      	movs	r3, #28
 8000b12:	227f      	movs	r2, #127	; 0x7f
 8000b14:	210a      	movs	r1, #10
 8000b16:	2000      	movs	r0, #0
 8000b18:	f01d fd92 	bl	801e640 <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2304      	movs	r3, #4
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	231c      	movs	r3, #28
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	2081      	movs	r0, #129	; 0x81
 8000b2e:	f01d fd87 	bl	801e640 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2329      	movs	r3, #41	; 0x29
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	211d      	movs	r1, #29
 8000b42:	2000      	movs	r0, #0
 8000b44:	f01d fd7c 	bl	801e640 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2332      	movs	r3, #50	; 0x32
 8000b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b56:	212a      	movs	r1, #42	; 0x2a
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f01d fd71 	bl	801e640 <ssd1362_drawRect>
//		}

//		synth_SetImageData(++note, 1000); //for testing
//		synth_SetImageData(note - 1, 0);

		synth_SetImageData(20, 1000); //for testing
 8000b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b62:	2014      	movs	r0, #20
 8000b64:	f011 fbb2 	bl	80122cc <synth_SetImageData>
		synth_SetImageData(85, 5700);
 8000b68:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b6c:	2055      	movs	r0, #85	; 0x55
 8000b6e:	f011 fbad 	bl	80122cc <synth_SetImageData>
		synth_SetImageData(120, 1000); //for testing
 8000b72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b76:	2078      	movs	r0, #120	; 0x78
 8000b78:	f011 fba8 	bl	80122cc <synth_SetImageData>
		synth_SetImageData(185, 5700);
 8000b7c:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b80:	20b9      	movs	r0, #185	; 0xb9
 8000b82:	f011 fba3 	bl	80122cc <synth_SetImageData>
		synth_SetImageData(60, 100); //for testing
 8000b86:	2164      	movs	r1, #100	; 0x64
 8000b88:	203c      	movs	r0, #60	; 0x3c
 8000b8a:	f011 fb9f 	bl	80122cc <synth_SetImageData>
		synth_SetImageData(105, 5700);
 8000b8e:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b92:	2069      	movs	r0, #105	; 0x69
 8000b94:	f011 fb9a 	bl	80122cc <synth_SetImageData>

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b9e:	e037      	b.n	8000c10 <cisynth_ifft+0x1a0>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2) / 4096) - 1, 10, false);
 8000ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ba4:	b29c      	uxth	r4, r3
 8000ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f011 fb7d 	bl	80122ac <synth_GetAudioData>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <cisynth_ifft+0x14c>
 8000bb8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bbc:	131b      	asrs	r3, r3, #12
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3312      	adds	r3, #18
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f01d fcce 	bl	801e56c <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2 + 1) / 4096) - 1, 10, false);
 8000bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3381      	adds	r3, #129	; 0x81
 8000bd8:	b29c      	uxth	r4, r3
 8000bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	3301      	adds	r3, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f011 fb62 	bl	80122ac <synth_GetAudioData>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <cisynth_ifft+0x182>
 8000bee:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bf2:	131b      	asrs	r3, r3, #12
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3312      	adds	r3, #18
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	220a      	movs	r2, #10
 8000c00:	4620      	mov	r0, r4
 8000c02:	f01d fcb3 	bl	801e56c <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c14:	2b7e      	cmp	r3, #126	; 0x7e
 8000c16:	ddc3      	ble.n	8000ba0 <cisynth_ifft+0x130>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c1e:	e055      	b.n	8000ccc <cisynth_ifft+0x25c>
		{
			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
 8000c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000c2c:	f01c ff62 	bl	801daf4 <cis_GetEffectivePixelNb>
 8000c30:	4603      	mov	r3, r0
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000d18 <cisynth_ifft+0x2a8>
 8000c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	f01c ff5d 	bl	801db0c <cis_GetBuffData>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color = cis_color >> 8;
 8000c58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawPixel(i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color >> 5) - 1, 15, false);
 8000c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c66:	b298      	uxth	r0, r3
 8000c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8000c74:	b299      	uxth	r1, r3
 8000c76:	2300      	movs	r3, #0
 8000c78:	220f      	movs	r2, #15
 8000c7a:	f01d fc77 	bl	801e56c <ssd1362_drawPixel>

			cis_color |= 0xFF000000;
 8000c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color |= cis_color << 8;
 8000c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000c94:	4313      	orrs	r3, r2
 8000c96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color |= cis_color << 16;
 8000c9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawVLine(i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	9200      	str	r2, [sp, #0]
 8000cba:	2206      	movs	r2, #6
 8000cbc:	212b      	movs	r1, #43	; 0x2b
 8000cbe:	f01d fd30 	bl	801e722 <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cd0:	2bff      	cmp	r3, #255	; 0xff
 8000cd2:	dda5      	ble.n	8000c20 <cisynth_ifft+0x1b0>

			//			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
			//			cis_color = cis_color >> 11;
			//			ssd1362_drawPixel(i, DISPLAY_AERA5_YPOS + DISPLAY_AERAS_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - cis_color, 15, false);
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2309      	movs	r3, #9
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f01d fcab 	bl	801e640 <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000cea:	463a      	mov	r2, r7
 8000cec:	2308      	movs	r3, #8
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	20c8      	movs	r0, #200	; 0xc8
 8000cf6:	f01d fe06 	bl	801e906 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000cfa:	f01d fed3 	bl	801eaa4 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <cisynth_ifft+0x2ac>)
 8000d02:	f009 f8d6 	bl	8009eb2 <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000d06:	e6d6      	b.n	8000ab6 <cisynth_ifft+0x46>
 8000d08:	080247c8 	.word	0x080247c8
 8000d0c:	2400363c 	.word	0x2400363c
 8000d10:	24004cdc 	.word	0x24004cdc
 8000d14:	080247dc 	.word	0x080247dc
 8000d18:	43800000 	.word	0x43800000
 8000d1c:	58021c00 	.word	0x58021c00

08000d20 <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000d26:	f01d fe8f 	bl	801ea48 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2304      	movs	r3, #4
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2309      	movs	r3, #9
 8000d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f01d fc80 	bl	801e640 <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000d40:	2308      	movs	r3, #8
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	230f      	movs	r3, #15
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <cisynth_ifft_SetHint+0x4c>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f01d fddb 	bl	801e906 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000d50:	2308      	movs	r3, #8
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	230f      	movs	r3, #15
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <cisynth_ifft_SetHint+0x50>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f01d fdd3 	bl	801e906 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000d60:	f01d fea0 	bl	801eaa4 <ssd1362_writeFullBuffer>
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	080247e4 	.word	0x080247e4
 8000d70:	080247f0 	.word	0x080247f0

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <SystemInit+0x104>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <SystemInit+0x104>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <SystemInit+0x104>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	; (8000e78 <SystemInit+0x104>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <SystemInit+0x108>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d807      	bhi.n	8000db0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <SystemInit+0x108>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <SystemInit+0x108>)
 8000daa:	f043 0307 	orr.w	r3, r3, #7
 8000dae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <SystemInit+0x10c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <SystemInit+0x10c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <SystemInit+0x10c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <SystemInit+0x10c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	492e      	ldr	r1, [pc, #184]	; (8000e80 <SystemInit+0x10c>)
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <SystemInit+0x110>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <SystemInit+0x108>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <SystemInit+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 030f 	bic.w	r3, r3, #15
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <SystemInit+0x108>)
 8000de4:	f043 0307 	orr.w	r3, r3, #7
 8000de8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemInit+0x10c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <SystemInit+0x10c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemInit+0x10c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <SystemInit+0x10c>)
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <SystemInit+0x114>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemInit+0x10c>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemInit+0x118>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <SystemInit+0x10c>)
 8000e0a:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SystemInit+0x11c>)
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <SystemInit+0x10c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <SystemInit+0x10c>)
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <SystemInit+0x11c>)
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SystemInit+0x10c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <SystemInit+0x10c>)
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <SystemInit+0x11c>)
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <SystemInit+0x10c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <SystemInit+0x10c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <SystemInit+0x10c>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <SystemInit+0x10c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <SystemInit+0x120>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <SystemInit+0x120>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SystemInit+0x124>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <SystemInit+0x128>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e56:	d202      	bcs.n	8000e5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0x12c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SystemInit+0x130>)
 8000e60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x104>)
 8000e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	580000c0 	.word	0x580000c0
 8000e98:	5c001000 	.word	0x5c001000
 8000e9c:	ffff0000 	.word	0xffff0000
 8000ea0:	51008108 	.word	0x51008108
 8000ea4:	52004000 	.word	0x52004000

08000ea8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC1_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000ecc:	2306      	movs	r3, #6
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed0:	4b36      	ldr	r3, [pc, #216]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ed2:	4a37      	ldr	r2, [pc, #220]	; (8000fb0 <MX_ADC1_Init+0x108>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <MX_ADC1_Init+0x104>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0x104>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC1_Init+0x104>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = oversamplingRatio;
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	4818      	ldr	r0, [pc, #96]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f4a:	f003 fc0d 	bl	8004768 <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f54:	f001 ff58 	bl	8002e08 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f64:	f004 fb18 	bl	8005598 <HAL_ADCEx_MultiModeConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f6e:	f001 ff4b 	bl	8002e08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f76:	2306      	movs	r3, #6
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f82:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f84:	2304      	movs	r3, #4
 8000f86:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_ADC1_Init+0x104>)
 8000f96:	f003 fd87 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000fa0:	f001 ff32 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24005358 	.word	0x24005358
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC2_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000fcc:	2306      	movs	r3, #6
 8000fce:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <MX_ADC2_Init+0xe4>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000fde:	2208      	movs	r2, #8
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_ADC2_Init+0xe0>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001018:	2203      	movs	r2, #3
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_ADC2_Init+0xe0>)
 800101e:	2200      	movs	r2, #0
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001024:	2200      	movs	r2, #0
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_ADC2_Init+0xe0>)
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = oversamplingRatio;
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_ADC2_Init+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC2_Init+0xe0>)
 8001044:	2201      	movs	r2, #1
 8001046:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <MX_ADC2_Init+0xe0>)
 800104a:	f003 fb8d 	bl	8004768 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8001054:	f001 fed8 	bl	8002e08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_ADC2_Init+0xe8>)
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2306      	movs	r3, #6
 800105e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001060:	2302      	movs	r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001064:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106a:	2304      	movs	r3, #4
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_ADC2_Init+0xe0>)
 800107c:	f003 fd14 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8001086:	f001 febf 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400527c 	.word	0x2400527c
 8001098:	40022100 	.word	0x40022100
 800109c:	04300002 	.word	0x04300002

080010a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC3_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 80010b8:	2306      	movs	r3, #6
 80010ba:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <MX_ADC3_Init+0xe4>)
 80010c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010ca:	2208      	movs	r2, #8
 80010cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_ADC3_Init+0xe0>)
 80010fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001104:	2203      	movs	r2, #3
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_ADC3_Init+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = oversamplingRatio;
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_ADC3_Init+0xe0>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001124:	2200      	movs	r2, #0
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_ADC3_Init+0xe0>)
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001130:	2201      	movs	r2, #1
 8001132:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001136:	f003 fb17 	bl	8004768 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001140:	f001 fe62 	bl	8002e08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_ADC3_Init+0xe8>)
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001148:	2306      	movs	r3, #6
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800114c:	2302      	movs	r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001150:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001154:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001156:	2304      	movs	r3, #4
 8001158:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_ADC3_Init+0xe0>)
 8001168:	f003 fc9e 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8001172:	f001 fe49 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240053bc 	.word	0x240053bc
 8001184:	58026000 	.word	0x58026000
 8001188:	04300002 	.word	0x04300002

0800118c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b8      	sub	sp, #224	; 0xe0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	22bc      	movs	r2, #188	; 0xbc
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f01d fd91 	bl	801ecc4 <memset>
  if(adcHandle->Instance==ADC1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4aab      	ldr	r2, [pc, #684]	; (8001454 <HAL_ADC_MspInit+0x2c8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d16f      	bne.n	800128c <HAL_ADC_MspInit+0x100>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80011b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 feda 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_ADC_MspInit+0x42>
    {
      Error_Handler();
 80011ca:	f001 fe1d 	bl	8002e08 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011ce:	4ba2      	ldr	r3, [pc, #648]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4aa0      	ldr	r2, [pc, #640]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80011d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011d8:	4b9f      	ldr	r3, [pc, #636]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d10e      	bne.n	80011fe <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011e0:	4b9e      	ldr	r3, [pc, #632]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80011e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e6:	4a9d      	ldr	r2, [pc, #628]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011f0:	4b9a      	ldr	r3, [pc, #616]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80011f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	623b      	str	r3, [r7, #32]
 80011fc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b97      	ldr	r3, [pc, #604]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a95      	ldr	r2, [pc, #596]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b93      	ldr	r3, [pc, #588]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800121c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001220:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001224:	f003 f8c4 	bl	80043b0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001228:	4b8d      	ldr	r3, [pc, #564]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 800122a:	4a8e      	ldr	r2, [pc, #568]	; (8001464 <HAL_ADC_MspInit+0x2d8>)
 800122c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800122e:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001230:	2209      	movs	r2, #9
 8001232:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001234:	4b8a      	ldr	r3, [pc, #552]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b87      	ldr	r3, [pc, #540]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001246:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001248:	4b85      	ldr	r3, [pc, #532]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 800124a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001250:	4b83      	ldr	r3, [pc, #524]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001256:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001258:	4b81      	ldr	r3, [pc, #516]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 800125a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001260:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001262:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001266:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001268:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800126e:	487c      	ldr	r0, [pc, #496]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001270:	f004 fcfa 	bl	8005c68 <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800127a:	f001 fdc5 	bl	8002e08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a77      	ldr	r2, [pc, #476]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001282:	64da      	str	r2, [r3, #76]	; 0x4c
 8001284:	4a76      	ldr	r2, [pc, #472]	; (8001460 <HAL_ADC_MspInit+0x2d4>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800128a:	e0df      	b.n	800144c <HAL_ADC_MspInit+0x2c0>
  else if(adcHandle->Instance==ADC2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_ADC_MspInit+0x2dc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d16f      	bne.n	8001376 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001296:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800129c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f009 fe65 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0x12c>
      Error_Handler();
 80012b4:	f001 fda8 	bl	8002e08 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b8:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a66      	ldr	r2, [pc, #408]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80012c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_ADC_MspInit+0x2cc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10e      	bne.n	80012e8 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d0:	4a62      	ldr	r2, [pc, #392]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800130a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800130e:	f003 f84f 	bl	80043b0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc2.Instance = DMA2_Stream1;
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_ADC_MspInit+0x2e4>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800131a:	220a      	movs	r2, #10
 800131c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b4e      	ldr	r3, [pc, #312]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800134a:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800134c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001350:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001358:	4844      	ldr	r0, [pc, #272]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800135a:	f004 fc85 	bl	8005c68 <HAL_DMA_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001364:	f001 fd50 	bl	8002e08 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a40      	ldr	r2, [pc, #256]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
 800136e:	4a3f      	ldr	r2, [pc, #252]	; (800146c <HAL_ADC_MspInit+0x2e0>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001374:	e06a      	b.n	800144c <HAL_ADC_MspInit+0x2c0>
  else if(adcHandle->Instance==ADC3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <HAL_ADC_MspInit+0x2e8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d165      	bne.n	800144c <HAL_ADC_MspInit+0x2c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4618      	mov	r0, r3
 8001394:	f009 fdf0 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800139e:	f001 fd33 	bl	8002e08 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4a2c      	ldr	r2, [pc, #176]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	4a25      	ldr	r2, [pc, #148]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_ADC_MspInit+0x2d0>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80013de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80013e2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80013e6:	f002 ffe3 	bl	80043b0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream2;
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 80013ec:	4a23      	ldr	r2, [pc, #140]	; (800147c <HAL_ADC_MspInit+0x2f0>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 80013f2:	2273      	movs	r2, #115	; 0x73
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001408:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 800140c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001410:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001418:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 800141c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001420:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001424:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001428:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001430:	4811      	ldr	r0, [pc, #68]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001432:	f004 fc19 	bl	8005c68 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 800143c:	f001 fce4 	bl	8002e08 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_ADC_MspInit+0x2ec>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800144c:	bf00      	nop
 800144e:	37e0      	adds	r7, #224	; 0xe0
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40022000 	.word	0x40022000
 8001458:	24003640 	.word	0x24003640
 800145c:	58024400 	.word	0x58024400
 8001460:	24005420 	.word	0x24005420
 8001464:	40020410 	.word	0x40020410
 8001468:	40022100 	.word	0x40022100
 800146c:	24005498 	.word	0x24005498
 8001470:	40020428 	.word	0x40020428
 8001474:	58026000 	.word	0x58026000
 8001478:	240052e0 	.word	0x240052e0
 800147c:	40020440 	.word	0x40020440

08001480 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_CRC_Init+0x3c>)
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <MX_CRC_Init+0x40>)
 8001488:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_CRC_Init+0x3c>)
 800148c:	2200      	movs	r2, #0
 800148e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_CRC_Init+0x3c>)
 8001492:	2200      	movs	r2, #0
 8001494:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_CRC_Init+0x3c>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_CRC_Init+0x3c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_CRC_Init+0x3c>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_CRC_Init+0x3c>)
 80014aa:	f004 faf3 	bl	8005a94 <HAL_CRC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014b4:	f001 fca8 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24005510 	.word	0x24005510
 80014c0:	58024c00 	.word	0x58024c00

080014c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_CRC_MspInit+0x3c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10e      	bne.n	80014f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_CRC_MspInit+0x40>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_CRC_MspInit+0x40>)
 80014de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_CRC_MspInit+0x40>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	58024c00 	.word	0x58024c00
 8001504:	58024400 	.word	0x58024400

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_DMA_Init+0x8c>)
 8001510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001514:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <MX_DMA_Init+0x8c>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_DMA_Init+0x8c>)
 8001520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_DMA_Init+0x8c>)
 800152e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <MX_DMA_Init+0x8c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_DMA_Init+0x8c>)
 800153e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	200c      	movs	r0, #12
 8001550:	f004 f9db 	bl	800590a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001554:	200c      	movs	r0, #12
 8001556:	f004 f9f2 	bl	800593e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2038      	movs	r0, #56	; 0x38
 8001560:	f004 f9d3 	bl	800590a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001564:	2038      	movs	r0, #56	; 0x38
 8001566:	f004 f9ea 	bl	800593e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2039      	movs	r0, #57	; 0x39
 8001570:	f004 f9cb 	bl	800590a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001574:	2039      	movs	r0, #57	; 0x39
 8001576:	f004 f9e2 	bl	800593e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	203a      	movs	r0, #58	; 0x3a
 8001580:	f004 f9c3 	bl	800590a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001584:	203a      	movs	r0, #58	; 0x3a
 8001586:	f004 f9da 	bl	800593e <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	58024400 	.word	0x58024400

08001598 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_FMC_Init+0xf8>)
 80015c6:	4a33      	ldr	r2, [pc, #204]	; (8001694 <MX_FMC_Init+0xfc>)
 80015c8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <MX_FMC_Init+0xf8>)
 80015cc:	4a32      	ldr	r2, [pc, #200]	; (8001698 <MX_FMC_Init+0x100>)
 80015ce:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_FMC_Init+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_FMC_Init+0xf8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_FMC_Init+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_FMC_Init+0xf8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_FMC_Init+0xf8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_FMC_Init+0xf8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_FMC_Init+0xf8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_FMC_Init+0xf8>)
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <MX_FMC_Init+0xf8>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_FMC_Init+0xf8>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_FMC_Init+0xf8>)
 8001612:	2200      	movs	r2, #0
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_FMC_Init+0xf8>)
 8001618:	2200      	movs	r2, #0
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_FMC_Init+0xf8>)
 800161e:	2200      	movs	r2, #0
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_FMC_Init+0xf8>)
 8001624:	2200      	movs	r2, #0
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_FMC_Init+0xf8>)
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 800162e:	2308      	movs	r3, #8
 8001630:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001632:	230f      	movs	r3, #15
 8001634:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 8001636:	230a      	movs	r3, #10
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 800163a:	2305      	movs	r3, #5
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800163e:	2310      	movs	r3, #16
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001642:	2311      	movs	r3, #17
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800164a:	2308      	movs	r3, #8
 800164c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800164e:	230f      	movs	r3, #15
 8001650:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 8001652:	230a      	movs	r3, #10
 8001654:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 8001656:	2305      	movs	r3, #5
 8001658:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800165a:	2310      	movs	r3, #16
 800165c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800165e:	2311      	movs	r3, #17
 8001660:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001666:	463a      	mov	r2, r7
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_FMC_Init+0xf8>)
 8001670:	f00d fd22 	bl	800f0b8 <HAL_SRAM_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 800167a:	f001 fbc5 	bl	8002e08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800167e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001682:	f002 feab 	bl	80043dc <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 8001686:	bf00      	nop
 8001688:	3738      	adds	r7, #56	; 0x38
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24005534 	.word	0x24005534
 8001694:	52004000 	.word	0x52004000
 8001698:	52004104 	.word	0x52004104

0800169c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	b0b6      	sub	sp, #216	; 0xd8
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_FMC_MspInit+0xfc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d169      	bne.n	800178e <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_FMC_MspInit+0xfc>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	22bc      	movs	r2, #188	; 0xbc
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f01d fafb 	bl	801ecc4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80016ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f009 fc4b 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 80016e8:	f001 fb8e 	bl	8002e08 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_FMC_MspInit+0x100>)
 80016ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_FMC_MspInit+0x100>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_FMC_MspInit+0x100>)
 80016fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 800170a:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 800170e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001724:	230c      	movs	r3, #12
 8001726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800172e:	4619      	mov	r1, r3
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <HAL_FMC_MspInit+0x104>)
 8001732:	f008 f9f5 	bl	8009b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800174e:	230c      	movs	r3, #12
 8001750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001754:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001758:	4619      	mov	r1, r3
 800175a:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_FMC_MspInit+0x108>)
 800175c:	f008 f9e0 	bl	8009b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8001760:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177a:	230c      	movs	r3, #12
 800177c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001784:	4619      	mov	r1, r3
 8001786:	4808      	ldr	r0, [pc, #32]	; (80017a8 <HAL_FMC_MspInit+0x10c>)
 8001788:	f008 f9ca 	bl	8009b20 <HAL_GPIO_Init>
 800178c:	e000      	b.n	8001790 <HAL_FMC_MspInit+0xf4>
    return;
 800178e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001790:	37d8      	adds	r7, #216	; 0xd8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24003644 	.word	0x24003644
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020c00 	.word	0x58020c00
 80017a4:	58021400 	.word	0x58021400
 80017a8:	58021000 	.word	0x58021000

080017ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80017b4:	f7ff ff72 	bl	800169c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	; 0x38
 80017c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <MX_GPIO_Init+0x270>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <MX_GPIO_Init+0x270>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <MX_GPIO_Init+0x270>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f4:	4b8e      	ldr	r3, [pc, #568]	; (8001a30 <MX_GPIO_Init+0x270>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a8d      	ldr	r2, [pc, #564]	; (8001a30 <MX_GPIO_Init+0x270>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b8a      	ldr	r3, [pc, #552]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a85      	ldr	r2, [pc, #532]	; (8001a30 <MX_GPIO_Init+0x270>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a76      	ldr	r2, [pc, #472]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <MX_GPIO_Init+0x270>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <MX_GPIO_Init+0x270>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800188a:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <MX_GPIO_Init+0x270>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	4a67      	ldr	r2, [pc, #412]	; (8001a30 <MX_GPIO_Init+0x270>)
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189a:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <MX_GPIO_Init+0x270>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <MX_GPIO_Init+0x270>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <MX_GPIO_Init+0x270>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <MX_GPIO_Init+0x270>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018cc:	4859      	ldr	r0, [pc, #356]	; (8001a34 <MX_GPIO_Init+0x274>)
 80018ce:	f008 fad7 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d8:	4857      	ldr	r0, [pc, #348]	; (8001a38 <MX_GPIO_Init+0x278>)
 80018da:	f008 fad1 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f242 0104 	movw	r1, #8196	; 0x2004
 80018e4:	4855      	ldr	r0, [pc, #340]	; (8001a3c <MX_GPIO_Init+0x27c>)
 80018e6:	f008 facb 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2124      	movs	r1, #36	; 0x24
 80018ee:	4854      	ldr	r0, [pc, #336]	; (8001a40 <MX_GPIO_Init+0x280>)
 80018f0:	f008 fac6 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	4852      	ldr	r0, [pc, #328]	; (8001a44 <MX_GPIO_Init+0x284>)
 80018fa:	f008 fac1 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2148      	movs	r1, #72	; 0x48
 8001902:	4851      	ldr	r0, [pc, #324]	; (8001a48 <MX_GPIO_Init+0x288>)
 8001904:	f008 fabc 	bl	8009e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 8001908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	4844      	ldr	r0, [pc, #272]	; (8001a34 <MX_GPIO_Init+0x274>)
 8001922:	f008 f8fd 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 8001926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	4619      	mov	r1, r3
 800193a:	483f      	ldr	r0, [pc, #252]	; (8001a38 <MX_GPIO_Init+0x278>)
 800193c:	f008 f8f0 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4837      	ldr	r0, [pc, #220]	; (8001a38 <MX_GPIO_Init+0x278>)
 800195a:	f008 f8e1 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 800195e:	f242 0304 	movw	r3, #8196	; 0x2004
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4831      	ldr	r0, [pc, #196]	; (8001a3c <MX_GPIO_Init+0x27c>)
 8001978:	f008 f8d2 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 800197c:	2324      	movs	r3, #36	; 0x24
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	482b      	ldr	r0, [pc, #172]	; (8001a40 <MX_GPIO_Init+0x280>)
 8001994:	f008 f8c4 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4825      	ldr	r0, [pc, #148]	; (8001a44 <MX_GPIO_Init+0x284>)
 80019b0:	f008 f8b6 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80019b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_GPIO_Init+0x28c>)
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	4619      	mov	r1, r3
 80019c8:	4821      	ldr	r0, [pc, #132]	; (8001a50 <MX_GPIO_Init+0x290>)
 80019ca:	f008 f8a9 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 80019ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_GPIO_Init+0x28c>)
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	481c      	ldr	r0, [pc, #112]	; (8001a54 <MX_GPIO_Init+0x294>)
 80019e4:	f008 f89c 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_GPIO_Init+0x288>)
 8001a00:	f008 f88e 	bl	8009b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 8001a04:	2308      	movs	r3, #8
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <MX_GPIO_Init+0x288>)
 8001a1c:	f008 f880 	bl	8009b20 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8001a20:	2040      	movs	r0, #64	; 0x40
 8001a22:	f008 fa8f 	bl	8009f44 <HAL_I2CEx_EnableFastModePlus>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020400 	.word	0x58020400
 8001a38:	58020000 	.word	0x58020000
 8001a3c:	58020800 	.word	0x58020800
 8001a40:	58021800 	.word	0x58021800
 8001a44:	58021400 	.word	0x58021400
 8001a48:	58021c00 	.word	0x58021c00
 8001a4c:	11110000 	.word	0x11110000
 8001a50:	58020c00 	.word	0x58020c00
 8001a54:	58021000 	.word	0x58021000

08001a58 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <lwiperf_list_add+0x24>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <lwiperf_list_add+0x24>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	24003648 	.word	0x24003648

08001a80 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <lwiperf_list_remove+0x78>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	e029      	b.n	8001ae8 <lwiperf_list_remove+0x68>
    if (iter == item) {
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d120      	bne.n	8001ade <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d104      	bne.n	8001aac <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <lwiperf_list_remove+0x78>)
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e003      	b.n	8001ab4 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00c      	b.n	8001ad6 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d105      	bne.n	8001ad0 <lwiperf_list_remove+0x50>
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <lwiperf_list_remove+0x7c>)
 8001ac6:	22d0      	movs	r2, #208	; 0xd0
 8001ac8:	490d      	ldr	r1, [pc, #52]	; (8001b00 <lwiperf_list_remove+0x80>)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <lwiperf_list_remove+0x84>)
 8001acc:	f01d fff2 	bl	801fab4 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ef      	bne.n	8001abc <lwiperf_list_remove+0x3c>
      }
      break;
 8001adc:	e008      	b.n	8001af0 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1d2      	bne.n	8001a94 <lwiperf_list_remove+0x14>
    }
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24003648 	.word	0x24003648
 8001afc:	080247f8 	.word	0x080247f8
 8001b00:	08024810 	.word	0x08024810
 8001b04:	08024820 	.word	0x08024820

08001b08 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <lwiperf_list_find+0x38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e008      	b.n	8001b2a <lwiperf_list_find+0x22>
    if (iter == item) {
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d101      	bne.n	8001b24 <lwiperf_list_find+0x1c>
      return item;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e006      	b.n	8001b32 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f3      	bne.n	8001b18 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	24003648 	.word	0x24003648

08001b44 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b08d      	sub	sp, #52	; 0x34
 8001b48:	af06      	add	r7, sp, #24
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d038      	beq.n	8001bc8 <lwip_tcp_conn_report+0x84>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d034      	beq.n	8001bc8 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 8001b5e:	f010 f9a3 	bl	8011ea8 <sys_now>
 8001b62:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e006      	b.n	8001b88 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699c      	ldr	r4, [r3, #24]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	469e      	mov	lr, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001b9a:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001ba8:	8b12      	ldrh	r2, [r2, #24]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001bae:	78fe      	ldrb	r6, [r7, #3]
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	9004      	str	r0, [sp, #16]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	9003      	str	r0, [sp, #12]
 8001bb8:	9102      	str	r1, [sp, #8]
 8001bba:	9201      	str	r2, [sp, #4]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	4672      	mov	r2, lr
 8001bc2:	4631      	mov	r1, r6
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd0 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff4e 	bl	8001a80 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ffab 	bl	8001b44 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d02f      	beq.n	8001c56 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f016 fe0f 	bl	8018820 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f016 fe98 	bl	8018940 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f016 fe36 	bl	8018888 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f016 fe0e 	bl	8018844 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f016 fe4c 	bl	80188cc <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f015 fb4f 	bl	80172dc <tcp_close>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d017      	beq.n	8001c7a <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f015 fc2e 	bl	80174b0 <tcp_abort>
 8001c54:	e011      	b.n	8001c7a <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f015 fb3e 	bl	80172dc <tcp_close>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <lwiperf_tcp_close+0xaa>
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <lwiperf_tcp_close+0xb8>)
 8001c6e:	f240 120d 	movw	r2, #269	; 0x10d
 8001c72:	4906      	ldr	r1, [pc, #24]	; (8001c8c <lwiperf_tcp_close+0xbc>)
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <lwiperf_tcp_close+0xc0>)
 8001c76:	f01d ff1d 	bl	801fab4 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f013 fbfc 	bl	8015478 <mem_free>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	080247f8 	.word	0x080247f8
 8001c8c:	08024848 	.word	0x08024848
 8001c90:	08024820 	.word	0x08024820

08001c94 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <lwiperf_tcp_client_send_more+0x1e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <lwiperf_tcp_client_send_more+0x1e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <lwiperf_tcp_client_send_more+0x2c>
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <lwiperf_tcp_client_send_more+0x1a4>)
 8001cb4:	f240 121d 	movw	r2, #285	; 0x11d
 8001cb8:	4960      	ldr	r1, [pc, #384]	; (8001e3c <lwiperf_tcp_client_send_more+0x1a8>)
 8001cba:	4861      	ldr	r0, [pc, #388]	; (8001e40 <lwiperf_tcp_client_send_more+0x1ac>)
 8001cbc:	f01d fefa 	bl	801fab4 <iprintf>

  do {
    send_more = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01f      	beq.n	8001d10 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8001cd0:	f010 f8ea 	bl	8011ea8 <sys_now>
 8001cd4:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f010 febc 	bl	8012a62 <lwip_htonl>
 8001cea:	4603      	mov	r3, r0
 8001cec:	425b      	negs	r3, r3
 8001cee:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d316      	bcc.n	8001d32 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001d04:	2101      	movs	r1, #1
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff62 	bl	8001bd0 <lwiperf_tcp_close>
        return ERR_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e08e      	b.n	8001e2e <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	4618      	mov	r0, r3
 8001d16:	f010 fea4 	bl	8012a62 <lwip_htonl>
 8001d1a:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d305      	bcc.n	8001d32 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001d26:	2101      	movs	r1, #1
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff51 	bl	8001bd0 <lwiperf_tcp_close>
        return ERR_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e07d      	b.n	8001e2e <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	2b17      	cmp	r3, #23
 8001d38:	d810      	bhi.n	8001d5c <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	4413      	add	r3, r2
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f1c3 0318 	rsb	r3, r3, #24
 8001d52:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d5a:	e034      	b.n	8001dc6 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2b2f      	cmp	r3, #47	; 0x2f
 8001d62:	d813      	bhi.n	8001d8c <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	3b18      	subs	r3, #24
 8001d70:	4413      	add	r3, r2
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001d7e:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8a:	e01c      	b.n	8001dc6 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <lwiperf_tcp_client_send_more+0x1b0>)
 8001d92:	fba3 2301 	umull	r2, r3, r3, r1
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	1aca      	subs	r2, r1, r3
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <lwiperf_tcp_client_send_more+0x1b4>)
 8001da4:	4413      	add	r3, r2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8001da8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001dac:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b30      	cmp	r3, #48	; 0x30
 8001db4:	d102      	bne.n	8001dbc <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8001db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dba:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8001dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc8:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6918      	ldr	r0, [r3, #16]
 8001dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd6:	f019 fc61 	bl	801b69c <tcp_write>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001dde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de6:	d102      	bne.n	8001dee <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001de8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001dee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df6:	d103      	bne.n	8001e00 <lwiperf_tcp_client_send_more+0x16c>
 8001df8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dfa:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001dfe:	d2e4      	bcs.n	8001dca <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001e00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e0e:	441a      	add	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
 8001e14:	e001      	b.n	8001e1a <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f af4f 	bne.w	8001cc0 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f01a fa22 	bl	801c270 <tcp_output>
  return ERR_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3730      	adds	r7, #48	; 0x30
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	080247f8 	.word	0x080247f8
 8001e3c:	08024850 	.word	0x08024850
 8001e40:	08024820 	.word	0x08024820
 8001e44:	cccccccd 	.word	0xcccccccd
 8001e48:	0802767c 	.word	0x0802767c

08001e4c <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d006      	beq.n	8001e76 <lwiperf_tcp_client_sent+0x2a>
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <lwiperf_tcp_client_sent+0x44>)
 8001e6a:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001e6e:	4909      	ldr	r1, [pc, #36]	; (8001e94 <lwiperf_tcp_client_sent+0x48>)
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <lwiperf_tcp_client_sent+0x4c>)
 8001e72:	f01d fe1f 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff08 	bl	8001c94 <lwiperf_tcp_client_send_more>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	080247f8 	.word	0x080247f8
 8001e94:	08024860 	.word	0x08024860
 8001e98:	08024820 	.word	0x08024820

08001e9c <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d006      	beq.n	8001ec6 <lwiperf_tcp_client_connected+0x2a>
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <lwiperf_tcp_client_connected+0x60>)
 8001eba:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001ebe:	4910      	ldr	r1, [pc, #64]	; (8001f00 <lwiperf_tcp_client_connected+0x64>)
 8001ec0:	4810      	ldr	r0, [pc, #64]	; (8001f04 <lwiperf_tcp_client_connected+0x68>)
 8001ec2:	f01d fdf7 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001ece:	2105      	movs	r1, #5
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f7ff fe7d 	bl	8001bd0 <lwiperf_tcp_close>
    return ERR_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e00c      	b.n	8001ef4 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8001ee2:	f00f ffe1 	bl	8011ea8 <sys_now>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001eec:	6978      	ldr	r0, [r7, #20]
 8001eee:	f7ff fed1 	bl	8001c94 <lwiperf_tcp_client_send_more>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	080247f8 	.word	0x080247f8
 8001f00:	08024860 	.word	0x08024860
 8001f04:	08024820 	.word	0x08024820

08001f08 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	460b      	mov	r3, r1
 8001f16:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <lwiperf_tx_start_impl+0x24>
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <lwiperf_tx_start_impl+0x140>)
 8001f20:	f240 128b 	movw	r2, #395	; 0x18b
 8001f24:	4949      	ldr	r1, [pc, #292]	; (800204c <lwiperf_tx_start_impl+0x144>)
 8001f26:	484a      	ldr	r0, [pc, #296]	; (8002050 <lwiperf_tx_start_impl+0x148>)
 8001f28:	f01d fdc4 	bl	801fab4 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <lwiperf_tx_start_impl+0x38>
 8001f32:	4b45      	ldr	r3, [pc, #276]	; (8002048 <lwiperf_tx_start_impl+0x140>)
 8001f34:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001f38:	4944      	ldr	r1, [pc, #272]	; (800204c <lwiperf_tx_start_impl+0x144>)
 8001f3a:	4845      	ldr	r0, [pc, #276]	; (8002050 <lwiperf_tx_start_impl+0x148>)
 8001f3c:	f01d fdba 	bl	801fab4 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <lwiperf_tx_start_impl+0x4c>
 8001f46:	4b40      	ldr	r3, [pc, #256]	; (8002048 <lwiperf_tx_start_impl+0x140>)
 8001f48:	f240 128d 	movw	r2, #397	; 0x18d
 8001f4c:	4941      	ldr	r1, [pc, #260]	; (8002054 <lwiperf_tx_start_impl+0x14c>)
 8001f4e:	4840      	ldr	r0, [pc, #256]	; (8002050 <lwiperf_tx_start_impl+0x148>)
 8001f50:	f01d fdb0 	bl	801fab4 <iprintf>
  *new_conn = NULL;
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001f5a:	2048      	movs	r0, #72	; 0x48
 8001f5c:	f013 fbf2 	bl	8015744 <mem_malloc>
 8001f60:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6c:	e067      	b.n	800203e <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f016 fc48 	bl	8018804 <tcp_new_ip_type>
 8001f74:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8001f7c:	69f8      	ldr	r0, [r7, #28]
 8001f7e:	f013 fa7b 	bl	8015478 <mem_free>
    return ERR_MEM;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f86:	e05a      	b.n	800203e <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8001f88:	2248      	movs	r2, #72	; 0x48
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	69f8      	ldr	r0, [r7, #28]
 8001f8e:	f01c fe99 	bl	801ecc4 <memset>
  client_conn->base.tcp = 1;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2201      	movs	r2, #1
 8001f96:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8001fa4:	f00f ff80 	bl	8011ea8 <sys_now>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb8:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3328      	adds	r3, #40	; 0x28
 8001fcc:	2218      	movs	r2, #24
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f01c fe4f 	bl	801ec74 <memcpy>
  client_conn->have_settings_buf = 1;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001fde:	69f9      	ldr	r1, [r7, #28]
 8001fe0:	69b8      	ldr	r0, [r7, #24]
 8001fe2:	f016 fc1d 	bl	8018820 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001fe6:	491c      	ldr	r1, [pc, #112]	; (8002058 <lwiperf_tx_start_impl+0x150>)
 8001fe8:	69b8      	ldr	r0, [r7, #24]
 8001fea:	f016 fc4d 	bl	8018888 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001fee:	2202      	movs	r2, #2
 8001ff0:	491a      	ldr	r1, [pc, #104]	; (800205c <lwiperf_tx_start_impl+0x154>)
 8001ff2:	69b8      	ldr	r0, [r7, #24]
 8001ff4:	f016 fca4 	bl	8018940 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001ff8:	4919      	ldr	r1, [pc, #100]	; (8002060 <lwiperf_tx_start_impl+0x158>)
 8001ffa:	69b8      	ldr	r0, [r7, #24]
 8001ffc:	f016 fc66 	bl	80188cc <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8002006:	897a      	ldrh	r2, [r7, #10]
 8002008:	f107 0110 	add.w	r1, r7, #16
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <lwiperf_tx_start_impl+0x15c>)
 800200e:	69b8      	ldr	r0, [r7, #24]
 8002010:	f015 fcbe 	bl	8017990 <tcp_connect>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8002018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8002020:	2102      	movs	r1, #2
 8002022:	69f8      	ldr	r0, [r7, #28]
 8002024:	f7ff fdd4 	bl	8001bd0 <lwiperf_tcp_close>
    return err;
 8002028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800202c:	e007      	b.n	800203e <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fd11 	bl	8001a58 <lwiperf_list_add>
  *new_conn = client_conn;
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	080247f8 	.word	0x080247f8
 800204c:	08024870 	.word	0x08024870
 8002050:	08024820 	.word	0x08024820
 8002054:	08024884 	.word	0x08024884
 8002058:	08001e4d 	.word	0x08001e4d
 800205c:	0800233d 	.word	0x0800233d
 8002060:	0800231d 	.word	0x0800231d
 8002064:	08001e9d 	.word	0x08001e9d

08002068 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af04      	add	r7, sp, #16
 800206e:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4618      	mov	r0, r3
 800207a:	f010 fcf2 	bl	8012a62 <lwip_htonl>
 800207e:	4603      	mov	r3, r0
 8002080:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	1d18      	adds	r0, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699e      	ldr	r6, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6892      	ldr	r2, [r2, #8]
 800209a:	89fc      	ldrh	r4, [r7, #14]
 800209c:	f107 0108 	add.w	r1, r7, #8
 80020a0:	9102      	str	r1, [sp, #8]
 80020a2:	9201      	str	r2, [sp, #4]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4633      	mov	r3, r6
 80020a8:	462a      	mov	r2, r5
 80020aa:	4621      	mov	r1, r4
 80020ac:	f7ff ff2c 	bl	8001f08 <lwiperf_tx_start_impl>
 80020b0:	4603      	mov	r3, r0
 80020b2:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 80020b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <lwiperf_tx_start_passive+0x68>
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <lwiperf_tx_start_passive+0x7c>)
 80020c4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <lwiperf_tx_start_passive+0x80>)
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <lwiperf_tx_start_passive+0x84>)
 80020cc:	f01d fcf2 	bl	801fab4 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 80020d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	080247f8 	.word	0x080247f8
 80020e8:	08024884 	.word	0x08024884
 80020ec:	08024820 	.word	0x08024820

080020f0 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d006      	beq.n	800211a <lwiperf_tcp_recv+0x2a>
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <lwiperf_tcp_recv+0x218>)
 800210e:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8002112:	497e      	ldr	r1, [pc, #504]	; (800230c <lwiperf_tcp_recv+0x21c>)
 8002114:	487e      	ldr	r0, [pc, #504]	; (8002310 <lwiperf_tcp_recv+0x220>)
 8002116:	f01d fccd 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8002122:	2105      	movs	r1, #5
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7ff fd53 	bl	8001bd0 <lwiperf_tcp_close>
    return ERR_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e0e8      	b.n	8002300 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d114      	bne.n	800215e <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ff8b 	bl	8002068 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8002152:	2100      	movs	r1, #0
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f7ff fd3b 	bl	8001bd0 <lwiperf_tcp_close>
    return ERR_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e0d0      	b.n	8002300 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	891b      	ldrh	r3, [r3, #8]
 8002162:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <lwiperf_tcp_recv+0x96>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	3b18      	subs	r3, #24
 800217c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 8090 	bne.w	80022a6 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	891b      	ldrh	r3, [r3, #8]
 800218a:	2b17      	cmp	r3, #23
 800218c:	d808      	bhi.n	80021a0 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800218e:	2103      	movs	r1, #3
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f7ff fd1d 	bl	8001bd0 <lwiperf_tcp_close>
      pbuf_free(p);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f014 fb4a 	bl	8016830 <pbuf_free>
      return ERR_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e0af      	b.n	8002300 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d135      	bne.n	8002216 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80021b0:	2300      	movs	r3, #0
 80021b2:	2218      	movs	r2, #24
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f014 fd25 	bl	8016c04 <pbuf_copy_partial>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b18      	cmp	r3, #24
 80021be:	d008      	beq.n	80021d2 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80021c0:	2102      	movs	r1, #2
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff fd04 	bl	8001bd0 <lwiperf_tcp_close>
        pbuf_free(p);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f014 fb31 	bl	8016830 <pbuf_free>
        return ERR_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e096      	b.n	8002300 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d031      	beq.n	800224a <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02b      	beq.n	800224a <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff38 	bl	8002068 <lwiperf_tx_start_passive>
 80021f8:	4603      	mov	r3, r0
 80021fa:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 80021fc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d022      	beq.n	800224a <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8002204:	2104      	movs	r1, #4
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff fce2 	bl	8001bd0 <lwiperf_tcp_close>
            pbuf_free(p);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f014 fb0f 	bl	8016830 <pbuf_free>
            return ERR_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e074      	b.n	8002300 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	d013      	beq.n	800224a <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002228:	2318      	movs	r3, #24
 800222a:	2100      	movs	r1, #0
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f014 fdf0 	bl	8016e12 <pbuf_memcmp>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8002238:	2103      	movs	r1, #3
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff fcc8 	bl	8001bd0 <lwiperf_tcp_close>
          pbuf_free(p);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f014 faf5 	bl	8016830 <pbuf_free>
          return ERR_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e05a      	b.n	8002300 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f103 0218 	add.w	r2, r3, #24
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b18      	cmp	r3, #24
 800225c:	d80f      	bhi.n	800227e <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 800225e:	f00f fe23 	bl	8011ea8 <sys_now>
 8002262:	4602      	mov	r2, r0
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	891b      	ldrh	r3, [r3, #8]
 800226c:	4619      	mov	r1, r3
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f015 faf8 	bl	8017864 <tcp_recved>
      pbuf_free(p);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f014 fadb 	bl	8016830 <pbuf_free>
      return ERR_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e040      	b.n	8002300 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2204      	movs	r2, #4
 8002282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8002286:	2118      	movs	r1, #24
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f014 fa4b 	bl	8016724 <pbuf_remove_header>
 800228e:	4603      	mov	r3, r0
 8002290:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8002292:	7c3b      	ldrb	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <lwiperf_tcp_recv+0x1b6>
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <lwiperf_tcp_recv+0x218>)
 800229a:	f240 2211 	movw	r2, #529	; 0x211
 800229e:	491d      	ldr	r1, [pc, #116]	; (8002314 <lwiperf_tcp_recv+0x224>)
 80022a0:	481b      	ldr	r0, [pc, #108]	; (8002310 <lwiperf_tcp_recv+0x220>)
 80022a2:	f01d fc07 	bl	801fab4 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e008      	b.n	80022c2 <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	895b      	ldrh	r3, [r3, #10]
 80022b4:	461a      	mov	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f3      	bne.n	80022b0 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	891b      	ldrh	r3, [r3, #8]
 80022cc:	461a      	mov	r2, r3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d006      	beq.n	80022e2 <lwiperf_tcp_recv+0x1f2>
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <lwiperf_tcp_recv+0x218>)
 80022d6:	f240 222b 	movw	r2, #555	; 0x22b
 80022da:	490f      	ldr	r1, [pc, #60]	; (8002318 <lwiperf_tcp_recv+0x228>)
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <lwiperf_tcp_recv+0x220>)
 80022de:	f01d fbe9 	bl	801fab4 <iprintf>
  conn->bytes_transferred += packet_idx;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	441a      	add	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 80022ee:	8a7b      	ldrh	r3, [r7, #18]
 80022f0:	4619      	mov	r1, r3
 80022f2:	68b8      	ldr	r0, [r7, #8]
 80022f4:	f015 fab6 	bl	8017864 <tcp_recved>
  pbuf_free(p);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f014 fa99 	bl	8016830 <pbuf_free>
  return ERR_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	080247f8 	.word	0x080247f8
 800230c:	08024898 	.word	0x08024898
 8002310:	08024820 	.word	0x08024820
 8002314:	080248a8 	.word	0x080248a8
 8002318:	080248c4 	.word	0x080248c4

0800231c <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800232c:	2105      	movs	r1, #5
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff fc4e 	bl	8001bd0 <lwiperf_tcp_close>
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d006      	beq.n	8002362 <lwiperf_tcp_poll+0x26>
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <lwiperf_tcp_poll+0x64>)
 8002356:	f44f 7210 	mov.w	r2, #576	; 0x240
 800235a:	4912      	ldr	r1, [pc, #72]	; (80023a4 <lwiperf_tcp_poll+0x68>)
 800235c:	4812      	ldr	r0, [pc, #72]	; (80023a8 <lwiperf_tcp_poll+0x6c>)
 800235e:	f01d fba9 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f883 2020 	strb.w	r2, [r3, #32]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	2b09      	cmp	r3, #9
 800237a:	d905      	bls.n	8002388 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800237c:	2102      	movs	r1, #2
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fc26 	bl	8001bd0 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8002384:	2300      	movs	r3, #0
 8002386:	e007      	b.n	8002398 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	795b      	ldrb	r3, [r3, #5]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fc7f 	bl	8001c94 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	080247f8 	.word	0x080247f8
 80023a4:	08024898 	.word	0x08024898
 80023a8:	08024820 	.word	0x08024820

080023ac <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <lwiperf_tcp_accept+0x22>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <lwiperf_tcp_accept+0x22>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 80023ce:	f06f 0305 	mvn.w	r3, #5
 80023d2:	e0a3      	b.n	800251c <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <lwiperf_tcp_accept+0x42>
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <lwiperf_tcp_accept+0x178>)
 80023e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023e6:	4950      	ldr	r1, [pc, #320]	; (8002528 <lwiperf_tcp_accept+0x17c>)
 80023e8:	4850      	ldr	r0, [pc, #320]	; (800252c <lwiperf_tcp_accept+0x180>)
 80023ea:	f01d fb63 	bl	801fab4 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <lwiperf_tcp_accept+0x58>
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <lwiperf_tcp_accept+0x178>)
 80023f8:	f240 2259 	movw	r2, #601	; 0x259
 80023fc:	494c      	ldr	r1, [pc, #304]	; (8002530 <lwiperf_tcp_accept+0x184>)
 80023fe:	484b      	ldr	r0, [pc, #300]	; (800252c <lwiperf_tcp_accept+0x180>)
 8002400:	f01d fb58 	bl	801fab4 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <lwiperf_tcp_accept+0x6e>
 800240c:	4b45      	ldr	r3, [pc, #276]	; (8002524 <lwiperf_tcp_accept+0x178>)
 800240e:	f240 225a 	movw	r2, #602	; 0x25a
 8002412:	4948      	ldr	r1, [pc, #288]	; (8002534 <lwiperf_tcp_accept+0x188>)
 8002414:	4845      	ldr	r0, [pc, #276]	; (800252c <lwiperf_tcp_accept+0x180>)
 8002416:	f01d fb4d 	bl	801fab4 <iprintf>
  if (s->specific_remote) {
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <lwiperf_tcp_accept+0x8e>
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <lwiperf_tcp_accept+0x178>)
 800242e:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8002432:	4941      	ldr	r1, [pc, #260]	; (8002538 <lwiperf_tcp_accept+0x18c>)
 8002434:	483d      	ldr	r0, [pc, #244]	; (800252c <lwiperf_tcp_accept+0x180>)
 8002436:	f01d fb3d 	bl	801fab4 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	429a      	cmp	r2, r3
 8002444:	d00d      	beq.n	8002462 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 8002446:	f06f 0305 	mvn.w	r3, #5
 800244a:	e067      	b.n	800251c <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <lwiperf_tcp_accept+0xb6>
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <lwiperf_tcp_accept+0x178>)
 8002456:	f240 2262 	movw	r2, #610	; 0x262
 800245a:	4938      	ldr	r1, [pc, #224]	; (800253c <lwiperf_tcp_accept+0x190>)
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <lwiperf_tcp_accept+0x180>)
 800245e:	f01d fb29 	bl	801fab4 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002462:	2048      	movs	r0, #72	; 0x48
 8002464:	f013 f96e 	bl	8015744 <mem_malloc>
 8002468:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002474:	e052      	b.n	800251c <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8002476:	2248      	movs	r2, #72	; 0x48
 8002478:	2100      	movs	r1, #0
 800247a:	6938      	ldr	r0, [r7, #16]
 800247c:	f01c fc22 	bl	801ecc4 <memset>
  conn->base.tcp = 1;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2201      	movs	r2, #1
 8002484:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2201      	movs	r2, #1
 800248a:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8002498:	f00f fd06 	bl	8011ea8 <sys_now>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f016 f9b3 	bl	8018820 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 80024ba:	4921      	ldr	r1, [pc, #132]	; (8002540 <lwiperf_tcp_accept+0x194>)
 80024bc:	68b8      	ldr	r0, [r7, #8]
 80024be:	f016 f9c1 	bl	8018844 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80024c2:	2202      	movs	r2, #2
 80024c4:	491f      	ldr	r1, [pc, #124]	; (8002544 <lwiperf_tcp_accept+0x198>)
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f016 fa3a 	bl	8018940 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	491d      	ldr	r1, [pc, #116]	; (8002548 <lwiperf_tcp_accept+0x19c>)
 80024d2:	4618      	mov	r0, r3
 80024d4:	f016 f9fa 	bl	80188cc <tcp_err>

  if (s->specific_remote) {
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <lwiperf_tcp_accept+0x158>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fb05 	bl	8001b08 <lwiperf_list_find>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800250a:	2102      	movs	r1, #2
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f7ff fb5f 	bl	8001bd0 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fa9f 	bl	8001a58 <lwiperf_list_add>
  return ERR_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	080247f8 	.word	0x080247f8
 8002528:	080248d4 	.word	0x080248d4
 800252c:	08024820 	.word	0x08024820
 8002530:	080248e4 	.word	0x080248e4
 8002534:	080248f8 	.word	0x080248f8
 8002538:	0802490c 	.word	0x0802490c
 800253c:	08024934 	.word	0x08024934
 8002540:	080020f1 	.word	0x080020f1
 8002544:	0800233d 	.word	0x0800233d
 8002548:	0800231d 	.word	0x0800231d

0800254c <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f241 3189 	movw	r1, #5001	; 0x1389
 800255e:	4804      	ldr	r0, [pc, #16]	; (8002570 <lwiperf_start_tcp_server_default+0x24>)
 8002560:	f000 f808 	bl	8002574 <lwiperf_start_tcp_server>
 8002564:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	08027d08 	.word	0x08027d08

08002574 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8002588:	8979      	ldrh	r1, [r7, #10]
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f80d 	bl	80025b8 <lwiperf_start_tcp_server_impl>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 80025a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <lwiperf_start_tcp_server+0x3a>
    return state;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	e000      	b.n	80025b0 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <lwiperf_start_tcp_server_impl+0x24>
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <lwiperf_start_tcp_server_impl+0x100>)
 80025d0:	f240 22b6 	movw	r2, #694	; 0x2b6
 80025d4:	4939      	ldr	r1, [pc, #228]	; (80026bc <lwiperf_start_tcp_server_impl+0x104>)
 80025d6:	483a      	ldr	r0, [pc, #232]	; (80026c0 <lwiperf_start_tcp_server_impl+0x108>)
 80025d8:	f01d fa6c 	bl	801fab4 <iprintf>

  if (local_addr == NULL) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 80025e2:	f06f 030f 	mvn.w	r3, #15
 80025e6:	e063      	b.n	80026b0 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80025e8:	2048      	movs	r0, #72	; 0x48
 80025ea:	f013 f8ab 	bl	8015744 <mem_malloc>
 80025ee:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	e059      	b.n	80026b0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 80025fc:	2248      	movs	r2, #72	; 0x48
 80025fe:	2100      	movs	r1, #0
 8002600:	69f8      	ldr	r0, [r7, #28]
 8002602:	f01c fb5f 	bl	801ecc4 <memset>
  s->base.tcp = 1;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2201      	movs	r2, #1
 800260a:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2201      	movs	r2, #1
 8002610:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002616:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8002624:	202e      	movs	r0, #46	; 0x2e
 8002626:	f016 f8ed 	bl	8018804 <tcp_new_ip_type>
 800262a:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002636:	e03b      	b.n	80026b0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	461a      	mov	r2, r3
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	69b8      	ldr	r0, [r7, #24]
 8002640:	f014 ff42 	bl	80174c8 <tcp_bind>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8002648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 8002650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002654:	e02c      	b.n	80026b0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8002656:	2101      	movs	r1, #1
 8002658:	69b8      	ldr	r0, [r7, #24]
 800265a:	f014 ffed 	bl	8017638 <tcp_listen_with_backlog>
 800265e:	4602      	mov	r2, r0
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f014 fe32 	bl	80172dc <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8002678:	69f8      	ldr	r0, [r7, #28]
 800267a:	f012 fefd 	bl	8015478 <mem_free>
    return ERR_MEM;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002682:	e015      	b.n	80026b0 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	69f9      	ldr	r1, [r7, #28]
 800268e:	4618      	mov	r0, r3
 8002690:	f016 f8c6 	bl	8018820 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	490a      	ldr	r1, [pc, #40]	; (80026c4 <lwiperf_start_tcp_server_impl+0x10c>)
 800269a:	4618      	mov	r0, r3
 800269c:	f016 f938 	bl	8018910 <tcp_accept>

  lwiperf_list_add(&s->base);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f9d8 	bl	8001a58 <lwiperf_list_add>
  *state = s;
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	080247f8 	.word	0x080247f8
 80026bc:	0802495c 	.word	0x0802495c
 80026c0:	08024820 	.word	0x08024820
 80026c4:	080023ad 	.word	0x080023ad

080026c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	f5ad 5d1f 	sub.w	sp, sp, #10176	; 0x27c0
 80026ce:	b085      	sub	sp, #20
 80026d0:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80026d2:	f000 fb59 	bl	8002d88 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80026d6:	4b9b      	ldr	r3, [pc, #620]	; (8002944 <main+0x27c>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11b      	bne.n	800271a <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026e2:	f3bf 8f4f 	dsb	sy
}
 80026e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026e8:	f3bf 8f6f 	isb	sy
}
 80026ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80026ee:	4b95      	ldr	r3, [pc, #596]	; (8002944 <main+0x27c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80026f6:	f3bf 8f4f 	dsb	sy
}
 80026fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026fc:	f3bf 8f6f 	isb	sy
}
 8002700:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002702:	4b90      	ldr	r3, [pc, #576]	; (8002944 <main+0x27c>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4a8f      	ldr	r2, [pc, #572]	; (8002944 <main+0x27c>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800270e:	f3bf 8f4f 	dsb	sy
}
 8002712:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002714:	f3bf 8f6f 	isb	sy
}
 8002718:	e000      	b.n	800271c <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800271a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800271c:	4b89      	ldr	r3, [pc, #548]	; (8002944 <main+0x27c>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d159      	bne.n	80027dc <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002728:	4b86      	ldr	r3, [pc, #536]	; (8002944 <main+0x27c>)
 800272a:	2200      	movs	r2, #0
 800272c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002730:	f3bf 8f4f 	dsb	sy
}
 8002734:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002736:	4b83      	ldr	r3, [pc, #524]	; (8002944 <main+0x27c>)
 8002738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273c:	f242 72a8 	movw	r2, #10152	; 0x27a8
 8002740:	443a      	add	r2, r7
 8002742:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002744:	f242 73a8 	movw	r3, #10152	; 0x27a8
 8002748:	443b      	add	r3, r7
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0b5b      	lsrs	r3, r3, #13
 800274e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002752:	f242 72a4 	movw	r2, #10148	; 0x27a4
 8002756:	443a      	add	r2, r7
 8002758:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800275a:	f242 73a8 	movw	r3, #10152	; 0x27a8
 800275e:	443b      	add	r3, r7
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	08db      	lsrs	r3, r3, #3
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f242 72a0 	movw	r2, #10144	; 0x27a0
 800276c:	443a      	add	r2, r7
 800276e:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002770:	f242 73a4 	movw	r3, #10148	; 0x27a4
 8002774:	443b      	add	r3, r7
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800277e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002780:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002784:	443a      	add	r2, r7
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800278a:	496e      	ldr	r1, [pc, #440]	; (8002944 <main+0x27c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002792:	f242 73a0 	movw	r3, #10144	; 0x27a0
 8002796:	443b      	add	r3, r7
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	f242 71a0 	movw	r1, #10144	; 0x27a0
 80027a0:	4439      	add	r1, r7
 80027a2:	600a      	str	r2, [r1, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e3      	bne.n	8002770 <main+0xa8>
    } while(sets-- != 0U);
 80027a8:	f242 73a4 	movw	r3, #10148	; 0x27a4
 80027ac:	443b      	add	r3, r7
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	f242 71a4 	movw	r1, #10148	; 0x27a4
 80027b6:	4439      	add	r1, r7
 80027b8:	600a      	str	r2, [r1, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1cd      	bne.n	800275a <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 80027be:	f3bf 8f4f 	dsb	sy
}
 80027c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80027c4:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <main+0x27c>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4a5e      	ldr	r2, [pc, #376]	; (8002944 <main+0x27c>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80027d0:	f3bf 8f4f 	dsb	sy
}
 80027d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027d6:	f3bf 8f6f 	isb	sy
}
 80027da:	e000      	b.n	80027de <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80027dc:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80027de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e2:	f242 72bc 	movw	r2, #10172	; 0x27bc
 80027e6:	443a      	add	r2, r7
 80027e8:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80027ea:	bf00      	nop
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <main+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <main+0x146>
 80027f8:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80027fc:	443b      	add	r3, r7
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	f242 71bc 	movw	r1, #10172	; 0x27bc
 8002806:	4439      	add	r1, r7
 8002808:	600a      	str	r2, [r1, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	dcee      	bgt.n	80027ec <main+0x124>
	if ( timeout < 0 )
 800280e:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002812:	443b      	add	r3, r7
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	da01      	bge.n	800281e <main+0x156>
	{
		Error_Handler();
 800281a:	f000 faf5 	bl	8002e08 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800281e:	f001 fcf1 	bl	8004204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002822:	f000 fa0b 	bl	8002c3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002826:	f000 fa93 	bl	8002d50 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <main+0x280>)
 800282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002830:	4a45      	ldr	r2, [pc, #276]	; (8002948 <main+0x280>)
 8002832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <main+0x280>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002840:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <main+0x284>)
 8002846:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 800284a:	440b      	add	r3, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <main+0x284>)
 8002850:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002854:	4413      	add	r3, r2
 8002856:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002858:	2000      	movs	r0, #0
 800285a:	f007 fb45 	bl	8009ee8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800285e:	2100      	movs	r1, #0
 8002860:	2000      	movs	r0, #0
 8002862:	f007 fb5b 	bl	8009f1c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8002866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286a:	f242 72bc 	movw	r2, #10172	; 0x27bc
 800286e:	443a      	add	r2, r7
 8002870:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002872:	bf00      	nop
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <main+0x280>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <main+0x1ce>
 8002880:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002884:	443b      	add	r3, r7
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	f242 71bc 	movw	r1, #10172	; 0x27bc
 800288e:	4439      	add	r1, r7
 8002890:	600a      	str	r2, [r1, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dcee      	bgt.n	8002874 <main+0x1ac>
	if ( timeout < 0 )
 8002896:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800289a:	443b      	add	r3, r7
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da01      	bge.n	80028a6 <main+0x1de>
	{
		Error_Handler();
 80028a2:	f000 fab1 	bl	8002e08 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a6:	f7fe ff8b 	bl	80017c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80028aa:	f7fe fe2d 	bl	8001508 <MX_DMA_Init>
  MX_ADC1_Init();
 80028ae:	f7fe fafb 	bl	8000ea8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80028b2:	f7fe fb7f 	bl	8000fb4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80028b6:	f7fe fbf3 	bl	80010a0 <MX_ADC3_Init>
  MX_FMC_Init();
 80028ba:	f7fe fe6d 	bl	8001598 <MX_FMC_Init>
  MX_SAI1_Init();
 80028be:	f000 faf7 	bl	8002eb0 <MX_SAI1_Init>
  MX_SPI2_Init();
 80028c2:	f000 fbf3 	bl	80030ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80028c6:	f001 fa63 	bl	8003d90 <MX_USART1_UART_Init>
  MX_RNG_Init();
 80028ca:	f000 faa3 	bl	8002e14 <MX_RNG_Init>
  MX_CRC_Init();
 80028ce:	f7fe fdd7 	bl	8001480 <MX_CRC_Init>
  MX_LWIP_Init();
 80028d2:	f00e febd 	bl	8011650 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 80028d6:	2201      	movs	r2, #1
 80028d8:	2120      	movs	r1, #32
 80028da:	481d      	ldr	r0, [pc, #116]	; (8002950 <main+0x288>)
 80028dc:	f007 fad0 	bl	8009e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80028e0:	2201      	movs	r2, #1
 80028e2:	2104      	movs	r1, #4
 80028e4:	481a      	ldr	r0, [pc, #104]	; (8002950 <main+0x288>)
 80028e6:	f007 facb 	bl	8009e80 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 80028ea:	f01c f90d 	bl	801eb08 <ssd1362_init>

	ssd1362_clearBuffer();
 80028ee:	f01c f8ab 	bl	801ea48 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	230f      	movs	r3, #15
 80028f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fc:	2105      	movs	r1, #5
 80028fe:	2000      	movs	r0, #0
 8002900:	f01b fee6 	bl	801e6d0 <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 8002904:	2300      	movs	r3, #0
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	230f      	movs	r3, #15
 800290a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290e:	2128      	movs	r1, #40	; 0x28
 8002910:	2000      	movs	r0, #0
 8002912:	f01b fedd 	bl	801e6d0 <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8002916:	2310      	movs	r3, #16
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	230f      	movs	r3, #15
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <main+0x28c>)
 800291e:	210f      	movs	r1, #15
 8002920:	2010      	movs	r0, #16
 8002922:	f01b fff0 	bl	801e906 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8002926:	f01c f8bd 	bl	801eaa4 <ssd1362_writeFullBuffer>

	cisynth_ifft();  //while(1)
 800292a:	f7fe f8a1 	bl	8000a70 <cisynth_ifft>



	uint32_t aRandom32bit = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f242 7290 	movw	r2, #10128	; 0x2790
 8002934:	443a      	add	r2, r7
 8002936:	6013      	str	r3, [r2, #0]
	uint8_t buff[10000];

	for (uint32_t i = 0; i < 10000; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800293e:	443a      	add	r2, r7
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e02c      	b.n	800299e <main+0x2d6>
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	58024400 	.word	0x58024400
 800294c:	ffffd8a8 	.word	0xffffd8a8
 8002950:	58021800 	.word	0x58021800
 8002954:	0802496c 	.word	0x0802496c
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8002958:	f242 7390 	movw	r3, #10128	; 0x2790
 800295c:	443b      	add	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	48a5      	ldr	r0, [pc, #660]	; (8002bf8 <main+0x530>)
 8002962:	f00a fcea 	bl	800d33a <HAL_RNG_GenerateRandomNumber>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <main+0x2a8>
		{
			/* Random number generation error */
			Error_Handler();
 800296c:	f000 fa4c 	bl	8002e08 <Error_Handler>
		}
		buff[i] = aRandom32bit;
 8002970:	f242 7390 	movw	r3, #10128	; 0x2790
 8002974:	443b      	add	r3, r7
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800297e:	f242 73b8 	movw	r3, #10168	; 0x27b8
 8002982:	443b      	add	r3, r7
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	460a      	mov	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10000; i++)
 800298c:	f242 73b8 	movw	r3, #10168	; 0x27b8
 8002990:	443b      	add	r3, r7
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800299a:	443a      	add	r2, r7
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80029a2:	443b      	add	r3, r7
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d9d4      	bls.n	8002958 <main+0x290>
	}

	Audio_Player_Play(buff, 10000);
 80029ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80029b6:	4618      	mov	r0, r3
 80029b8:	f01b fcc6 	bl	801e348 <Audio_Player_Play>

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 80029bc:	f01b fa24 	bl	801de08 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 80029c0:	4b8e      	ldr	r3, [pc, #568]	; (8002bfc <main+0x534>)
 80029c2:	f242 72b4 	movw	r2, #10164	; 0x27b4
 80029c6:	443a      	add	r2, r7
 80029c8:	6013      	str	r3, [r2, #0]

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <main+0x538>)
 80029cc:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80029d0:	4413      	add	r3, r2
 80029d2:	4a8c      	ldr	r2, [pc, #560]	; (8002c04 <main+0x53c>)
 80029d4:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 80029d6:	f01a ffc3 	bl	801d960 <udp_new>
 80029da:	f242 73b0 	movw	r3, #10160	; 0x27b0
 80029de:	443b      	add	r3, r7
 80029e0:	6018      	str	r0, [r3, #0]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 80029e2:	4b87      	ldr	r3, [pc, #540]	; (8002c00 <main+0x538>)
 80029e4:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80029e8:	4413      	add	r3, r2
 80029ea:	f24d 726f 	movw	r2, #55151	; 0xd76f
 80029ee:	4619      	mov	r1, r3
 80029f0:	f242 73b0 	movw	r3, #10160	; 0x27b0
 80029f4:	443b      	add	r3, r7
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f01a ff44 	bl	801d884 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f242 72ac 	movw	r2, #10156	; 0x27ac
 8002a02:	443a      	add	r2, r7
 8002a04:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002a06:	4b80      	ldr	r3, [pc, #512]	; (8002c08 <main+0x540>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002a0e:	f3bf 8f4f 	dsb	sy
}
 8002a12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002a14:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <main+0x540>)
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1a:	f242 729c 	movw	r2, #10140	; 0x279c
 8002a1e:	443a      	add	r2, r7
 8002a20:	6013      	str	r3, [r2, #0]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a22:	f242 739c 	movw	r3, #10140	; 0x279c
 8002a26:	443b      	add	r3, r7
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0b5b      	lsrs	r3, r3, #13
 8002a2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a30:	f242 7298 	movw	r2, #10136	; 0x2798
 8002a34:	443a      	add	r2, r7
 8002a36:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a38:	f242 739c 	movw	r3, #10140	; 0x279c
 8002a3c:	443b      	add	r3, r7
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a46:	f242 7294 	movw	r2, #10132	; 0x2794
 8002a4a:	443a      	add	r2, r7
 8002a4c:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a4e:	f242 7398 	movw	r3, #10136	; 0x2798
 8002a52:	443b      	add	r3, r7
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002a5c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002a5e:	f242 7294 	movw	r2, #10132	; 0x2794
 8002a62:	443a      	add	r2, r7
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a68:	4967      	ldr	r1, [pc, #412]	; (8002c08 <main+0x540>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002a70:	f242 7394 	movw	r3, #10132	; 0x2794
 8002a74:	443b      	add	r3, r7
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	f242 7194 	movw	r1, #10132	; 0x2794
 8002a7e:	4439      	add	r1, r7
 8002a80:	600a      	str	r2, [r1, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e3      	bne.n	8002a4e <main+0x386>
    } while(sets-- != 0U);
 8002a86:	f242 7398 	movw	r3, #10136	; 0x2798
 8002a8a:	443b      	add	r3, r7
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	f242 7198 	movw	r1, #10136	; 0x2798
 8002a94:	4439      	add	r1, r7
 8002a96:	600a      	str	r2, [r1, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1cd      	bne.n	8002a38 <main+0x370>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a9c:	f3bf 8f4f 	dsb	sy
}
 8002aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002aa2:	f3bf 8f6f 	isb	sy
}
 8002aa6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002aa8:	bf00      	nop

	SCB_CleanInvalidateDCache();


	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fd4d 	bl	800254c <lwiperf_start_tcp_server_default>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 8002ab2:	f00e ff19 	bl	80118e8 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 8002ab6:	4c55      	ldr	r4, [pc, #340]	; (8002c0c <main+0x544>)
 8002ab8:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002abc:	441c      	add	r4, r3
 8002abe:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <main+0x548>)
 8002ac0:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002ac4:	441a      	add	r2, r3
 8002ac6:	4953      	ldr	r1, [pc, #332]	; (8002c14 <main+0x54c>)
 8002ac8:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002acc:	4419      	add	r1, r3
 8002ace:	4852      	ldr	r0, [pc, #328]	; (8002c18 <main+0x550>)
 8002ad0:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002ad4:	4418      	add	r0, r3
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <main+0x554>)
 8002ad8:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002adc:	4463      	add	r3, ip
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <main+0x558>)
 8002ae2:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002ae6:	4463      	add	r3, ip
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <main+0x55c>)
 8002aec:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002af0:	4463      	add	r3, ip
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	f01b fb55 	bl	801e1a4 <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 8002afa:	f01b ffa5 	bl	801ea48 <ssd1362_clearBuffer>
		char text[100] = {0};
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <main+0x560>)
 8002b00:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002b04:	4413      	add	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	2260      	movs	r2, #96	; 0x60
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f01c f8d7 	bl	801ecc4 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <main+0x550>)
 8002b18:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <main+0x54c>)
 8002b26:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <main+0x548>)
 8002b34:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002b38:	4403      	add	r3, r0
 8002b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3e:	483a      	ldr	r0, [pc, #232]	; (8002c28 <main+0x560>)
 8002b40:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002b44:	4420      	add	r0, r4
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4938      	ldr	r1, [pc, #224]	; (8002c2c <main+0x564>)
 8002b4c:	f01d f896 	bl	801fc7c <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 8002b50:	4a35      	ldr	r2, [pc, #212]	; (8002c28 <main+0x560>)
 8002b52:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002b56:	441a      	add	r2, r3
 8002b58:	2310      	movs	r3, #16
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	210a      	movs	r1, #10
 8002b60:	2000      	movs	r0, #0
 8002b62:	f01b fed0 	bl	801e906 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <main+0x544>)
 8002b68:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <main+0x55c>)
 8002b76:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <main+0x558>)
 8002b84:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002b88:	4403      	add	r3, r0
 8002b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8e:	4826      	ldr	r0, [pc, #152]	; (8002c28 <main+0x560>)
 8002b90:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002b94:	4420      	add	r0, r4
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4925      	ldr	r1, [pc, #148]	; (8002c30 <main+0x568>)
 8002b9c:	f01d f86e 	bl	801fc7c <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <main+0x560>)
 8002ba2:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002ba6:	441a      	add	r2, r3
 8002ba8:	2310      	movs	r3, #16
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	230f      	movs	r3, #15
 8002bae:	211e      	movs	r1, #30
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f01b fea8 	bl	801e906 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <main+0x554>)
 8002bb8:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <main+0x560>)
 8002bc6:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002bca:	440b      	add	r3, r1
 8002bcc:	4919      	ldr	r1, [pc, #100]	; (8002c34 <main+0x56c>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f01d f854 	bl	801fc7c <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <main+0x560>)
 8002bd6:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002bda:	441a      	add	r2, r3
 8002bdc:	2310      	movs	r3, #16
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	230f      	movs	r3, #15
 8002be2:	2132      	movs	r1, #50	; 0x32
 8002be4:	2000      	movs	r0, #0
 8002be6:	f01b fe8e 	bl	801e906 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8002bea:	f01b ff5b 	bl	801eaa4 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002bee:	2140      	movs	r1, #64	; 0x40
 8002bf0:	4811      	ldr	r0, [pc, #68]	; (8002c38 <main+0x570>)
 8002bf2:	f007 f95e 	bl	8009eb2 <HAL_GPIO_TogglePin>
	{
 8002bf6:	e75c      	b.n	8002ab2 <main+0x3ea>
 8002bf8:	24005580 	.word	0x24005580
 8002bfc:	0802498c 	.word	0x0802498c
 8002c00:	ffffd8ac 	.word	0xffffd8ac
 8002c04:	0101a8c0 	.word	0x0101a8c0
 8002c08:	e000ed00 	.word	0xe000ed00
 8002c0c:	ffffd8b8 	.word	0xffffd8b8
 8002c10:	ffffd8ba 	.word	0xffffd8ba
 8002c14:	ffffd8bc 	.word	0xffffd8bc
 8002c18:	ffffd8be 	.word	0xffffd8be
 8002c1c:	ffffd8b2 	.word	0xffffd8b2
 8002c20:	ffffd8b4 	.word	0xffffd8b4
 8002c24:	ffffd8b6 	.word	0xffffd8b6
 8002c28:	ffffd844 	.word	0xffffd844
 8002c2c:	080249a4 	.word	0x080249a4
 8002c30:	080249b8 	.word	0x080249b8
 8002c34:	080249cc 	.word	0x080249cc
 8002c38:	58021c00 	.word	0x58021c00

08002c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b09c      	sub	sp, #112	; 0x70
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	224c      	movs	r2, #76	; 0x4c
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f01c f83a 	bl	801ecc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2220      	movs	r2, #32
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f01c f834 	bl	801ecc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002c5c:	2004      	movs	r0, #4
 8002c5e:	f007 f995 	bl	8009f8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <SystemClock_Config+0x108>)
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <SystemClock_Config+0x108>)
 8002c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c70:	6193      	str	r3, [r2, #24]
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <SystemClock_Config+0x108>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <SystemClock_Config+0x10c>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <SystemClock_Config+0x10c>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <SystemClock_Config+0x10c>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002c94:	bf00      	nop
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <SystemClock_Config+0x108>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	d1f8      	bne.n	8002c96 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <SystemClock_Config+0x110>)
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	f023 0303 	bic.w	r3, r3, #3
 8002cac:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <SystemClock_Config+0x110>)
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002cb4:	2323      	movs	r3, #35	; 0x23
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc2:	2340      	movs	r3, #64	; 0x40
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f007 f9a2 	bl	800a040 <HAL_RCC_OscConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002d02:	f000 f881 	bl	8002e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d06:	233f      	movs	r3, #63	; 0x3f
 8002d08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002d12:	2308      	movs	r3, #8
 8002d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002d16:	2340      	movs	r3, #64	; 0x40
 8002d18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f007 fd97 	bl	800a860 <HAL_RCC_ClockConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002d38:	f000 f866 	bl	8002e08 <Error_Handler>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3770      	adds	r7, #112	; 0x70
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	58024800 	.word	0x58024800
 8002d48:	58000400 	.word	0x58000400
 8002d4c:	58024400 	.word	0x58024400

08002d50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0b0      	sub	sp, #192	; 0xc0
 8002d54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	22bc      	movs	r2, #188	; 0xbc
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f01b ffb1 	bl	801ecc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002d62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f008 f902 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002d7a:	f000 f845 	bl	8002e08 <Error_Handler>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	37c0      	adds	r7, #192	; 0xc0
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002d9a:	f002 fdeb 	bl	8005974 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <MPU_Config+0x78>)
 8002da8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002daa:	2307      	movs	r3, #7
 8002dac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002db6:	2303      	movs	r3, #3
 8002db8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fe09 	bl	80059e4 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MPU_Config+0x7c>)
 8002dd8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8002dda:	230d      	movs	r3, #13
 8002ddc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002dea:	463b      	mov	r3, r7
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fdf9 	bl	80059e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002df2:	2004      	movs	r0, #4
 8002df4:	f002 fdd6 	bl	80059a4 <HAL_MPU_Enable>

}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	30040000 	.word	0x30040000
 8002e04:	30044000 	.word	0x30044000

08002e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e10:	e7fe      	b.n	8002e10 <Error_Handler+0x8>
	...

08002e14 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <MX_RNG_Init+0x24>)
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <MX_RNG_Init+0x28>)
 8002e1c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_RNG_Init+0x24>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_RNG_Init+0x24>)
 8002e26:	f00a fa2d 	bl	800d284 <HAL_RNG_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e30:	f7ff ffea 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	24005580 	.word	0x24005580
 8002e3c:	48021800 	.word	0x48021800

08002e40 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0b2      	sub	sp, #200	; 0xc8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	22bc      	movs	r2, #188	; 0xbc
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f01b ff37 	bl	801ecc4 <memset>
  if(rngHandle->Instance==RNG)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_RNG_MspInit+0x68>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d11e      	bne.n	8002e9e <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	4618      	mov	r0, r3
 8002e72:	f008 f881 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002e7c:	f7ff ffc4 	bl	8002e08 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RNG_MspInit+0x6c>)
 8002e82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RNG_MspInit+0x6c>)
 8002e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RNG_MspInit+0x6c>)
 8002e92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	37c8      	adds	r7, #200	; 0xc8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	48021800 	.word	0x48021800
 8002eac:	58024400 	.word	0x58024400

08002eb0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <MX_SAI1_Init+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002eda:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002ede:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002ef8:	2302      	movs	r3, #2
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_SAI1_Init+0x64>)
 8002f00:	f00a fa6a 	bl	800d3d8 <HAL_SAI_InitProtocol>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002f0a:	f7ff ff7d 	bl	8002e08 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	2400560c 	.word	0x2400560c
 8002f18:	40015804 	.word	0x40015804

08002f1c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b0b8      	sub	sp, #224	; 0xe0
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	22bc      	movs	r2, #188	; 0xbc
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f01b fec9 	bl	801ecc4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_SAI_MspInit+0x174>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	f040 80a4 	bne.w	8003086 <HAL_SAI_MspInit+0x16a>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8002f44:	230c      	movs	r3, #12
 8002f46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 389;
 8002f48:	f240 1385 	movw	r3, #389	; 0x185
 8002f4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 11;
 8002f4e:	230b      	movs	r3, #11
 8002f50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 11;
 8002f52:	230b      	movs	r3, #11
 8002f54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002f56:	230b      	movs	r3, #11
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002f66:	2301      	movs	r3, #1
 8002f68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6a:	f107 0310 	add.w	r3, r7, #16
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f008 f802 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_SAI_MspInit+0x62>
    {
      Error_Handler();
 8002f7a:	f7ff ff45 	bl	8002e08 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002f7e:	4b45      	ldr	r3, [pc, #276]	; (8003094 <HAL_SAI_MspInit+0x178>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <HAL_SAI_MspInit+0x88>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_SAI_MspInit+0x17c>)
 8002f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f8c:	4a42      	ldr	r2, [pc, #264]	; (8003098 <HAL_SAI_MspInit+0x17c>)
 8002f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f96:	4b40      	ldr	r3, [pc, #256]	; (8003098 <HAL_SAI_MspInit+0x17c>)
 8002f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_SAI_MspInit+0x178>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <HAL_SAI_MspInit+0x178>)
 8002fac:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8002fae:	2334      	movs	r3, #52	; 0x34
 8002fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4832      	ldr	r0, [pc, #200]	; (800309c <HAL_SAI_MspInit+0x180>)
 8002fd4:	f006 fda4 	bl	8009b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fd8:	2340      	movs	r3, #64	; 0x40
 8002fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4828      	ldr	r0, [pc, #160]	; (80030a0 <HAL_SAI_MspInit+0x184>)
 8002ffe:	f006 fd8f 	bl	8009b20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003004:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <HAL_SAI_MspInit+0x18c>)
 8003006:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003008:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800300a:	2257      	movs	r2, #87	; 0x57
 800300c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300e:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800301c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003020:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003028:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800302c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003030:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003038:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800303c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003040:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003044:	2204      	movs	r2, #4
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800304a:	2203      	movs	r2, #3
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003050:	2200      	movs	r2, #0
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800305a:	4812      	ldr	r0, [pc, #72]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800305c:	f002 fe04 	bl	8005c68 <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_SAI_MspInit+0x14e>
    {
      Error_Handler();
 8003066:	f7ff fecf 	bl	8002e08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800306e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 800307c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003080:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <HAL_SAI_MspInit+0x188>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003086:	bf00      	nop
 8003088:	37e0      	adds	r7, #224	; 0xe0
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40015804 	.word	0x40015804
 8003094:	2400364c 	.word	0x2400364c
 8003098:	58024400 	.word	0x58024400
 800309c:	58021000 	.word	0x58021000
 80030a0:	58020c00 	.word	0x58020c00
 80030a4:	24005594 	.word	0x24005594
 80030a8:	40020028 	.word	0x40020028

080030ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030b2:	4a28      	ldr	r2, [pc, #160]	; (8003154 <MX_SPI2_Init+0xa8>)
 80030b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030c6:	2207      	movs	r2, #7
 80030c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030e0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80030e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <MX_SPI2_Init+0xa4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003106:	2200      	movs	r2, #0
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_SPI2_Init+0xa4>)
 800310c:	2200      	movs	r2, #0
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <MX_SPI2_Init+0xa4>)
 800311e:	2200      	movs	r2, #0
 8003120:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003124:	2200      	movs	r2, #0
 8003126:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <MX_SPI2_Init+0xa4>)
 800312a:	2200      	movs	r2, #0
 800312c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003130:	2200      	movs	r2, #0
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <MX_SPI2_Init+0xa4>)
 8003136:	2200      	movs	r2, #0
 8003138:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_SPI2_Init+0xa4>)
 800313c:	f00a fef2 	bl	800df24 <HAL_SPI_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8003146:	f7ff fe5f 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	240056a4 	.word	0x240056a4
 8003154:	40003800 	.word	0x40003800

08003158 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0ba      	sub	sp, #232	; 0xe8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	22bc      	movs	r2, #188	; 0xbc
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f01b fda3 	bl	801ecc4 <memset>
  if(spiHandle->Instance==SPI2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a37      	ldr	r2, [pc, #220]	; (8003260 <HAL_SPI_MspInit+0x108>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d166      	bne.n	8003256 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800318e:	2300      	movs	r3, #0
 8003190:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003192:	f107 0318 	add.w	r3, r7, #24
 8003196:	4618      	mov	r0, r3
 8003198:	f007 feee 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80031a2:	f7ff fe31 	bl	8002e08 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ac:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <HAL_SPI_MspInit+0x10c>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003200:	2308      	movs	r3, #8
 8003202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003218:	2305      	movs	r3, #5
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003222:	4619      	mov	r1, r3
 8003224:	4810      	ldr	r0, [pc, #64]	; (8003268 <HAL_SPI_MspInit+0x110>)
 8003226:	f006 fc7b 	bl	8009b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 800322a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800322e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003244:	2305      	movs	r3, #5
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800324e:	4619      	mov	r1, r3
 8003250:	4806      	ldr	r0, [pc, #24]	; (800326c <HAL_SPI_MspInit+0x114>)
 8003252:	f006 fc65 	bl	8009b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003256:	bf00      	nop
 8003258:	37e8      	adds	r7, #232	; 0xe8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40003800 	.word	0x40003800
 8003264:	58024400 	.word	0x58024400
 8003268:	58020c00 	.word	0x58020c00
 800326c:	58020400 	.word	0x58020400

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_MspInit+0x34>)
 8003278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800327c:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_MspInit+0x34>)
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_MspInit+0x34>)
 8003288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003294:	2005      	movs	r0, #5
 8003296:	f002 fb2d 	bl	80058f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400

080032a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <NMI_Handler+0x4>

080032ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x4>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f000 fff8 	bl	80042e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <DMA1_Stream1_IRQHandler+0x10>)
 8003302:	f003 fa77 	bl	80067f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	24005594 	.word	0x24005594

08003310 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <DMA2_Stream0_IRQHandler+0x10>)
 8003316:	f003 fa6d 	bl	80067f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	24005420 	.word	0x24005420

08003324 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <DMA2_Stream1_IRQHandler+0x10>)
 800332a:	f003 fa63 	bl	80067f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	24005498 	.word	0x24005498

08003338 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <DMA2_Stream2_IRQHandler+0x10>)
 800333e:	f003 fa59 	bl	80067f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	240052e0 	.word	0x240052e0

0800334c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <ETH_IRQHandler+0x10>)
 8003352:	f005 f9f5 	bl	8008740 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	24005a78 	.word	0x24005a78

08003360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	return 1;
 8003364:	2301      	movs	r3, #1
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_kill>:

int _kill(int pid, int sig)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <_kill+0x20>)
 800337c:	2216      	movs	r2, #22
 800337e:	601a      	str	r2, [r3, #0]
	return -1;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	2400b244 	.word	0x2400b244

08003394 <_exit>:

void _exit (int status)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800339c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffe5 	bl	8003370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033a6:	e7fe      	b.n	80033a6 <_exit+0x12>

080033a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e00a      	b.n	80033d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ba:	f3af 8000 	nop.w
 80033be:	4601      	mov	r1, r0
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	60ba      	str	r2, [r7, #8]
 80033c6:	b2ca      	uxtb	r2, r1
 80033c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3301      	adds	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbf0      	blt.n	80033ba <_read+0x12>
	}

return len;
 80033d8:	687b      	ldr	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e009      	b.n	8003408 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	60ba      	str	r2, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3301      	adds	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	dbf1      	blt.n	80033f4 <_write+0x12>
	}
	return len;
 8003410:	687b      	ldr	r3, [r7, #4]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_close>:

int _close(int file)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	return -1;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003442:	605a      	str	r2, [r3, #4]
	return 0;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_isatty>:

int _isatty(int file)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
	return 1;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	return 0;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <_sbrk+0x5c>)
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <_sbrk+0x60>)
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <_sbrk+0x64>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <_sbrk+0x64>)
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <_sbrk+0x68>)
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <_sbrk+0x64>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d205      	bcs.n	80034c0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <_sbrk+0x6c>)
 80034b6:	220c      	movs	r2, #12
 80034b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034be:	e009      	b.n	80034d4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	4a06      	ldr	r2, [pc, #24]	; (80034e8 <_sbrk+0x64>)
 80034d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	24080000 	.word	0x24080000
 80034e4:	00000400 	.word	0x00000400
 80034e8:	24003650 	.word	0x24003650
 80034ec:	2400b258 	.word	0x2400b258
 80034f0:	2400b244 	.word	0x2400b244

080034f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b09a      	sub	sp, #104	; 0x68
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	222c      	movs	r2, #44	; 0x2c
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f01b fbcf 	bl	801ecc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

	uint32_t prescalerValue, counterPeriod, pulseValueCH1, pulseValueCH2;

	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <MX_TIM1_Init+0x150>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	0adb      	lsrs	r3, r3, #11
 800352c:	4a46      	ldr	r2, [pc, #280]	; (8003648 <MX_TIM1_Init+0x154>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	09db      	lsrs	r3, r3, #7
 8003534:	3b01      	subs	r3, #1
 8003536:	667b      	str	r3, [r7, #100]	; 0x64
	counterPeriod = 48 - 1;
 8003538:	232f      	movs	r3, #47	; 0x2f
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
	pulseValueCH2 = 24 - 1;
 800353c:	2317      	movs	r3, #23
 800353e:	65fb      	str	r3, [r7, #92]	; 0x5c
	pulseValueCH1 = 4;
 8003540:	2304      	movs	r3, #4
 8003542:	65bb      	str	r3, [r7, #88]	; 0x58

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003544:	4b41      	ldr	r3, [pc, #260]	; (800364c <MX_TIM1_Init+0x158>)
 8003546:	4a42      	ldr	r2, [pc, #264]	; (8003650 <MX_TIM1_Init+0x15c>)
 8003548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescalerValue;
 800354a:	4a40      	ldr	r2, [pc, #256]	; (800364c <MX_TIM1_Init+0x158>)
 800354c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354e:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <MX_TIM1_Init+0x158>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = counterPeriod;
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <MX_TIM1_Init+0x158>)
 8003558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800355a:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <MX_TIM1_Init+0x158>)
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <MX_TIM1_Init+0x158>)
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003568:	4b38      	ldr	r3, [pc, #224]	; (800364c <MX_TIM1_Init+0x158>)
 800356a:	2200      	movs	r2, #0
 800356c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800356e:	4837      	ldr	r0, [pc, #220]	; (800364c <MX_TIM1_Init+0x158>)
 8003570:	f00b fe8d 	bl	800f28e <HAL_TIM_PWM_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800357a:	f7ff fc45 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800357e:	2320      	movs	r3, #32
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800358a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800358e:	4619      	mov	r1, r3
 8003590:	482e      	ldr	r0, [pc, #184]	; (800364c <MX_TIM1_Init+0x158>)
 8003592:	f00c fe1f 	bl	80101d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800359c:	f7ff fc34 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a0:	2360      	movs	r3, #96	; 0x60
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH1;
 80035a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035ac:	2300      	movs	r3, #0
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	4619      	mov	r1, r3
 80035c4:	4821      	ldr	r0, [pc, #132]	; (800364c <MX_TIM1_Init+0x158>)
 80035c6:	f00b ffc1 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80035d0:	f7ff fc1a 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.Pulse = pulseValueCH2;
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035dc:	2204      	movs	r2, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	481a      	ldr	r0, [pc, #104]	; (800364c <MX_TIM1_Init+0x158>)
 80035e2:	f00b ffb3 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80035ec:	f7ff fc0c 	bl	8002e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003608:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4809      	ldr	r0, [pc, #36]	; (800364c <MX_TIM1_Init+0x158>)
 8003626:	f00c fe5d 	bl	80102e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003630:	f7ff fbea 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <MX_TIM1_Init+0x158>)
 8003636:	f000 facb 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 800363a:	bf00      	nop
 800363c:	3768      	adds	r7, #104	; 0x68
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	24000000 	.word	0x24000000
 8003648:	0023ca99 	.word	0x0023ca99
 800364c:	2400585c 	.word	0x2400585c
 8003650:	40010000 	.word	0x40010000

08003654 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b092      	sub	sp, #72	; 0x48
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800365a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003676:	463b      	mov	r3, r7
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
 8003684:	615a      	str	r2, [r3, #20]
 8003686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 800368c:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_BLUE_OFF > 0)
	  pulseValue = CIS_LED_BLUE_OFF - 1;
 8003692:	f240 3383 	movw	r3, #899	; 0x383
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <MX_TIM3_Init+0xf8>)
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <MX_TIM3_Init+0xfc>)
 800369c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = prescalerValue;
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <MX_TIM3_Init+0xf8>)
 80036a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a2:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <MX_TIM3_Init+0xf8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = counterPeriod;
 80036aa:	4a28      	ldr	r2, [pc, #160]	; (800374c <MX_TIM3_Init+0xf8>)
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <MX_TIM3_Init+0xf8>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <MX_TIM3_Init+0xf8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036bc:	4823      	ldr	r0, [pc, #140]	; (800374c <MX_TIM3_Init+0xf8>)
 80036be:	f00b fd8f 	bl	800f1e0 <HAL_TIM_Base_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80036c8:	f7ff fb9e 	bl	8002e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036cc:	481f      	ldr	r0, [pc, #124]	; (800374c <MX_TIM3_Init+0xf8>)
 80036ce:	f00b fdde 	bl	800f28e <HAL_TIM_PWM_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80036d8:	f7ff fb96 	bl	8002e08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80036dc:	2305      	movs	r3, #5
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80036e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e8:	4619      	mov	r1, r3
 80036ea:	4818      	ldr	r0, [pc, #96]	; (800374c <MX_TIM3_Init+0xf8>)
 80036ec:	f00c f83e 	bl	800f76c <HAL_TIM_SlaveConfigSynchro>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80036f6:	f7ff fb87 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	4619      	mov	r1, r3
 8003708:	4810      	ldr	r0, [pc, #64]	; (800374c <MX_TIM3_Init+0xf8>)
 800370a:	f00c fd63 	bl	80101d4 <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8003714:	f7ff fb78 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003718:	2360      	movs	r3, #96	; 0x60
 800371a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003728:	463b      	mov	r3, r7
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	4807      	ldr	r0, [pc, #28]	; (800374c <MX_TIM3_Init+0xf8>)
 8003730:	f00b ff0c 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800373a:	f7ff fb65 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800373e:	4803      	ldr	r0, [pc, #12]	; (800374c <MX_TIM3_Init+0xf8>)
 8003740:	f000 fa46 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 8003744:	bf00      	nop
 8003746:	3748      	adds	r7, #72	; 0x48
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	24005810 	.word	0x24005810
 8003750:	40000400 	.word	0x40000400

08003754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b092      	sub	sp, #72	; 0x48
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800375a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800376a:	f107 031c 	add.w	r3, r7, #28
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003776:	463b      	mov	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
 8003784:	615a      	str	r2, [r3, #20]
 8003786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 800378c:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_RED_OFF > 0)
	  pulseValue = CIS_LED_RED_OFF - 1;
 8003792:	f240 3383 	movw	r3, #899	; 0x383
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <MX_TIM4_Init+0xf8>)
 800379a:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <MX_TIM4_Init+0xfc>)
 800379c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = prescalerValue;
 800379e:	4a2b      	ldr	r2, [pc, #172]	; (800384c <MX_TIM4_Init+0xf8>)
 80037a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a2:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <MX_TIM4_Init+0xf8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = counterPeriod;
 80037aa:	4a28      	ldr	r2, [pc, #160]	; (800384c <MX_TIM4_Init+0xf8>)
 80037ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ae:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <MX_TIM4_Init+0xf8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b6:	4b25      	ldr	r3, [pc, #148]	; (800384c <MX_TIM4_Init+0xf8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037bc:	4823      	ldr	r0, [pc, #140]	; (800384c <MX_TIM4_Init+0xf8>)
 80037be:	f00b fd0f 	bl	800f1e0 <HAL_TIM_Base_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80037c8:	f7ff fb1e 	bl	8002e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80037cc:	481f      	ldr	r0, [pc, #124]	; (800384c <MX_TIM4_Init+0xf8>)
 80037ce:	f00b fd5e 	bl	800f28e <HAL_TIM_PWM_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80037d8:	f7ff fb16 	bl	8002e08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80037dc:	2305      	movs	r3, #5
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80037e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e8:	4619      	mov	r1, r3
 80037ea:	4818      	ldr	r0, [pc, #96]	; (800384c <MX_TIM4_Init+0xf8>)
 80037ec:	f00b ffbe 	bl	800f76c <HAL_TIM_SlaveConfigSynchro>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 80037f6:	f7ff fb07 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	4619      	mov	r1, r3
 8003808:	4810      	ldr	r0, [pc, #64]	; (800384c <MX_TIM4_Init+0xf8>)
 800380a:	f00c fce3 	bl	80101d4 <HAL_TIMEx_MasterConfigSynchronization>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8003814:	f7ff faf8 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003818:	2360      	movs	r3, #96	; 0x60
 800381a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800381c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003828:	463b      	mov	r3, r7
 800382a:	2204      	movs	r2, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4807      	ldr	r0, [pc, #28]	; (800384c <MX_TIM4_Init+0xf8>)
 8003830:	f00b fe8c 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800383a:	f7ff fae5 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800383e:	4803      	ldr	r0, [pc, #12]	; (800384c <MX_TIM4_Init+0xf8>)
 8003840:	f000 f9c6 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 8003844:	bf00      	nop
 8003846:	3748      	adds	r7, #72	; 0x48
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	24005778 	.word	0x24005778
 8003850:	40000800 	.word	0x40000800

08003854 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b092      	sub	sp, #72	; 0x48
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800385a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386a:	f107 031c 	add.w	r3, r7, #28
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003876:	463b      	mov	r3, r7
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	615a      	str	r2, [r3, #20]
 8003886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 800388c:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8003890:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_GREEN_OFF > 0)
	  pulseValue = CIS_LED_GREEN_OFF - 1;
 8003892:	f240 3383 	movw	r3, #899	; 0x383
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <MX_TIM5_Init+0xf8>)
 800389a:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <MX_TIM5_Init+0xfc>)
 800389c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = prescalerValue;
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <MX_TIM5_Init+0xf8>)
 80038a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a2:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a4:	4b29      	ldr	r3, [pc, #164]	; (800394c <MX_TIM5_Init+0xf8>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = counterPeriod;
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <MX_TIM5_Init+0xf8>)
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <MX_TIM5_Init+0xf8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <MX_TIM5_Init+0xf8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038bc:	4823      	ldr	r0, [pc, #140]	; (800394c <MX_TIM5_Init+0xf8>)
 80038be:	f00b fc8f 	bl	800f1e0 <HAL_TIM_Base_Init>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80038c8:	f7ff fa9e 	bl	8002e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80038cc:	481f      	ldr	r0, [pc, #124]	; (800394c <MX_TIM5_Init+0xf8>)
 80038ce:	f00b fcde 	bl	800f28e <HAL_TIM_PWM_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80038d8:	f7ff fa96 	bl	8002e08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80038dc:	2305      	movs	r3, #5
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80038e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e8:	4619      	mov	r1, r3
 80038ea:	4818      	ldr	r0, [pc, #96]	; (800394c <MX_TIM5_Init+0xf8>)
 80038ec:	f00b ff3e 	bl	800f76c <HAL_TIM_SlaveConfigSynchro>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 80038f6:	f7ff fa87 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003902:	f107 031c 	add.w	r3, r7, #28
 8003906:	4619      	mov	r1, r3
 8003908:	4810      	ldr	r0, [pc, #64]	; (800394c <MX_TIM5_Init+0xf8>)
 800390a:	f00c fc63 	bl	80101d4 <HAL_TIMEx_MasterConfigSynchronization>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8003914:	f7ff fa78 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003918:	2360      	movs	r3, #96	; 0x60
 800391a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003928:	463b      	mov	r3, r7
 800392a:	2208      	movs	r2, #8
 800392c:	4619      	mov	r1, r3
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <MX_TIM5_Init+0xf8>)
 8003930:	f00b fe0c 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800393a:	f7ff fa65 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <MX_TIM5_Init+0xf8>)
 8003940:	f000 f946 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 8003944:	bf00      	nop
 8003946:	3748      	adds	r7, #72	; 0x48
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	240057c4 	.word	0x240057c4
 8003950:	40000c00 	.word	0x40000c00

08003954 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b09e      	sub	sp, #120	; 0x78
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800395a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	222c      	movs	r2, #44	; 0x2c
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f01b f997 	bl	801ecc4 <memset>

//	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
//	counterPeriod = 480 - 1;
//	pulseValue = 240 - 1;

  prescalerValue = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
  counterPeriod = CIS_END_CAPTURE - 1;
 800399a:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800399e:	673b      	str	r3, [r7, #112]	; 0x70
  pulseValue = CIS_SP_OFF - 1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80039a4:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039a6:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <MX_TIM8_Init+0x164>)
 80039a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = prescalerValue;
 80039aa:	4a42      	ldr	r2, [pc, #264]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ae:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b0:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = counterPeriod;
 80039b6:	4a3f      	ldr	r2, [pc, #252]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ba:	60d3      	str	r3, [r2, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039c2:	4b3c      	ldr	r3, [pc, #240]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80039ce:	4839      	ldr	r0, [pc, #228]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039d0:	f00b fc06 	bl	800f1e0 <HAL_TIM_Base_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80039da:	f7ff fa15 	bl	8002e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039de:	4835      	ldr	r0, [pc, #212]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039e0:	f00b fc55 	bl	800f28e <HAL_TIM_PWM_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80039ea:	f7ff fa0d 	bl	8002e08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80039ee:	2305      	movs	r3, #5
 80039f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80039f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039fa:	4619      	mov	r1, r3
 80039fc:	482d      	ldr	r0, [pc, #180]	; (8003ab4 <MX_TIM8_Init+0x160>)
 80039fe:	f00b feb5 	bl	800f76c <HAL_TIM_SlaveConfigSynchro>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8003a08:	f7ff f9fe 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4825      	ldr	r0, [pc, #148]	; (8003ab4 <MX_TIM8_Init+0x160>)
 8003a20:	f00c fbd8 	bl	80101d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8003a2a:	f7ff f9ed 	bl	8002e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003a2e:	2370      	movs	r3, #112	; 0x70
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValue;
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003a36:	2302      	movs	r3, #2
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a4e:	2208      	movs	r2, #8
 8003a50:	4619      	mov	r1, r3
 8003a52:	4818      	ldr	r0, [pc, #96]	; (8003ab4 <MX_TIM8_Init+0x160>)
 8003a54:	f00b fd7a 	bl	800f54c <HAL_TIM_PWM_ConfigChannel>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003a5e:	f7ff f9d3 	bl	8002e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4807      	ldr	r0, [pc, #28]	; (8003ab4 <MX_TIM8_Init+0x160>)
 8003a98:	f00c fc24 	bl	80102e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 8003aa2:	f7ff f9b1 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003aa6:	4803      	ldr	r0, [pc, #12]	; (8003ab4 <MX_TIM8_Init+0x160>)
 8003aa8:	f000 f892 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 8003aac:	bf00      	nop
 8003aae:	3778      	adds	r7, #120	; 0x78
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	2400572c 	.word	0x2400572c
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_TIM_PWM_MspInit+0x40>)
 8003ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_TIM_PWM_MspInit+0x40>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_TIM_PWM_MspInit+0x40>)
 8003ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40010000 	.word	0x40010000
 8003afc:	58024400 	.word	0x58024400

08003b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <HAL_TIM_Base_MspInit+0xbc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10f      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b18:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003b30:	e03d      	b.n	8003bae <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_TIM_Base_MspInit+0xc4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10f      	bne.n	8003b5c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b42:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
}
 8003b5a:	e028      	b.n	8003bae <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_TIM_Base_MspInit+0xc8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10f      	bne.n	8003b86 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b6e:	f043 0308 	orr.w	r3, r3, #8
 8003b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	e013      	b.n	8003bae <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_TIM_Base_MspInit+0xcc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10e      	bne.n	8003bae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_TIM_Base_MspInit+0xc0>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a5e      	ldr	r2, [pc, #376]	; (8003d68 <HAL_TIM_MspPostInit+0x198>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d120      	bne.n	8003c34 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf8:	4a5c      	ldr	r2, [pc, #368]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8003c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	2302      	movs	r3, #2
 8003c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8003c26:	f107 031c 	add.w	r3, r7, #28
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4850      	ldr	r0, [pc, #320]	; (8003d70 <HAL_TIM_MspPostInit+0x1a0>)
 8003c2e:	f005 ff77 	bl	8009b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c32:	e095      	b.n	8003d60 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4e      	ldr	r2, [pc, #312]	; (8003d74 <HAL_TIM_MspPostInit+0x1a4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d11f      	bne.n	8003c7e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3e:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c44:	4a49      	ldr	r2, [pc, #292]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	4840      	ldr	r0, [pc, #256]	; (8003d78 <HAL_TIM_MspPostInit+0x1a8>)
 8003c78:	f005 ff52 	bl	8009b20 <HAL_GPIO_Init>
}
 8003c7c:	e070      	b.n	8003d60 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3e      	ldr	r2, [pc, #248]	; (8003d7c <HAL_TIM_MspPostInit+0x1ac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d120      	bne.n	8003cca <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c8e:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8003ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 031c 	add.w	r3, r7, #28
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	482f      	ldr	r0, [pc, #188]	; (8003d80 <HAL_TIM_MspPostInit+0x1b0>)
 8003cc4:	f005 ff2c 	bl	8009b20 <HAL_GPIO_Init>
}
 8003cc8:	e04a      	b.n	8003d60 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d120      	bne.n	8003d16 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cda:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 8003cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d00:	2303      	movs	r3, #3
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d04:	2302      	movs	r3, #2
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	481e      	ldr	r0, [pc, #120]	; (8003d88 <HAL_TIM_MspPostInit+0x1b8>)
 8003d10:	f005 ff06 	bl	8009b20 <HAL_GPIO_Init>
}
 8003d14:	e024      	b.n	8003d60 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_TIM_MspPostInit+0x1bc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d11f      	bne.n	8003d60 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_TIM_MspPostInit+0x19c>)
 8003d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 8003d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d50:	2303      	movs	r3, #3
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4807      	ldr	r0, [pc, #28]	; (8003d78 <HAL_TIM_MspPostInit+0x1a8>)
 8003d5c:	f005 fee0 	bl	8009b20 <HAL_GPIO_Init>
}
 8003d60:	bf00      	nop
 8003d62:	3730      	adds	r7, #48	; 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	58020000 	.word	0x58020000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	58020800 	.word	0x58020800
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	58020c00 	.word	0x58020c00
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	58021c00 	.word	0x58021c00
 8003d8c:	40010400 	.word	0x40010400

08003d90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003d96:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <MX_USART1_UART_Init+0x94>)
 8003d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003db6:	220c      	movs	r2, #12
 8003db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dd8:	4811      	ldr	r0, [pc, #68]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dda:	f00c fb01 	bl	80103e0 <HAL_UART_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003de4:	f7ff f810 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003de8:	2100      	movs	r1, #0
 8003dea:	480d      	ldr	r0, [pc, #52]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dec:	f00d fa4e 	bl	801128c <HAL_UARTEx_SetTxFifoThreshold>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003df6:	f7ff f807 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4808      	ldr	r0, [pc, #32]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003dfe:	f00d fa83 	bl	8011308 <HAL_UARTEx_SetRxFifoThreshold>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e08:	f7fe fffe 	bl	8002e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e0c:	4804      	ldr	r0, [pc, #16]	; (8003e20 <MX_USART1_UART_Init+0x90>)
 8003e0e:	f00d fa04 	bl	801121a <HAL_UARTEx_DisableFifoMode>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e18:	f7fe fff6 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	240058a8 	.word	0x240058a8
 8003e24:	40011000 	.word	0x40011000

08003e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0b8      	sub	sp, #224	; 0xe0
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	22bc      	movs	r2, #188	; 0xbc
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f01a ff3b 	bl	801ecc4 <memset>
  if(uartHandle->Instance==USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_UART_MspInit+0xbc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d141      	bne.n	8003edc <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e62:	f107 0310 	add.w	r3, r7, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f007 f886 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e72:	f7fe ffc9 	bl	8002e08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e7e:	f043 0310 	orr.w	r3, r3, #16
 8003e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e86:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e9a:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eb2:	23c0      	movs	r3, #192	; 0xc0
 8003eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eca:	2307      	movs	r3, #7
 8003ecc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <HAL_UART_MspInit+0xc4>)
 8003ed8:	f005 fe22 	bl	8009b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003edc:	bf00      	nop
 8003ede:	37e0      	adds	r7, #224	; 0xe0
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	58020400 	.word	0x58020400

08003ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ef4:	f7fc ff3e 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f00:	e002      	b.n	8003f08 <LoopCopyDataInit>

08003f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f06:	3304      	adds	r3, #4

08003f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f0c:	d3f9      	bcc.n	8003f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f14:	e001      	b.n	8003f1a <LoopFillZerobss>

08003f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f18:	3204      	adds	r2, #4

08003f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f1c:	d3fb      	bcc.n	8003f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f1e:	f01a fe6f 	bl	801ec00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f22:	f7fe fbd1 	bl	80026c8 <main>
  bx  lr
 8003f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f30:	24003620 	.word	0x24003620
  ldr r2, =_sidata
 8003f34:	08029d98 	.word	0x08029d98
  ldr r2, =_sbss
 8003f38:	24003620 	.word	0x24003620
  ldr r4, =_ebss
 8003f3c:	2400b254 	.word	0x2400b254

08003f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC3_IRQHandler>

08003f42 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <LAN8742_RegisterBusIO+0x28>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <LAN8742_RegisterBusIO+0x28>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <LAN8742_RegisterBusIO+0x28>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6e:	e014      	b.n	8003f9a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d17c      	bne.n	80040c0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e01c      	b.n	800401a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f107 0208 	add.w	r2, r7, #8
 8003fe8:	2112      	movs	r1, #18
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	4798      	blx	r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da03      	bge.n	8003ffc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003ff4:	f06f 0304 	mvn.w	r3, #4
 8003ff8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003ffa:	e00b      	b.n	8004014 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d105      	bne.n	8004014 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
         break;
 8004012:	e005      	b.n	8004020 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3301      	adds	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b1f      	cmp	r3, #31
 800401e:	d9df      	bls.n	8003fe0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b1f      	cmp	r3, #31
 8004026:	d902      	bls.n	800402e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004028:	f06f 0302 	mvn.w	r3, #2
 800402c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d145      	bne.n	80040c0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6810      	ldr	r0, [r2, #0]
 800403c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004040:	2100      	movs	r1, #0
 8004042:	4798      	blx	r3
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	db37      	blt.n	80040ba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6810      	ldr	r0, [r2, #0]
 8004052:	f107 0208 	add.w	r2, r7, #8
 8004056:	2100      	movs	r1, #0
 8004058:	4798      	blx	r3
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	db28      	blt.n	80040b2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4798      	blx	r3
 8004066:	4603      	mov	r3, r0
 8004068:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800406a:	e01c      	b.n	80040a6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4798      	blx	r3
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800407e:	d80e      	bhi.n	800409e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6810      	ldr	r0, [r2, #0]
 8004088:	f107 0208 	add.w	r2, r7, #8
 800408c:	2100      	movs	r1, #0
 800408e:	4798      	blx	r3
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	da07      	bge.n	80040a6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8004096:	f06f 0304 	mvn.w	r3, #4
 800409a:	613b      	str	r3, [r7, #16]
                 break;
 800409c:	e010      	b.n	80040c0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800409e:	f06f 0301 	mvn.w	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
               break;
 80040a4:	e00c      	b.n	80040c0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1dd      	bne.n	800406c <LAN8742_Init+0xc6>
 80040b0:	e006      	b.n	80040c0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80040b2:	f06f 0304 	mvn.w	r3, #4
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	e002      	b.n	80040c0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80040ba:	f06f 0303 	mvn.w	r3, #3
 80040be:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d112      	bne.n	80040ec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80040d0:	bf00      	nop
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	4798      	blx	r3
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040e4:	d9f5      	bls.n	80040d2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80040ec:	693b      	ldr	r3, [r7, #16]
 }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6810      	ldr	r0, [r2, #0]
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	2101      	movs	r1, #1
 8004110:	4798      	blx	r3
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	da02      	bge.n	800411e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004118:	f06f 0304 	mvn.w	r3, #4
 800411c:	e06e      	b.n	80041fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6810      	ldr	r0, [r2, #0]
 8004126:	f107 020c 	add.w	r2, r7, #12
 800412a:	2101      	movs	r1, #1
 800412c:	4798      	blx	r3
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	da02      	bge.n	800413a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004134:	f06f 0304 	mvn.w	r3, #4
 8004138:	e060      	b.n	80041fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8004144:	2301      	movs	r3, #1
 8004146:	e059      	b.n	80041fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6810      	ldr	r0, [r2, #0]
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	2100      	movs	r1, #0
 8004156:	4798      	blx	r3
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	da02      	bge.n	8004164 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800415e:	f06f 0304 	mvn.w	r3, #4
 8004162:	e04b      	b.n	80041fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11b      	bne.n	80041a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <LAN8742_GetLinkState+0x90>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004182:	2302      	movs	r3, #2
 8004184:	e03a      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004190:	2303      	movs	r3, #3
 8004192:	e033      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800419e:	2304      	movs	r3, #4
 80041a0:	e02c      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80041a2:	2305      	movs	r3, #5
 80041a4:	e02a      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6810      	ldr	r0, [r2, #0]
 80041ae:	f107 020c 	add.w	r2, r7, #12
 80041b2:	211f      	movs	r1, #31
 80041b4:	4798      	blx	r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da02      	bge.n	80041c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80041bc:	f06f 0304 	mvn.w	r3, #4
 80041c0:	e01c      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80041cc:	2306      	movs	r3, #6
 80041ce:	e015      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 031c 	and.w	r3, r3, #28
 80041d6:	2b18      	cmp	r3, #24
 80041d8:	d101      	bne.n	80041de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80041da:	2302      	movs	r3, #2
 80041dc:	e00e      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 031c 	and.w	r3, r3, #28
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d101      	bne.n	80041ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e007      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 031c 	and.w	r3, r3, #28
 80041f2:	2b14      	cmp	r3, #20
 80041f4:	d101      	bne.n	80041fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80041f6:	2304      	movs	r3, #4
 80041f8:	e000      	b.n	80041fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80041fa:	2305      	movs	r3, #5
    }				
  }
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800420a:	2003      	movs	r0, #3
 800420c:	f001 fb72 	bl	80058f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004210:	f006 fcdc 	bl	800abcc <HAL_RCC_GetSysClockFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_Init+0x68>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	4913      	ldr	r1, [pc, #76]	; (8004270 <HAL_Init+0x6c>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
 800422c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_Init+0x68>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <HAL_Init+0x6c>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <HAL_Init+0x70>)
 8004246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004248:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <HAL_Init+0x74>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800424e:	2000      	movs	r0, #0
 8004250:	f000 f814 	bl	800427c <HAL_InitTick>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e002      	b.n	8004264 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800425e:	f7ff f807 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	58024400 	.word	0x58024400
 8004270:	0802766c 	.word	0x0802766c
 8004274:	24000004 	.word	0x24000004
 8004278:	24000000 	.word	0x24000000

0800427c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_InitTick+0x60>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e021      	b.n	80042d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_InitTick+0x64>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_InitTick+0x60>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4619      	mov	r1, r3
 800429a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800429e:	fbb3 f3f1 	udiv	r3, r3, r1
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fb57 	bl	800595a <HAL_SYSTICK_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00e      	b.n	80042d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b0f      	cmp	r3, #15
 80042ba:	d80a      	bhi.n	80042d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042bc:	2200      	movs	r2, #0
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c4:	f001 fb21 	bl	800590a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042c8:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <HAL_InitTick+0x68>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2400000c 	.word	0x2400000c
 80042e0:	24000000 	.word	0x24000000
 80042e4:	24000008 	.word	0x24000008

080042e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_IncTick+0x20>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_IncTick+0x24>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_IncTick+0x24>)
 80042fa:	6013      	str	r3, [r2, #0]
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2400000c 	.word	0x2400000c
 800430c:	24005938 	.word	0x24005938

08004310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return uwTick;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_GetTick+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	24005938 	.word	0x24005938

08004328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff ffee 	bl	8004310 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004340:	d005      	beq.n	800434e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_Delay+0x44>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800434e:	bf00      	nop
 8004350:	f7ff ffde 	bl	8004310 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d8f7      	bhi.n	8004350 <HAL_Delay+0x28>
  {
  }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2400000c 	.word	0x2400000c

08004370 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_GetREVID+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0c1b      	lsrs	r3, r3, #16
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	5c001000 	.word	0x5c001000

08004388 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004398:	4904      	ldr	r1, [pc, #16]	; (80043ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	58000400 	.word	0x58000400

080043b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	4904      	ldr	r1, [pc, #16]	; (80043d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	58000400 	.word	0x58000400

080043dc <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ec:	4904      	ldr	r1, [pc, #16]	; (8004400 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	52004000 	.word	0x52004000

08004404 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3360      	adds	r3, #96	; 0x60
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	430b      	orrs	r3, r1
 800449a:	431a      	orrs	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3360      	adds	r3, #96	; 0x60
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	431a      	orrs	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	601a      	str	r2, [r3, #0]
  }
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3330      	adds	r3, #48	; 0x30
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	211f      	movs	r1, #31
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0e9b      	lsrs	r3, r3, #26
 800454c:	f003 011f 	and.w	r1, r3, #31
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	431a      	orrs	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3314      	adds	r3, #20
 800457c:	461a      	mov	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0e5b      	lsrs	r3, r3, #25
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2107      	movs	r1, #7
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	401a      	ands	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0d1b      	lsrs	r3, r3, #20
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045dc:	43db      	mvns	r3, r3
 80045de:	401a      	ands	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0318 	and.w	r3, r3, #24
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045e8:	40d9      	lsrs	r1, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	400b      	ands	r3, r1
 80045ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	000fffff 	.word	0x000fffff

0800460c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <LL_ADC_DisableDeepPowerDown+0x20>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6093      	str	r3, [r2, #8]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	5fffffc0 	.word	0x5fffffc0

08004630 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004644:	d101      	bne.n	800464a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <LL_ADC_EnableInternalRegulator+0x24>)
 8004666:	4013      	ands	r3, r2
 8004668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	6fffffc0 	.word	0x6fffffc0

08004680 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004694:	d101      	bne.n	800469a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <LL_ADC_Disable+0x24>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	f043 0202 	orr.w	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	7fffffc0 	.word	0x7fffffc0

080046d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <LL_ADC_IsEnabled+0x18>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_ADC_IsEnabled+0x1a>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d101      	bne.n	800470e <LL_ADC_IsDisableOngoing+0x18>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <LL_ADC_IsDisableOngoing+0x1a>
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d101      	bne.n	8004734 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d101      	bne.n	800475a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e18e      	b.n	8004aa0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fc fcfb 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff41 	bl	8004630 <LL_ADC_IsDeepPowerDownEnabled>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff27 	bl	800460c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff5c 	bl	8004680 <LL_ADC_IsInternalRegulatorEnabled>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d114      	bne.n	80047f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff40 	bl	8004658 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d8:	4b9a      	ldr	r3, [pc, #616]	; (8004a44 <HAL_ADC_Init+0x2dc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	4a9a      	ldr	r2, [pc, #616]	; (8004a48 <HAL_ADC_Init+0x2e0>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047ea:	e002      	b.n	80047f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f9      	bne.n	80047ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff3f 	bl	8004680 <LL_ADC_IsInternalRegulatorEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0210 	orr.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff77 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 800482e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 8128 	bne.w	8004a8e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8124 	bne.w	8004a8e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800484e:	f043 0202 	orr.w	r2, r3, #2
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff38 	bl	80046d0 <LL_ADC_IsEnabled>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d136      	bne.n	80048d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a78      	ldr	r2, [pc, #480]	; (8004a4c <HAL_ADC_Init+0x2e4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_ADC_Init+0x112>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a76      	ldr	r2, [pc, #472]	; (8004a50 <HAL_ADC_Init+0x2e8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10e      	bne.n	8004898 <HAL_ADC_Init+0x130>
 800487a:	4874      	ldr	r0, [pc, #464]	; (8004a4c <HAL_ADC_Init+0x2e4>)
 800487c:	f7ff ff28 	bl	80046d0 <LL_ADC_IsEnabled>
 8004880:	4604      	mov	r4, r0
 8004882:	4873      	ldr	r0, [pc, #460]	; (8004a50 <HAL_ADC_Init+0x2e8>)
 8004884:	f7ff ff24 	bl	80046d0 <LL_ADC_IsEnabled>
 8004888:	4603      	mov	r3, r0
 800488a:	4323      	orrs	r3, r4
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e008      	b.n	80048aa <HAL_ADC_Init+0x142>
 8004898:	486e      	ldr	r0, [pc, #440]	; (8004a54 <HAL_ADC_Init+0x2ec>)
 800489a:	f7ff ff19 	bl	80046d0 <LL_ADC_IsEnabled>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a66      	ldr	r2, [pc, #408]	; (8004a4c <HAL_ADC_Init+0x2e4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_ADC_Init+0x15a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a64      	ldr	r2, [pc, #400]	; (8004a50 <HAL_ADC_Init+0x2e8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_ADC_Init+0x15e>
 80048c2:	4a65      	ldr	r2, [pc, #404]	; (8004a58 <HAL_ADC_Init+0x2f0>)
 80048c4:	e000      	b.n	80048c8 <HAL_ADC_Init+0x160>
 80048c6:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_ADC_Init+0x2f4>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7ff fd98 	bl	8004404 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80048d4:	f7ff fd4c 	bl	8004370 <HAL_GetREVID>
 80048d8:	4603      	mov	r3, r0
 80048da:	f241 0203 	movw	r2, #4099	; 0x1003
 80048de:	4293      	cmp	r3, r2
 80048e0:	d914      	bls.n	800490c <HAL_ADC_Init+0x1a4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d110      	bne.n	800490c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7d5b      	ldrb	r3, [r3, #21]
 80048ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80048f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80048fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7f1b      	ldrb	r3, [r3, #28]
 8004900:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004902:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004904:	f043 030c 	orr.w	r3, r3, #12
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e00d      	b.n	8004928 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7d5b      	ldrb	r3, [r3, #21]
 8004910:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004916:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800491c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7f1b      	ldrb	r3, [r3, #28]
 8004922:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7f1b      	ldrb	r3, [r3, #28]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	3b01      	subs	r3, #1
 8004936:	045b      	lsls	r3, r3, #17
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <HAL_ADC_Init+0x2f8>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	430b      	orrs	r3, r1
 800496c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fed2 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 8004978:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fedf 	bl	8004742 <LL_ADC_INJ_IsConversionOngoing>
 8004984:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d14a      	bne.n	8004a22 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d147      	bne.n	8004a22 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7d1b      	ldrb	r3, [r3, #20]
 8004996:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_ADC_Init+0x2fc>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d11b      	bne.n	80049f6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_ADC_Init+0x300>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049d2:	3a01      	subs	r2, #1
 80049d4:	0411      	lsls	r1, r2, #16
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049e6:	430a      	orrs	r2, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	611a      	str	r2, [r3, #16]
 80049f4:	e007      	b.n	8004a06 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fbf3 	bl	8005208 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d120      	bne.n	8004a6c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f023 010f 	bic.w	r1, r3, #15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
 8004a42:	e01b      	b.n	8004a7c <HAL_ADC_Init+0x314>
 8004a44:	24000000 	.word	0x24000000
 8004a48:	053e2d63 	.word	0x053e2d63
 8004a4c:	40022000 	.word	0x40022000
 8004a50:	40022100 	.word	0x40022100
 8004a54:	58026000 	.word	0x58026000
 8004a58:	40022300 	.word	0x40022300
 8004a5c:	58026300 	.word	0x58026300
 8004a60:	fff0c003 	.word	0xfff0c003
 8004a64:	ffffbffc 	.word	0xffffbffc
 8004a68:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 020f 	bic.w	r2, r2, #15
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f023 0303 	bic.w	r3, r3, #3
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004a8c:	e007      	b.n	8004a9e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3724      	adds	r7, #36	; 0x24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b0a1      	sub	sp, #132	; 0x84
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a9d      	ldr	r2, [pc, #628]	; (8004d38 <HAL_ADC_ConfigChannel+0x290>)
 8004ac2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x2a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e321      	b.n	8005116 <HAL_ADC_ConfigChannel+0x66e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fe1c 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 8306 	bne.w	80050f8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x62>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0e9b      	lsrs	r3, r3, #26
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2201      	movs	r2, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	e016      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x90>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004b22:	2320      	movs	r3, #32
 8004b24:	e003      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2201      	movs	r2, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	69d1      	ldr	r1, [r2, #28]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	430b      	orrs	r3, r1
 8004b44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f7ff fcde 	bl	8004514 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fddd 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 8004b62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fdea 	bl	8004742 <LL_ADC_INJ_IsConversionOngoing>
 8004b6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 80b3 	bne.w	8004cde <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80af 	bne.w	8004cde <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7ff fced 	bl	800456c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_ADC_ConfigChannel+0x294>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x110>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	e01d      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x14c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x136>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	e00a      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x14c>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d027      	beq.n	8004c4e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6919      	ldr	r1, [r3, #16]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0c:	f7ff fc2e 	bl	800446c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6919      	ldr	r1, [r3, #16]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7e5b      	ldrb	r3, [r3, #25]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x17e>
 8004c20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c24:	e000      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x180>
 8004c26:	2300      	movs	r3, #0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f7ff fc58 	bl	80044de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	7e1b      	ldrb	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d102      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x19c>
 8004c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c42:	e000      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x19e>
 8004c44:	2300      	movs	r3, #0
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7ff fc30 	bl	80044ac <LL_ADC_SetDataRightShift>
 8004c4c:	e047      	b.n	8004cde <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	069b      	lsls	r3, r3, #26
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d107      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	069b      	lsls	r3, r3, #26
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d107      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	069b      	lsls	r3, r3, #26
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d107      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cb8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	069b      	lsls	r3, r3, #26
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d107      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cdc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fcf4 	bl	80046d0 <LL_ADC_IsEnabled>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 820d 	bne.w	800510a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f7ff fc61 	bl	80045c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <HAL_ADC_ConfigChannel+0x290>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f040 8133 	bne.w	8004f74 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x298>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	0e9b      	lsrs	r3, r3, #26
 8004d24:	3301      	adds	r3, #1
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	bf94      	ite	ls
 8004d2e:	2301      	movls	r3, #1
 8004d30:	2300      	movhi	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e01e      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x2cc>
 8004d36:	bf00      	nop
 8004d38:	47ff0000 	.word	0x47ff0000
 8004d3c:	5c001000 	.word	0x5c001000
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004d58:	2320      	movs	r3, #32
 8004d5a:	e003      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	3301      	adds	r3, #1
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	bf94      	ite	ls
 8004d6e:	2301      	movls	r3, #1
 8004d70:	2300      	movhi	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d079      	beq.n	8004e6c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x2ec>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	0e9b      	lsrs	r3, r3, #26
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	069b      	lsls	r3, r3, #26
 8004d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d92:	e015      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x318>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004dac:	2320      	movs	r3, #32
 8004dae:	e003      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	069b      	lsls	r3, r3, #26
 8004dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x338>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	e017      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x368>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	fa93 f3a3 	rbit	r3, r3
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	e003      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfe:	fab3 f383 	clz	r3, r3
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	3301      	adds	r3, #1
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	ea42 0103 	orr.w	r1, r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x38e>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0e9b      	lsrs	r3, r3, #26
 8004e26:	3301      	adds	r3, #1
 8004e28:	f003 021f 	and.w	r2, r3, #31
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	051b      	lsls	r3, r3, #20
 8004e34:	e018      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x3c0>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004e4e:	2320      	movs	r3, #32
 8004e50:	e003      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	e07e      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x3e0>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	0e9b      	lsrs	r3, r3, #26
 8004e7e:	3301      	adds	r3, #1
 8004e80:	069b      	lsls	r3, r3, #26
 8004e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e86:	e015      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x40c>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	e003      	b.n	8004eac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	fab3 f383 	clz	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	3301      	adds	r3, #1
 8004eae:	069b      	lsls	r3, r3, #26
 8004eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x42c>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2101      	movs	r1, #1
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	e017      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x45c>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004eec:	2320      	movs	r3, #32
 8004eee:	e003      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2101      	movs	r1, #1
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x488>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	0e9b      	lsrs	r3, r3, #26
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f003 021f 	and.w	r2, r3, #31
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	3b1e      	subs	r3, #30
 8004f28:	051b      	lsls	r3, r3, #20
 8004f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	e01b      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x4c0>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
  return result;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004f48:	2320      	movs	r3, #32
 8004f4a:	e003      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	f003 021f 	and.w	r2, r3, #31
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	3b1e      	subs	r3, #30
 8004f62:	051b      	lsls	r3, r3, #20
 8004f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	6892      	ldr	r2, [r2, #8]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f7ff fafc 	bl	800456c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f280 80c6 	bge.w	800510a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a67      	ldr	r2, [pc, #412]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_ADC_ConfigChannel+0x4ea>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a65      	ldr	r2, [pc, #404]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x4ee>
 8004f92:	4b65      	ldr	r3, [pc, #404]	; (8005128 <HAL_ADC_ConfigChannel+0x680>)
 8004f94:	e000      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x4f0>
 8004f96:	4b65      	ldr	r3, [pc, #404]	; (800512c <HAL_ADC_ConfigChannel+0x684>)
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fa59 	bl	8004450 <LL_ADC_GetCommonPathInternalCh>
 8004f9e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5e      	ldr	r2, [pc, #376]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_ADC_ConfigChannel+0x50c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5d      	ldr	r2, [pc, #372]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10e      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x52a>
 8004fb4:	485a      	ldr	r0, [pc, #360]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 8004fb6:	f7ff fb8b 	bl	80046d0 <LL_ADC_IsEnabled>
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4859      	ldr	r0, [pc, #356]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8004fbe:	f7ff fb87 	bl	80046d0 <LL_ADC_IsEnabled>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4323      	orrs	r3, r4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e008      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x53c>
 8004fd2:	4857      	ldr	r0, [pc, #348]	; (8005130 <HAL_ADC_ConfigChannel+0x688>)
 8004fd4:	f7ff fb7c 	bl	80046d0 <LL_ADC_IsEnabled>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07d      	beq.n	80050e4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a51      	ldr	r2, [pc, #324]	; (8005134 <HAL_ADC_ConfigChannel+0x68c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d130      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x5ac>
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d12b      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a4b      	ldr	r2, [pc, #300]	; (8005130 <HAL_ADC_ConfigChannel+0x688>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f040 8081 	bne.w	800510a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a44      	ldr	r2, [pc, #272]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_ADC_ConfigChannel+0x574>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a43      	ldr	r2, [pc, #268]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x578>
 800501c:	4a42      	ldr	r2, [pc, #264]	; (8005128 <HAL_ADC_ConfigChannel+0x680>)
 800501e:	e000      	b.n	8005022 <HAL_ADC_ConfigChannel+0x57a>
 8005020:	4a42      	ldr	r2, [pc, #264]	; (800512c <HAL_ADC_ConfigChannel+0x684>)
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7ff f9fd 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005030:	4b41      	ldr	r3, [pc, #260]	; (8005138 <HAL_ADC_ConfigChannel+0x690>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	099b      	lsrs	r3, r3, #6
 8005036:	4a41      	ldr	r2, [pc, #260]	; (800513c <HAL_ADC_ConfigChannel+0x694>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005044:	e002      	b.n	800504c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3b01      	subs	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f9      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005052:	e05a      	b.n	800510a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <HAL_ADC_ConfigChannel+0x698>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d11e      	bne.n	800509c <HAL_ADC_ConfigChannel+0x5f4>
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d119      	bne.n	800509c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a30      	ldr	r2, [pc, #192]	; (8005130 <HAL_ADC_ConfigChannel+0x688>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d14b      	bne.n	800510a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_ADC_ConfigChannel+0x5de>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a28      	ldr	r2, [pc, #160]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d101      	bne.n	800508a <HAL_ADC_ConfigChannel+0x5e2>
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_ADC_ConfigChannel+0x680>)
 8005088:	e000      	b.n	800508c <HAL_ADC_ConfigChannel+0x5e4>
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_ADC_ConfigChannel+0x684>)
 800508c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7ff f9c8 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800509a:	e036      	b.n	800510a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <HAL_ADC_ConfigChannel+0x69c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d131      	bne.n	800510a <HAL_ADC_ConfigChannel+0x662>
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d12c      	bne.n	800510a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_ADC_ConfigChannel+0x688>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d127      	bne.n	800510a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <HAL_ADC_ConfigChannel+0x678>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_ADC_ConfigChannel+0x626>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x62a>
 80050ce:	4a16      	ldr	r2, [pc, #88]	; (8005128 <HAL_ADC_ConfigChannel+0x680>)
 80050d0:	e000      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x62c>
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_ADC_ConfigChannel+0x684>)
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7ff f9a4 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
 80050e2:	e012      	b.n	800510a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050f6:	e008      	b.n	800510a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005116:	4618      	mov	r0, r3
 8005118:	3784      	adds	r7, #132	; 0x84
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}
 800511e:	bf00      	nop
 8005120:	40022000 	.word	0x40022000
 8005124:	40022100 	.word	0x40022100
 8005128:	40022300 	.word	0x40022300
 800512c:	58026300 	.word	0x58026300
 8005130:	58026000 	.word	0x58026000
 8005134:	cb840000 	.word	0xcb840000
 8005138:	24000000 	.word	0x24000000
 800513c:	053e2d63 	.word	0x053e2d63
 8005140:	c7520000 	.word	0xc7520000
 8005144:	cfb80000 	.word	0xcfb80000

08005148 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff face 	bl	80046f6 <LL_ADC_IsDisableOngoing>
 800515a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fab5 	bl	80046d0 <LL_ADC_IsEnabled>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d047      	beq.n	80051fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d144      	bne.n	80051fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 030d 	and.w	r3, r3, #13
 800517c:	2b01      	cmp	r3, #1
 800517e:	d10c      	bne.n	800519a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fa8f 	bl	80046a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2203      	movs	r2, #3
 8005190:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005192:	f7ff f8bd 	bl	8004310 <HAL_GetTick>
 8005196:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005198:	e029      	b.n	80051ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f043 0210 	orr.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e023      	b.n	80051fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051b6:	f7ff f8ab 	bl	8004310 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d914      	bls.n	80051ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e007      	b.n	80051fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1dc      	bne.n	80051b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a79      	ldr	r2, [pc, #484]	; (80053fc <ADC_ConfigureBoostMode+0x1f4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <ADC_ConfigureBoostMode+0x1c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a78      	ldr	r2, [pc, #480]	; (8005400 <ADC_ConfigureBoostMode+0x1f8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d109      	bne.n	8005238 <ADC_ConfigureBoostMode+0x30>
 8005224:	4b77      	ldr	r3, [pc, #476]	; (8005404 <ADC_ConfigureBoostMode+0x1fc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e008      	b.n	800524a <ADC_ConfigureBoostMode+0x42>
 8005238:	4b73      	ldr	r3, [pc, #460]	; (8005408 <ADC_ConfigureBoostMode+0x200>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01c      	beq.n	8005288 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800524e:	f005 fe37 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 8005252:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800525c:	d010      	beq.n	8005280 <ADC_ConfigureBoostMode+0x78>
 800525e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005262:	d871      	bhi.n	8005348 <ADC_ConfigureBoostMode+0x140>
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d002      	beq.n	8005270 <ADC_ConfigureBoostMode+0x68>
 800526a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800526e:	d16b      	bne.n	8005348 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	60fb      	str	r3, [r7, #12]
        break;
 800527e:	e066      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	60fb      	str	r3, [r7, #12]
        break;
 8005286:	e062      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005288:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800528c:	f006 fdb4 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005290:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800529a:	d051      	beq.n	8005340 <ADC_ConfigureBoostMode+0x138>
 800529c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052a0:	d854      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052a6:	d047      	beq.n	8005338 <ADC_ConfigureBoostMode+0x130>
 80052a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052ac:	d84e      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052b2:	d03d      	beq.n	8005330 <ADC_ConfigureBoostMode+0x128>
 80052b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052b8:	d848      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052be:	d033      	beq.n	8005328 <ADC_ConfigureBoostMode+0x120>
 80052c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052c4:	d842      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052ca:	d029      	beq.n	8005320 <ADC_ConfigureBoostMode+0x118>
 80052cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052d0:	d83c      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052d6:	d01a      	beq.n	800530e <ADC_ConfigureBoostMode+0x106>
 80052d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052dc:	d836      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80052e2:	d014      	beq.n	800530e <ADC_ConfigureBoostMode+0x106>
 80052e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80052e8:	d830      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ee:	d00e      	beq.n	800530e <ADC_ConfigureBoostMode+0x106>
 80052f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f4:	d82a      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 80052f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052fa:	d008      	beq.n	800530e <ADC_ConfigureBoostMode+0x106>
 80052fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005300:	d824      	bhi.n	800534c <ADC_ConfigureBoostMode+0x144>
 8005302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005306:	d002      	beq.n	800530e <ADC_ConfigureBoostMode+0x106>
 8005308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800530c:	d11e      	bne.n	800534c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	0c9b      	lsrs	r3, r3, #18
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	60fb      	str	r3, [r7, #12]
        break;
 800531e:	e016      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
        break;
 8005326:	e012      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	60fb      	str	r3, [r7, #12]
        break;
 800532e:	e00e      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	099b      	lsrs	r3, r3, #6
 8005334:	60fb      	str	r3, [r7, #12]
        break;
 8005336:	e00a      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	09db      	lsrs	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
        break;
 800533e:	e006      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	60fb      	str	r3, [r7, #12]
        break;
 8005346:	e002      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
        break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800534c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800534e:	f7ff f80f 	bl	8004370 <HAL_GetREVID>
 8005352:	4603      	mov	r3, r0
 8005354:	f241 0203 	movw	r2, #4099	; 0x1003
 8005358:	4293      	cmp	r3, r2
 800535a:	d815      	bhi.n	8005388 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a2b      	ldr	r2, [pc, #172]	; (800540c <ADC_ConfigureBoostMode+0x204>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d908      	bls.n	8005376 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005372:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005374:	e03e      	b.n	80053f4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005384:	609a      	str	r2, [r3, #8]
}
 8005386:	e035      	b.n	80053f4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <ADC_ConfigureBoostMode+0x208>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d808      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053a4:	609a      	str	r2, [r3, #8]
}
 80053a6:	e025      	b.n	80053f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <ADC_ConfigureBoostMode+0x20c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d80a      	bhi.n	80053c6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	e016      	b.n	80053f4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <ADC_ConfigureBoostMode+0x210>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d80a      	bhi.n	80053e4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	e007      	b.n	80053f4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40022000 	.word	0x40022000
 8005400:	40022100 	.word	0x40022100
 8005404:	40022300 	.word	0x40022300
 8005408:	58026300 	.word	0x58026300
 800540c:	01312d00 	.word	0x01312d00
 8005410:	005f5e10 	.word	0x005f5e10
 8005414:	00bebc20 	.word	0x00bebc20
 8005418:	017d7840 	.word	0x017d7840

0800541c <LL_ADC_IsEnabled>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <LL_ADC_IsEnabled+0x18>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <LL_ADC_IsEnabled+0x1a>
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <LL_ADC_StartCalibration>:
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <LL_ADC_StartCalibration+0x38>)
 8005456:	4013      	ands	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005464:	430a      	orrs	r2, r1
 8005466:	4313      	orrs	r3, r2
 8005468:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	3ffeffc0 	.word	0x3ffeffc0

08005480 <LL_ADC_IsCalibrationOnGoing>:
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005494:	d101      	bne.n	800549a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_ADC_REG_IsConversionOngoing>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d101      	bne.n	80054c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_ADCEx_Calibration_Start+0x1e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e04c      	b.n	8005588 <HAL_ADCEx_Calibration_Start+0xb8>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff fe26 	bl	8005148 <ADC_Disable>
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d135      	bne.n	8005572 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <HAL_ADCEx_Calibration_Start+0xc0>)
 800550c:	4013      	ands	r3, r2
 800550e:	f043 0202 	orr.w	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ff90 	bl	8005444 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005524:	e014      	b.n	8005550 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3301      	adds	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d30d      	bcc.n	8005550 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	f023 0312 	bic.w	r3, r3, #18
 800553c:	f043 0210 	orr.w	r2, r3, #16
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e01b      	b.n	8005588 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff93 	bl	8005480 <LL_ADC_IsCalibrationOnGoing>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e2      	bne.n	8005526 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f023 0303 	bic.w	r3, r3, #3
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
 8005570:	e005      	b.n	800557e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f043 0210 	orr.w	r2, r3, #16
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	ffffeefd 	.word	0xffffeefd
 8005594:	25c3f800 	.word	0x25c3f800

08005598 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b09f      	sub	sp, #124	; 0x7c
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0be      	b.n	8005734 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80055be:	2300      	movs	r3, #0
 80055c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5c      	ldr	r2, [pc, #368]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d102      	bne.n	80055d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055d0:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	e001      	b.n	80055da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e09d      	b.n	8005734 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ff54 	bl	80054a8 <LL_ADC_REG_IsConversionOngoing>
 8005600:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff ff4e 	bl	80054a8 <LL_ADC_REG_IsConversionOngoing>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d17f      	bne.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005614:	2b00      	cmp	r3, #0
 8005616:	d17c      	bne.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a47      	ldr	r2, [pc, #284]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a46      	ldr	r2, [pc, #280]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800562c:	4b45      	ldr	r3, [pc, #276]	; (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800562e:	e000      	b.n	8005632 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005630:	4b45      	ldr	r3, [pc, #276]	; (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005632:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d039      	beq.n	80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	431a      	orrs	r2, r3
 800564a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3a      	ldr	r2, [pc, #232]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a38      	ldr	r2, [pc, #224]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10e      	bne.n	8005680 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005662:	4836      	ldr	r0, [pc, #216]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005664:	f7ff feda 	bl	800541c <LL_ADC_IsEnabled>
 8005668:	4604      	mov	r4, r0
 800566a:	4835      	ldr	r0, [pc, #212]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800566c:	f7ff fed6 	bl	800541c <LL_ADC_IsEnabled>
 8005670:	4603      	mov	r3, r0
 8005672:	4323      	orrs	r3, r4
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e008      	b.n	8005692 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005680:	4832      	ldr	r0, [pc, #200]	; (800574c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005682:	f7ff fecb 	bl	800541c <LL_ADC_IsEnabled>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d047      	beq.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	4b2d      	ldr	r3, [pc, #180]	; (8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800569c:	4013      	ands	r3, r2
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	431a      	orrs	r2, r3
 80056aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056ae:	e03a      	b.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80056b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10e      	bne.n	80056ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80056d0:	481a      	ldr	r0, [pc, #104]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056d2:	f7ff fea3 	bl	800541c <LL_ADC_IsEnabled>
 80056d6:	4604      	mov	r4, r0
 80056d8:	4819      	ldr	r0, [pc, #100]	; (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056da:	f7ff fe9f 	bl	800541c <LL_ADC_IsEnabled>
 80056de:	4603      	mov	r3, r0
 80056e0:	4323      	orrs	r3, r4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bf0c      	ite	eq
 80056e6:	2301      	moveq	r3, #1
 80056e8:	2300      	movne	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e008      	b.n	8005700 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80056ee:	4817      	ldr	r0, [pc, #92]	; (800574c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80056f0:	f7ff fe94 	bl	800541c <LL_ADC_IsEnabled>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800570a:	4013      	ands	r3, r2
 800570c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005710:	e009      	b.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005724:	e000      	b.n	8005728 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005726:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005734:	4618      	mov	r0, r3
 8005736:	377c      	adds	r7, #124	; 0x7c
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}
 800573c:	40022000 	.word	0x40022000
 8005740:	40022100 	.word	0x40022100
 8005744:	40022300 	.word	0x40022300
 8005748:	58026300 	.word	0x58026300
 800574c:	58026000 	.word	0x58026000
 8005750:	fffff0e0 	.word	0xfffff0e0

08005754 <__NVIC_SetPriorityGrouping>:
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <__NVIC_SetPriorityGrouping+0x40>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005770:	4013      	ands	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <__NVIC_SetPriorityGrouping+0x44>)
 800577e:	4313      	orrs	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005782:	4a04      	ldr	r2, [pc, #16]	; (8005794 <__NVIC_SetPriorityGrouping+0x40>)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	60d3      	str	r3, [r2, #12]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000ed00 	.word	0xe000ed00
 8005798:	05fa0000 	.word	0x05fa0000

0800579c <__NVIC_GetPriorityGrouping>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <__NVIC_GetPriorityGrouping+0x18>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	f003 0307 	and.w	r3, r3, #7
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_EnableIRQ>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db0b      	blt.n	80057e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	4907      	ldr	r1, [pc, #28]	; (80057f0 <__NVIC_EnableIRQ+0x38>)
 80057d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2001      	movs	r0, #1
 80057da:	fa00 f202 	lsl.w	r2, r0, r2
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000e100 	.word	0xe000e100

080057f4 <__NVIC_SetPriority>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	6039      	str	r1, [r7, #0]
 80057fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db0a      	blt.n	800581e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	490c      	ldr	r1, [pc, #48]	; (8005840 <__NVIC_SetPriority+0x4c>)
 800580e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	440b      	add	r3, r1
 8005818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800581c:	e00a      	b.n	8005834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4908      	ldr	r1, [pc, #32]	; (8005844 <__NVIC_SetPriority+0x50>)
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3b04      	subs	r3, #4
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	440b      	add	r3, r1
 8005832:	761a      	strb	r2, [r3, #24]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000e100 	.word	0xe000e100
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <NVIC_EncodePriority>:
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	bf28      	it	cs
 8005866:	2304      	movcs	r3, #4
 8005868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3304      	adds	r3, #4
 800586e:	2b06      	cmp	r3, #6
 8005870:	d902      	bls.n	8005878 <NVIC_EncodePriority+0x30>
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3b03      	subs	r3, #3
 8005876:	e000      	b.n	800587a <NVIC_EncodePriority+0x32>
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800587c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43da      	mvns	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	401a      	ands	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43d9      	mvns	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	4313      	orrs	r3, r2
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3724      	adds	r7, #36	; 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c0:	d301      	bcc.n	80058c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058c2:	2301      	movs	r3, #1
 80058c4:	e00f      	b.n	80058e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <SysTick_Config+0x40>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ce:	210f      	movs	r1, #15
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d4:	f7ff ff8e 	bl	80057f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <SysTick_Config+0x40>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <SysTick_Config+0x40>)
 80058e0:	2207      	movs	r2, #7
 80058e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010

080058f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff29 	bl	8005754 <__NVIC_SetPriorityGrouping>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	4603      	mov	r3, r0
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005918:	f7ff ff40 	bl	800579c <__NVIC_GetPriorityGrouping>
 800591c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	6978      	ldr	r0, [r7, #20]
 8005924:	f7ff ff90 	bl	8005848 <NVIC_EncodePriority>
 8005928:	4602      	mov	r2, r0
 800592a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff ff5f 	bl	80057f4 <__NVIC_SetPriority>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	4603      	mov	r3, r0
 8005946:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff33 	bl	80057b8 <__NVIC_EnableIRQ>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ffa4 	bl	80058b0 <SysTick_Config>
 8005968:	4603      	mov	r3, r0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005978:	f3bf 8f5f 	dmb	sy
}
 800597c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <HAL_MPU_Disable+0x28>)
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	4a06      	ldr	r2, [pc, #24]	; (800599c <HAL_MPU_Disable+0x28>)
 8005984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005988:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_MPU_Disable+0x2c>)
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000ed00 	.word	0xe000ed00
 80059a0:	e000ed90 	.word	0xe000ed90

080059a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80059ac:	4a0b      	ldr	r2, [pc, #44]	; (80059dc <HAL_MPU_Enable+0x38>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_MPU_Enable+0x3c>)
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <HAL_MPU_Enable+0x3c>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80059c2:	f3bf 8f4f 	dsb	sy
}
 80059c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059c8:	f3bf 8f6f 	isb	sy
}
 80059cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	e000ed90 	.word	0xe000ed90
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	785a      	ldrb	r2, [r3, #1]
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_MPU_ConfigRegion+0x84>)
 80059f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d029      	beq.n	8005a50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_MPU_ConfigRegion+0x84>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7b1b      	ldrb	r3, [r3, #12]
 8005a08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7adb      	ldrb	r3, [r3, #11]
 8005a0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	7a9b      	ldrb	r3, [r3, #10]
 8005a16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	7b5b      	ldrb	r3, [r3, #13]
 8005a1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7b9b      	ldrb	r3, [r3, #14]
 8005a26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7bdb      	ldrb	r3, [r3, #15]
 8005a2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7a5b      	ldrb	r3, [r3, #9]
 8005a36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7a1b      	ldrb	r3, [r3, #8]
 8005a3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005a40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a48:	4a07      	ldr	r2, [pc, #28]	; (8005a68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005a4e:	e005      	b.n	8005a5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_MPU_ConfigRegion+0x84>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_MPU_ConfigRegion+0x84>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed90 	.word	0xe000ed90

08005a6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <HAL_GetCurrentCPUID+0x24>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d101      	bne.n	8005a82 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e000      	b.n	8005a84 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005a82:	2301      	movs	r3, #1
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e054      	b.n	8005b50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7f5b      	ldrb	r3, [r3, #29]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fd04 	bl	80014c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <HAL_CRC_Init+0xc4>)
 8005ad0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0218 	bic.w	r2, r2, #24
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	e00c      	b.n	8005afe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f834 	bl	8005b5c <HAL_CRCEx_Polynomial_Set>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e028      	b.n	8005b50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	795b      	ldrb	r3, [r3, #5]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0e:	611a      	str	r2, [r3, #16]
 8005b10:	e004      	b.n	8005b1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6912      	ldr	r2, [r2, #16]
 8005b1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	04c11db7 	.word	0x04c11db7

08005b5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005b6c:	231f      	movs	r3, #31
 8005b6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005b70:	bf00      	nop
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	613a      	str	r2, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <HAL_CRCEx_Polynomial_Set+0x34>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_CRCEx_Polynomial_Set+0x16>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b18      	cmp	r3, #24
 8005b94:	d846      	bhi.n	8005c24 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005c2b 	.word	0x08005c2b
 8005ba0:	08005c25 	.word	0x08005c25
 8005ba4:	08005c25 	.word	0x08005c25
 8005ba8:	08005c25 	.word	0x08005c25
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c25 	.word	0x08005c25
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005c19 	.word	0x08005c19
 8005bc0:	08005c25 	.word	0x08005c25
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005c25 	.word	0x08005c25
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c25 	.word	0x08005c25
 8005be4:	08005c25 	.word	0x08005c25
 8005be8:	08005c25 	.word	0x08005c25
 8005bec:	08005c25 	.word	0x08005c25
 8005bf0:	08005c25 	.word	0x08005c25
 8005bf4:	08005c25 	.word	0x08005c25
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c01 	.word	0x08005c01
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d913      	bls.n	8005c2e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c0a:	e010      	b.n	8005c2e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b07      	cmp	r3, #7
 8005c10:	d90f      	bls.n	8005c32 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c16:	e00c      	b.n	8005c32 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2b0f      	cmp	r3, #15
 8005c1c:	d90b      	bls.n	8005c36 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c22:	e008      	b.n	8005c36 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	e006      	b.n	8005c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005c36:	bf00      	nop
  }
  if (status == HAL_OK)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 0118 	bic.w	r1, r3, #24
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7fe fb4e 	bl	8004310 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e316      	b.n	80062ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a66      	ldr	r2, [pc, #408]	; (8005e20 <HAL_DMA_Init+0x1b8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d04a      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <HAL_DMA_Init+0x1bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d045      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a63      	ldr	r2, [pc, #396]	; (8005e28 <HAL_DMA_Init+0x1c0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d040      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a62      	ldr	r2, [pc, #392]	; (8005e2c <HAL_DMA_Init+0x1c4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d03b      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a60      	ldr	r2, [pc, #384]	; (8005e30 <HAL_DMA_Init+0x1c8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d036      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a5f      	ldr	r2, [pc, #380]	; (8005e34 <HAL_DMA_Init+0x1cc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d031      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5d      	ldr	r2, [pc, #372]	; (8005e38 <HAL_DMA_Init+0x1d0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02c      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a5c      	ldr	r2, [pc, #368]	; (8005e3c <HAL_DMA_Init+0x1d4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d027      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5a      	ldr	r2, [pc, #360]	; (8005e40 <HAL_DMA_Init+0x1d8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d022      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a59      	ldr	r2, [pc, #356]	; (8005e44 <HAL_DMA_Init+0x1dc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d01d      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a57      	ldr	r2, [pc, #348]	; (8005e48 <HAL_DMA_Init+0x1e0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d018      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <HAL_DMA_Init+0x1e4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d013      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a54      	ldr	r2, [pc, #336]	; (8005e50 <HAL_DMA_Init+0x1e8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00e      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a53      	ldr	r2, [pc, #332]	; (8005e54 <HAL_DMA_Init+0x1ec>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d009      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a51      	ldr	r2, [pc, #324]	; (8005e58 <HAL_DMA_Init+0x1f0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_DMA_Init+0xb8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a50      	ldr	r2, [pc, #320]	; (8005e5c <HAL_DMA_Init+0x1f4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <HAL_DMA_Init+0xbc>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_DMA_Init+0xbe>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 813b 	beq.w	8005fa2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a37      	ldr	r2, [pc, #220]	; (8005e20 <HAL_DMA_Init+0x1b8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04a      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a36      	ldr	r2, [pc, #216]	; (8005e24 <HAL_DMA_Init+0x1bc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d045      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a34      	ldr	r2, [pc, #208]	; (8005e28 <HAL_DMA_Init+0x1c0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d040      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a33      	ldr	r2, [pc, #204]	; (8005e2c <HAL_DMA_Init+0x1c4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03b      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a31      	ldr	r2, [pc, #196]	; (8005e30 <HAL_DMA_Init+0x1c8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d036      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <HAL_DMA_Init+0x1cc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d031      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a2e      	ldr	r2, [pc, #184]	; (8005e38 <HAL_DMA_Init+0x1d0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a2d      	ldr	r2, [pc, #180]	; (8005e3c <HAL_DMA_Init+0x1d4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d027      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <HAL_DMA_Init+0x1d8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <HAL_DMA_Init+0x1dc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a28      	ldr	r2, [pc, #160]	; (8005e48 <HAL_DMA_Init+0x1e0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <HAL_DMA_Init+0x1e4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a25      	ldr	r2, [pc, #148]	; (8005e50 <HAL_DMA_Init+0x1e8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a24      	ldr	r2, [pc, #144]	; (8005e54 <HAL_DMA_Init+0x1ec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a22      	ldr	r2, [pc, #136]	; (8005e58 <HAL_DMA_Init+0x1f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_DMA_Init+0x174>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <HAL_DMA_Init+0x1f4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d108      	bne.n	8005dee <HAL_DMA_Init+0x186>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e007      	b.n	8005dfe <HAL_DMA_Init+0x196>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dfe:	e02f      	b.n	8005e60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e00:	f7fe fa86 	bl	8004310 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d928      	bls.n	8005e60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2203      	movs	r2, #3
 8005e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e246      	b.n	80062ae <HAL_DMA_Init+0x646>
 8005e20:	40020010 	.word	0x40020010
 8005e24:	40020028 	.word	0x40020028
 8005e28:	40020040 	.word	0x40020040
 8005e2c:	40020058 	.word	0x40020058
 8005e30:	40020070 	.word	0x40020070
 8005e34:	40020088 	.word	0x40020088
 8005e38:	400200a0 	.word	0x400200a0
 8005e3c:	400200b8 	.word	0x400200b8
 8005e40:	40020410 	.word	0x40020410
 8005e44:	40020428 	.word	0x40020428
 8005e48:	40020440 	.word	0x40020440
 8005e4c:	40020458 	.word	0x40020458
 8005e50:	40020470 	.word	0x40020470
 8005e54:	40020488 	.word	0x40020488
 8005e58:	400204a0 	.word	0x400204a0
 8005e5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1c8      	bne.n	8005e00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4b83      	ldr	r3, [pc, #524]	; (8006088 <HAL_DMA_Init+0x420>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d107      	bne.n	8005ec4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ec4:	4b71      	ldr	r3, [pc, #452]	; (800608c <HAL_DMA_Init+0x424>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b71      	ldr	r3, [pc, #452]	; (8006090 <HAL_DMA_Init+0x428>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d328      	bcc.n	8005f24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b28      	cmp	r3, #40	; 0x28
 8005ed8:	d903      	bls.n	8005ee2 <HAL_DMA_Init+0x27a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b2e      	cmp	r3, #46	; 0x2e
 8005ee0:	d917      	bls.n	8005f12 <HAL_DMA_Init+0x2aa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee8:	d903      	bls.n	8005ef2 <HAL_DMA_Init+0x28a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b42      	cmp	r3, #66	; 0x42
 8005ef0:	d90f      	bls.n	8005f12 <HAL_DMA_Init+0x2aa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b46      	cmp	r3, #70	; 0x46
 8005ef8:	d903      	bls.n	8005f02 <HAL_DMA_Init+0x29a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b48      	cmp	r3, #72	; 0x48
 8005f00:	d907      	bls.n	8005f12 <HAL_DMA_Init+0x2aa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b4e      	cmp	r3, #78	; 0x4e
 8005f08:	d905      	bls.n	8005f16 <HAL_DMA_Init+0x2ae>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b52      	cmp	r3, #82	; 0x52
 8005f10:	d801      	bhi.n	8005f16 <HAL_DMA_Init+0x2ae>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <HAL_DMA_Init+0x2b0>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d117      	bne.n	8005f7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 fddb 	bl	8007b1c <DMA_CheckFifoParam>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2240      	movs	r2, #64	; 0x40
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e197      	b.n	80062ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 fd16 	bl	80079b8 <DMA_CalcBaseAndBitshift>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	223f      	movs	r2, #63	; 0x3f
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	e0cd      	b.n	800613e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a3b      	ldr	r2, [pc, #236]	; (8006094 <HAL_DMA_Init+0x42c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d022      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a39      	ldr	r2, [pc, #228]	; (8006098 <HAL_DMA_Init+0x430>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a38      	ldr	r2, [pc, #224]	; (800609c <HAL_DMA_Init+0x434>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d018      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a36      	ldr	r2, [pc, #216]	; (80060a0 <HAL_DMA_Init+0x438>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <HAL_DMA_Init+0x43c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a33      	ldr	r2, [pc, #204]	; (80060a8 <HAL_DMA_Init+0x440>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a32      	ldr	r2, [pc, #200]	; (80060ac <HAL_DMA_Init+0x444>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_DMA_Init+0x38a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a30      	ldr	r2, [pc, #192]	; (80060b0 <HAL_DMA_Init+0x448>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_DMA_Init+0x38e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_DMA_Init+0x390>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8097 	beq.w	800612c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a24      	ldr	r2, [pc, #144]	; (8006094 <HAL_DMA_Init+0x42c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d021      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a22      	ldr	r2, [pc, #136]	; (8006098 <HAL_DMA_Init+0x430>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01c      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_DMA_Init+0x434>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d017      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_DMA_Init+0x438>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d012      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_DMA_Init+0x43c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00d      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_DMA_Init+0x440>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d008      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <HAL_DMA_Init+0x444>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <HAL_DMA_Init+0x3e4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_DMA_Init+0x448>)
 800604a:	4293      	cmp	r3, r2
 800604c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_DMA_Init+0x44c>)
 800606a:	4013      	ands	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d020      	beq.n	80060b8 <HAL_DMA_Init+0x450>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b80      	cmp	r3, #128	; 0x80
 800607c:	d102      	bne.n	8006084 <HAL_DMA_Init+0x41c>
 800607e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006082:	e01a      	b.n	80060ba <HAL_DMA_Init+0x452>
 8006084:	2300      	movs	r3, #0
 8006086:	e018      	b.n	80060ba <HAL_DMA_Init+0x452>
 8006088:	fe10803f 	.word	0xfe10803f
 800608c:	5c001000 	.word	0x5c001000
 8006090:	ffff0000 	.word	0xffff0000
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494
 80060b4:	fffe000f 	.word	0xfffe000f
 80060b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68d2      	ldr	r2, [r2, #12]
 80060be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b6e      	ldr	r3, [pc, #440]	; (80062b8 <HAL_DMA_Init+0x650>)
 8006100:	4413      	add	r3, r2
 8006102:	4a6e      	ldr	r2, [pc, #440]	; (80062bc <HAL_DMA_Init+0x654>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	009a      	lsls	r2, r3, #2
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fc51 	bl	80079b8 <DMA_CalcBaseAndBitshift>
 8006116:	4603      	mov	r3, r0
 8006118:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2201      	movs	r2, #1
 8006124:	409a      	lsls	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	e008      	b.n	800613e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2240      	movs	r2, #64	; 0x40
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2203      	movs	r2, #3
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0b7      	b.n	80062ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a5f      	ldr	r2, [pc, #380]	; (80062c0 <HAL_DMA_Init+0x658>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d072      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a5d      	ldr	r2, [pc, #372]	; (80062c4 <HAL_DMA_Init+0x65c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d06d      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a5c      	ldr	r2, [pc, #368]	; (80062c8 <HAL_DMA_Init+0x660>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d068      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5a      	ldr	r2, [pc, #360]	; (80062cc <HAL_DMA_Init+0x664>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d063      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a59      	ldr	r2, [pc, #356]	; (80062d0 <HAL_DMA_Init+0x668>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d05e      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a57      	ldr	r2, [pc, #348]	; (80062d4 <HAL_DMA_Init+0x66c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d059      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a56      	ldr	r2, [pc, #344]	; (80062d8 <HAL_DMA_Init+0x670>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d054      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a54      	ldr	r2, [pc, #336]	; (80062dc <HAL_DMA_Init+0x674>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d04f      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a53      	ldr	r2, [pc, #332]	; (80062e0 <HAL_DMA_Init+0x678>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d04a      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a51      	ldr	r2, [pc, #324]	; (80062e4 <HAL_DMA_Init+0x67c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d045      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a50      	ldr	r2, [pc, #320]	; (80062e8 <HAL_DMA_Init+0x680>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d040      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a4e      	ldr	r2, [pc, #312]	; (80062ec <HAL_DMA_Init+0x684>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d03b      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4d      	ldr	r2, [pc, #308]	; (80062f0 <HAL_DMA_Init+0x688>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d036      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a4b      	ldr	r2, [pc, #300]	; (80062f4 <HAL_DMA_Init+0x68c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d031      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4a      	ldr	r2, [pc, #296]	; (80062f8 <HAL_DMA_Init+0x690>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d02c      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a48      	ldr	r2, [pc, #288]	; (80062fc <HAL_DMA_Init+0x694>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d027      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a47      	ldr	r2, [pc, #284]	; (8006300 <HAL_DMA_Init+0x698>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d022      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a45      	ldr	r2, [pc, #276]	; (8006304 <HAL_DMA_Init+0x69c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01d      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a44      	ldr	r2, [pc, #272]	; (8006308 <HAL_DMA_Init+0x6a0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d018      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a42      	ldr	r2, [pc, #264]	; (800630c <HAL_DMA_Init+0x6a4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a41      	ldr	r2, [pc, #260]	; (8006310 <HAL_DMA_Init+0x6a8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a3f      	ldr	r2, [pc, #252]	; (8006314 <HAL_DMA_Init+0x6ac>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a3e      	ldr	r2, [pc, #248]	; (8006318 <HAL_DMA_Init+0x6b0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_DMA_Init+0x5c6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3c      	ldr	r2, [pc, #240]	; (800631c <HAL_DMA_Init+0x6b4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d101      	bne.n	8006232 <HAL_DMA_Init+0x5ca>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_DMA_Init+0x5cc>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d032      	beq.n	800629e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fceb 	bl	8007c14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d102      	bne.n	800624c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006260:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <HAL_DMA_Init+0x624>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d80c      	bhi.n	800628c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fd68 	bl	8007d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e008      	b.n	800629e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	a7fdabf8 	.word	0xa7fdabf8
 80062bc:	cccccccd 	.word	0xcccccccd
 80062c0:	40020010 	.word	0x40020010
 80062c4:	40020028 	.word	0x40020028
 80062c8:	40020040 	.word	0x40020040
 80062cc:	40020058 	.word	0x40020058
 80062d0:	40020070 	.word	0x40020070
 80062d4:	40020088 	.word	0x40020088
 80062d8:	400200a0 	.word	0x400200a0
 80062dc:	400200b8 	.word	0x400200b8
 80062e0:	40020410 	.word	0x40020410
 80062e4:	40020428 	.word	0x40020428
 80062e8:	40020440 	.word	0x40020440
 80062ec:	40020458 	.word	0x40020458
 80062f0:	40020470 	.word	0x40020470
 80062f4:	40020488 	.word	0x40020488
 80062f8:	400204a0 	.word	0x400204a0
 80062fc:	400204b8 	.word	0x400204b8
 8006300:	58025408 	.word	0x58025408
 8006304:	5802541c 	.word	0x5802541c
 8006308:	58025430 	.word	0x58025430
 800630c:	58025444 	.word	0x58025444
 8006310:	58025458 	.word	0x58025458
 8006314:	5802546c 	.word	0x5802546c
 8006318:	58025480 	.word	0x58025480
 800631c:	58025494 	.word	0x58025494

08006320 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e226      	b.n	800678a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_DMA_Start_IT+0x2a>
 8006346:	2302      	movs	r3, #2
 8006348:	e21f      	b.n	800678a <HAL_DMA_Start_IT+0x46a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 820a 	bne.w	8006774 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a68      	ldr	r2, [pc, #416]	; (8006514 <HAL_DMA_Start_IT+0x1f4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d04a      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a66      	ldr	r2, [pc, #408]	; (8006518 <HAL_DMA_Start_IT+0x1f8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d045      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a65      	ldr	r2, [pc, #404]	; (800651c <HAL_DMA_Start_IT+0x1fc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d040      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a63      	ldr	r2, [pc, #396]	; (8006520 <HAL_DMA_Start_IT+0x200>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d03b      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a62      	ldr	r2, [pc, #392]	; (8006524 <HAL_DMA_Start_IT+0x204>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d036      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a60      	ldr	r2, [pc, #384]	; (8006528 <HAL_DMA_Start_IT+0x208>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d031      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a5f      	ldr	r2, [pc, #380]	; (800652c <HAL_DMA_Start_IT+0x20c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d02c      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5d      	ldr	r2, [pc, #372]	; (8006530 <HAL_DMA_Start_IT+0x210>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d027      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5c      	ldr	r2, [pc, #368]	; (8006534 <HAL_DMA_Start_IT+0x214>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5a      	ldr	r2, [pc, #360]	; (8006538 <HAL_DMA_Start_IT+0x218>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01d      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a59      	ldr	r2, [pc, #356]	; (800653c <HAL_DMA_Start_IT+0x21c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d018      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a57      	ldr	r2, [pc, #348]	; (8006540 <HAL_DMA_Start_IT+0x220>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a56      	ldr	r2, [pc, #344]	; (8006544 <HAL_DMA_Start_IT+0x224>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a54      	ldr	r2, [pc, #336]	; (8006548 <HAL_DMA_Start_IT+0x228>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a53      	ldr	r2, [pc, #332]	; (800654c <HAL_DMA_Start_IT+0x22c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_DMA_Start_IT+0xee>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a51      	ldr	r2, [pc, #324]	; (8006550 <HAL_DMA_Start_IT+0x230>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <HAL_DMA_Start_IT+0x100>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e007      	b.n	8006430 <HAL_DMA_Start_IT+0x110>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f001 f912 	bl	8007660 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a34      	ldr	r2, [pc, #208]	; (8006514 <HAL_DMA_Start_IT+0x1f4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d04a      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a33      	ldr	r2, [pc, #204]	; (8006518 <HAL_DMA_Start_IT+0x1f8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d045      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a31      	ldr	r2, [pc, #196]	; (800651c <HAL_DMA_Start_IT+0x1fc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d040      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a30      	ldr	r2, [pc, #192]	; (8006520 <HAL_DMA_Start_IT+0x200>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d03b      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2e      	ldr	r2, [pc, #184]	; (8006524 <HAL_DMA_Start_IT+0x204>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d036      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <HAL_DMA_Start_IT+0x208>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d031      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2b      	ldr	r2, [pc, #172]	; (800652c <HAL_DMA_Start_IT+0x20c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d02c      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <HAL_DMA_Start_IT+0x210>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d027      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a28      	ldr	r2, [pc, #160]	; (8006534 <HAL_DMA_Start_IT+0x214>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d022      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a27      	ldr	r2, [pc, #156]	; (8006538 <HAL_DMA_Start_IT+0x218>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d01d      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a25      	ldr	r2, [pc, #148]	; (800653c <HAL_DMA_Start_IT+0x21c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d018      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a24      	ldr	r2, [pc, #144]	; (8006540 <HAL_DMA_Start_IT+0x220>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <HAL_DMA_Start_IT+0x224>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00e      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <HAL_DMA_Start_IT+0x228>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1f      	ldr	r2, [pc, #124]	; (800654c <HAL_DMA_Start_IT+0x22c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_DMA_Start_IT+0x1bc>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_DMA_Start_IT+0x230>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d101      	bne.n	80064e0 <HAL_DMA_Start_IT+0x1c0>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <HAL_DMA_Start_IT+0x1c2>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d036      	beq.n	8006554 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 021e 	bic.w	r2, r3, #30
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0216 	orr.w	r2, r2, #22
 80064f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d03e      	beq.n	8006580 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0208 	orr.w	r2, r2, #8
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e035      	b.n	8006580 <HAL_DMA_Start_IT+0x260>
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 020e 	bic.w	r2, r3, #14
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 020a 	orr.w	r2, r2, #10
 8006566:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0204 	orr.w	r2, r2, #4
 800657e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a83      	ldr	r2, [pc, #524]	; (8006794 <HAL_DMA_Start_IT+0x474>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d072      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a82      	ldr	r2, [pc, #520]	; (8006798 <HAL_DMA_Start_IT+0x478>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d06d      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a80      	ldr	r2, [pc, #512]	; (800679c <HAL_DMA_Start_IT+0x47c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d068      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a7f      	ldr	r2, [pc, #508]	; (80067a0 <HAL_DMA_Start_IT+0x480>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d063      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_DMA_Start_IT+0x484>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d05e      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7c      	ldr	r2, [pc, #496]	; (80067a8 <HAL_DMA_Start_IT+0x488>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d059      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7a      	ldr	r2, [pc, #488]	; (80067ac <HAL_DMA_Start_IT+0x48c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d054      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a79      	ldr	r2, [pc, #484]	; (80067b0 <HAL_DMA_Start_IT+0x490>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d04f      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a77      	ldr	r2, [pc, #476]	; (80067b4 <HAL_DMA_Start_IT+0x494>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d04a      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a76      	ldr	r2, [pc, #472]	; (80067b8 <HAL_DMA_Start_IT+0x498>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d045      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a74      	ldr	r2, [pc, #464]	; (80067bc <HAL_DMA_Start_IT+0x49c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d040      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a73      	ldr	r2, [pc, #460]	; (80067c0 <HAL_DMA_Start_IT+0x4a0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d03b      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a71      	ldr	r2, [pc, #452]	; (80067c4 <HAL_DMA_Start_IT+0x4a4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d036      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a70      	ldr	r2, [pc, #448]	; (80067c8 <HAL_DMA_Start_IT+0x4a8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d031      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a6e      	ldr	r2, [pc, #440]	; (80067cc <HAL_DMA_Start_IT+0x4ac>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a6d      	ldr	r2, [pc, #436]	; (80067d0 <HAL_DMA_Start_IT+0x4b0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a6b      	ldr	r2, [pc, #428]	; (80067d4 <HAL_DMA_Start_IT+0x4b4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6a      	ldr	r2, [pc, #424]	; (80067d8 <HAL_DMA_Start_IT+0x4b8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a68      	ldr	r2, [pc, #416]	; (80067dc <HAL_DMA_Start_IT+0x4bc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a67      	ldr	r2, [pc, #412]	; (80067e0 <HAL_DMA_Start_IT+0x4c0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a65      	ldr	r2, [pc, #404]	; (80067e4 <HAL_DMA_Start_IT+0x4c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a64      	ldr	r2, [pc, #400]	; (80067e8 <HAL_DMA_Start_IT+0x4c8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a62      	ldr	r2, [pc, #392]	; (80067ec <HAL_DMA_Start_IT+0x4cc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_DMA_Start_IT+0x350>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a61      	ldr	r2, [pc, #388]	; (80067f0 <HAL_DMA_Start_IT+0x4d0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d101      	bne.n	8006674 <HAL_DMA_Start_IT+0x354>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <HAL_DMA_Start_IT+0x356>
 8006674:	2300      	movs	r3, #0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01a      	beq.n	80066b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006696:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a37      	ldr	r2, [pc, #220]	; (8006794 <HAL_DMA_Start_IT+0x474>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04a      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a36      	ldr	r2, [pc, #216]	; (8006798 <HAL_DMA_Start_IT+0x478>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d045      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a34      	ldr	r2, [pc, #208]	; (800679c <HAL_DMA_Start_IT+0x47c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d040      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <HAL_DMA_Start_IT+0x480>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d03b      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a31      	ldr	r2, [pc, #196]	; (80067a4 <HAL_DMA_Start_IT+0x484>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d036      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a30      	ldr	r2, [pc, #192]	; (80067a8 <HAL_DMA_Start_IT+0x488>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d031      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <HAL_DMA_Start_IT+0x48c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d02c      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2d      	ldr	r2, [pc, #180]	; (80067b0 <HAL_DMA_Start_IT+0x490>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d027      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2b      	ldr	r2, [pc, #172]	; (80067b4 <HAL_DMA_Start_IT+0x494>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <HAL_DMA_Start_IT+0x498>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <HAL_DMA_Start_IT+0x49c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <HAL_DMA_Start_IT+0x4a0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <HAL_DMA_Start_IT+0x4a4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <HAL_DMA_Start_IT+0x4a8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <HAL_DMA_Start_IT+0x4ac>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_DMA_Start_IT+0x430>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_DMA_Start_IT+0x4b0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d108      	bne.n	8006762 <HAL_DMA_Start_IT+0x442>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e012      	b.n	8006788 <HAL_DMA_Start_IT+0x468>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e009      	b.n	8006788 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006782:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40020010 	.word	0x40020010
 8006798:	40020028 	.word	0x40020028
 800679c:	40020040 	.word	0x40020040
 80067a0:	40020058 	.word	0x40020058
 80067a4:	40020070 	.word	0x40020070
 80067a8:	40020088 	.word	0x40020088
 80067ac:	400200a0 	.word	0x400200a0
 80067b0:	400200b8 	.word	0x400200b8
 80067b4:	40020410 	.word	0x40020410
 80067b8:	40020428 	.word	0x40020428
 80067bc:	40020440 	.word	0x40020440
 80067c0:	40020458 	.word	0x40020458
 80067c4:	40020470 	.word	0x40020470
 80067c8:	40020488 	.word	0x40020488
 80067cc:	400204a0 	.word	0x400204a0
 80067d0:	400204b8 	.word	0x400204b8
 80067d4:	58025408 	.word	0x58025408
 80067d8:	5802541c 	.word	0x5802541c
 80067dc:	58025430 	.word	0x58025430
 80067e0:	58025444 	.word	0x58025444
 80067e4:	58025458 	.word	0x58025458
 80067e8:	5802546c 	.word	0x5802546c
 80067ec:	58025480 	.word	0x58025480
 80067f0:	58025494 	.word	0x58025494

080067f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006800:	4b67      	ldr	r3, [pc, #412]	; (80069a0 <HAL_DMA_IRQHandler+0x1ac>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a67      	ldr	r2, [pc, #412]	; (80069a4 <HAL_DMA_IRQHandler+0x1b0>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	0a9b      	lsrs	r3, r3, #10
 800680c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a5f      	ldr	r2, [pc, #380]	; (80069a8 <HAL_DMA_IRQHandler+0x1b4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d04a      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5d      	ldr	r2, [pc, #372]	; (80069ac <HAL_DMA_IRQHandler+0x1b8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d045      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a5c      	ldr	r2, [pc, #368]	; (80069b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d040      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a5a      	ldr	r2, [pc, #360]	; (80069b4 <HAL_DMA_IRQHandler+0x1c0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d03b      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a59      	ldr	r2, [pc, #356]	; (80069b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d036      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a57      	ldr	r2, [pc, #348]	; (80069bc <HAL_DMA_IRQHandler+0x1c8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d031      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a56      	ldr	r2, [pc, #344]	; (80069c0 <HAL_DMA_IRQHandler+0x1cc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d02c      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a54      	ldr	r2, [pc, #336]	; (80069c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d027      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a53      	ldr	r2, [pc, #332]	; (80069c8 <HAL_DMA_IRQHandler+0x1d4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d022      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a51      	ldr	r2, [pc, #324]	; (80069cc <HAL_DMA_IRQHandler+0x1d8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a50      	ldr	r2, [pc, #320]	; (80069d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a4e      	ldr	r2, [pc, #312]	; (80069d4 <HAL_DMA_IRQHandler+0x1e0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a4d      	ldr	r2, [pc, #308]	; (80069d8 <HAL_DMA_IRQHandler+0x1e4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a4b      	ldr	r2, [pc, #300]	; (80069dc <HAL_DMA_IRQHandler+0x1e8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <HAL_DMA_IRQHandler+0x1ec>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xd2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a48      	ldr	r2, [pc, #288]	; (80069e4 <HAL_DMA_IRQHandler+0x1f0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_DMA_IRQHandler+0xd6>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_DMA_IRQHandler+0xd8>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 842b 	beq.w	8007128 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2208      	movs	r2, #8
 80068dc:	409a      	lsls	r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80a2 	beq.w	8006a2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2e      	ldr	r2, [pc, #184]	; (80069a8 <HAL_DMA_IRQHandler+0x1b4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d04a      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2d      	ldr	r2, [pc, #180]	; (80069ac <HAL_DMA_IRQHandler+0x1b8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d045      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d040      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <HAL_DMA_IRQHandler+0x1c0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d03b      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a28      	ldr	r2, [pc, #160]	; (80069b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d036      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a27      	ldr	r2, [pc, #156]	; (80069bc <HAL_DMA_IRQHandler+0x1c8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d031      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <HAL_DMA_IRQHandler+0x1cc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d02c      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d027      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_DMA_IRQHandler+0x1d4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d022      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a21      	ldr	r2, [pc, #132]	; (80069cc <HAL_DMA_IRQHandler+0x1d8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01d      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d018      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <HAL_DMA_IRQHandler+0x1e0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <HAL_DMA_IRQHandler+0x1e4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <HAL_DMA_IRQHandler+0x1e8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <HAL_DMA_IRQHandler+0x1ec>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_DMA_IRQHandler+0x194>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_DMA_IRQHandler+0x1f0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d12f      	bne.n	80069e8 <HAL_DMA_IRQHandler+0x1f4>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	e02e      	b.n	80069fc <HAL_DMA_IRQHandler+0x208>
 800699e:	bf00      	nop
 80069a0:	24000000 	.word	0x24000000
 80069a4:	1b4e81b5 	.word	0x1b4e81b5
 80069a8:	40020010 	.word	0x40020010
 80069ac:	40020028 	.word	0x40020028
 80069b0:	40020040 	.word	0x40020040
 80069b4:	40020058 	.word	0x40020058
 80069b8:	40020070 	.word	0x40020070
 80069bc:	40020088 	.word	0x40020088
 80069c0:	400200a0 	.word	0x400200a0
 80069c4:	400200b8 	.word	0x400200b8
 80069c8:	40020410 	.word	0x40020410
 80069cc:	40020428 	.word	0x40020428
 80069d0:	40020440 	.word	0x40020440
 80069d4:	40020458 	.word	0x40020458
 80069d8:	40020470 	.word	0x40020470
 80069dc:	40020488 	.word	0x40020488
 80069e0:	400204a0 	.word	0x400204a0
 80069e4:	400204b8 	.word	0x400204b8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bf14      	ite	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	2300      	moveq	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2208      	movs	r2, #8
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	f043 0201 	orr.w	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d06e      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a69      	ldr	r2, [pc, #420]	; (8006bec <HAL_DMA_IRQHandler+0x3f8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a67      	ldr	r2, [pc, #412]	; (8006bf0 <HAL_DMA_IRQHandler+0x3fc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a66      	ldr	r2, [pc, #408]	; (8006bf4 <HAL_DMA_IRQHandler+0x400>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a64      	ldr	r2, [pc, #400]	; (8006bf8 <HAL_DMA_IRQHandler+0x404>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a63      	ldr	r2, [pc, #396]	; (8006bfc <HAL_DMA_IRQHandler+0x408>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a61      	ldr	r2, [pc, #388]	; (8006c00 <HAL_DMA_IRQHandler+0x40c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a60      	ldr	r2, [pc, #384]	; (8006c04 <HAL_DMA_IRQHandler+0x410>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a5e      	ldr	r2, [pc, #376]	; (8006c08 <HAL_DMA_IRQHandler+0x414>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <HAL_DMA_IRQHandler+0x418>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5b      	ldr	r2, [pc, #364]	; (8006c10 <HAL_DMA_IRQHandler+0x41c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a5a      	ldr	r2, [pc, #360]	; (8006c14 <HAL_DMA_IRQHandler+0x420>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a58      	ldr	r2, [pc, #352]	; (8006c18 <HAL_DMA_IRQHandler+0x424>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a57      	ldr	r2, [pc, #348]	; (8006c1c <HAL_DMA_IRQHandler+0x428>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a55      	ldr	r2, [pc, #340]	; (8006c20 <HAL_DMA_IRQHandler+0x42c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a54      	ldr	r2, [pc, #336]	; (8006c24 <HAL_DMA_IRQHandler+0x430>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2ee>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a52      	ldr	r2, [pc, #328]	; (8006c28 <HAL_DMA_IRQHandler+0x434>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10a      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x304>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	e003      	b.n	8006b00 <HAL_DMA_IRQHandler+0x30c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f043 0202 	orr.w	r2, r3, #2
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2204      	movs	r2, #4
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 808f 	beq.w	8006c54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_DMA_IRQHandler+0x3f8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d04a      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <HAL_DMA_IRQHandler+0x3fc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d045      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a29      	ldr	r2, [pc, #164]	; (8006bf4 <HAL_DMA_IRQHandler+0x400>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d040      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <HAL_DMA_IRQHandler+0x404>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d03b      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <HAL_DMA_IRQHandler+0x408>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d036      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <HAL_DMA_IRQHandler+0x40c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d031      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a23      	ldr	r2, [pc, #140]	; (8006c04 <HAL_DMA_IRQHandler+0x410>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d02c      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a21      	ldr	r2, [pc, #132]	; (8006c08 <HAL_DMA_IRQHandler+0x414>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d027      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a20      	ldr	r2, [pc, #128]	; (8006c0c <HAL_DMA_IRQHandler+0x418>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d022      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <HAL_DMA_IRQHandler+0x41c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01d      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <HAL_DMA_IRQHandler+0x420>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d018      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <HAL_DMA_IRQHandler+0x424>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1a      	ldr	r2, [pc, #104]	; (8006c1c <HAL_DMA_IRQHandler+0x428>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <HAL_DMA_IRQHandler+0x42c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <HAL_DMA_IRQHandler+0x430>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x3e2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <HAL_DMA_IRQHandler+0x434>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d12a      	bne.n	8006c2c <HAL_DMA_IRQHandler+0x438>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf14      	ite	ne
 8006be4:	2301      	movne	r3, #1
 8006be6:	2300      	moveq	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e023      	b.n	8006c34 <HAL_DMA_IRQHandler+0x440>
 8006bec:	40020010 	.word	0x40020010
 8006bf0:	40020028 	.word	0x40020028
 8006bf4:	40020040 	.word	0x40020040
 8006bf8:	40020058 	.word	0x40020058
 8006bfc:	40020070 	.word	0x40020070
 8006c00:	40020088 	.word	0x40020088
 8006c04:	400200a0 	.word	0x400200a0
 8006c08:	400200b8 	.word	0x400200b8
 8006c0c:	40020410 	.word	0x40020410
 8006c10:	40020428 	.word	0x40020428
 8006c14:	40020440 	.word	0x40020440
 8006c18:	40020458 	.word	0x40020458
 8006c1c:	40020470 	.word	0x40020470
 8006c20:	40020488 	.word	0x40020488
 8006c24:	400204a0 	.word	0x400204a0
 8006c28:	400204b8 	.word	0x400204b8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2204      	movs	r2, #4
 8006c42:	409a      	lsls	r2, r3
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	f043 0204 	orr.w	r2, r3, #4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a6 	beq.w	8006db6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a85      	ldr	r2, [pc, #532]	; (8006e84 <HAL_DMA_IRQHandler+0x690>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a83      	ldr	r2, [pc, #524]	; (8006e88 <HAL_DMA_IRQHandler+0x694>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a82      	ldr	r2, [pc, #520]	; (8006e8c <HAL_DMA_IRQHandler+0x698>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a80      	ldr	r2, [pc, #512]	; (8006e90 <HAL_DMA_IRQHandler+0x69c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7f      	ldr	r2, [pc, #508]	; (8006e94 <HAL_DMA_IRQHandler+0x6a0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7d      	ldr	r2, [pc, #500]	; (8006e98 <HAL_DMA_IRQHandler+0x6a4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a7c      	ldr	r2, [pc, #496]	; (8006e9c <HAL_DMA_IRQHandler+0x6a8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7a      	ldr	r2, [pc, #488]	; (8006ea0 <HAL_DMA_IRQHandler+0x6ac>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a79      	ldr	r2, [pc, #484]	; (8006ea4 <HAL_DMA_IRQHandler+0x6b0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a77      	ldr	r2, [pc, #476]	; (8006ea8 <HAL_DMA_IRQHandler+0x6b4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a76      	ldr	r2, [pc, #472]	; (8006eac <HAL_DMA_IRQHandler+0x6b8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a74      	ldr	r2, [pc, #464]	; (8006eb0 <HAL_DMA_IRQHandler+0x6bc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a73      	ldr	r2, [pc, #460]	; (8006eb4 <HAL_DMA_IRQHandler+0x6c0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a71      	ldr	r2, [pc, #452]	; (8006eb8 <HAL_DMA_IRQHandler+0x6c4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a70      	ldr	r2, [pc, #448]	; (8006ebc <HAL_DMA_IRQHandler+0x6c8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x516>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a6e      	ldr	r2, [pc, #440]	; (8006ec0 <HAL_DMA_IRQHandler+0x6cc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10a      	bne.n	8006d20 <HAL_DMA_IRQHandler+0x52c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e009      	b.n	8006d34 <HAL_DMA_IRQHandler+0x540>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bf14      	ite	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	2300      	moveq	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d03e      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2210      	movs	r2, #16
 8006d42:	409a      	lsls	r2, r3
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d018      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d024      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
 8006d74:	e01f      	b.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01b      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	e016      	b.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0208 	bic.w	r2, r2, #8
 8006da4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8110 	beq.w	8006fec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	; (8006e84 <HAL_DMA_IRQHandler+0x690>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04a      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2b      	ldr	r2, [pc, #172]	; (8006e88 <HAL_DMA_IRQHandler+0x694>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d045      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <HAL_DMA_IRQHandler+0x698>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d040      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <HAL_DMA_IRQHandler+0x69c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d03b      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <HAL_DMA_IRQHandler+0x6a0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d036      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <HAL_DMA_IRQHandler+0x6a4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d031      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <HAL_DMA_IRQHandler+0x6a8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02c      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a22      	ldr	r2, [pc, #136]	; (8006ea0 <HAL_DMA_IRQHandler+0x6ac>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d027      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <HAL_DMA_IRQHandler+0x6b0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d022      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <HAL_DMA_IRQHandler+0x6b4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d01d      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <HAL_DMA_IRQHandler+0x6b8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d018      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <HAL_DMA_IRQHandler+0x6bc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <HAL_DMA_IRQHandler+0x6c0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <HAL_DMA_IRQHandler+0x6c4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <HAL_DMA_IRQHandler+0x6c8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x678>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <HAL_DMA_IRQHandler+0x6cc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d12b      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0x6d0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bf14      	ite	ne
 8006e7a:	2301      	movne	r3, #1
 8006e7c:	2300      	moveq	r3, #0
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	e02a      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x6e4>
 8006e82:	bf00      	nop
 8006e84:	40020010 	.word	0x40020010
 8006e88:	40020028 	.word	0x40020028
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020058 	.word	0x40020058
 8006e94:	40020070 	.word	0x40020070
 8006e98:	40020088 	.word	0x40020088
 8006e9c:	400200a0 	.word	0x400200a0
 8006ea0:	400200b8 	.word	0x400200b8
 8006ea4:	40020410 	.word	0x40020410
 8006ea8:	40020428 	.word	0x40020428
 8006eac:	40020440 	.word	0x40020440
 8006eb0:	40020458 	.word	0x40020458
 8006eb4:	40020470 	.word	0x40020470
 8006eb8:	40020488 	.word	0x40020488
 8006ebc:	400204a0 	.word	0x400204a0
 8006ec0:	400204b8 	.word	0x400204b8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf14      	ite	ne
 8006ed2:	2301      	movne	r3, #1
 8006ed4:	2300      	moveq	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8087 	beq.w	8006fec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	409a      	lsls	r2, r3
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d139      	bne.n	8006f6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0216 	bic.w	r2, r2, #22
 8006f08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x736>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0208 	bic.w	r2, r2, #8
 8006f38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	223f      	movs	r2, #63	; 0x3f
 8006f44:	409a      	lsls	r2, r3
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 834a 	beq.w	80075f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
          }
          return;
 8006f6c:	e344      	b.n	80075f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d018      	beq.n	8006fae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02c      	beq.n	8006fec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
 8006f9a:	e027      	b.n	8006fec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d023      	beq.n	8006fec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
 8006fac:	e01e      	b.n	8006fec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10f      	bne.n	8006fdc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0210 	bic.w	r2, r2, #16
 8006fca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8306 	beq.w	8007602 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8088 	beq.w	8007114 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2204      	movs	r2, #4
 8007008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a7a      	ldr	r2, [pc, #488]	; (80071fc <HAL_DMA_IRQHandler+0xa08>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d04a      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a79      	ldr	r2, [pc, #484]	; (8007200 <HAL_DMA_IRQHandler+0xa0c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d045      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a77      	ldr	r2, [pc, #476]	; (8007204 <HAL_DMA_IRQHandler+0xa10>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d040      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a76      	ldr	r2, [pc, #472]	; (8007208 <HAL_DMA_IRQHandler+0xa14>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d03b      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a74      	ldr	r2, [pc, #464]	; (800720c <HAL_DMA_IRQHandler+0xa18>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d036      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a73      	ldr	r2, [pc, #460]	; (8007210 <HAL_DMA_IRQHandler+0xa1c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d031      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a71      	ldr	r2, [pc, #452]	; (8007214 <HAL_DMA_IRQHandler+0xa20>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02c      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a70      	ldr	r2, [pc, #448]	; (8007218 <HAL_DMA_IRQHandler+0xa24>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d027      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a6e      	ldr	r2, [pc, #440]	; (800721c <HAL_DMA_IRQHandler+0xa28>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a6d      	ldr	r2, [pc, #436]	; (8007220 <HAL_DMA_IRQHandler+0xa2c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d01d      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6b      	ldr	r2, [pc, #428]	; (8007224 <HAL_DMA_IRQHandler+0xa30>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a6a      	ldr	r2, [pc, #424]	; (8007228 <HAL_DMA_IRQHandler+0xa34>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a68      	ldr	r2, [pc, #416]	; (800722c <HAL_DMA_IRQHandler+0xa38>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a67      	ldr	r2, [pc, #412]	; (8007230 <HAL_DMA_IRQHandler+0xa3c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a65      	ldr	r2, [pc, #404]	; (8007234 <HAL_DMA_IRQHandler+0xa40>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_DMA_IRQHandler+0x8b8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a64      	ldr	r2, [pc, #400]	; (8007238 <HAL_DMA_IRQHandler+0xa44>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d108      	bne.n	80070be <HAL_DMA_IRQHandler+0x8ca>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e007      	b.n	80070ce <HAL_DMA_IRQHandler+0x8da>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d307      	bcc.n	80070ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f2      	bne.n	80070ce <HAL_DMA_IRQHandler+0x8da>
 80070e8:	e000      	b.n	80070ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070ea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800710a:	e003      	b.n	8007114 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8272 	beq.w	8007602 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	e26c      	b.n	8007602 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a43      	ldr	r2, [pc, #268]	; (800723c <HAL_DMA_IRQHandler+0xa48>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d022      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a42      	ldr	r2, [pc, #264]	; (8007240 <HAL_DMA_IRQHandler+0xa4c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d01d      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a40      	ldr	r2, [pc, #256]	; (8007244 <HAL_DMA_IRQHandler+0xa50>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d018      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a3f      	ldr	r2, [pc, #252]	; (8007248 <HAL_DMA_IRQHandler+0xa54>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d013      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a3d      	ldr	r2, [pc, #244]	; (800724c <HAL_DMA_IRQHandler+0xa58>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00e      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3c      	ldr	r2, [pc, #240]	; (8007250 <HAL_DMA_IRQHandler+0xa5c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d009      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3a      	ldr	r2, [pc, #232]	; (8007254 <HAL_DMA_IRQHandler+0xa60>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_DMA_IRQHandler+0x984>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a39      	ldr	r2, [pc, #228]	; (8007258 <HAL_DMA_IRQHandler+0xa64>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d101      	bne.n	800717c <HAL_DMA_IRQHandler+0x988>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <HAL_DMA_IRQHandler+0x98a>
 800717c:	2300      	movs	r3, #0
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 823f 	beq.w	8007602 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2204      	movs	r2, #4
 8007196:	409a      	lsls	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80cd 	beq.w	800733c <HAL_DMA_IRQHandler+0xb48>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80c7 	beq.w	800733c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2204      	movs	r2, #4
 80071b8:	409a      	lsls	r2, r3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d049      	beq.n	800725c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8210 	beq.w	80075fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e4:	e20a      	b.n	80075fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8206 	beq.w	80075fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f8:	e200      	b.n	80075fc <HAL_DMA_IRQHandler+0xe08>
 80071fa:	bf00      	nop
 80071fc:	40020010 	.word	0x40020010
 8007200:	40020028 	.word	0x40020028
 8007204:	40020040 	.word	0x40020040
 8007208:	40020058 	.word	0x40020058
 800720c:	40020070 	.word	0x40020070
 8007210:	40020088 	.word	0x40020088
 8007214:	400200a0 	.word	0x400200a0
 8007218:	400200b8 	.word	0x400200b8
 800721c:	40020410 	.word	0x40020410
 8007220:	40020428 	.word	0x40020428
 8007224:	40020440 	.word	0x40020440
 8007228:	40020458 	.word	0x40020458
 800722c:	40020470 	.word	0x40020470
 8007230:	40020488 	.word	0x40020488
 8007234:	400204a0 	.word	0x400204a0
 8007238:	400204b8 	.word	0x400204b8
 800723c:	58025408 	.word	0x58025408
 8007240:	5802541c 	.word	0x5802541c
 8007244:	58025430 	.word	0x58025430
 8007248:	58025444 	.word	0x58025444
 800724c:	58025458 	.word	0x58025458
 8007250:	5802546c 	.word	0x5802546c
 8007254:	58025480 	.word	0x58025480
 8007258:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d160      	bne.n	8007328 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a8c      	ldr	r2, [pc, #560]	; (800749c <HAL_DMA_IRQHandler+0xca8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d04a      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a8a      	ldr	r2, [pc, #552]	; (80074a0 <HAL_DMA_IRQHandler+0xcac>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d045      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a89      	ldr	r2, [pc, #548]	; (80074a4 <HAL_DMA_IRQHandler+0xcb0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d040      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a87      	ldr	r2, [pc, #540]	; (80074a8 <HAL_DMA_IRQHandler+0xcb4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d03b      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a86      	ldr	r2, [pc, #536]	; (80074ac <HAL_DMA_IRQHandler+0xcb8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d036      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a84      	ldr	r2, [pc, #528]	; (80074b0 <HAL_DMA_IRQHandler+0xcbc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d031      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a83      	ldr	r2, [pc, #524]	; (80074b4 <HAL_DMA_IRQHandler+0xcc0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d02c      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a81      	ldr	r2, [pc, #516]	; (80074b8 <HAL_DMA_IRQHandler+0xcc4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d027      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a80      	ldr	r2, [pc, #512]	; (80074bc <HAL_DMA_IRQHandler+0xcc8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a7e      	ldr	r2, [pc, #504]	; (80074c0 <HAL_DMA_IRQHandler+0xccc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01d      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a7d      	ldr	r2, [pc, #500]	; (80074c4 <HAL_DMA_IRQHandler+0xcd0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d018      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a7b      	ldr	r2, [pc, #492]	; (80074c8 <HAL_DMA_IRQHandler+0xcd4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7a      	ldr	r2, [pc, #488]	; (80074cc <HAL_DMA_IRQHandler+0xcd8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00e      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a78      	ldr	r2, [pc, #480]	; (80074d0 <HAL_DMA_IRQHandler+0xcdc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d009      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a77      	ldr	r2, [pc, #476]	; (80074d4 <HAL_DMA_IRQHandler+0xce0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_DMA_IRQHandler+0xb12>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a75      	ldr	r2, [pc, #468]	; (80074d8 <HAL_DMA_IRQHandler+0xce4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d108      	bne.n	8007318 <HAL_DMA_IRQHandler+0xb24>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0208 	bic.w	r2, r2, #8
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e007      	b.n	8007328 <HAL_DMA_IRQHandler+0xb34>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0204 	bic.w	r2, r2, #4
 8007326:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8165 	beq.w	80075fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800733a:	e15f      	b.n	80075fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007340:	f003 031f 	and.w	r3, r3, #31
 8007344:	2202      	movs	r2, #2
 8007346:	409a      	lsls	r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80c5 	beq.w	80074dc <HAL_DMA_IRQHandler+0xce8>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80bf 	beq.w	80074dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2202      	movs	r2, #2
 8007368:	409a      	lsls	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d018      	beq.n	80073aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 813a 	beq.w	8007600 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007394:	e134      	b.n	8007600 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8130 	beq.w	8007600 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a8:	e12a      	b.n	8007600 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d168      	bne.n	8007486 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a38      	ldr	r2, [pc, #224]	; (800749c <HAL_DMA_IRQHandler+0xca8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d04a      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a37      	ldr	r2, [pc, #220]	; (80074a0 <HAL_DMA_IRQHandler+0xcac>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d045      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <HAL_DMA_IRQHandler+0xcb0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d040      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a34      	ldr	r2, [pc, #208]	; (80074a8 <HAL_DMA_IRQHandler+0xcb4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d03b      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a32      	ldr	r2, [pc, #200]	; (80074ac <HAL_DMA_IRQHandler+0xcb8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d036      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a31      	ldr	r2, [pc, #196]	; (80074b0 <HAL_DMA_IRQHandler+0xcbc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d031      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a2f      	ldr	r2, [pc, #188]	; (80074b4 <HAL_DMA_IRQHandler+0xcc0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d02c      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2e      	ldr	r2, [pc, #184]	; (80074b8 <HAL_DMA_IRQHandler+0xcc4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d027      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a2c      	ldr	r2, [pc, #176]	; (80074bc <HAL_DMA_IRQHandler+0xcc8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d022      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2b      	ldr	r2, [pc, #172]	; (80074c0 <HAL_DMA_IRQHandler+0xccc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d01d      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a29      	ldr	r2, [pc, #164]	; (80074c4 <HAL_DMA_IRQHandler+0xcd0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d018      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a28      	ldr	r2, [pc, #160]	; (80074c8 <HAL_DMA_IRQHandler+0xcd4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d013      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a26      	ldr	r2, [pc, #152]	; (80074cc <HAL_DMA_IRQHandler+0xcd8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00e      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <HAL_DMA_IRQHandler+0xcdc>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a23      	ldr	r2, [pc, #140]	; (80074d4 <HAL_DMA_IRQHandler+0xce0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_DMA_IRQHandler+0xc60>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <HAL_DMA_IRQHandler+0xce4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d108      	bne.n	8007466 <HAL_DMA_IRQHandler+0xc72>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0214 	bic.w	r2, r2, #20
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e007      	b.n	8007476 <HAL_DMA_IRQHandler+0xc82>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 020a 	bic.w	r2, r2, #10
 8007474:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80b8 	beq.w	8007600 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007498:	e0b2      	b.n	8007600 <HAL_DMA_IRQHandler+0xe0c>
 800749a:	bf00      	nop
 800749c:	40020010 	.word	0x40020010
 80074a0:	40020028 	.word	0x40020028
 80074a4:	40020040 	.word	0x40020040
 80074a8:	40020058 	.word	0x40020058
 80074ac:	40020070 	.word	0x40020070
 80074b0:	40020088 	.word	0x40020088
 80074b4:	400200a0 	.word	0x400200a0
 80074b8:	400200b8 	.word	0x400200b8
 80074bc:	40020410 	.word	0x40020410
 80074c0:	40020428 	.word	0x40020428
 80074c4:	40020440 	.word	0x40020440
 80074c8:	40020458 	.word	0x40020458
 80074cc:	40020470 	.word	0x40020470
 80074d0:	40020488 	.word	0x40020488
 80074d4:	400204a0 	.word	0x400204a0
 80074d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2208      	movs	r2, #8
 80074e6:	409a      	lsls	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8088 	beq.w	8007602 <HAL_DMA_IRQHandler+0xe0e>
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8082 	beq.w	8007602 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a41      	ldr	r2, [pc, #260]	; (8007608 <HAL_DMA_IRQHandler+0xe14>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d04a      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3f      	ldr	r2, [pc, #252]	; (800760c <HAL_DMA_IRQHandler+0xe18>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d045      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a3e      	ldr	r2, [pc, #248]	; (8007610 <HAL_DMA_IRQHandler+0xe1c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d040      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a3c      	ldr	r2, [pc, #240]	; (8007614 <HAL_DMA_IRQHandler+0xe20>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d03b      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3b      	ldr	r2, [pc, #236]	; (8007618 <HAL_DMA_IRQHandler+0xe24>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d036      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a39      	ldr	r2, [pc, #228]	; (800761c <HAL_DMA_IRQHandler+0xe28>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d031      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a38      	ldr	r2, [pc, #224]	; (8007620 <HAL_DMA_IRQHandler+0xe2c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d02c      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a36      	ldr	r2, [pc, #216]	; (8007624 <HAL_DMA_IRQHandler+0xe30>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d027      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a35      	ldr	r2, [pc, #212]	; (8007628 <HAL_DMA_IRQHandler+0xe34>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d022      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a33      	ldr	r2, [pc, #204]	; (800762c <HAL_DMA_IRQHandler+0xe38>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01d      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a32      	ldr	r2, [pc, #200]	; (8007630 <HAL_DMA_IRQHandler+0xe3c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d018      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a30      	ldr	r2, [pc, #192]	; (8007634 <HAL_DMA_IRQHandler+0xe40>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2f      	ldr	r2, [pc, #188]	; (8007638 <HAL_DMA_IRQHandler+0xe44>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00e      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a2d      	ldr	r2, [pc, #180]	; (800763c <HAL_DMA_IRQHandler+0xe48>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d009      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a2c      	ldr	r2, [pc, #176]	; (8007640 <HAL_DMA_IRQHandler+0xe4c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_DMA_IRQHandler+0xdaa>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <HAL_DMA_IRQHandler+0xe50>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <HAL_DMA_IRQHandler+0xdbc>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 021c 	bic.w	r2, r2, #28
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e007      	b.n	80075c0 <HAL_DMA_IRQHandler+0xdcc>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 020e 	bic.w	r2, r2, #14
 80075be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
 80075f6:	e004      	b.n	8007602 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007600:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007602:	3728      	adds	r7, #40	; 0x28
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40020010 	.word	0x40020010
 800760c:	40020028 	.word	0x40020028
 8007610:	40020040 	.word	0x40020040
 8007614:	40020058 	.word	0x40020058
 8007618:	40020070 	.word	0x40020070
 800761c:	40020088 	.word	0x40020088
 8007620:	400200a0 	.word	0x400200a0
 8007624:	400200b8 	.word	0x400200b8
 8007628:	40020410 	.word	0x40020410
 800762c:	40020428 	.word	0x40020428
 8007630:	40020440 	.word	0x40020440
 8007634:	40020458 	.word	0x40020458
 8007638:	40020470 	.word	0x40020470
 800763c:	40020488 	.word	0x40020488
 8007640:	400204a0 	.word	0x400204a0
 8007644:	400204b8 	.word	0x400204b8

08007648 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007678:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a84      	ldr	r2, [pc, #528]	; (8007890 <DMA_SetConfig+0x230>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d072      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a82      	ldr	r2, [pc, #520]	; (8007894 <DMA_SetConfig+0x234>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d06d      	beq.n	800776a <DMA_SetConfig+0x10a>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a81      	ldr	r2, [pc, #516]	; (8007898 <DMA_SetConfig+0x238>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d068      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a7f      	ldr	r2, [pc, #508]	; (800789c <DMA_SetConfig+0x23c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d063      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7e      	ldr	r2, [pc, #504]	; (80078a0 <DMA_SetConfig+0x240>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d05e      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a7c      	ldr	r2, [pc, #496]	; (80078a4 <DMA_SetConfig+0x244>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d059      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a7b      	ldr	r2, [pc, #492]	; (80078a8 <DMA_SetConfig+0x248>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d054      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a79      	ldr	r2, [pc, #484]	; (80078ac <DMA_SetConfig+0x24c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04f      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a78      	ldr	r2, [pc, #480]	; (80078b0 <DMA_SetConfig+0x250>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d04a      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a76      	ldr	r2, [pc, #472]	; (80078b4 <DMA_SetConfig+0x254>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d045      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a75      	ldr	r2, [pc, #468]	; (80078b8 <DMA_SetConfig+0x258>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d040      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a73      	ldr	r2, [pc, #460]	; (80078bc <DMA_SetConfig+0x25c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d03b      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a72      	ldr	r2, [pc, #456]	; (80078c0 <DMA_SetConfig+0x260>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d036      	beq.n	800776a <DMA_SetConfig+0x10a>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a70      	ldr	r2, [pc, #448]	; (80078c4 <DMA_SetConfig+0x264>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d031      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a6f      	ldr	r2, [pc, #444]	; (80078c8 <DMA_SetConfig+0x268>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d02c      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a6d      	ldr	r2, [pc, #436]	; (80078cc <DMA_SetConfig+0x26c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d027      	beq.n	800776a <DMA_SetConfig+0x10a>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a6c      	ldr	r2, [pc, #432]	; (80078d0 <DMA_SetConfig+0x270>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d022      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a6a      	ldr	r2, [pc, #424]	; (80078d4 <DMA_SetConfig+0x274>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <DMA_SetConfig+0x10a>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a69      	ldr	r2, [pc, #420]	; (80078d8 <DMA_SetConfig+0x278>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d018      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a67      	ldr	r2, [pc, #412]	; (80078dc <DMA_SetConfig+0x27c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a66      	ldr	r2, [pc, #408]	; (80078e0 <DMA_SetConfig+0x280>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <DMA_SetConfig+0x10a>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a64      	ldr	r2, [pc, #400]	; (80078e4 <DMA_SetConfig+0x284>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a63      	ldr	r2, [pc, #396]	; (80078e8 <DMA_SetConfig+0x288>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <DMA_SetConfig+0x10a>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a61      	ldr	r2, [pc, #388]	; (80078ec <DMA_SetConfig+0x28c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d101      	bne.n	800776e <DMA_SetConfig+0x10e>
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <DMA_SetConfig+0x110>
 800776e:	2300      	movs	r3, #0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00d      	beq.n	8007790 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800777c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800778e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a3e      	ldr	r2, [pc, #248]	; (8007890 <DMA_SetConfig+0x230>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d04a      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a3d      	ldr	r2, [pc, #244]	; (8007894 <DMA_SetConfig+0x234>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d045      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a3b      	ldr	r2, [pc, #236]	; (8007898 <DMA_SetConfig+0x238>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d040      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3a      	ldr	r2, [pc, #232]	; (800789c <DMA_SetConfig+0x23c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d03b      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a38      	ldr	r2, [pc, #224]	; (80078a0 <DMA_SetConfig+0x240>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d036      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a37      	ldr	r2, [pc, #220]	; (80078a4 <DMA_SetConfig+0x244>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d031      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a35      	ldr	r2, [pc, #212]	; (80078a8 <DMA_SetConfig+0x248>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d02c      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a34      	ldr	r2, [pc, #208]	; (80078ac <DMA_SetConfig+0x24c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d027      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a32      	ldr	r2, [pc, #200]	; (80078b0 <DMA_SetConfig+0x250>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a31      	ldr	r2, [pc, #196]	; (80078b4 <DMA_SetConfig+0x254>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a2f      	ldr	r2, [pc, #188]	; (80078b8 <DMA_SetConfig+0x258>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a2e      	ldr	r2, [pc, #184]	; (80078bc <DMA_SetConfig+0x25c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a2c      	ldr	r2, [pc, #176]	; (80078c0 <DMA_SetConfig+0x260>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a2b      	ldr	r2, [pc, #172]	; (80078c4 <DMA_SetConfig+0x264>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <DMA_SetConfig+0x268>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <DMA_SetConfig+0x1d0>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a28      	ldr	r2, [pc, #160]	; (80078cc <DMA_SetConfig+0x26c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <DMA_SetConfig+0x1d4>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <DMA_SetConfig+0x1d6>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d05a      	beq.n	80078f0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	223f      	movs	r2, #63	; 0x3f
 8007844:	409a      	lsls	r2, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007858:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d108      	bne.n	800787c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800787a:	e087      	b.n	800798c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
}
 800788c:	e07e      	b.n	800798c <DMA_SetConfig+0x32c>
 800788e:	bf00      	nop
 8007890:	40020010 	.word	0x40020010
 8007894:	40020028 	.word	0x40020028
 8007898:	40020040 	.word	0x40020040
 800789c:	40020058 	.word	0x40020058
 80078a0:	40020070 	.word	0x40020070
 80078a4:	40020088 	.word	0x40020088
 80078a8:	400200a0 	.word	0x400200a0
 80078ac:	400200b8 	.word	0x400200b8
 80078b0:	40020410 	.word	0x40020410
 80078b4:	40020428 	.word	0x40020428
 80078b8:	40020440 	.word	0x40020440
 80078bc:	40020458 	.word	0x40020458
 80078c0:	40020470 	.word	0x40020470
 80078c4:	40020488 	.word	0x40020488
 80078c8:	400204a0 	.word	0x400204a0
 80078cc:	400204b8 	.word	0x400204b8
 80078d0:	58025408 	.word	0x58025408
 80078d4:	5802541c 	.word	0x5802541c
 80078d8:	58025430 	.word	0x58025430
 80078dc:	58025444 	.word	0x58025444
 80078e0:	58025458 	.word	0x58025458
 80078e4:	5802546c 	.word	0x5802546c
 80078e8:	58025480 	.word	0x58025480
 80078ec:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <DMA_SetConfig+0x338>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d022      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a27      	ldr	r2, [pc, #156]	; (800799c <DMA_SetConfig+0x33c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d01d      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a25      	ldr	r2, [pc, #148]	; (80079a0 <DMA_SetConfig+0x340>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d018      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a24      	ldr	r2, [pc, #144]	; (80079a4 <DMA_SetConfig+0x344>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d013      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a22      	ldr	r2, [pc, #136]	; (80079a8 <DMA_SetConfig+0x348>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00e      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a21      	ldr	r2, [pc, #132]	; (80079ac <DMA_SetConfig+0x34c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d009      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <DMA_SetConfig+0x350>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d004      	beq.n	8007940 <DMA_SetConfig+0x2e0>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <DMA_SetConfig+0x354>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d101      	bne.n	8007944 <DMA_SetConfig+0x2e4>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <DMA_SetConfig+0x2e6>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d020      	beq.n	800798c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794e:	f003 031f 	and.w	r3, r3, #31
 8007952:	2201      	movs	r2, #1
 8007954:	409a      	lsls	r2, r3
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d108      	bne.n	800797c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	60da      	str	r2, [r3, #12]
}
 800797a:	e007      	b.n	800798c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	60da      	str	r2, [r3, #12]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	58025408 	.word	0x58025408
 800799c:	5802541c 	.word	0x5802541c
 80079a0:	58025430 	.word	0x58025430
 80079a4:	58025444 	.word	0x58025444
 80079a8:	58025458 	.word	0x58025458
 80079ac:	5802546c 	.word	0x5802546c
 80079b0:	58025480 	.word	0x58025480
 80079b4:	58025494 	.word	0x58025494

080079b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a42      	ldr	r2, [pc, #264]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x118>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d04a      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a41      	ldr	r2, [pc, #260]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x11c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d045      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x120>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d040      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a3e      	ldr	r2, [pc, #248]	; (8007adc <DMA_CalcBaseAndBitshift+0x124>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d03b      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3c      	ldr	r2, [pc, #240]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x128>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d036      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3b      	ldr	r2, [pc, #236]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x12c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d031      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x130>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d02c      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a38      	ldr	r2, [pc, #224]	; (8007aec <DMA_CalcBaseAndBitshift+0x134>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d027      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a36      	ldr	r2, [pc, #216]	; (8007af0 <DMA_CalcBaseAndBitshift+0x138>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a35      	ldr	r2, [pc, #212]	; (8007af4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01d      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a33      	ldr	r2, [pc, #204]	; (8007af8 <DMA_CalcBaseAndBitshift+0x140>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a32      	ldr	r2, [pc, #200]	; (8007afc <DMA_CalcBaseAndBitshift+0x144>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a30      	ldr	r2, [pc, #192]	; (8007b00 <DMA_CalcBaseAndBitshift+0x148>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a2f      	ldr	r2, [pc, #188]	; (8007b04 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2d      	ldr	r2, [pc, #180]	; (8007b08 <DMA_CalcBaseAndBitshift+0x150>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <DMA_CalcBaseAndBitshift+0xa8>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2c      	ldr	r2, [pc, #176]	; (8007b0c <DMA_CalcBaseAndBitshift+0x154>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d101      	bne.n	8007a64 <DMA_CalcBaseAndBitshift+0xac>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <DMA_CalcBaseAndBitshift+0xae>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d024      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	3b10      	subs	r3, #16
 8007a72:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <DMA_CalcBaseAndBitshift+0x158>)
 8007a74:	fba2 2303 	umull	r2, r3, r2, r3
 8007a78:	091b      	lsrs	r3, r3, #4
 8007a7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	4a24      	ldr	r2, [pc, #144]	; (8007b14 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a84:	5cd3      	ldrb	r3, [r2, r3]
 8007a86:	461a      	mov	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d908      	bls.n	8007aa4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	4b1f      	ldr	r3, [pc, #124]	; (8007b18 <DMA_CalcBaseAndBitshift+0x160>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	1d1a      	adds	r2, r3, #4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	659a      	str	r2, [r3, #88]	; 0x58
 8007aa2:	e00d      	b.n	8007ac0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <DMA_CalcBaseAndBitshift+0x160>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ab2:	e005      	b.n	8007ac0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40020010 	.word	0x40020010
 8007ad4:	40020028 	.word	0x40020028
 8007ad8:	40020040 	.word	0x40020040
 8007adc:	40020058 	.word	0x40020058
 8007ae0:	40020070 	.word	0x40020070
 8007ae4:	40020088 	.word	0x40020088
 8007ae8:	400200a0 	.word	0x400200a0
 8007aec:	400200b8 	.word	0x400200b8
 8007af0:	40020410 	.word	0x40020410
 8007af4:	40020428 	.word	0x40020428
 8007af8:	40020440 	.word	0x40020440
 8007afc:	40020458 	.word	0x40020458
 8007b00:	40020470 	.word	0x40020470
 8007b04:	40020488 	.word	0x40020488
 8007b08:	400204a0 	.word	0x400204a0
 8007b0c:	400204b8 	.word	0x400204b8
 8007b10:	aaaaaaab 	.word	0xaaaaaaab
 8007b14:	08027cbc 	.word	0x08027cbc
 8007b18:	fffffc00 	.word	0xfffffc00

08007b1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d120      	bne.n	8007b72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d858      	bhi.n	8007bea <DMA_CheckFifoParam+0xce>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <DMA_CheckFifoParam+0x24>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b63 	.word	0x08007b63
 8007b48:	08007b51 	.word	0x08007b51
 8007b4c:	08007beb 	.word	0x08007beb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d048      	beq.n	8007bee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b60:	e045      	b.n	8007bee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b6a:	d142      	bne.n	8007bf2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b70:	e03f      	b.n	8007bf2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7a:	d123      	bne.n	8007bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d838      	bhi.n	8007bf6 <DMA_CheckFifoParam+0xda>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <DMA_CheckFifoParam+0x70>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007ba3 	.word	0x08007ba3
 8007b94:	08007b9d 	.word	0x08007b9d
 8007b98:	08007bb5 	.word	0x08007bb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba0:	e030      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d025      	beq.n	8007bfa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bb2:	e022      	b.n	8007bfa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bbc:	d11f      	bne.n	8007bfe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bc2:	e01c      	b.n	8007bfe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d902      	bls.n	8007bd2 <DMA_CheckFifoParam+0xb6>
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d003      	beq.n	8007bd8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007bd0:	e018      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8007bd6:	e015      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
    break;
 8007be8:	e00b      	b.n	8007c02 <DMA_CheckFifoParam+0xe6>
        break;
 8007bea:	bf00      	nop
 8007bec:	e00a      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        break;
 8007bee:	bf00      	nop
 8007bf0:	e008      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        break;
 8007bf2:	bf00      	nop
 8007bf4:	e006      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        break;
 8007bf6:	bf00      	nop
 8007bf8:	e004      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        break;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
        break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <DMA_CheckFifoParam+0xe8>
    break;
 8007c02:	bf00      	nop
    }
  }

  return status;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop

08007c14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d022      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a36      	ldr	r2, [pc, #216]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01d      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d018      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a33      	ldr	r2, [pc, #204]	; (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a32      	ldr	r2, [pc, #200]	; (8007d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00e      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a30      	ldr	r2, [pc, #192]	; (8007d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d009      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2f      	ldr	r2, [pc, #188]	; (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d004      	beq.n	8007c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d101      	bne.n	8007c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01a      	beq.n	8007cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	3b08      	subs	r3, #8
 8007c84:	4a28      	ldr	r2, [pc, #160]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c86:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8a:	091b      	lsrs	r3, r3, #4
 8007c8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a24      	ldr	r2, [pc, #144]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ca0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 031f 	and.w	r3, r3, #31
 8007ca8:	2201      	movs	r2, #1
 8007caa:	409a      	lsls	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007cb0:	e024      	b.n	8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	3b10      	subs	r3, #16
 8007cba:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	091b      	lsrs	r3, r3, #4
 8007cc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d806      	bhi.n	8007cda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d902      	bls.n	8007cda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007cec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	409a      	lsls	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007cfc:	bf00      	nop
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	58025408 	.word	0x58025408
 8007d0c:	5802541c 	.word	0x5802541c
 8007d10:	58025430 	.word	0x58025430
 8007d14:	58025444 	.word	0x58025444
 8007d18:	58025458 	.word	0x58025458
 8007d1c:	5802546c 	.word	0x5802546c
 8007d20:	58025480 	.word	0x58025480
 8007d24:	58025494 	.word	0x58025494
 8007d28:	cccccccd 	.word	0xcccccccd
 8007d2c:	16009600 	.word	0x16009600
 8007d30:	58025880 	.word	0x58025880
 8007d34:	aaaaaaab 	.word	0xaaaaaaab
 8007d38:	400204b8 	.word	0x400204b8
 8007d3c:	4002040f 	.word	0x4002040f
 8007d40:	10008200 	.word	0x10008200
 8007d44:	40020880 	.word	0x40020880

08007d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d04a      	beq.n	8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d847      	bhi.n	8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a25      	ldr	r2, [pc, #148]	; (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d022      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d01d      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a22      	ldr	r2, [pc, #136]	; (8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a21      	ldr	r2, [pc, #132]	; (8007e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d013      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00e      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d101      	bne.n	8007db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007db8:	2300      	movs	r3, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007dd0:	671a      	str	r2, [r3, #112]	; 0x70
 8007dd2:	e009      	b.n	8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	461a      	mov	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a11      	ldr	r2, [pc, #68]	; (8007e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007de6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	2201      	movs	r2, #1
 8007dee:	409a      	lsls	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	58025408 	.word	0x58025408
 8007e04:	5802541c 	.word	0x5802541c
 8007e08:	58025430 	.word	0x58025430
 8007e0c:	58025444 	.word	0x58025444
 8007e10:	58025458 	.word	0x58025458
 8007e14:	5802546c 	.word	0x5802546c
 8007e18:	58025480 	.word	0x58025480
 8007e1c:	58025494 	.word	0x58025494
 8007e20:	1600963f 	.word	0x1600963f
 8007e24:	58025940 	.word	0x58025940
 8007e28:	1000823f 	.word	0x1000823f
 8007e2c:	40020940 	.word	0x40020940

08007e30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e0c6      	b.n	8007fd0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f009 fd64 	bl	8011918 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2223      	movs	r2, #35	; 0x23
 8007e54:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e56:	4b60      	ldr	r3, [pc, #384]	; (8007fd8 <HAL_ETH_Init+0x1a8>)
 8007e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e5c:	4a5e      	ldr	r2, [pc, #376]	; (8007fd8 <HAL_ETH_Init+0x1a8>)
 8007e5e:	f043 0302 	orr.w	r3, r3, #2
 8007e62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e66:	4b5c      	ldr	r3, [pc, #368]	; (8007fd8 <HAL_ETH_Init+0x1a8>)
 8007e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7a1b      	ldrb	r3, [r3, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f7fc fa83 	bl	8004388 <HAL_SYSCFG_ETHInterfaceSelect>
 8007e82:	e003      	b.n	8007e8c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007e84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007e88:	f7fc fa7e 	bl	8004388 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ea4:	f7fc fa34 	bl	8004310 <HAL_GetTick>
 8007ea8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007eaa:	e00f      	b.n	8007ecc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007eac:	f7fc fa30 	bl	8004310 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007eba:	d907      	bls.n	8007ecc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2204      	movs	r2, #4
 8007ec0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	22e0      	movs	r2, #224	; 0xe0
 8007ec6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e081      	b.n	8007fd0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e6      	bne.n	8007eac <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 faa4 	bl	800942c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007ee4:	f002 ffec 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4a3c      	ldr	r2, [pc, #240]	; (8007fdc <HAL_ETH_Init+0x1ac>)
 8007eec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef0:	0c9a      	lsrs	r2, r3, #18
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f9f7 	bl	80092f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007f18:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	22e0      	movs	r2, #224	; 0xe0
 8007f34:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e04a      	b.n	8007fd0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8007f42:	4413      	add	r3, r2
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <HAL_ETH_Init+0x1b0>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6952      	ldr	r2, [r2, #20]
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	6809      	ldr	r1, [r1, #0]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	f241 1308 	movw	r3, #4360	; 0x1108
 8007f5a:	440b      	add	r3, r1
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fabc 	bl	80094dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fb00 	bl	800956a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	3305      	adds	r3, #5
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	021a      	lsls	r2, r3, #8
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	3303      	adds	r3, #3
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	061a      	lsls	r2, r3, #24
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	3302      	adds	r3, #2
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007fa8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007fb6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007fb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	431bde83 	.word	0x431bde83
 8007fe0:	ffff8001 	.word	0xffff8001

08007fe4 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_ETH_DescAssignMemory+0x28>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d904      	bls.n	8008016 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e021      	b.n	800805a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008072:	2b10      	cmp	r3, #16
 8008074:	d14c      	bne.n	8008110 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2223      	movs	r2, #35	; 0x23
 800807a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0202 	orr.w	r2, r2, #2
 800808a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	f241 1304 	movw	r3, #4356	; 0x1104
 80080b8:	4413      	add	r3, r2
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6811      	ldr	r1, [r2, #0]
 80080c0:	f043 0201 	orr.w	r2, r3, #1
 80080c4:	f241 1304 	movw	r3, #4356	; 0x1104
 80080c8:	440b      	add	r3, r1
 80080ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80080d4:	4413      	add	r3, r2
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6811      	ldr	r1, [r2, #0]
 80080dc:	f043 0201 	orr.w	r2, r3, #1
 80080e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80080e4:	440b      	add	r3, r1
 80080e6:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80080fa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80080fe:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2210      	movs	r2, #16
 8008104:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2222      	movs	r2, #34	; 0x22
 800810a:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d040      	beq.n	80081b0 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2223      	movs	r2, #35	; 0x23
 8008132:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	f241 1304 	movw	r3, #4356	; 0x1104
 800813c:	4413      	add	r3, r2
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6811      	ldr	r1, [r2, #0]
 8008144:	f023 0201 	bic.w	r2, r3, #1
 8008148:	f241 1304 	movw	r3, #4356	; 0x1104
 800814c:	440b      	add	r3, r1
 800814e:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	f241 1308 	movw	r3, #4360	; 0x1108
 8008158:	4413      	add	r3, r2
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6811      	ldr	r1, [r2, #0]
 8008160:	f023 0201 	bic.w	r2, r3, #1
 8008164:	f241 1308 	movw	r3, #4360	; 0x1108
 8008168:	440b      	add	r3, r1
 800816a:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0202 	bic.w	r2, r2, #2
 800819e:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2210      	movs	r2, #16
 80081a4:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2210      	movs	r2, #16
 80081aa:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d107      	bne.n	80081e0 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d4:	f043 0201 	orr.w	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e073      	b.n	80082c8 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d16e      	bne.n	80082c6 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80081e8:	2200      	movs	r2, #0
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f001 fa19 	bl	8009624 <ETH_Prepare_Tx_Descriptors>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fc:	f043 0202 	orr.w	r2, r3, #2
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e05f      	b.n	80082c8 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3206      	adds	r2, #6
 8008210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008214:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	629a      	str	r2, [r3, #40]	; 0x28
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	2b03      	cmp	r3, #3
 8008226:	d904      	bls.n	8008232 <HAL_ETH_Transmit+0x74>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	1f1a      	subs	r2, r3, #4
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	3106      	adds	r1, #6
 800823e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008242:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008246:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8008248:	f7fc f862 	bl	8004310 <HAL_GetTick>
 800824c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800824e:	e034      	b.n	80082ba <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d011      	beq.n	8008286 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008266:	f043 0208 	orr.w	r2, r3, #8
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	22e0      	movs	r2, #224	; 0xe0
 8008280:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e020      	b.n	80082c8 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828c:	d015      	beq.n	80082ba <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800828e:	f7fc f83f 	bl	8004310 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <HAL_ETH_Transmit+0xe6>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a8:	f043 0204 	orr.w	r2, r3, #4
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	22e0      	movs	r2, #224	; 0xe0
 80082b4:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e006      	b.n	80082c8 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dbc6      	blt.n	8008250 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3344      	adds	r3, #68	; 0x44
 80082dc:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d06b      	beq.n	80083da <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8008302:	2300      	movs	r3, #0
 8008304:	e0ce      	b.n	80084a4 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	3301      	adds	r3, #1
 800830a:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d036      	beq.n	8008386 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3301      	adds	r3, #1
 800831c:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d902      	bls.n	800833a <HAL_ETH_IsRxDataAvailable+0x6a>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	3b04      	subs	r3, #4
 8008338:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008342:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	db11      	blt.n	8008370 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2201      	movs	r2, #1
 800835c:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3301      	adds	r3, #1
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d902      	bls.n	8008370 <HAL_ETH_IsRxDataAvailable+0xa0>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3b04      	subs	r3, #4
 800836e:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8008382:	2301      	movs	r3, #1
 8008384:	e08e      	b.n	80084a4 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d012      	beq.n	80083b8 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8008396:	2301      	movs	r3, #1
 8008398:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3301      	adds	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d902      	bls.n	80083ac <HAL_ETH_IsRxDataAvailable+0xdc>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	3b04      	subs	r3, #4
 80083aa:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e010      	b.n	80083da <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3301      	adds	r3, #1
 80083bc:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3301      	adds	r3, #1
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d902      	bls.n	80083d0 <HAL_ETH_IsRxDataAvailable+0x100>
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3b04      	subs	r3, #4
 80083ce:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	db02      	blt.n	80083e8 <HAL_ETH_IsRxDataAvailable+0x118>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d98e      	bls.n	8008306 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d056      	beq.n	800849c <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e03b      	b.n	8008486 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800841c:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	3b01      	subs	r3, #1
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	429a      	cmp	r2, r3
 8008462:	d20d      	bcs.n	8008480 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	3301      	adds	r3, #1
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d902      	bls.n	8008476 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3b04      	subs	r3, #4
 8008474:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847e:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3301      	adds	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	429a      	cmp	r2, r3
 800848c:	d3bf      	bcc.n	800840e <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6819      	ldr	r1, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	f241 1328 	movw	r3, #4392	; 0x1128
 8008498:	440b      	add	r3, r1
 800849a:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	619a      	str	r2, [r3, #24]

  return 0;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3724      	adds	r7, #36	; 0x24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3344      	adds	r3, #68	; 0x44
 80084be:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e07d      	b.n	80085e4 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10f      	bne.n	8008510 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff feed 	bl	80082d0 <HAL_ETH_IsRxDataAvailable>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e071      	b.n	80085e4 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8008510:	2300      	movs	r3, #0
 8008512:	623b      	str	r3, [r7, #32]
 8008514:	e031      	b.n	800857a <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	461a      	mov	r2, r3
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695a      	ldr	r2, [r3, #20]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	461a      	mov	r2, r3
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695a      	ldr	r2, [r3, #20]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008550:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	3301      	adds	r3, #1
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b03      	cmp	r3, #3
 800855c:	d902      	bls.n	8008564 <HAL_ETH_GetRxDataBuffer+0xb4>
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	3b04      	subs	r3, #4
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856c:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	3301      	adds	r3, #1
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	3b01      	subs	r3, #1
 8008580:	6a3a      	ldr	r2, [r7, #32]
 8008582:	429a      	cmp	r2, r3
 8008584:	d3c7      	bcc.n	8008516 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	461a      	mov	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d803      	bhi.n	80085b0 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	605a      	str	r2, [r3, #4]
 80085ae:	e018      	b.n	80085e2 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	461a      	mov	r2, r3
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	e001      	b.n	80085e2 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3728      	adds	r7, #40	; 0x28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3344      	adds	r3, #68	; 0x44
 80085fa:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fe60 	bl	80082d0 <HAL_ETH_IsRxDataAvailable>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e017      	b.n	800864a <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	3b01      	subs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d902      	bls.n	8008632 <HAL_ETH_GetRxDataLength+0x46>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	3b04      	subs	r3, #4
 8008630:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8008652:	b480      	push	{r7}
 8008654:	b089      	sub	sp, #36	; 0x24
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3344      	adds	r3, #68	; 0x44
 800865e:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866e:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e057      	b.n	8008732 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	3301      	adds	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008690:	2300      	movs	r3, #0
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	e03b      	b.n	800870e <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086a4:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d20d      	bcs.n	8008708 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d902      	bls.n	80086fe <HAL_ETH_BuildRxDescriptors+0xac>
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	3b04      	subs	r3, #4
 80086fc:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008706:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3301      	adds	r3, #1
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	429a      	cmp	r2, r3
 8008714:	d3bf      	bcc.n	8008696 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6819      	ldr	r1, [r3, #0]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	f241 1328 	movw	r3, #4392	; 0x1128
 8008720:	440b      	add	r3, r1
 8008722:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3724      	adds	r7, #36	; 0x24
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d113      	bne.n	8008782 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	f241 1334 	movw	r3, #4404	; 0x1134
 8008762:	4413      	add	r3, r2
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d109      	bne.n	8008782 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8f2 	bl	8008958 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800877c:	f248 0240 	movw	r2, #32832	; 0x8040
 8008780:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	d113      	bne.n	80087bc <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	f241 1334 	movw	r3, #4404	; 0x1134
 800879c:	4413      	add	r3, r2
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d109      	bne.n	80087bc <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f8cb 	bl	8008944 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80087b6:	f248 0201 	movw	r2, #32769	; 0x8001
 80087ba:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ce:	d149      	bne.n	8008864 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	f241 1334 	movw	r3, #4404	; 0x1134
 80087d8:	4413      	add	r3, r2
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087e4:	d13e      	bne.n	8008864 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ea:	f043 0208 	orr.w	r2, r3, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008804:	d11b      	bne.n	800883e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f241 1302 	movw	r3, #4354	; 0x1102
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	f241 1334 	movw	r3, #4404	; 0x1134
 8008822:	4413      	add	r3, r2
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6811      	ldr	r1, [r2, #0]
 800882a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800882e:	f241 1334 	movw	r3, #4404	; 0x1134
 8008832:	440b      	add	r3, r1
 8008834:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	22e0      	movs	r2, #224	; 0xe0
 800883a:	66da      	str	r2, [r3, #108]	; 0x6c
 800883c:	e00f      	b.n	800885e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008858:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800885c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f884 	bl	800896c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800886c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008870:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008874:	d10e      	bne.n	8008894 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	22e0      	movs	r2, #224	; 0xe0
 8008886:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f879 	bl	8008980 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d10f      	bne.n	80088c4 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f86c 	bl	8008994 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d10f      	bne.n	80088f4 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088dc:	f003 020f 	and.w	r2, r3, #15
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f85e 	bl	80089a8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80088f4:	f7fd f8ba 	bl	8005a6c <HAL_GetCurrentCPUID>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d10d      	bne.n	800891a <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <HAL_ETH_IRQHandler+0x1fc>)
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <HAL_ETH_IRQHandler+0x1fc>)
 800890c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008910:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f852 	bl	80089bc <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8008918:	e00c      	b.n	8008934 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <HAL_ETH_IRQHandler+0x200>)
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008926:	4b06      	ldr	r3, [pc, #24]	; (8008940 <HAL_ETH_IRQHandler+0x200>)
 8008928:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800892c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f844 	bl	80089bc <HAL_ETH_WakeUpCallback>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	58000080 	.word	0x58000080
 8008940:	580000c0 	.word	0x580000c0

08008944 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e03e      	b.n	8008a70 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089fa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	055b      	lsls	r3, r3, #21
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f043 030c 	orr.w	r3, r3, #12
 8008a1e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008a32:	f7fb fc6d 	bl	8004310 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008a38:	e009      	b.n	8008a4e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008a3a:	f7fb fc69 	bl	8004310 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a48:	d901      	bls.n	8008a4e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e010      	b.n	8008a70 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1ed      	bne.n	8008a3a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e03c      	b.n	8008b14 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008aa2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	055b      	lsls	r3, r3, #21
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f023 030c 	bic.w	r3, r3, #12
 8008ac6:	f043 0304 	orr.w	r3, r3, #4
 8008aca:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <HAL_ETH_WritePHYRegister+0xa4>)
 8008ada:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8008ade:	4a0f      	ldr	r2, [pc, #60]	; (8008b1c <HAL_ETH_WritePHYRegister+0xa4>)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008ae6:	f7fb fc13 	bl	8004310 <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008aec:	e009      	b.n	8008b02 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008aee:	f7fb fc0f 	bl	8004310 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008afc:	d901      	bls.n	8008b02 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e008      	b.n	8008b14 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1ed      	bne.n	8008aee <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	40028000 	.word	0x40028000

08008b20 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e1c3      	b.n	8008ebc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 020c 	and.w	r2, r3, #12
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	bf14      	ite	ne
 8008b50:	2301      	movne	r3, #1
 8008b52:	2300      	moveq	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bf0c      	ite	eq
 8008b7a:	2301      	moveq	r3, #1
 8008b7c:	2300      	movne	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	bf14      	ite	ne
 8008b96:	2301      	movne	r3, #1
 8008b98:	2300      	moveq	r3, #0
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bf14      	ite	ne
 8008bca:	2301      	movne	r3, #1
 8008bcc:	2300      	moveq	r3, #0
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bf14      	ite	ne
 8008be4:	2301      	movne	r3, #1
 8008be6:	2300      	moveq	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bf14      	ite	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	2300      	moveq	r3, #0
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bf14      	ite	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	2300      	moveq	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bf14      	ite	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	2300      	moveq	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf14      	ite	ne
 8008cb6:	2301      	movne	r3, #1
 8008cb8:	2300      	moveq	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf14      	ite	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	2300      	moveq	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bf14      	ite	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	2300      	moveq	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	0e5b      	lsrs	r3, r3, #25
 8008d7e:	f003 021f 	and.w	r2, r3, #31
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bf14      	ite	ne
 8008d94:	2301      	movne	r3, #1
 8008d96:	2300      	moveq	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf14      	ite	ne
 8008dbe:	2301      	movne	r3, #1
 8008dc0:	2300      	moveq	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bf0c      	ite	eq
 8008dda:	2301      	moveq	r3, #1
 8008ddc:	2300      	movne	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	0c1b      	lsrs	r3, r3, #16
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bf14      	ite	ne
 8008e14:	2301      	movne	r3, #1
 8008e16:	2300      	moveq	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bf14      	ite	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	2300      	moveq	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008e48:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008e58:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bf14      	ite	ne
 8008e70:	2301      	movne	r3, #1
 8008e72:	2300      	moveq	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008e86:	f003 0310 	and.w	r3, r3, #16
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf14      	ite	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	2300      	moveq	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e00a      	b.n	8008ef2 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d105      	bne.n	8008ef0 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f860 	bl	8008fac <ETH_SetMACConfig>

    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e000      	b.n	8008ef2 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f0c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f14:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008f16:	f001 ffd3 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 8008f1a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a1e      	ldr	r2, [pc, #120]	; (8008f98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d908      	bls.n	8008f36 <HAL_ETH_SetMDIOClockRange+0x3a>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d804      	bhi.n	8008f36 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e027      	b.n	8008f86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d908      	bls.n	8008f50 <HAL_ETH_SetMDIOClockRange+0x54>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4a17      	ldr	r2, [pc, #92]	; (8008fa0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d204      	bcs.n	8008f50 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	e01a      	b.n	8008f86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a13      	ldr	r2, [pc, #76]	; (8008fa0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d303      	bcc.n	8008f60 <HAL_ETH_SetMDIOClockRange+0x64>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	4a12      	ldr	r2, [pc, #72]	; (8008fa4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d911      	bls.n	8008f84 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4a10      	ldr	r2, [pc, #64]	; (8008fa4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d908      	bls.n	8008f7a <HAL_ETH_SetMDIOClockRange+0x7e>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a0f      	ldr	r2, [pc, #60]	; (8008fa8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d804      	bhi.n	8008f7a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	e005      	b.n	8008f86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e000      	b.n	8008f86 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008f84:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	01312cff 	.word	0x01312cff
 8008f9c:	02160ebf 	.word	0x02160ebf
 8008fa0:	03938700 	.word	0x03938700
 8008fa4:	05f5e0ff 	.word	0x05f5e0ff
 8008fa8:	08f0d17f 	.word	0x08f0d17f

08008fac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8008fbe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	791b      	ldrb	r3, [r3, #4]
 8008fc4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8008fc6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	7b1b      	ldrb	r3, [r3, #12]
 8008fcc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008fce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	7b5b      	ldrb	r3, [r3, #13]
 8008fd4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008fd6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	7b9b      	ldrb	r3, [r3, #14]
 8008fdc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008fde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	7bdb      	ldrb	r3, [r3, #15]
 8008fe4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008fe6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d102      	bne.n	8008ff6 <ETH_SetMACConfig+0x4a>
 8008ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ff4:	e000      	b.n	8008ff8 <ETH_SetMACConfig+0x4c>
 8008ff6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008ff8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	7c52      	ldrb	r2, [r2, #17]
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	d102      	bne.n	8009008 <ETH_SetMACConfig+0x5c>
 8009002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009006:	e000      	b.n	800900a <ETH_SetMACConfig+0x5e>
 8009008:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800900a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	7c9b      	ldrb	r3, [r3, #18]
 8009010:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009012:	431a      	orrs	r2, r3
                                macconf->Speed |
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009018:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800901e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	7f1b      	ldrb	r3, [r3, #28]
 8009024:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8009026:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	7f5b      	ldrb	r3, [r3, #29]
 800902c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800902e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	7f92      	ldrb	r2, [r2, #30]
 8009034:	2a00      	cmp	r2, #0
 8009036:	d102      	bne.n	800903e <ETH_SetMACConfig+0x92>
 8009038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800903c:	e000      	b.n	8009040 <ETH_SetMACConfig+0x94>
 800903e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8009040:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	7fdb      	ldrb	r3, [r3, #31]
 8009046:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8009048:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009050:	2a00      	cmp	r2, #0
 8009052:	d102      	bne.n	800905a <ETH_SetMACConfig+0xae>
 8009054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009058:	e000      	b.n	800905c <ETH_SetMACConfig+0xb0>
 800905a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800905c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8009062:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800906a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800906c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	4b56      	ldr	r3, [pc, #344]	; (80091d8 <ETH_SetMACConfig+0x22c>)
 800907e:	4013      	ands	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	430b      	orrs	r3, r1
 8009088:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009096:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8009098:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80090a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80090ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	d102      	bne.n	80090be <ETH_SetMACConfig+0x112>
 80090b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80090bc:	e000      	b.n	80090c0 <ETH_SetMACConfig+0x114>
 80090be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80090c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	4b42      	ldr	r3, [pc, #264]	; (80091dc <ETH_SetMACConfig+0x230>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6812      	ldr	r2, [r2, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	430b      	orrs	r3, r1
 80090dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	4b3a      	ldr	r3, [pc, #232]	; (80091e0 <ETH_SetMACConfig+0x234>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6812      	ldr	r2, [r2, #0]
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	430b      	orrs	r3, r1
 8009100:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009108:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800910e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009116:	2a00      	cmp	r2, #0
 8009118:	d101      	bne.n	800911e <ETH_SetMACConfig+0x172>
 800911a:	2280      	movs	r2, #128	; 0x80
 800911c:	e000      	b.n	8009120 <ETH_SetMACConfig+0x174>
 800911e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009120:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009126:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009132:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009136:	4013      	ands	r3, r2
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	68f9      	ldr	r1, [r7, #12]
 800913e:	430b      	orrs	r3, r1
 8009140:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009148:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009150:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915e:	f023 0103 	bic.w	r1, r3, #3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	430a      	orrs	r2, r1
 800916a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009176:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009192:	2a00      	cmp	r2, #0
 8009194:	d101      	bne.n	800919a <ETH_SetMACConfig+0x1ee>
 8009196:	2240      	movs	r2, #64	; 0x40
 8009198:	e000      	b.n	800919c <ETH_SetMACConfig+0x1f0>
 800919a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800919c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80091a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80091a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80091ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80091bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	00048083 	.word	0x00048083
 80091dc:	c0f88000 	.word	0xc0f88000
 80091e0:	fffffef0 	.word	0xfffffef0

080091e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	4b38      	ldr	r3, [pc, #224]	; (80092dc <ETH_SetDMAConfig+0xf8>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	6809      	ldr	r1, [r1, #0]
 8009204:	431a      	orrs	r2, r3
 8009206:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800920a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009216:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	7b1b      	ldrb	r3, [r3, #12]
 800921c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	f241 0304 	movw	r3, #4100	; 0x1004
 800922a:	4413      	add	r3, r2
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b2c      	ldr	r3, [pc, #176]	; (80092e0 <ETH_SetDMAConfig+0xfc>)
 8009230:	4013      	ands	r3, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6811      	ldr	r1, [r2, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	431a      	orrs	r2, r3
 800923a:	f241 0304 	movw	r3, #4100	; 0x1004
 800923e:	440b      	add	r3, r1
 8009240:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	7b5b      	ldrb	r3, [r3, #13]
 8009246:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <ETH_SetDMAConfig+0x100>)
 800925c:	4013      	ands	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6811      	ldr	r1, [r2, #0]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	431a      	orrs	r2, r3
 8009266:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800926a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	7d1b      	ldrb	r3, [r3, #20]
 8009274:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009276:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	7f5b      	ldrb	r3, [r3, #29]
 800927c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	f241 1304 	movw	r3, #4356	; 0x1104
 800928a:	4413      	add	r3, r2
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <ETH_SetDMAConfig+0x104>)
 8009290:	4013      	ands	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6811      	ldr	r1, [r2, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	431a      	orrs	r2, r3
 800929a:	f241 1304 	movw	r3, #4356	; 0x1104
 800929e:	440b      	add	r3, r1
 80092a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	7f1b      	ldrb	r3, [r3, #28]
 80092a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80092b8:	4413      	add	r3, r2
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <ETH_SetDMAConfig+0x108>)
 80092be:	4013      	ands	r3, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6811      	ldr	r1, [r2, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80092cc:	440b      	add	r3, r1
 80092ce:	601a      	str	r2, [r3, #0]
}
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	ffff87fd 	.word	0xffff87fd
 80092e0:	ffff2ffe 	.word	0xffff2ffe
 80092e4:	fffec000 	.word	0xfffec000
 80092e8:	ffc0efef 	.word	0xffc0efef
 80092ec:	7fc0ffff 	.word	0x7fc0ffff

080092f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b0a4      	sub	sp, #144	; 0x90
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80092fe:	2300      	movs	r3, #0
 8009300:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009308:	2300      	movs	r3, #0
 800930a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800932c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009330:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009332:	2300      	movs	r3, #0
 8009334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009338:	2300      	movs	r3, #0
 800933a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800933c:	2300      	movs	r3, #0
 800933e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009342:	2300      	movs	r3, #0
 8009344:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009348:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800934c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800934e:	2300      	movs	r3, #0
 8009350:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009354:	2300      	movs	r3, #0
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009358:	2301      	movs	r3, #1
 800935a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800935e:	2300      	movs	r3, #0
 8009360:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009364:	2300      	movs	r3, #0
 8009366:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800936a:	2300      	movs	r3, #0
 800936c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800936e:	2300      	movs	r3, #0
 8009370:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009372:	2300      	movs	r3, #0
 8009374:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800937c:	2300      	movs	r3, #0
 800937e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009388:	2320      	movs	r3, #32
 800938a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800939a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80093a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80093ac:	2302      	movs	r3, #2
 80093ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80093be:	2300      	movs	r3, #0
 80093c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80093c4:	2301      	movs	r3, #1
 80093c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80093ca:	2300      	movs	r3, #0
 80093cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80093d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fde6 	bl	8008fac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80093e4:	2301      	movs	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80093fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009400:	2300      	movs	r3, #0
 8009402:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009408:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8009410:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fee1 	bl	80091e4 <ETH_SetDMAConfig>
}
 8009422:	bf00      	nop
 8009424:	3790      	adds	r7, #144	; 0x90
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800943c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009444:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009446:	f001 fd3b 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 800944a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d908      	bls.n	8009466 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d804      	bhi.n	8009466 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e027      	b.n	80094b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d908      	bls.n	8009480 <ETH_MAC_MDIO_ClkConfig+0x54>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4a17      	ldr	r2, [pc, #92]	; (80094d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d204      	bcs.n	8009480 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e01a      	b.n	80094b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d303      	bcc.n	8009490 <ETH_MAC_MDIO_ClkConfig+0x64>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4a12      	ldr	r2, [pc, #72]	; (80094d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d911      	bls.n	80094b4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d908      	bls.n	80094aa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4a0f      	ldr	r2, [pc, #60]	; (80094d8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d804      	bhi.n	80094aa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e005      	b.n	80094b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	e000      	b.n	80094b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80094b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	01312cff 	.word	0x01312cff
 80094cc:	02160ebf 	.word	0x02160ebf
 80094d0:	03938700 	.word	0x03938700
 80094d4:	05f5e0ff 	.word	0x05f5e0ff
 80094d8:	08f0d17f 	.word	0x08f0d17f

080094dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e01d      	b.n	8009526 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68d9      	ldr	r1, [r3, #12]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4613      	mov	r3, r2
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	4413      	add	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	440b      	add	r3, r1
 80094fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2200      	movs	r2, #0
 8009506:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2200      	movs	r2, #0
 800950c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2200      	movs	r2, #0
 8009512:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	3206      	adds	r2, #6
 800951c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b03      	cmp	r3, #3
 800952a:	d9de      	bls.n	80094ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	f241 132c 	movw	r3, #4396	; 0x112c
 800953a:	4413      	add	r3, r2
 800953c:	2203      	movs	r2, #3
 800953e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68d9      	ldr	r1, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	f241 1314 	movw	r3, #4372	; 0x1114
 800954c:	4413      	add	r3, r2
 800954e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800955c:	601a      	str	r2, [r3, #0]
}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e024      	b.n	80095c2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6919      	ldr	r1, [r3, #16]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4613      	mov	r3, r2
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	4413      	add	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	440b      	add	r3, r1
 8009588:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2200      	movs	r2, #0
 800959a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2200      	movs	r2, #0
 80095ac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3310      	adds	r3, #16
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3301      	adds	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d9d7      	bls.n	8009578 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	f241 1330 	movw	r3, #4400	; 0x1130
 80095ee:	4413      	add	r3, r2
 80095f0:	2203      	movs	r2, #3
 80095f2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6919      	ldr	r1, [r3, #16]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8009600:	4413      	add	r3, r2
 8009602:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	f241 1328 	movw	r3, #4392	; 0x1128
 8009614:	4413      	add	r3, r2
 8009616:	6019      	str	r1, [r3, #0]
}
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8009624:	b480      	push	{r7}
 8009626:	b08d      	sub	sp, #52	; 0x34
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3318      	adds	r3, #24
 8009634:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8009642:	2300      	movs	r3, #0
 8009644:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009666:	d007      	beq.n	8009678 <ETH_Prepare_Tx_Descriptors+0x54>
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	3304      	adds	r3, #4
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8009678:	2302      	movs	r3, #2
 800967a:	e24a      	b.n	8009b12 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d044      	beq.n	8009712 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	4b72      	ldr	r3, [pc, #456]	; (8009858 <ETH_Prepare_Tx_Descriptors+0x234>)
 800968e:	4013      	ands	r3, r2
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009694:	431a      	orrs	r2, r3
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80096b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d027      	beq.n	8009712 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	431a      	orrs	r2, r3
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ec:	431a      	orrs	r2, r3
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009700:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009710:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00e      	beq.n	800973c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	4b4e      	ldr	r3, [pc, #312]	; (800985c <ETH_Prepare_Tx_Descriptors+0x238>)
 8009724:	4013      	ands	r3, r2
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	6992      	ldr	r2, [r2, #24]
 800972a:	431a      	orrs	r2, r3
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b00      	cmp	r3, #0
 8009746:	d105      	bne.n	8009754 <ETH_Prepare_Tx_Descriptors+0x130>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	2b00      	cmp	r3, #0
 8009752:	d030      	beq.n	80097b6 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800976c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976e:	3301      	adds	r3, #1
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	2b03      	cmp	r3, #3
 8009776:	d902      	bls.n	800977e <ETH_Prepare_Tx_Descriptors+0x15a>
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	3b04      	subs	r3, #4
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009786:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	3301      	adds	r3, #1
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800979a:	d10c      	bne.n	80097b6 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80097b2:	2302      	movs	r3, #2
 80097b4:	e1ad      	b.n	8009b12 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	3301      	adds	r3, #1
 80097ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	4b24      	ldr	r3, [pc, #144]	; (800985c <ETH_Prepare_Tx_Descriptors+0x238>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	6852      	ldr	r2, [r2, #4]
 80097d2:	431a      	orrs	r2, r3
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d012      	beq.n	8009806 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80097f6:	4013      	ands	r3, r2
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	6852      	ldr	r2, [r2, #4]
 80097fc:	0412      	lsls	r2, r2, #16
 80097fe:	431a      	orrs	r2, r3
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	e008      	b.n	8009818 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	2200      	movs	r2, #0
 800980a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	4b13      	ldr	r3, [pc, #76]	; (8009860 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8009812:	4013      	ands	r3, r2
 8009814:	6a3a      	ldr	r2, [r7, #32]
 8009816:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	d021      	beq.n	8009868 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	04db      	lsls	r3, r3, #19
 8009832:	431a      	orrs	r2, r3
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <ETH_Prepare_Tx_Descriptors+0x240>)
 800983e:	4013      	ands	r3, r2
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	69d2      	ldr	r2, [r2, #28]
 8009844:	431a      	orrs	r2, r3
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	e02e      	b.n	80098b6 <ETH_Prepare_Tx_Descriptors+0x292>
 8009858:	ffff0000 	.word	0xffff0000
 800985c:	ffffc000 	.word	0xffffc000
 8009860:	c000ffff 	.word	0xc000ffff
 8009864:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	4b93      	ldr	r3, [pc, #588]	; (8009abc <ETH_Prepare_Tx_Descriptors+0x498>)
 800986e:	4013      	ands	r3, r2
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	6852      	ldr	r2, [r2, #4]
 8009874:	431a      	orrs	r2, r3
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d008      	beq.n	8009898 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	431a      	orrs	r2, r3
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d008      	beq.n	80098d4 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ce:	431a      	orrs	r2, r3
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 80cb 	beq.w	8009a9c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	431a      	orrs	r2, r3
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8009918:	e0c0      	b.n	8009a9c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	3301      	adds	r3, #1
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	2b03      	cmp	r3, #3
 8009930:	d902      	bls.n	8009938 <ETH_Prepare_Tx_Descriptors+0x314>
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	3b04      	subs	r3, #4
 8009936:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009940:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995a:	d007      	beq.n	800996c <ETH_Prepare_Tx_Descriptors+0x348>
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	3304      	adds	r3, #4
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d026      	beq.n	80099ba <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800997a:	2300      	movs	r3, #0
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
 800997e:	e016      	b.n	80099ae <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	3301      	adds	r3, #1
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	2b03      	cmp	r3, #3
 8009996:	d902      	bls.n	800999e <ETH_Prepare_Tx_Descriptors+0x37a>
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	3b04      	subs	r3, #4
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	3301      	adds	r3, #1
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
 80099ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d3e4      	bcc.n	8009980 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80099b6:	2302      	movs	r3, #2
 80099b8:	e0ab      	b.n	8009b12 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	3301      	adds	r3, #1
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	4b3a      	ldr	r3, [pc, #232]	; (8009ac0 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	6852      	ldr	r2, [r2, #4]
 80099dc:	431a      	orrs	r2, r3
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d012      	beq.n	8009a10 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	6852      	ldr	r2, [r2, #4]
 8009a06:	0412      	lsls	r2, r2, #16
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	609a      	str	r2, [r3, #8]
 8009a0e:	e008      	b.n	8009a22 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2200      	movs	r2, #0
 8009a14:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	6a3a      	ldr	r2, [r7, #32]
 8009a20:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0310 	and.w	r3, r3, #16
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00f      	beq.n	8009a4e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	69d2      	ldr	r2, [r2, #28]
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	60da      	str	r2, [r3, #12]
 8009a4c:	e017      	b.n	8009a7e <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <ETH_Prepare_Tx_Descriptors+0x498>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	6852      	ldr	r2, [r2, #4]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	3301      	adds	r3, #1
 8009a82:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f47f af3a 	bne.w	800991a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00f      	beq.n	8009acc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	e00e      	b.n	8009ad8 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8009aba:	bf00      	nop
 8009abc:	ffff8000 	.word	0xffff8000
 8009ac0:	ffffc000 	.word	0xffffc000
 8009ac4:	c000ffff 	.word	0xc000ffff
 8009ac8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ae8:	6979      	ldr	r1, [r7, #20]
 8009aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aec:	3304      	adds	r3, #4
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	440b      	add	r3, r1
 8009af2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009afa:	b672      	cpsid	i
}
 8009afc:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	4413      	add	r3, r2
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009b0c:	b662      	cpsie	i
}
 8009b0e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3734      	adds	r7, #52	; 0x34
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b089      	sub	sp, #36	; 0x24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009b2e:	4b89      	ldr	r3, [pc, #548]	; (8009d54 <HAL_GPIO_Init+0x234>)
 8009b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b32:	e194      	b.n	8009e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b40:	4013      	ands	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8186 	beq.w	8009e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d00b      	beq.n	8009b6c <HAL_GPIO_Init+0x4c>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d007      	beq.n	8009b6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b60:	2b11      	cmp	r3, #17
 8009b62:	d003      	beq.n	8009b6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	2b12      	cmp	r3, #18
 8009b6a:	d130      	bne.n	8009bce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	2203      	movs	r2, #3
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	4013      	ands	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	f003 0201 	and.w	r2, r3, #1
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	2203      	movs	r2, #3
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	43db      	mvns	r3, r3
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	4013      	ands	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689a      	ldr	r2, [r3, #8]
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d003      	beq.n	8009c0e <HAL_GPIO_Init+0xee>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2b12      	cmp	r3, #18
 8009c0c:	d123      	bne.n	8009c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	08da      	lsrs	r2, r3, #3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3208      	adds	r2, #8
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	220f      	movs	r2, #15
 8009c26:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	08da      	lsrs	r2, r3, #3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3208      	adds	r2, #8
 8009c50:	69b9      	ldr	r1, [r7, #24]
 8009c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	2203      	movs	r2, #3
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	43db      	mvns	r3, r3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f003 0203 	and.w	r2, r3, #3
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80e0 	beq.w	8009e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c98:	4b2f      	ldr	r3, [pc, #188]	; (8009d58 <HAL_GPIO_Init+0x238>)
 8009c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c9e:	4a2e      	ldr	r2, [pc, #184]	; (8009d58 <HAL_GPIO_Init+0x238>)
 8009ca0:	f043 0302 	orr.w	r3, r3, #2
 8009ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <HAL_GPIO_Init+0x238>)
 8009caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cb6:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <HAL_GPIO_Init+0x23c>)
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	089b      	lsrs	r3, r3, #2
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	220f      	movs	r2, #15
 8009cce:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd2:	43db      	mvns	r3, r3
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a20      	ldr	r2, [pc, #128]	; (8009d60 <HAL_GPIO_Init+0x240>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d052      	beq.n	8009d88 <HAL_GPIO_Init+0x268>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	; (8009d64 <HAL_GPIO_Init+0x244>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d031      	beq.n	8009d4e <HAL_GPIO_Init+0x22e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a1e      	ldr	r2, [pc, #120]	; (8009d68 <HAL_GPIO_Init+0x248>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d02b      	beq.n	8009d4a <HAL_GPIO_Init+0x22a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1d      	ldr	r2, [pc, #116]	; (8009d6c <HAL_GPIO_Init+0x24c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d025      	beq.n	8009d46 <HAL_GPIO_Init+0x226>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	; (8009d70 <HAL_GPIO_Init+0x250>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01f      	beq.n	8009d42 <HAL_GPIO_Init+0x222>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <HAL_GPIO_Init+0x254>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d019      	beq.n	8009d3e <HAL_GPIO_Init+0x21e>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a1a      	ldr	r2, [pc, #104]	; (8009d78 <HAL_GPIO_Init+0x258>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <HAL_GPIO_Init+0x21a>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a19      	ldr	r2, [pc, #100]	; (8009d7c <HAL_GPIO_Init+0x25c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00d      	beq.n	8009d36 <HAL_GPIO_Init+0x216>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <HAL_GPIO_Init+0x260>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d007      	beq.n	8009d32 <HAL_GPIO_Init+0x212>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a17      	ldr	r2, [pc, #92]	; (8009d84 <HAL_GPIO_Init+0x264>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d101      	bne.n	8009d2e <HAL_GPIO_Init+0x20e>
 8009d2a:	2309      	movs	r3, #9
 8009d2c:	e02d      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d2e:	230a      	movs	r3, #10
 8009d30:	e02b      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d32:	2308      	movs	r3, #8
 8009d34:	e029      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d36:	2307      	movs	r3, #7
 8009d38:	e027      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d3a:	2306      	movs	r3, #6
 8009d3c:	e025      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d3e:	2305      	movs	r3, #5
 8009d40:	e023      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d42:	2304      	movs	r3, #4
 8009d44:	e021      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d46:	2303      	movs	r3, #3
 8009d48:	e01f      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e01d      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e01b      	b.n	8009d8a <HAL_GPIO_Init+0x26a>
 8009d52:	bf00      	nop
 8009d54:	58000080 	.word	0x58000080
 8009d58:	58024400 	.word	0x58024400
 8009d5c:	58000400 	.word	0x58000400
 8009d60:	58020000 	.word	0x58020000
 8009d64:	58020400 	.word	0x58020400
 8009d68:	58020800 	.word	0x58020800
 8009d6c:	58020c00 	.word	0x58020c00
 8009d70:	58021000 	.word	0x58021000
 8009d74:	58021400 	.word	0x58021400
 8009d78:	58021800 	.word	0x58021800
 8009d7c:	58021c00 	.word	0x58021c00
 8009d80:	58022000 	.word	0x58022000
 8009d84:	58022400 	.word	0x58022400
 8009d88:	2300      	movs	r3, #0
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	f002 0203 	and.w	r2, r2, #3
 8009d90:	0092      	lsls	r2, r2, #2
 8009d92:	4093      	lsls	r3, r2
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d9a:	4938      	ldr	r1, [pc, #224]	; (8009e7c <HAL_GPIO_Init+0x35c>)
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	089b      	lsrs	r3, r3, #2
 8009da0:	3302      	adds	r3, #2
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	43db      	mvns	r3, r3
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4013      	ands	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	43db      	mvns	r3, r3
 8009ddc:	69ba      	ldr	r2, [r7, #24]
 8009dde:	4013      	ands	r3, r2
 8009de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	43db      	mvns	r3, r3
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	43db      	mvns	r3, r3
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	fa22 f303 	lsr.w	r3, r2, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f47f ae63 	bne.w	8009b34 <HAL_GPIO_Init+0x14>
  }
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	3724      	adds	r7, #36	; 0x24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	58000400 	.word	0x58000400

08009e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	807b      	strh	r3, [r7, #2]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e90:	787b      	ldrb	r3, [r7, #1]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e96:	887a      	ldrh	r2, [r7, #2]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e9c:	e003      	b.n	8009ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e9e:	887b      	ldrh	r3, [r7, #2]
 8009ea0:	041a      	lsls	r2, r3, #16
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	619a      	str	r2, [r3, #24]
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ec4:	887a      	ldrh	r2, [r7, #2]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	041a      	lsls	r2, r3, #16
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	43d9      	mvns	r1, r3
 8009ed0:	887b      	ldrh	r3, [r7, #2]
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	619a      	str	r2, [r3, #24]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8009ef0:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <HAL_HSEM_FastTake+0x2c>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3320      	adds	r3, #32
 8009ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009efa:	4a07      	ldr	r2, [pc, #28]	; (8009f18 <HAL_HSEM_FastTake+0x30>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d101      	bne.n	8009f04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e000      	b.n	8009f06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	58026400 	.word	0x58026400
 8009f18:	80000300 	.word	0x80000300

08009f1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8009f26:	4906      	ldr	r1, [pc, #24]	; (8009f40 <HAL_HSEM_Release+0x24>)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	58026400 	.word	0x58026400

08009f44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	; (8009f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f52:	4a0c      	ldr	r2, [pc, #48]	; (8009f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f54:	f043 0302 	orr.w	r3, r3, #2
 8009f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f6a:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	4906      	ldr	r1, [pc, #24]	; (8009f88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	604b      	str	r3, [r1, #4]
}
 8009f76:	bf00      	nop
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	58000400 	.word	0x58000400

08009f8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009f94:	4b29      	ldr	r3, [pc, #164]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	2b06      	cmp	r3, #6
 8009f9e:	d00a      	beq.n	8009fb6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009fa0:	4b26      	ldr	r3, [pc, #152]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d001      	beq.n	8009fb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e040      	b.n	800a034 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e03e      	b.n	800a034 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009fb6:	4b21      	ldr	r3, [pc, #132]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009fbe:	491f      	ldr	r1, [pc, #124]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009fc6:	f7fa f9a3 	bl	8004310 <HAL_GetTick>
 8009fca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fcc:	e009      	b.n	8009fe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009fce:	f7fa f99f 	bl	8004310 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fdc:	d901      	bls.n	8009fe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e028      	b.n	800a034 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fe2:	4b16      	ldr	r3, [pc, #88]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fee:	d1ee      	bne.n	8009fce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b1e      	cmp	r3, #30
 8009ff4:	d008      	beq.n	800a008 <HAL_PWREx_ConfigSupply+0x7c>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8009ffa:	d005      	beq.n	800a008 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b1d      	cmp	r3, #29
 800a000:	d002      	beq.n	800a008 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b2d      	cmp	r3, #45	; 0x2d
 800a006:	d114      	bne.n	800a032 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a008:	f7fa f982 	bl	8004310 <HAL_GetTick>
 800a00c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a00e:	e009      	b.n	800a024 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a010:	f7fa f97e 	bl	8004310 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a01e:	d901      	bls.n	800a024 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e007      	b.n	800a034 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <HAL_PWREx_ConfigSupply+0xb0>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a030:	d1ee      	bne.n	800a010 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	58024800 	.word	0x58024800

0800a040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	; 0x30
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e3ff      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8087 	beq.w	800a16e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a060:	4b99      	ldr	r3, [pc, #612]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a06a:	4b97      	ldr	r3, [pc, #604]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a072:	2b10      	cmp	r3, #16
 800a074:	d007      	beq.n	800a086 <HAL_RCC_OscConfig+0x46>
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	2b18      	cmp	r3, #24
 800a07a:	d110      	bne.n	800a09e <HAL_RCC_OscConfig+0x5e>
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d10b      	bne.n	800a09e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a086:	4b90      	ldr	r3, [pc, #576]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d06c      	beq.n	800a16c <HAL_RCC_OscConfig+0x12c>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d168      	bne.n	800a16c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e3d9      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a6:	d106      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x76>
 800a0a8:	4b87      	ldr	r3, [pc, #540]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a86      	ldr	r2, [pc, #536]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	e02e      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x98>
 800a0be:	4b82      	ldr	r3, [pc, #520]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a81      	ldr	r2, [pc, #516]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	4b7f      	ldr	r3, [pc, #508]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a7e      	ldr	r2, [pc, #504]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	e01d      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0e0:	d10c      	bne.n	800a0fc <HAL_RCC_OscConfig+0xbc>
 800a0e2:	4b79      	ldr	r3, [pc, #484]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a78      	ldr	r2, [pc, #480]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	4b76      	ldr	r3, [pc, #472]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a75      	ldr	r2, [pc, #468]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	e00b      	b.n	800a114 <HAL_RCC_OscConfig+0xd4>
 800a0fc:	4b72      	ldr	r3, [pc, #456]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a71      	ldr	r2, [pc, #452]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	4b6f      	ldr	r3, [pc, #444]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a6e      	ldr	r2, [pc, #440]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d013      	beq.n	800a144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11c:	f7fa f8f8 	bl	8004310 <HAL_GetTick>
 800a120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a124:	f7fa f8f4 	bl	8004310 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b64      	cmp	r3, #100	; 0x64
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e38d      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a136:	4b64      	ldr	r3, [pc, #400]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <HAL_RCC_OscConfig+0xe4>
 800a142:	e014      	b.n	800a16e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a144:	f7fa f8e4 	bl	8004310 <HAL_GetTick>
 800a148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a14c:	f7fa f8e0 	bl	8004310 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b64      	cmp	r3, #100	; 0x64
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e379      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a15e:	4b5a      	ldr	r3, [pc, #360]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1f0      	bne.n	800a14c <HAL_RCC_OscConfig+0x10c>
 800a16a:	e000      	b.n	800a16e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a16c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80ae 	beq.w	800a2d8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a17c:	4b52      	ldr	r3, [pc, #328]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a184:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a186:	4b50      	ldr	r3, [pc, #320]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d007      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x162>
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	2b18      	cmp	r3, #24
 800a196:	d13a      	bne.n	800a20e <HAL_RCC_OscConfig+0x1ce>
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d135      	bne.n	800a20e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1a2:	4b49      	ldr	r3, [pc, #292]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <HAL_RCC_OscConfig+0x17a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e34b      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ba:	f7fa f8d9 	bl	8004370 <HAL_GetREVID>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d817      	bhi.n	800a1f8 <HAL_RCC_OscConfig+0x1b8>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d108      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x1a2>
 800a1d0:	4b3d      	ldr	r3, [pc, #244]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1d8:	4a3b      	ldr	r2, [pc, #236]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1e0:	e07a      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1e2:	4b39      	ldr	r3, [pc, #228]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	031b      	lsls	r3, r3, #12
 800a1f0:	4935      	ldr	r1, [pc, #212]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1f6:	e06f      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f8:	4b33      	ldr	r3, [pc, #204]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	061b      	lsls	r3, r3, #24
 800a206:	4930      	ldr	r1, [pc, #192]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a20c:	e064      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d045      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a216:	4b2c      	ldr	r3, [pc, #176]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f023 0219 	bic.w	r2, r3, #25
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	4929      	ldr	r1, [pc, #164]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a224:	4313      	orrs	r3, r2
 800a226:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a228:	f7fa f872 	bl	8004310 <HAL_GetTick>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a230:	f7fa f86e 	bl	8004310 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e307      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a242:	4b21      	ldr	r3, [pc, #132]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f0      	beq.n	800a230 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24e:	f7fa f88f 	bl	8004370 <HAL_GetREVID>
 800a252:	4603      	mov	r3, r0
 800a254:	f241 0203 	movw	r2, #4099	; 0x1003
 800a258:	4293      	cmp	r3, r2
 800a25a:	d817      	bhi.n	800a28c <HAL_RCC_OscConfig+0x24c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	d108      	bne.n	800a276 <HAL_RCC_OscConfig+0x236>
 800a264:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a26c:	4a16      	ldr	r2, [pc, #88]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a26e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a272:	6053      	str	r3, [r2, #4]
 800a274:	e030      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
 800a276:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	031b      	lsls	r3, r3, #12
 800a284:	4910      	ldr	r1, [pc, #64]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a286:	4313      	orrs	r3, r2
 800a288:	604b      	str	r3, [r1, #4]
 800a28a:	e025      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
 800a28c:	4b0e      	ldr	r3, [pc, #56]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	061b      	lsls	r3, r3, #24
 800a29a:	490b      	ldr	r1, [pc, #44]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	604b      	str	r3, [r1, #4]
 800a2a0:	e01a      	b.n	800a2d8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a08      	ldr	r2, [pc, #32]	; (800a2c8 <HAL_RCC_OscConfig+0x288>)
 800a2a8:	f023 0301 	bic.w	r3, r3, #1
 800a2ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ae:	f7fa f82f 	bl	8004310 <HAL_GetTick>
 800a2b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2b4:	e00a      	b.n	800a2cc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2b6:	f7fa f82b 	bl	8004310 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d903      	bls.n	800a2cc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e2c4      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
 800a2c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2cc:	4ba4      	ldr	r3, [pc, #656]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1ee      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 80a9 	beq.w	800a438 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2e6:	4b9e      	ldr	r3, [pc, #632]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2f0:	4b9b      	ldr	r3, [pc, #620]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d007      	beq.n	800a30c <HAL_RCC_OscConfig+0x2cc>
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b18      	cmp	r3, #24
 800a300:	d13a      	bne.n	800a378 <HAL_RCC_OscConfig+0x338>
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d135      	bne.n	800a378 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a30c:	4b94      	ldr	r3, [pc, #592]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_RCC_OscConfig+0x2e4>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	2b80      	cmp	r3, #128	; 0x80
 800a31e:	d001      	beq.n	800a324 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e296      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a324:	f7fa f824 	bl	8004370 <HAL_GetREVID>
 800a328:	4603      	mov	r3, r0
 800a32a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a32e:	4293      	cmp	r3, r2
 800a330:	d817      	bhi.n	800a362 <HAL_RCC_OscConfig+0x322>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	2b20      	cmp	r3, #32
 800a338:	d108      	bne.n	800a34c <HAL_RCC_OscConfig+0x30c>
 800a33a:	4b89      	ldr	r3, [pc, #548]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a342:	4a87      	ldr	r2, [pc, #540]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a348:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a34a:	e075      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a34c:	4b84      	ldr	r3, [pc, #528]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	069b      	lsls	r3, r3, #26
 800a35a:	4981      	ldr	r1, [pc, #516]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a360:	e06a      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a362:	4b7f      	ldr	r3, [pc, #508]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	061b      	lsls	r3, r3, #24
 800a370:	497b      	ldr	r1, [pc, #492]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a372:	4313      	orrs	r3, r2
 800a374:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a376:	e05f      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d042      	beq.n	800a406 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a380:	4b77      	ldr	r3, [pc, #476]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a76      	ldr	r2, [pc, #472]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38c:	f7f9 ffc0 	bl	8004310 <HAL_GetTick>
 800a390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a392:	e008      	b.n	800a3a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a394:	f7f9 ffbc 	bl	8004310 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e255      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3a6:	4b6e      	ldr	r3, [pc, #440]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f0      	beq.n	800a394 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b2:	f7f9 ffdd 	bl	8004370 <HAL_GetREVID>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d817      	bhi.n	800a3f0 <HAL_RCC_OscConfig+0x3b0>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d108      	bne.n	800a3da <HAL_RCC_OscConfig+0x39a>
 800a3c8:	4b65      	ldr	r3, [pc, #404]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3d0:	4a63      	ldr	r2, [pc, #396]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3d6:	6053      	str	r3, [r2, #4]
 800a3d8:	e02e      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
 800a3da:	4b61      	ldr	r3, [pc, #388]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	069b      	lsls	r3, r3, #26
 800a3e8:	495d      	ldr	r1, [pc, #372]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	604b      	str	r3, [r1, #4]
 800a3ee:	e023      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
 800a3f0:	4b5b      	ldr	r3, [pc, #364]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	4958      	ldr	r1, [pc, #352]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a400:	4313      	orrs	r3, r2
 800a402:	60cb      	str	r3, [r1, #12]
 800a404:	e018      	b.n	800a438 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a406:	4b56      	ldr	r3, [pc, #344]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a55      	ldr	r2, [pc, #340]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a412:	f7f9 ff7d 	bl	8004310 <HAL_GetTick>
 800a416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a418:	e008      	b.n	800a42c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a41a:	f7f9 ff79 	bl	8004310 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d901      	bls.n	800a42c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e212      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a42c:	4b4c      	ldr	r3, [pc, #304]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f0      	bne.n	800a41a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b00      	cmp	r3, #0
 800a442:	d036      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a44c:	4b44      	ldr	r3, [pc, #272]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a450:	4a43      	ldr	r2, [pc, #268]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a458:	f7f9 ff5a 	bl	8004310 <HAL_GetTick>
 800a45c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a45e:	e008      	b.n	800a472 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a460:	f7f9 ff56 	bl	8004310 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e1ef      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a472:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f0      	beq.n	800a460 <HAL_RCC_OscConfig+0x420>
 800a47e:	e018      	b.n	800a4b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a480:	4b37      	ldr	r3, [pc, #220]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a484:	4a36      	ldr	r2, [pc, #216]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a486:	f023 0301 	bic.w	r3, r3, #1
 800a48a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a48c:	f7f9 ff40 	bl	8004310 <HAL_GetTick>
 800a490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a494:	f7f9 ff3c 	bl	8004310 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e1d5      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4a6:	4b2e      	ldr	r3, [pc, #184]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f0      	bne.n	800a494 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d036      	beq.n	800a52c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d019      	beq.n	800a4fa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a4c6:	4b26      	ldr	r3, [pc, #152]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a25      	ldr	r2, [pc, #148]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a4cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4d2:	f7f9 ff1d 	bl	8004310 <HAL_GetTick>
 800a4d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4d8:	e008      	b.n	800a4ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a4da:	f7f9 ff19 	bl	8004310 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e1b2      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0f0      	beq.n	800a4da <HAL_RCC_OscConfig+0x49a>
 800a4f8:	e018      	b.n	800a52c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4fa:	4b19      	ldr	r3, [pc, #100]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a18      	ldr	r2, [pc, #96]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a504:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a506:	f7f9 ff03 	bl	8004310 <HAL_GetTick>
 800a50a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a50c:	e008      	b.n	800a520 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a50e:	f7f9 feff 	bl	8004310 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e198      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <HAL_RCC_OscConfig+0x520>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f0      	bne.n	800a50e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8085 	beq.w	800a644 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <HAL_RCC_OscConfig+0x524>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a09      	ldr	r2, [pc, #36]	; (800a564 <HAL_RCC_OscConfig+0x524>)
 800a540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a546:	f7f9 fee3 	bl	8004310 <HAL_GetTick>
 800a54a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a54c:	e00c      	b.n	800a568 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a54e:	f7f9 fedf 	bl	8004310 <HAL_GetTick>
 800a552:	4602      	mov	r2, r0
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	2b64      	cmp	r3, #100	; 0x64
 800a55a:	d905      	bls.n	800a568 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e178      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
 800a560:	58024400 	.word	0x58024400
 800a564:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a568:	4b96      	ldr	r3, [pc, #600]	; (800a7c4 <HAL_RCC_OscConfig+0x784>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0ec      	beq.n	800a54e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d106      	bne.n	800a58a <HAL_RCC_OscConfig+0x54a>
 800a57c:	4b92      	ldr	r3, [pc, #584]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a580:	4a91      	ldr	r2, [pc, #580]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a582:	f043 0301 	orr.w	r3, r3, #1
 800a586:	6713      	str	r3, [r2, #112]	; 0x70
 800a588:	e02d      	b.n	800a5e6 <HAL_RCC_OscConfig+0x5a6>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10c      	bne.n	800a5ac <HAL_RCC_OscConfig+0x56c>
 800a592:	4b8d      	ldr	r3, [pc, #564]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a596:	4a8c      	ldr	r2, [pc, #560]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	6713      	str	r3, [r2, #112]	; 0x70
 800a59e:	4b8a      	ldr	r3, [pc, #552]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a2:	4a89      	ldr	r2, [pc, #548]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5a4:	f023 0304 	bic.w	r3, r3, #4
 800a5a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5aa:	e01c      	b.n	800a5e6 <HAL_RCC_OscConfig+0x5a6>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	d10c      	bne.n	800a5ce <HAL_RCC_OscConfig+0x58e>
 800a5b4:	4b84      	ldr	r3, [pc, #528]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b8:	4a83      	ldr	r2, [pc, #524]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5ba:	f043 0304 	orr.w	r3, r3, #4
 800a5be:	6713      	str	r3, [r2, #112]	; 0x70
 800a5c0:	4b81      	ldr	r3, [pc, #516]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c4:	4a80      	ldr	r2, [pc, #512]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a5cc:	e00b      	b.n	800a5e6 <HAL_RCC_OscConfig+0x5a6>
 800a5ce:	4b7e      	ldr	r3, [pc, #504]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d2:	4a7d      	ldr	r2, [pc, #500]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5d4:	f023 0301 	bic.w	r3, r3, #1
 800a5d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5da:	4b7b      	ldr	r3, [pc, #492]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5de:	4a7a      	ldr	r2, [pc, #488]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a5e0:	f023 0304 	bic.w	r3, r3, #4
 800a5e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d015      	beq.n	800a61a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ee:	f7f9 fe8f 	bl	8004310 <HAL_GetTick>
 800a5f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5f4:	e00a      	b.n	800a60c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5f6:	f7f9 fe8b 	bl	8004310 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	f241 3288 	movw	r2, #5000	; 0x1388
 800a604:	4293      	cmp	r3, r2
 800a606:	d901      	bls.n	800a60c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e122      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a60c:	4b6e      	ldr	r3, [pc, #440]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0ee      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x5b6>
 800a618:	e014      	b.n	800a644 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61a:	f7f9 fe79 	bl	8004310 <HAL_GetTick>
 800a61e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a620:	e00a      	b.n	800a638 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a622:	f7f9 fe75 	bl	8004310 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a630:	4293      	cmp	r3, r2
 800a632:	d901      	bls.n	800a638 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e10c      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a638:	4b63      	ldr	r3, [pc, #396]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1ee      	bne.n	800a622 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8101 	beq.w	800a850 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a64e:	4b5e      	ldr	r3, [pc, #376]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a656:	2b18      	cmp	r3, #24
 800a658:	f000 80bc 	beq.w	800a7d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b02      	cmp	r3, #2
 800a662:	f040 8095 	bne.w	800a790 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a666:	4b58      	ldr	r3, [pc, #352]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a57      	ldr	r2, [pc, #348]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a66c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a672:	f7f9 fe4d 	bl	8004310 <HAL_GetTick>
 800a676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a678:	e008      	b.n	800a68c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a67a:	f7f9 fe49 	bl	8004310 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b02      	cmp	r3, #2
 800a686:	d901      	bls.n	800a68c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e0e2      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a68c:	4b4e      	ldr	r3, [pc, #312]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1f0      	bne.n	800a67a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a698:	4b4b      	ldr	r3, [pc, #300]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a69c:	4b4b      	ldr	r3, [pc, #300]	; (800a7cc <HAL_RCC_OscConfig+0x78c>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6a8:	0112      	lsls	r2, r2, #4
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	4946      	ldr	r1, [pc, #280]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	628b      	str	r3, [r1, #40]	; 0x28
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	025b      	lsls	r3, r3, #9
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	041b      	lsls	r3, r3, #16
 800a6d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	061b      	lsls	r3, r3, #24
 800a6de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6e2:	4939      	ldr	r1, [pc, #228]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a6e8:	4b37      	ldr	r3, [pc, #220]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	4a36      	ldr	r2, [pc, #216]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a6ee:	f023 0301 	bic.w	r3, r3, #1
 800a6f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6f4:	4b34      	ldr	r3, [pc, #208]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a6f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6f8:	4b35      	ldr	r3, [pc, #212]	; (800a7d0 <HAL_RCC_OscConfig+0x790>)
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a700:	00d2      	lsls	r2, r2, #3
 800a702:	4931      	ldr	r1, [pc, #196]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a704:	4313      	orrs	r3, r2
 800a706:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a708:	4b2f      	ldr	r3, [pc, #188]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	f023 020c 	bic.w	r2, r3, #12
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	492c      	ldr	r1, [pc, #176]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a716:	4313      	orrs	r3, r2
 800a718:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a71a:	4b2b      	ldr	r3, [pc, #172]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	f023 0202 	bic.w	r2, r3, #2
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	4928      	ldr	r1, [pc, #160]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a72c:	4b26      	ldr	r3, [pc, #152]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	4a25      	ldr	r2, [pc, #148]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a738:	4b23      	ldr	r3, [pc, #140]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	4a22      	ldr	r2, [pc, #136]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a744:	4b20      	ldr	r3, [pc, #128]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	4a1f      	ldr	r2, [pc, #124]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a74a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a74e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a750:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	4a1c      	ldr	r2, [pc, #112]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a75c:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a19      	ldr	r2, [pc, #100]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a768:	f7f9 fdd2 	bl	8004310 <HAL_GetTick>
 800a76c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a76e:	e008      	b.n	800a782 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a770:	f7f9 fdce 	bl	8004310 <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d901      	bls.n	800a782 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e067      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0f0      	beq.n	800a770 <HAL_RCC_OscConfig+0x730>
 800a78e:	e05f      	b.n	800a850 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a790:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a79a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79c:	f7f9 fdb8 	bl	8004310 <HAL_GetTick>
 800a7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7a2:	e008      	b.n	800a7b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7a4:	f7f9 fdb4 	bl	8004310 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d901      	bls.n	800a7b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e04d      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a7b6:	4b04      	ldr	r3, [pc, #16]	; (800a7c8 <HAL_RCC_OscConfig+0x788>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1f0      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x764>
 800a7c2:	e045      	b.n	800a850 <HAL_RCC_OscConfig+0x810>
 800a7c4:	58024800 	.word	0x58024800
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	fffffc0c 	.word	0xfffffc0c
 800a7d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7d4:	4b21      	ldr	r3, [pc, #132]	; (800a85c <HAL_RCC_OscConfig+0x81c>)
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7da:	4b20      	ldr	r3, [pc, #128]	; (800a85c <HAL_RCC_OscConfig+0x81c>)
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d031      	beq.n	800a84c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f003 0203 	and.w	r2, r3, #3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d12a      	bne.n	800a84c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	091b      	lsrs	r3, r3, #4
 800a7fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a802:	429a      	cmp	r2, r3
 800a804:	d122      	bne.n	800a84c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a810:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a812:	429a      	cmp	r2, r3
 800a814:	d11a      	bne.n	800a84c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	0a5b      	lsrs	r3, r3, #9
 800a81a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a824:	429a      	cmp	r2, r3
 800a826:	d111      	bne.n	800a84c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a836:	429a      	cmp	r2, r3
 800a838:	d108      	bne.n	800a84c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	0e1b      	lsrs	r3, r3, #24
 800a83e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a846:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3730      	adds	r7, #48	; 0x30
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400

0800a860 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e19c      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a874:	4b8a      	ldr	r3, [pc, #552]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 030f 	and.w	r3, r3, #15
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d910      	bls.n	800a8a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a882:	4b87      	ldr	r3, [pc, #540]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f023 020f 	bic.w	r2, r3, #15
 800a88a:	4985      	ldr	r1, [pc, #532]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	4313      	orrs	r3, r2
 800a890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a892:	4b83      	ldr	r3, [pc, #524]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d001      	beq.n	800a8a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e184      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d010      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	4b7b      	ldr	r3, [pc, #492]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d908      	bls.n	800a8d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8c0:	4b78      	ldr	r3, [pc, #480]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	4975      	ldr	r1, [pc, #468]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d010      	beq.n	800a900 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	695a      	ldr	r2, [r3, #20]
 800a8e2:	4b70      	ldr	r3, [pc, #448]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d908      	bls.n	800a900 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8ee:	4b6d      	ldr	r3, [pc, #436]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	496a      	ldr	r1, [pc, #424]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0310 	and.w	r3, r3, #16
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d010      	beq.n	800a92e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	699a      	ldr	r2, [r3, #24]
 800a910:	4b64      	ldr	r3, [pc, #400]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a918:	429a      	cmp	r2, r3
 800a91a:	d908      	bls.n	800a92e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a91c:	4b61      	ldr	r3, [pc, #388]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	495e      	ldr	r1, [pc, #376]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b00      	cmp	r3, #0
 800a938:	d010      	beq.n	800a95c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69da      	ldr	r2, [r3, #28]
 800a93e:	4b59      	ldr	r3, [pc, #356]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a946:	429a      	cmp	r2, r3
 800a948:	d908      	bls.n	800a95c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a94a:	4b56      	ldr	r3, [pc, #344]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	4953      	ldr	r1, [pc, #332]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a958:	4313      	orrs	r3, r2
 800a95a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d010      	beq.n	800a98a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68da      	ldr	r2, [r3, #12]
 800a96c:	4b4d      	ldr	r3, [pc, #308]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	429a      	cmp	r2, r3
 800a976:	d908      	bls.n	800a98a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a978:	4b4a      	ldr	r3, [pc, #296]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	f023 020f 	bic.w	r2, r3, #15
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4947      	ldr	r1, [pc, #284]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a986:	4313      	orrs	r3, r2
 800a988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d055      	beq.n	800aa42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a996:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	4940      	ldr	r1, [pc, #256]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9b0:	4b3c      	ldr	r3, [pc, #240]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d121      	bne.n	800aa00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e0f6      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d107      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d115      	bne.n	800aa00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0ea      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e0:	4b30      	ldr	r3, [pc, #192]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d109      	bne.n	800aa00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e0de      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f0:	4b2c      	ldr	r3, [pc, #176]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e0d6      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa00:	4b28      	ldr	r3, [pc, #160]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	f023 0207 	bic.w	r2, r3, #7
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	4925      	ldr	r1, [pc, #148]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa12:	f7f9 fc7d 	bl	8004310 <HAL_GetTick>
 800aa16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa18:	e00a      	b.n	800aa30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa1a:	f7f9 fc79 	bl	8004310 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e0be      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa30:	4b1c      	ldr	r3, [pc, #112]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d1eb      	bne.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d010      	beq.n	800aa70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d208      	bcs.n	800aa70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa5e:	4b11      	ldr	r3, [pc, #68]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	f023 020f 	bic.w	r2, r3, #15
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	490e      	ldr	r1, [pc, #56]	; (800aaa4 <HAL_RCC_ClockConfig+0x244>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa70:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 030f 	and.w	r3, r3, #15
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d214      	bcs.n	800aaa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa7e:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f023 020f 	bic.w	r2, r3, #15
 800aa86:	4906      	ldr	r1, [pc, #24]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa8e:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <HAL_RCC_ClockConfig+0x240>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d005      	beq.n	800aaa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e086      	b.n	800abae <HAL_RCC_ClockConfig+0x34e>
 800aaa0:	52002000 	.word	0x52002000
 800aaa4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d010      	beq.n	800aad6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	691a      	ldr	r2, [r3, #16]
 800aab8:	4b3f      	ldr	r3, [pc, #252]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d208      	bcs.n	800aad6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aac4:	4b3c      	ldr	r3, [pc, #240]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	4939      	ldr	r1, [pc, #228]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0308 	and.w	r3, r3, #8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d010      	beq.n	800ab04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	695a      	ldr	r2, [r3, #20]
 800aae6:	4b34      	ldr	r3, [pc, #208]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d208      	bcs.n	800ab04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aaf2:	4b31      	ldr	r3, [pc, #196]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	492e      	ldr	r1, [pc, #184]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d010      	beq.n	800ab32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699a      	ldr	r2, [r3, #24]
 800ab14:	4b28      	ldr	r3, [pc, #160]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d208      	bcs.n	800ab32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab20:	4b25      	ldr	r3, [pc, #148]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	4922      	ldr	r1, [pc, #136]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d010      	beq.n	800ab60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69da      	ldr	r2, [r3, #28]
 800ab42:	4b1d      	ldr	r3, [pc, #116]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d208      	bcs.n	800ab60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ab4e:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	4917      	ldr	r1, [pc, #92]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab60:	f000 f834 	bl	800abcc <HAL_RCC_GetSysClockFreq>
 800ab64:	4602      	mov	r2, r0
 800ab66:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	4912      	ldr	r1, [pc, #72]	; (800abbc <HAL_RCC_ClockConfig+0x35c>)
 800ab72:	5ccb      	ldrb	r3, [r1, r3]
 800ab74:	f003 031f 	and.w	r3, r3, #31
 800ab78:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab7e:	4b0e      	ldr	r3, [pc, #56]	; (800abb8 <HAL_RCC_ClockConfig+0x358>)
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	4a0d      	ldr	r2, [pc, #52]	; (800abbc <HAL_RCC_ClockConfig+0x35c>)
 800ab88:	5cd3      	ldrb	r3, [r2, r3]
 800ab8a:	f003 031f 	and.w	r3, r3, #31
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	fa22 f303 	lsr.w	r3, r2, r3
 800ab94:	4a0a      	ldr	r2, [pc, #40]	; (800abc0 <HAL_RCC_ClockConfig+0x360>)
 800ab96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab98:	4a0a      	ldr	r2, [pc, #40]	; (800abc4 <HAL_RCC_ClockConfig+0x364>)
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ab9e:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <HAL_RCC_ClockConfig+0x368>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7f9 fb6a 	bl	800427c <HAL_InitTick>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	58024400 	.word	0x58024400
 800abbc:	0802766c 	.word	0x0802766c
 800abc0:	24000004 	.word	0x24000004
 800abc4:	24000000 	.word	0x24000000
 800abc8:	24000008 	.word	0x24000008

0800abcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abcc:	b480      	push	{r7}
 800abce:	b089      	sub	sp, #36	; 0x24
 800abd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abd2:	4bb3      	ldr	r3, [pc, #716]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abda:	2b18      	cmp	r3, #24
 800abdc:	f200 8155 	bhi.w	800ae8a <HAL_RCC_GetSysClockFreq+0x2be>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac4d 	.word	0x0800ac4d
 800abec:	0800ae8b 	.word	0x0800ae8b
 800abf0:	0800ae8b 	.word	0x0800ae8b
 800abf4:	0800ae8b 	.word	0x0800ae8b
 800abf8:	0800ae8b 	.word	0x0800ae8b
 800abfc:	0800ae8b 	.word	0x0800ae8b
 800ac00:	0800ae8b 	.word	0x0800ae8b
 800ac04:	0800ae8b 	.word	0x0800ae8b
 800ac08:	0800ac73 	.word	0x0800ac73
 800ac0c:	0800ae8b 	.word	0x0800ae8b
 800ac10:	0800ae8b 	.word	0x0800ae8b
 800ac14:	0800ae8b 	.word	0x0800ae8b
 800ac18:	0800ae8b 	.word	0x0800ae8b
 800ac1c:	0800ae8b 	.word	0x0800ae8b
 800ac20:	0800ae8b 	.word	0x0800ae8b
 800ac24:	0800ae8b 	.word	0x0800ae8b
 800ac28:	0800ac79 	.word	0x0800ac79
 800ac2c:	0800ae8b 	.word	0x0800ae8b
 800ac30:	0800ae8b 	.word	0x0800ae8b
 800ac34:	0800ae8b 	.word	0x0800ae8b
 800ac38:	0800ae8b 	.word	0x0800ae8b
 800ac3c:	0800ae8b 	.word	0x0800ae8b
 800ac40:	0800ae8b 	.word	0x0800ae8b
 800ac44:	0800ae8b 	.word	0x0800ae8b
 800ac48:	0800ac7f 	.word	0x0800ac7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac4c:	4b94      	ldr	r3, [pc, #592]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0320 	and.w	r3, r3, #32
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d009      	beq.n	800ac6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac58:	4b91      	ldr	r3, [pc, #580]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	08db      	lsrs	r3, r3, #3
 800ac5e:	f003 0303 	and.w	r3, r3, #3
 800ac62:	4a90      	ldr	r2, [pc, #576]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac64:	fa22 f303 	lsr.w	r3, r2, r3
 800ac68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ac6a:	e111      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac6c:	4b8d      	ldr	r3, [pc, #564]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac6e:	61bb      	str	r3, [r7, #24]
    break;
 800ac70:	e10e      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ac72:	4b8d      	ldr	r3, [pc, #564]	; (800aea8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac74:	61bb      	str	r3, [r7, #24]
    break;
 800ac76:	e10b      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ac78:	4b8c      	ldr	r3, [pc, #560]	; (800aeac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac7a:	61bb      	str	r3, [r7, #24]
    break;
 800ac7c:	e108      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac7e:	4b88      	ldr	r3, [pc, #544]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ac88:	4b85      	ldr	r3, [pc, #532]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac94:	4b82      	ldr	r3, [pc, #520]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ac9e:	4b80      	ldr	r3, [pc, #512]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	08db      	lsrs	r3, r3, #3
 800aca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 80e1 	beq.w	800ae84 <HAL_RCC_GetSysClockFreq+0x2b8>
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	f000 8083 	beq.w	800add0 <HAL_RCC_GetSysClockFreq+0x204>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b02      	cmp	r3, #2
 800acce:	f200 80a1 	bhi.w	800ae14 <HAL_RCC_GetSysClockFreq+0x248>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_RCC_GetSysClockFreq+0x114>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d056      	beq.n	800ad8c <HAL_RCC_GetSysClockFreq+0x1c0>
 800acde:	e099      	b.n	800ae14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ace0:	4b6f      	ldr	r3, [pc, #444]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0320 	and.w	r3, r3, #32
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d02d      	beq.n	800ad48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acec:	4b6c      	ldr	r3, [pc, #432]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	08db      	lsrs	r3, r3, #3
 800acf2:	f003 0303 	and.w	r3, r3, #3
 800acf6:	4a6b      	ldr	r2, [pc, #428]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acf8:	fa22 f303 	lsr.w	r3, r2, r3
 800acfc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b62      	ldr	r3, [pc, #392]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aeb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ad46:	e087      	b.n	800ae58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aeb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b51      	ldr	r3, [pc, #324]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aeb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad8a:	e065      	b.n	800ae58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aeb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad9e:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adae:	ed97 6a02 	vldr	s12, [r7, #8]
 800adb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aeb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adce:	e043      	b.n	800ae58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aebc <HAL_RCC_GetSysClockFreq+0x2f0>
 800adde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade2:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ade4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800adf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aeb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae12:	e021      	b.n	800ae58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aeb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae26:	4b1e      	ldr	r3, [pc, #120]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aeb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ae58:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5c:	0a5b      	lsrs	r3, r3, #9
 800ae5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae62:	3301      	adds	r3, #1
 800ae64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae7c:	ee17 3a90 	vmov	r3, s15
 800ae80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ae82:	e005      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	61bb      	str	r3, [r7, #24]
    break;
 800ae88:	e002      	b.n	800ae90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae8c:	61bb      	str	r3, [r7, #24]
    break;
 800ae8e:	bf00      	nop
  }

  return sysclockfreq;
 800ae90:	69bb      	ldr	r3, [r7, #24]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3724      	adds	r7, #36	; 0x24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	58024400 	.word	0x58024400
 800aea4:	03d09000 	.word	0x03d09000
 800aea8:	003d0900 	.word	0x003d0900
 800aeac:	017d7840 	.word	0x017d7840
 800aeb0:	46000000 	.word	0x46000000
 800aeb4:	4c742400 	.word	0x4c742400
 800aeb8:	4a742400 	.word	0x4a742400
 800aebc:	4bbebc20 	.word	0x4bbebc20

0800aec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aec6:	f7ff fe81 	bl	800abcc <HAL_RCC_GetSysClockFreq>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b10      	ldr	r3, [pc, #64]	; (800af10 <HAL_RCC_GetHCLKFreq+0x50>)
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	0a1b      	lsrs	r3, r3, #8
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	490f      	ldr	r1, [pc, #60]	; (800af14 <HAL_RCC_GetHCLKFreq+0x54>)
 800aed8:	5ccb      	ldrb	r3, [r1, r3]
 800aeda:	f003 031f 	and.w	r3, r3, #31
 800aede:	fa22 f303 	lsr.w	r3, r2, r3
 800aee2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aee4:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <HAL_RCC_GetHCLKFreq+0x50>)
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	f003 030f 	and.w	r3, r3, #15
 800aeec:	4a09      	ldr	r2, [pc, #36]	; (800af14 <HAL_RCC_GetHCLKFreq+0x54>)
 800aeee:	5cd3      	ldrb	r3, [r2, r3]
 800aef0:	f003 031f 	and.w	r3, r3, #31
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	fa22 f303 	lsr.w	r3, r2, r3
 800aefa:	4a07      	ldr	r2, [pc, #28]	; (800af18 <HAL_RCC_GetHCLKFreq+0x58>)
 800aefc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aefe:	4a07      	ldr	r2, [pc, #28]	; (800af1c <HAL_RCC_GetHCLKFreq+0x5c>)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <HAL_RCC_GetHCLKFreq+0x58>)
 800af06:	681b      	ldr	r3, [r3, #0]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	58024400 	.word	0x58024400
 800af14:	0802766c 	.word	0x0802766c
 800af18:	24000004 	.word	0x24000004
 800af1c:	24000000 	.word	0x24000000

0800af20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af24:	f7ff ffcc 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 800af28:	4602      	mov	r2, r0
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	4904      	ldr	r1, [pc, #16]	; (800af48 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af36:	5ccb      	ldrb	r3, [r1, r3]
 800af38:	f003 031f 	and.w	r3, r3, #31
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af40:	4618      	mov	r0, r3
 800af42:	bd80      	pop	{r7, pc}
 800af44:	58024400 	.word	0x58024400
 800af48:	0802766c 	.word	0x0802766c

0800af4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af50:	f7ff ffb6 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 800af54:	4602      	mov	r2, r0
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	0a1b      	lsrs	r3, r3, #8
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	4904      	ldr	r1, [pc, #16]	; (800af74 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af62:	5ccb      	ldrb	r3, [r1, r3]
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	58024400 	.word	0x58024400
 800af74:	0802766c 	.word	0x0802766c

0800af78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af84:	2300      	movs	r3, #0
 800af86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d03f      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af9c:	d02a      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800af9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afa2:	d824      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afa8:	d018      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800afaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afae:	d81e      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800afb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb8:	d007      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x52>
 800afba:	e018      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afbc:	4bab      	ldr	r3, [pc, #684]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	4aaa      	ldr	r2, [pc, #680]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800afc8:	e015      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3304      	adds	r3, #4
 800afce:	2102      	movs	r1, #2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f001 fff3 	bl	800cfbc <RCCEx_PLL2_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800afda:	e00c      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3324      	adds	r3, #36	; 0x24
 800afe0:	2102      	movs	r1, #2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 f89c 	bl	800d120 <RCCEx_PLL3_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800afec:	e003      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
      break;
 800aff2:	e000      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800affc:	4b9b      	ldr	r3, [pc, #620]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800affe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b008:	4998      	ldr	r1, [pc, #608]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	650b      	str	r3, [r1, #80]	; 0x50
 800b00e:	e001      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d03d      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b024:	2b04      	cmp	r3, #4
 800b026:	d826      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b028:	a201      	add	r2, pc, #4	; (adr r2, 800b030 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b045 	.word	0x0800b045
 800b034:	0800b053 	.word	0x0800b053
 800b038:	0800b065 	.word	0x0800b065
 800b03c:	0800b07d 	.word	0x0800b07d
 800b040:	0800b07d 	.word	0x0800b07d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b044:	4b89      	ldr	r3, [pc, #548]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	4a88      	ldr	r2, [pc, #544]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b050:	e015      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3304      	adds	r3, #4
 800b056:	2100      	movs	r1, #0
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 ffaf 	bl	800cfbc <RCCEx_PLL2_Config>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b062:	e00c      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 f858 	bl	800d120 <RCCEx_PLL3_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b074:	e003      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	75fb      	strb	r3, [r7, #23]
      break;
 800b07a:	e000      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b07c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d109      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b084:	4b79      	ldr	r3, [pc, #484]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b088:	f023 0207 	bic.w	r2, r3, #7
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b090:	4976      	ldr	r1, [pc, #472]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b092:	4313      	orrs	r3, r2
 800b094:	650b      	str	r3, [r1, #80]	; 0x50
 800b096:	e001      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b098:	7dfb      	ldrb	r3, [r7, #23]
 800b09a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d042      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b0:	d02b      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b6:	d825      	bhi.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b0b8:	2bc0      	cmp	r3, #192	; 0xc0
 800b0ba:	d028      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b0bc:	2bc0      	cmp	r3, #192	; 0xc0
 800b0be:	d821      	bhi.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b0c0:	2b80      	cmp	r3, #128	; 0x80
 800b0c2:	d016      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b0c4:	2b80      	cmp	r3, #128	; 0x80
 800b0c6:	d81d      	bhi.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b0cc:	2b40      	cmp	r3, #64	; 0x40
 800b0ce:	d007      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b0d0:	e018      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d2:	4b66      	ldr	r3, [pc, #408]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a65      	ldr	r2, [pc, #404]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b0d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b0de:	e017      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 ff68 	bl	800cfbc <RCCEx_PLL2_Config>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b0f0:	e00e      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3324      	adds	r3, #36	; 0x24
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 f811 	bl	800d120 <RCCEx_PLL3_Config>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b102:	e005      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	75fb      	strb	r3, [r7, #23]
      break;
 800b108:	e002      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b10a:	bf00      	nop
 800b10c:	e000      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b10e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d109      	bne.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b116:	4b55      	ldr	r3, [pc, #340]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b122:	4952      	ldr	r1, [pc, #328]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b124:	4313      	orrs	r3, r2
 800b126:	650b      	str	r3, [r1, #80]	; 0x50
 800b128:	e001      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b136:	2b00      	cmp	r3, #0
 800b138:	d049      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b144:	d030      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b14a:	d82a      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b14c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b150:	d02c      	beq.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b152:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b156:	d824      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b15c:	d018      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b15e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b162:	d81e      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b16c:	d007      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b16e:	e018      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b170:	4b3e      	ldr	r3, [pc, #248]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	4a3d      	ldr	r2, [pc, #244]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b17c:	e017      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3304      	adds	r3, #4
 800b182:	2100      	movs	r1, #0
 800b184:	4618      	mov	r0, r3
 800b186:	f001 ff19 	bl	800cfbc <RCCEx_PLL2_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b18e:	e00e      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	2100      	movs	r1, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f001 ffc2 	bl	800d120 <RCCEx_PLL3_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b1a0:	e005      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1a6:	e002      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b1a8:	bf00      	nop
 800b1aa:	e000      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10a      	bne.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b1b4:	4b2d      	ldr	r3, [pc, #180]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b1c2:	492a      	ldr	r1, [pc, #168]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	658b      	str	r3, [r1, #88]	; 0x58
 800b1c8:	e001      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d04c      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1e4:	d030      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b1e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ea:	d82a      	bhi.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b1ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1f0:	d02c      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b1f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1f6:	d824      	bhi.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1fc:	d018      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b1fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b202:	d81e      	bhi.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d003      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b20c:	d007      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b20e:	e018      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b210:	4b16      	ldr	r3, [pc, #88]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	4a15      	ldr	r2, [pc, #84]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b21a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b21c:	e017      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3304      	adds	r3, #4
 800b222:	2100      	movs	r1, #0
 800b224:	4618      	mov	r0, r3
 800b226:	f001 fec9 	bl	800cfbc <RCCEx_PLL2_Config>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b22e:	e00e      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3324      	adds	r3, #36	; 0x24
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f001 ff72 	bl	800d120 <RCCEx_PLL3_Config>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b240:	e005      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	75fb      	strb	r3, [r7, #23]
      break;
 800b246:	e002      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b248:	bf00      	nop
 800b24a:	e000      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b24c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10d      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b262:	4902      	ldr	r1, [pc, #8]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b264:	4313      	orrs	r3, r2
 800b266:	658b      	str	r3, [r1, #88]	; 0x58
 800b268:	e004      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b26a:	bf00      	nop
 800b26c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d032      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b284:	2b30      	cmp	r3, #48	; 0x30
 800b286:	d01c      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b288:	2b30      	cmp	r3, #48	; 0x30
 800b28a:	d817      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	d00c      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b290:	2b20      	cmp	r3, #32
 800b292:	d813      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d016      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d10f      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b29c:	4baf      	ldr	r3, [pc, #700]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4aae      	ldr	r2, [pc, #696]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b2a8:	e00e      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f001 fe83 	bl	800cfbc <RCCEx_PLL2_Config>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b2ba:	e005      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b2c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b2ce:	4ba3      	ldr	r3, [pc, #652]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2da:	49a0      	ldr	r1, [pc, #640]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2e0:	e001      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d047      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2fa:	d030      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b300:	d82a      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b302:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b306:	d02c      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b308:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b30c:	d824      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b312:	d018      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b318:	d81e      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b322:	d007      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b324:	e018      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b326:	4b8d      	ldr	r3, [pc, #564]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32a:	4a8c      	ldr	r2, [pc, #560]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b332:	e017      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3304      	adds	r3, #4
 800b338:	2100      	movs	r1, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fe3e 	bl	800cfbc <RCCEx_PLL2_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b344:	e00e      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3324      	adds	r3, #36	; 0x24
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f001 fee7 	bl	800d120 <RCCEx_PLL3_Config>
 800b352:	4603      	mov	r3, r0
 800b354:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b356:	e005      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	75fb      	strb	r3, [r7, #23]
      break;
 800b35c:	e002      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b35e:	bf00      	nop
 800b360:	e000      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b362:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d109      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b36a:	4b7c      	ldr	r3, [pc, #496]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b376:	4979      	ldr	r1, [pc, #484]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	650b      	str	r3, [r1, #80]	; 0x50
 800b37c:	e001      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d049      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b396:	d02e      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b39c:	d828      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b39e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3a2:	d02a      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b3a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3a8:	d822      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b3aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b3ae:	d026      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b3b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b3b4:	d81c      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b3b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3ba:	d010      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b3bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3c0:	d816      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d01d      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ca:	d111      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f001 fdf2 	bl	800cfbc <RCCEx_PLL2_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b3dc:	e012      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3324      	adds	r3, #36	; 0x24
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f001 fe9b 	bl	800d120 <RCCEx_PLL3_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b3ee:	e009      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f4:	e006      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b3f6:	bf00      	nop
 800b3f8:	e004      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b3fa:	bf00      	nop
 800b3fc:	e002      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b402:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b40a:	4b54      	ldr	r3, [pc, #336]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b40c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b416:	4951      	ldr	r1, [pc, #324]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	650b      	str	r3, [r1, #80]	; 0x50
 800b41c:	e001      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d04b      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b438:	d02e      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b43e:	d828      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b444:	d02a      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b44a:	d822      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b44c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b450:	d026      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b456:	d81c      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45c:	d010      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b462:	d816      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01d      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46c:	d111      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3304      	adds	r3, #4
 800b472:	2101      	movs	r1, #1
 800b474:	4618      	mov	r0, r3
 800b476:	f001 fda1 	bl	800cfbc <RCCEx_PLL2_Config>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b47e:	e012      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3324      	adds	r3, #36	; 0x24
 800b484:	2101      	movs	r1, #1
 800b486:	4618      	mov	r0, r3
 800b488:	f001 fe4a 	bl	800d120 <RCCEx_PLL3_Config>
 800b48c:	4603      	mov	r3, r0
 800b48e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b490:	e009      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	75fb      	strb	r3, [r7, #23]
      break;
 800b496:	e006      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b498:	bf00      	nop
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b49c:	bf00      	nop
 800b49e:	e002      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b4a0:	bf00      	nop
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b4a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b4ac:	4b2b      	ldr	r3, [pc, #172]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4ba:	4928      	ldr	r1, [pc, #160]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	658b      	str	r3, [r1, #88]	; 0x58
 800b4c0:	e001      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d02f      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4da:	d00e      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e0:	d814      	bhi.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d015      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ea:	d10f      	bne.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ec:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f0:	4a1a      	ldr	r2, [pc, #104]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b4f8:	e00c      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	2101      	movs	r1, #1
 800b500:	4618      	mov	r0, r3
 800b502:	f001 fd5b 	bl	800cfbc <RCCEx_PLL2_Config>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b50a:	e003      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	75fb      	strb	r3, [r7, #23]
      break;
 800b510:	e000      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b512:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d109      	bne.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b51a:	4b10      	ldr	r3, [pc, #64]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b526:	490d      	ldr	r1, [pc, #52]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	650b      	str	r3, [r1, #80]	; 0x50
 800b52c:	e001      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d033      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b542:	2b03      	cmp	r3, #3
 800b544:	d81c      	bhi.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b546:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54c:	0800b587 	.word	0x0800b587
 800b550:	0800b561 	.word	0x0800b561
 800b554:	0800b56f 	.word	0x0800b56f
 800b558:	0800b587 	.word	0x0800b587
 800b55c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b560:	4bb8      	ldr	r3, [pc, #736]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4ab7      	ldr	r2, [pc, #732]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b56a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b56c:	e00c      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3304      	adds	r3, #4
 800b572:	2102      	movs	r1, #2
 800b574:	4618      	mov	r0, r3
 800b576:	f001 fd21 	bl	800cfbc <RCCEx_PLL2_Config>
 800b57a:	4603      	mov	r3, r0
 800b57c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b57e:	e003      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
      break;
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b586:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b58e:	4bad      	ldr	r3, [pc, #692]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b592:	f023 0203 	bic.w	r2, r3, #3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59a:	49aa      	ldr	r1, [pc, #680]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b5a0:	e001      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 8086 	beq.w	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5b4:	4ba4      	ldr	r3, [pc, #656]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4aa3      	ldr	r2, [pc, #652]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b5ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5c0:	f7f8 fea6 	bl	8004310 <HAL_GetTick>
 800b5c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5c6:	e009      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5c8:	f7f8 fea2 	bl	8004310 <HAL_GetTick>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2b64      	cmp	r3, #100	; 0x64
 800b5d4:	d902      	bls.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	75fb      	strb	r3, [r7, #23]
        break;
 800b5da:	e005      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5dc:	4b9a      	ldr	r3, [pc, #616]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0ef      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d166      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b5ee:	4b95      	ldr	r3, [pc, #596]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b5f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5f8:	4053      	eors	r3, r2
 800b5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d013      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b602:	4b90      	ldr	r3, [pc, #576]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b60a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b60c:	4b8d      	ldr	r3, [pc, #564]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b610:	4a8c      	ldr	r2, [pc, #560]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b616:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b618:	4b8a      	ldr	r3, [pc, #552]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61c:	4a89      	ldr	r2, [pc, #548]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b61e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b622:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b624:	4a87      	ldr	r2, [pc, #540]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b634:	d115      	bne.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b636:	f7f8 fe6b 	bl	8004310 <HAL_GetTick>
 800b63a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b63c:	e00b      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b63e:	f7f8 fe67 	bl	8004310 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d902      	bls.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	75fb      	strb	r3, [r7, #23]
            break;
 800b654:	e005      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b656:	4b7b      	ldr	r3, [pc, #492]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65a:	f003 0302 	and.w	r3, r3, #2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0ed      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b662:	7dfb      	ldrb	r3, [r7, #23]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d126      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b676:	d10d      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b678:	4b72      	ldr	r3, [pc, #456]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b686:	0919      	lsrs	r1, r3, #4
 800b688:	4b70      	ldr	r3, [pc, #448]	; (800b84c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b68a:	400b      	ands	r3, r1
 800b68c:	496d      	ldr	r1, [pc, #436]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	610b      	str	r3, [r1, #16]
 800b692:	e005      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b694:	4b6b      	ldr	r3, [pc, #428]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	4a6a      	ldr	r2, [pc, #424]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b69a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b69e:	6113      	str	r3, [r2, #16]
 800b6a0:	4b68      	ldr	r3, [pc, #416]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b6a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6ae:	4965      	ldr	r1, [pc, #404]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	670b      	str	r3, [r1, #112]	; 0x70
 800b6b4:	e004      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	75bb      	strb	r3, [r7, #22]
 800b6ba:	e001      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d07e      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6d0:	2b28      	cmp	r3, #40	; 0x28
 800b6d2:	d867      	bhi.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b7ab 	.word	0x0800b7ab
 800b6e0:	0800b7a5 	.word	0x0800b7a5
 800b6e4:	0800b7a5 	.word	0x0800b7a5
 800b6e8:	0800b7a5 	.word	0x0800b7a5
 800b6ec:	0800b7a5 	.word	0x0800b7a5
 800b6f0:	0800b7a5 	.word	0x0800b7a5
 800b6f4:	0800b7a5 	.word	0x0800b7a5
 800b6f8:	0800b7a5 	.word	0x0800b7a5
 800b6fc:	0800b781 	.word	0x0800b781
 800b700:	0800b7a5 	.word	0x0800b7a5
 800b704:	0800b7a5 	.word	0x0800b7a5
 800b708:	0800b7a5 	.word	0x0800b7a5
 800b70c:	0800b7a5 	.word	0x0800b7a5
 800b710:	0800b7a5 	.word	0x0800b7a5
 800b714:	0800b7a5 	.word	0x0800b7a5
 800b718:	0800b7a5 	.word	0x0800b7a5
 800b71c:	0800b793 	.word	0x0800b793
 800b720:	0800b7a5 	.word	0x0800b7a5
 800b724:	0800b7a5 	.word	0x0800b7a5
 800b728:	0800b7a5 	.word	0x0800b7a5
 800b72c:	0800b7a5 	.word	0x0800b7a5
 800b730:	0800b7a5 	.word	0x0800b7a5
 800b734:	0800b7a5 	.word	0x0800b7a5
 800b738:	0800b7a5 	.word	0x0800b7a5
 800b73c:	0800b7ab 	.word	0x0800b7ab
 800b740:	0800b7a5 	.word	0x0800b7a5
 800b744:	0800b7a5 	.word	0x0800b7a5
 800b748:	0800b7a5 	.word	0x0800b7a5
 800b74c:	0800b7a5 	.word	0x0800b7a5
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b7a5 	.word	0x0800b7a5
 800b758:	0800b7a5 	.word	0x0800b7a5
 800b75c:	0800b7ab 	.word	0x0800b7ab
 800b760:	0800b7a5 	.word	0x0800b7a5
 800b764:	0800b7a5 	.word	0x0800b7a5
 800b768:	0800b7a5 	.word	0x0800b7a5
 800b76c:	0800b7a5 	.word	0x0800b7a5
 800b770:	0800b7a5 	.word	0x0800b7a5
 800b774:	0800b7a5 	.word	0x0800b7a5
 800b778:	0800b7a5 	.word	0x0800b7a5
 800b77c:	0800b7ab 	.word	0x0800b7ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3304      	adds	r3, #4
 800b784:	2101      	movs	r1, #1
 800b786:	4618      	mov	r0, r3
 800b788:	f001 fc18 	bl	800cfbc <RCCEx_PLL2_Config>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b790:	e00c      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3324      	adds	r3, #36	; 0x24
 800b796:	2101      	movs	r1, #1
 800b798:	4618      	mov	r0, r3
 800b79a:	f001 fcc1 	bl	800d120 <RCCEx_PLL3_Config>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b7a2:	e003      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a8:	e000      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b7aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d109      	bne.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b7b2:	4b24      	ldr	r3, [pc, #144]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7be:	4921      	ldr	r1, [pc, #132]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	654b      	str	r3, [r1, #84]	; 0x54
 800b7c4:	e001      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d03e      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7da:	2b05      	cmp	r3, #5
 800b7dc:	d820      	bhi.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b827 	.word	0x0800b827
 800b7e8:	0800b7fd 	.word	0x0800b7fd
 800b7ec:	0800b80f 	.word	0x0800b80f
 800b7f0:	0800b827 	.word	0x0800b827
 800b7f4:	0800b827 	.word	0x0800b827
 800b7f8:	0800b827 	.word	0x0800b827
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3304      	adds	r3, #4
 800b800:	2101      	movs	r1, #1
 800b802:	4618      	mov	r0, r3
 800b804:	f001 fbda 	bl	800cfbc <RCCEx_PLL2_Config>
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b80c:	e00c      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3324      	adds	r3, #36	; 0x24
 800b812:	2101      	movs	r1, #1
 800b814:	4618      	mov	r0, r3
 800b816:	f001 fc83 	bl	800d120 <RCCEx_PLL3_Config>
 800b81a:	4603      	mov	r3, r0
 800b81c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b81e:	e003      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	75fb      	strb	r3, [r7, #23]
      break;
 800b824:	e000      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b826:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d110      	bne.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b832:	f023 0207 	bic.w	r2, r3, #7
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b83a:	4902      	ldr	r1, [pc, #8]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b83c:	4313      	orrs	r3, r2
 800b83e:	654b      	str	r3, [r1, #84]	; 0x54
 800b840:	e008      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
 800b848:	58024800 	.word	0x58024800
 800b84c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d039      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b866:	2b05      	cmp	r3, #5
 800b868:	d820      	bhi.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b8b3 	.word	0x0800b8b3
 800b874:	0800b889 	.word	0x0800b889
 800b878:	0800b89b 	.word	0x0800b89b
 800b87c:	0800b8b3 	.word	0x0800b8b3
 800b880:	0800b8b3 	.word	0x0800b8b3
 800b884:	0800b8b3 	.word	0x0800b8b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	2101      	movs	r1, #1
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 fb94 	bl	800cfbc <RCCEx_PLL2_Config>
 800b894:	4603      	mov	r3, r0
 800b896:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b898:	e00c      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3324      	adds	r3, #36	; 0x24
 800b89e:	2101      	movs	r1, #1
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f001 fc3d 	bl	800d120 <RCCEx_PLL3_Config>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b8aa:	e003      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b8b0:	e000      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b8b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8b4:	7dfb      	ldrb	r3, [r7, #23]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8ba:	4bb7      	ldr	r3, [pc, #732]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8be:	f023 0207 	bic.w	r2, r3, #7
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c8:	49b3      	ldr	r1, [pc, #716]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	658b      	str	r3, [r1, #88]	; 0x58
 800b8ce:	e001      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0320 	and.w	r3, r3, #32
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d04b      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8ea:	d02e      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b8ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8f0:	d828      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d02a      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d822      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b8fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b902:	d026      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b904:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b908:	d81c      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90e:	d010      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b914:	d816      	bhi.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01d      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b91a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b91e:	d111      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3304      	adds	r3, #4
 800b924:	2100      	movs	r1, #0
 800b926:	4618      	mov	r0, r3
 800b928:	f001 fb48 	bl	800cfbc <RCCEx_PLL2_Config>
 800b92c:	4603      	mov	r3, r0
 800b92e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b930:	e012      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3324      	adds	r3, #36	; 0x24
 800b936:	2102      	movs	r1, #2
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 fbf1 	bl	800d120 <RCCEx_PLL3_Config>
 800b93e:	4603      	mov	r3, r0
 800b940:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b942:	e009      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	75fb      	strb	r3, [r7, #23]
      break;
 800b948:	e006      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b94a:	bf00      	nop
 800b94c:	e004      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b94e:	bf00      	nop
 800b950:	e002      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b952:	bf00      	nop
 800b954:	e000      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b956:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b95e:	4b8e      	ldr	r3, [pc, #568]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b962:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b96c:	498a      	ldr	r1, [pc, #552]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	654b      	str	r3, [r1, #84]	; 0x54
 800b972:	e001      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b980:	2b00      	cmp	r3, #0
 800b982:	d04b      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b98a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b98e:	d02e      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b990:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b994:	d828      	bhi.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b99a:	d02a      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a0:	d822      	bhi.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b9a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9a6:	d026      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b9a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9ac:	d81c      	bhi.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b9ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b2:	d010      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b9b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b8:	d816      	bhi.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d01d      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b9be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c2:	d111      	bne.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 faf6 	bl	800cfbc <RCCEx_PLL2_Config>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b9d4:	e012      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3324      	adds	r3, #36	; 0x24
 800b9da:	2102      	movs	r1, #2
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f001 fb9f 	bl	800d120 <RCCEx_PLL3_Config>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b9e6:	e009      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ec:	e006      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b9ee:	bf00      	nop
 800b9f0:	e004      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b9f2:	bf00      	nop
 800b9f4:	e002      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b9fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10a      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba02:	4b65      	ldr	r3, [pc, #404]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ba04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba10:	4961      	ldr	r1, [pc, #388]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ba12:	4313      	orrs	r3, r2
 800ba14:	658b      	str	r3, [r1, #88]	; 0x58
 800ba16:	e001      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
 800ba1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d04b      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba32:	d02e      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ba34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba38:	d828      	bhi.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ba3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba3e:	d02a      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ba40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba44:	d822      	bhi.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ba46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba4a:	d026      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ba4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba50:	d81c      	bhi.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ba52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba56:	d010      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ba58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba5c:	d816      	bhi.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d01d      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ba62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba66:	d111      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 faa4 	bl	800cfbc <RCCEx_PLL2_Config>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ba78:	e012      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3324      	adds	r3, #36	; 0x24
 800ba7e:	2102      	movs	r1, #2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f001 fb4d 	bl	800d120 <RCCEx_PLL3_Config>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ba8a:	e009      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba90:	e006      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ba92:	bf00      	nop
 800ba94:	e004      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ba96:	bf00      	nop
 800ba98:	e002      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ba9a:	bf00      	nop
 800ba9c:	e000      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ba9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800baa6:	4b3c      	ldr	r3, [pc, #240]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800baa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bab4:	4938      	ldr	r1, [pc, #224]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	658b      	str	r3, [r1, #88]	; 0x58
 800baba:	e001      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0308 	and.w	r3, r3, #8
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01a      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad6:	d10a      	bne.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3324      	adds	r3, #36	; 0x24
 800badc:	2102      	movs	r1, #2
 800bade:	4618      	mov	r0, r3
 800bae0:	f001 fb1e 	bl	800d120 <RCCEx_PLL3_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800baee:	4b2a      	ldr	r3, [pc, #168]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800baf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bafc:	4926      	ldr	r1, [pc, #152]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0310 	and.w	r3, r3, #16
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01a      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb18:	d10a      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3324      	adds	r3, #36	; 0x24
 800bb1e:	2102      	movs	r1, #2
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 fafd 	bl	800d120 <RCCEx_PLL3_Config>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb30:	4b19      	ldr	r3, [pc, #100]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb3e:	4916      	ldr	r1, [pc, #88]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d036      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb5a:	d01f      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bb5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb60:	d817      	bhi.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800bb66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb6a:	d009      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bb6c:	e011      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	3304      	adds	r3, #4
 800bb72:	2100      	movs	r1, #0
 800bb74:	4618      	mov	r0, r3
 800bb76:	f001 fa21 	bl	800cfbc <RCCEx_PLL2_Config>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bb7e:	e00e      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	2102      	movs	r1, #2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 faca 	bl	800d120 <RCCEx_PLL3_Config>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bb90:	e005      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	75fb      	strb	r3, [r7, #23]
      break;
 800bb96:	e002      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800bb98:	58024400 	.word	0x58024400
      break;
 800bb9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bba4:	4b93      	ldr	r3, [pc, #588]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbb2:	4990      	ldr	r1, [pc, #576]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	658b      	str	r3, [r1, #88]	; 0x58
 800bbb8:	e001      	b.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d033      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbd4:	d01c      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800bbd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbda:	d816      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bbdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe0:	d003      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bbe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbe6:	d007      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800bbe8:	e00f      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbea:	4b82      	ldr	r3, [pc, #520]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	4a81      	ldr	r2, [pc, #516]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bbf6:	e00c      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3324      	adds	r3, #36	; 0x24
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 fa8e 	bl	800d120 <RCCEx_PLL3_Config>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bc08:	e003      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc0e:	e000      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800bc10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc12:	7dfb      	ldrb	r3, [r7, #23]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc18:	4b76      	ldr	r3, [pc, #472]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc26:	4973      	ldr	r1, [pc, #460]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	654b      	str	r3, [r1, #84]	; 0x54
 800bc2c:	e001      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d029      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800bc46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4a:	d007      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800bc4c:	e00f      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4e:	4b69      	ldr	r3, [pc, #420]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc52:	4a68      	ldr	r2, [pc, #416]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bc5a:	e00b      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	2102      	movs	r1, #2
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 f9aa 	bl	800cfbc <RCCEx_PLL2_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bc6c:	e002      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	75fb      	strb	r3, [r7, #23]
      break;
 800bc72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc7a:	4b5e      	ldr	r3, [pc, #376]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc86:	495b      	ldr	r1, [pc, #364]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bc8c:	e001      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3324      	adds	r3, #36	; 0x24
 800bca2:	2102      	movs	r1, #2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 fa3b 	bl	800d120 <RCCEx_PLL3_Config>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d030      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcc8:	d017      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800bcca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcce:	d811      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd4:	d013      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bcd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcda:	d80b      	bhi.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d010      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce4:	d106      	bne.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce6:	4b43      	ldr	r3, [pc, #268]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	4a42      	ldr	r2, [pc, #264]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bcec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bcf2:	e007      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bcf8:	e004      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bcfa:	bf00      	nop
 800bcfc:	e002      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bcfe:	bf00      	nop
 800bd00:	e000      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bd02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d109      	bne.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd0a:	4b3a      	ldr	r3, [pc, #232]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd16:	4937      	ldr	r1, [pc, #220]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	654b      	str	r3, [r1, #84]	; 0x54
 800bd1c:	e001      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d008      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd2e:	4b31      	ldr	r3, [pc, #196]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3a:	492e      	ldr	r1, [pc, #184]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bd4c:	4b29      	ldr	r3, [pc, #164]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd5a:	4926      	ldr	r1, [pc, #152]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d008      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd6c:	4b21      	ldr	r3, [pc, #132]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd78:	491e      	ldr	r1, [pc, #120]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00d      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd8a:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	4a19      	ldr	r2, [pc, #100]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd94:	6113      	str	r3, [r2, #16]
 800bd96:	4b17      	ldr	r3, [pc, #92]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd98:	691a      	ldr	r2, [r3, #16]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bda0:	4914      	ldr	r1, [pc, #80]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da08      	bge.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdae:	4b11      	ldr	r3, [pc, #68]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdba:	490e      	ldr	r1, [pc, #56]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bdcc:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bdce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdda:	4906      	ldr	r1, [pc, #24]	; (800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bde0:	7dbb      	ldrb	r3, [r7, #22]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	e000      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	58024400 	.word	0x58024400

0800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b090      	sub	sp, #64	; 0x40
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be06:	f040 8095 	bne.w	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800be0a:	4bae      	ldr	r3, [pc, #696]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	633b      	str	r3, [r7, #48]	; 0x30
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2b04      	cmp	r3, #4
 800be18:	f200 8088 	bhi.w	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800be1c:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800be1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be22:	bf00      	nop
 800be24:	0800be39 	.word	0x0800be39
 800be28:	0800be61 	.word	0x0800be61
 800be2c:	0800be89 	.word	0x0800be89
 800be30:	0800bf25 	.word	0x0800bf25
 800be34:	0800beb1 	.word	0x0800beb1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be38:	4ba2      	ldr	r3, [pc, #648]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be44:	d108      	bne.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 ff64 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be54:	f000 bc95 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be5c:	f000 bc91 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be60:	4b98      	ldr	r3, [pc, #608]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be6c:	d108      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be6e:	f107 0318 	add.w	r3, r7, #24
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fca8 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be7c:	f000 bc81 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be84:	f000 bc7d 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be88:	4b8e      	ldr	r3, [pc, #568]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be94:	d108      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fde8 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bea4:	f000 bc6d 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beac:	f000 bc69 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800beb0:	4b84      	ldr	r3, [pc, #528]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800beb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beb8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beba:	4b82      	ldr	r3, [pc, #520]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 0304 	and.w	r3, r3, #4
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	d10c      	bne.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800bec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d109      	bne.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800becc:	4b7d      	ldr	r3, [pc, #500]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	08db      	lsrs	r3, r3, #3
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	4a7c      	ldr	r2, [pc, #496]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bed8:	fa22 f303 	lsr.w	r3, r2, r3
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bede:	e01f      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bee0:	4b78      	ldr	r3, [pc, #480]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beec:	d106      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bef4:	d102      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bef6:	4b75      	ldr	r3, [pc, #468]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800befa:	e011      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800befc:	4b71      	ldr	r3, [pc, #452]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf08:	d106      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf10:	d102      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bf12:	4b6f      	ldr	r3, [pc, #444]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bf14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf16:	e003      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bf1c:	f000 bc31 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf20:	f000 bc2f 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bf24:	4b6b      	ldr	r3, [pc, #428]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf28:	f000 bc2b 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf30:	f000 bc27 	b.w	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf3a:	f040 8095 	bne.w	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bf3e:	4b61      	ldr	r3, [pc, #388]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf42:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bf46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	d04d      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf56:	f200 8084 	bhi.w	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	2bc0      	cmp	r3, #192	; 0xc0
 800bf5e:	d07d      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	2bc0      	cmp	r3, #192	; 0xc0
 800bf64:	d87d      	bhi.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d02d      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	2b80      	cmp	r3, #128	; 0x80
 800bf70:	d877      	bhi.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d012      	beq.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800bf7e:	e070      	b.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf80:	4b50      	ldr	r3, [pc, #320]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf8c:	d107      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 fec0 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf9c:	e3f1      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa2:	e3ee      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfa4:	4b47      	ldr	r3, [pc, #284]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfb0:	d107      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfb2:	f107 0318 	add.w	r3, r7, #24
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fc06 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bfc0:	e3df      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfc6:	e3dc      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfc8:	4b3e      	ldr	r3, [pc, #248]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd4:	d107      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfd6:	f107 030c 	add.w	r3, r7, #12
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fd48 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bfe4:	e3cd      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfea:	e3ca      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bfec:	4b35      	ldr	r3, [pc, #212]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bff4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bff6:	4b33      	ldr	r3, [pc, #204]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0304 	and.w	r3, r3, #4
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d10c      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c004:	2b00      	cmp	r3, #0
 800c006:	d109      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c008:	4b2e      	ldr	r3, [pc, #184]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	08db      	lsrs	r3, r3, #3
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	4a2d      	ldr	r2, [pc, #180]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c014:	fa22 f303 	lsr.w	r3, r2, r3
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01a:	e01e      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c01c:	4b29      	ldr	r3, [pc, #164]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c028:	d106      	bne.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c030:	d102      	bne.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c032:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c036:	e010      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c038:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c044:	d106      	bne.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04c:	d102      	bne.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c04e:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c052:	e002      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c058:	e393      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c05a:	e392      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c05c:	4b1d      	ldr	r3, [pc, #116]	; (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c060:	e38f      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c066:	e38c      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c06e:	f040 80a7 	bne.w	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c072:	4b14      	ldr	r3, [pc, #80]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c076:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c07a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c082:	d05f      	beq.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c08a:	f200 8096 	bhi.w	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c094:	f000 808e 	beq.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c09e:	f200 808c 	bhi.w	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0a8:	d03a      	beq.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0b0:	f200 8083 	bhi.w	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00e      	beq.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0c0:	d01c      	beq.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c0c2:	e07a      	b.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c0c4:	58024400 	.word	0x58024400
 800c0c8:	03d09000 	.word	0x03d09000
 800c0cc:	003d0900 	.word	0x003d0900
 800c0d0:	017d7840 	.word	0x017d7840
 800c0d4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0d8:	4baa      	ldr	r3, [pc, #680]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e4:	d107      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 fe14 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0f4:	e345      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0fa:	e342      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0fc:	4ba1      	ldr	r3, [pc, #644]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c108:	d107      	bne.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c10a:	f107 0318 	add.w	r3, r7, #24
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fb5a 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c118:	e333      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c11e:	e330      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c120:	4b98      	ldr	r3, [pc, #608]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12c:	d107      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12e:	f107 030c 	add.w	r3, r7, #12
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fc9c 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c13c:	e321      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c142:	e31e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c144:	4b8f      	ldr	r3, [pc, #572]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c14e:	4b8d      	ldr	r3, [pc, #564]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d10c      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c160:	4b88      	ldr	r3, [pc, #544]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	08db      	lsrs	r3, r3, #3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	4a87      	ldr	r2, [pc, #540]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c16c:	fa22 f303 	lsr.w	r3, r2, r3
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c172:	e01e      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c174:	4b83      	ldr	r3, [pc, #524]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c180:	d106      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800c182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c188:	d102      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c18a:	4b80      	ldr	r3, [pc, #512]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c18e:	e010      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c190:	4b7c      	ldr	r3, [pc, #496]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c19c:	d106      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a4:	d102      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c1a6:	4b7a      	ldr	r3, [pc, #488]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1aa:	e002      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c1b0:	e2e7      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1b2:	e2e6      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c1b4:	4b77      	ldr	r3, [pc, #476]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1b8:	e2e3      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1be:	e2e0      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1c6:	f040 809c 	bne.w	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c1ca:	4b6e      	ldr	r3, [pc, #440]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c1d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1da:	d054      	beq.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1e2:	f200 808b 	bhi.w	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1ec:	f000 8083 	beq.w	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1f6:	f200 8081 	bhi.w	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c200:	d02f      	beq.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c208:	d878      	bhi.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d004      	beq.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c216:	d012      	beq.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800c218:	e070      	b.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c21a:	4b5a      	ldr	r3, [pc, #360]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c226:	d107      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fd73 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c236:	e2a4      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c23c:	e2a1      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c23e:	4b51      	ldr	r3, [pc, #324]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c24a:	d107      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24c:	f107 0318 	add.w	r3, r7, #24
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fab9 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800c25a:	e292      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c260:	e28f      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c262:	4b48      	ldr	r3, [pc, #288]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c26a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c26e:	d107      	bne.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c270:	f107 030c 	add.w	r3, r7, #12
 800c274:	4618      	mov	r0, r3
 800c276:	f000 fbfb 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c27e:	e280      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c280:	2300      	movs	r3, #0
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c284:	e27d      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c286:	4b3f      	ldr	r3, [pc, #252]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c28a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c28e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c290:	4b3c      	ldr	r3, [pc, #240]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d10c      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c2a2:	4b38      	ldr	r3, [pc, #224]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	08db      	lsrs	r3, r3, #3
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	4a36      	ldr	r2, [pc, #216]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b4:	e01e      	b.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2b6:	4b33      	ldr	r3, [pc, #204]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c2:	d106      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800c2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ca:	d102      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c2cc:	4b2f      	ldr	r3, [pc, #188]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d0:	e010      	b.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2d2:	4b2c      	ldr	r3, [pc, #176]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2de:	d106      	bne.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800c2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e6:	d102      	bne.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c2e8:	4b29      	ldr	r3, [pc, #164]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ec:	e002      	b.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c2f2:	e246      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2f4:	e245      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c2f6:	4b27      	ldr	r3, [pc, #156]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2fa:	e242      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c300:	e23f      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c308:	f040 80a8 	bne.w	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c30c:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c310:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c314:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c31c:	d060      	beq.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c324:	f200 8097 	bhi.w	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c32e:	f000 808f 	beq.w	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c338:	f200 808d 	bhi.w	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c342:	d03b      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c34a:	f200 8084 	bhi.w	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35a:	d01d      	beq.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800c35c:	e07b      	b.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c35e:	4b09      	ldr	r3, [pc, #36]	; (800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c36a:	d107      	bne.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c36c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c370:	4618      	mov	r0, r3
 800c372:	f000 fcd1 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c37a:	e202      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c380:	e1ff      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c382:	bf00      	nop
 800c384:	58024400 	.word	0x58024400
 800c388:	03d09000 	.word	0x03d09000
 800c38c:	003d0900 	.word	0x003d0900
 800c390:	017d7840 	.word	0x017d7840
 800c394:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c398:	4ba3      	ldr	r3, [pc, #652]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3a4:	d107      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3a6:	f107 0318 	add.w	r3, r7, #24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fa0c 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3b4:	e1e5      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3ba:	e1e2      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3bc:	4b9a      	ldr	r3, [pc, #616]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c8:	d107      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ca:	f107 030c 	add.w	r3, r7, #12
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 fb4e 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3d8:	e1d3      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3de:	e1d0      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c3e0:	4b91      	ldr	r3, [pc, #580]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3ea:	4b8f      	ldr	r3, [pc, #572]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0304 	and.w	r3, r3, #4
 800c3f2:	2b04      	cmp	r3, #4
 800c3f4:	d10c      	bne.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d109      	bne.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3fc:	4b8a      	ldr	r3, [pc, #552]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	08db      	lsrs	r3, r3, #3
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	4a89      	ldr	r2, [pc, #548]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c408:	fa22 f303 	lsr.w	r3, r2, r3
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40e:	e01e      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c410:	4b85      	ldr	r3, [pc, #532]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41c:	d106      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800c41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c424:	d102      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c426:	4b82      	ldr	r3, [pc, #520]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c42a:	e010      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c42c:	4b7e      	ldr	r3, [pc, #504]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c438:	d106      	bne.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c440:	d102      	bne.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c442:	4b7c      	ldr	r3, [pc, #496]	; (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c446:	e002      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c44c:	e199      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c44e:	e198      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c450:	4b79      	ldr	r3, [pc, #484]	; (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c454:	e195      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c45a:	e192      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c462:	d173      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c464:	4b70      	ldr	r3, [pc, #448]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c474:	d02f      	beq.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c47c:	d863      	bhi.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48a:	d012      	beq.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800c48c:	e05b      	b.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c48e:	4b66      	ldr	r3, [pc, #408]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c49a:	d107      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c49c:	f107 0318 	add.w	r3, r7, #24
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 f991 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4aa:	e16a      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4b0:	e167      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b2:	4b5d      	ldr	r3, [pc, #372]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4be:	d107      	bne.n	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 fad3 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4ce:	e158      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4d4:	e155      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c4d6:	4b54      	ldr	r3, [pc, #336]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4e0:	4b51      	ldr	r3, [pc, #324]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b04      	cmp	r3, #4
 800c4ea:	d10c      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800c4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d109      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c4f2:	4b4d      	ldr	r3, [pc, #308]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	08db      	lsrs	r3, r3, #3
 800c4f8:	f003 0303 	and.w	r3, r3, #3
 800c4fc:	4a4b      	ldr	r2, [pc, #300]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c504:	e01e      	b.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c506:	4b48      	ldr	r3, [pc, #288]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c512:	d106      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c51a:	d102      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c51c:	4b44      	ldr	r3, [pc, #272]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	e010      	b.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c522:	4b41      	ldr	r3, [pc, #260]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c52e:	d106      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c536:	d102      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c538:	4b3e      	ldr	r3, [pc, #248]	; (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53c:	e002      	b.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c542:	e11e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c544:	e11d      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c54a:	e11a      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c552:	d133      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c554:	4b34      	ldr	r3, [pc, #208]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c55c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	2b00      	cmp	r3, #0
 800c562:	d004      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c56a:	d012      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800c56c:	e023      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c56e:	4b2e      	ldr	r3, [pc, #184]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c57a:	d107      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c57c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fbc9 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c58a:	e0fa      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c590:	e0f7      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c592:	4b25      	ldr	r3, [pc, #148]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c59a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c59e:	d107      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5a0:	f107 0318 	add.w	r3, r7, #24
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 f90f 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c5ae:	e0e8      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5b4:	e0e5      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5ba:	e0e2      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5c2:	f040 808f 	bne.w	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c5c6:	4b18      	ldr	r3, [pc, #96]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c5ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5d6:	d075      	beq.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5de:	d87e      	bhi.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5e6:	d060      	beq.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ee:	d876      	bhi.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c5f6:	d045      	beq.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c5fe:	d86e      	bhi.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c606:	d02b      	beq.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c60e:	d866      	bhi.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	2b00      	cmp	r3, #0
 800c614:	d004      	beq.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c61c:	d00e      	beq.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800c61e:	e05e      	b.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c620:	f000 f8bc 	bl	800c79c <HAL_RCCEx_GetD3PCLK1Freq>
 800c624:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c626:	e0ac      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c628:	58024400 	.word	0x58024400
 800c62c:	03d09000 	.word	0x03d09000
 800c630:	003d0900 	.word	0x003d0900
 800c634:	017d7840 	.word	0x017d7840
 800c638:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c63c:	4b53      	ldr	r3, [pc, #332]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c648:	d107      	bne.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c64a:	f107 0318 	add.w	r3, r7, #24
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 f8ba 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c658:	e093      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c65e:	e090      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c660:	4b4a      	ldr	r3, [pc, #296]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c66c:	d107      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c66e:	f107 030c 	add.w	r3, r7, #12
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f9fc 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c67c:	e081      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c682:	e07e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c684:	4b41      	ldr	r3, [pc, #260]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d109      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c690:	4b3e      	ldr	r3, [pc, #248]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	08db      	lsrs	r3, r3, #3
 800c696:	f003 0303 	and.w	r3, r3, #3
 800c69a:	4a3d      	ldr	r2, [pc, #244]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c69c:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c6a2:	e06e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6a8:	e06b      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6aa:	4b38      	ldr	r3, [pc, #224]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6b6:	d102      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800c6b8:	4b36      	ldr	r3, [pc, #216]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c6bc:	e061      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6c2:	e05e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6c4:	4b31      	ldr	r3, [pc, #196]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6d0:	d102      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800c6d2:	4b31      	ldr	r3, [pc, #196]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c6d6:	e054      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6dc:	e051      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6e2:	e04e      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6ea:	d148      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c6ec:	4b27      	ldr	r3, [pc, #156]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6fc:	d02a      	beq.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c704:	d838      	bhi.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d004      	beq.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c712:	d00d      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c714:	e030      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c716:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c722:	d102      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800c724:	4b1c      	ldr	r3, [pc, #112]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c728:	e02b      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c72e:	e028      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c730:	4b16      	ldr	r3, [pc, #88]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c73c:	d107      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c742:	4618      	mov	r0, r3
 800c744:	f000 fae8 	bl	800cd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c74c:	e019      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c752:	e016      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c754:	4b0d      	ldr	r3, [pc, #52]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c75c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c760:	d107      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c762:	f107 0318 	add.w	r3, r7, #24
 800c766:	4618      	mov	r0, r3
 800c768:	f000 f82e 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c770:	e007      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c776:	e004      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c778:	2300      	movs	r3, #0
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c77c:	e001      	b.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c784:	4618      	mov	r0, r3
 800c786:	3740      	adds	r7, #64	; 0x40
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	58024400 	.word	0x58024400
 800c790:	03d09000 	.word	0x03d09000
 800c794:	003d0900 	.word	0x003d0900
 800c798:	017d7840 	.word	0x017d7840

0800c79c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7a0:	f7fe fb8e 	bl	800aec0 <HAL_RCC_GetHCLKFreq>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	091b      	lsrs	r3, r3, #4
 800c7ac:	f003 0307 	and.w	r3, r3, #7
 800c7b0:	4904      	ldr	r1, [pc, #16]	; (800c7c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7b2:	5ccb      	ldrb	r3, [r1, r3]
 800c7b4:	f003 031f 	and.w	r3, r3, #31
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	58024400 	.word	0x58024400
 800c7c4:	0802766c 	.word	0x0802766c

0800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b089      	sub	sp, #36	; 0x24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7d0:	4ba1      	ldr	r3, [pc, #644]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d4:	f003 0303 	and.w	r3, r3, #3
 800c7d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c7da:	4b9f      	ldr	r3, [pc, #636]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	0b1b      	lsrs	r3, r3, #12
 800c7e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c7e6:	4b9c      	ldr	r3, [pc, #624]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	091b      	lsrs	r3, r3, #4
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c7f2:	4b99      	ldr	r3, [pc, #612]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f6:	08db      	lsrs	r3, r3, #3
 800c7f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	fb02 f303 	mul.w	r3, r2, r3
 800c802:	ee07 3a90 	vmov	s15, r3
 800c806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 8111 	beq.w	800ca38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	f000 8083 	beq.w	800c924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	2b02      	cmp	r3, #2
 800c822:	f200 80a1 	bhi.w	800c968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d003      	beq.n	800c834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d056      	beq.n	800c8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c832:	e099      	b.n	800c968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c834:	4b88      	ldr	r3, [pc, #544]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0320 	and.w	r3, r3, #32
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d02d      	beq.n	800c89c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c840:	4b85      	ldr	r3, [pc, #532]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	08db      	lsrs	r3, r3, #3
 800c846:	f003 0303 	and.w	r3, r3, #3
 800c84a:	4a84      	ldr	r2, [pc, #528]	; (800ca5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c84c:	fa22 f303 	lsr.w	r3, r2, r3
 800c850:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	ee07 3a90 	vmov	s15, r3
 800c862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86a:	4b7b      	ldr	r3, [pc, #492]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c872:	ee07 3a90 	vmov	s15, r3
 800c876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c87e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c896:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c89a:	e087      	b.n	800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ae:	4b6a      	ldr	r3, [pc, #424]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b6:	ee07 3a90 	vmov	s15, r3
 800c8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8de:	e065      	b.n	800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8f2:	4b59      	ldr	r3, [pc, #356]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fa:	ee07 3a90 	vmov	s15, r3
 800c8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c902:	ed97 6a03 	vldr	s12, [r7, #12]
 800c906:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c90a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c922:	e043      	b.n	800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	ee07 3a90 	vmov	s15, r3
 800c92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c936:	4b48      	ldr	r3, [pc, #288]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93e:	ee07 3a90 	vmov	s15, r3
 800c942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c946:	ed97 6a03 	vldr	s12, [r7, #12]
 800c94a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c966:	e021      	b.n	800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	ee07 3a90 	vmov	s15, r3
 800c96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c972:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c97a:	4b37      	ldr	r3, [pc, #220]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c982:	ee07 3a90 	vmov	s15, r3
 800c986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c99a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c9ac:	4b2a      	ldr	r3, [pc, #168]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b0:	0a5b      	lsrs	r3, r3, #9
 800c9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d2:	ee17 2a90 	vmov	r2, s15
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c9da:	4b1f      	ldr	r3, [pc, #124]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	0c1b      	lsrs	r3, r3, #16
 800c9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e4:	ee07 3a90 	vmov	s15, r3
 800c9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca00:	ee17 2a90 	vmov	r2, s15
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ca08:	4b13      	ldr	r3, [pc, #76]	; (800ca58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0c:	0e1b      	lsrs	r3, r3, #24
 800ca0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca2e:	ee17 2a90 	vmov	r2, s15
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca36:	e008      	b.n	800ca4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	609a      	str	r2, [r3, #8]
}
 800ca4a:	bf00      	nop
 800ca4c:	3724      	adds	r7, #36	; 0x24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	58024400 	.word	0x58024400
 800ca5c:	03d09000 	.word	0x03d09000
 800ca60:	46000000 	.word	0x46000000
 800ca64:	4c742400 	.word	0x4c742400
 800ca68:	4a742400 	.word	0x4a742400
 800ca6c:	4bbebc20 	.word	0x4bbebc20

0800ca70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b089      	sub	sp, #36	; 0x24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca78:	4ba1      	ldr	r3, [pc, #644]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ca82:	4b9f      	ldr	r3, [pc, #636]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca86:	0d1b      	lsrs	r3, r3, #20
 800ca88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca8e:	4b9c      	ldr	r3, [pc, #624]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ca9a:	4b99      	ldr	r3, [pc, #612]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca9e:	08db      	lsrs	r3, r3, #3
 800caa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	fb02 f303 	mul.w	r3, r2, r3
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 8111 	beq.w	800cce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	f000 8083 	beq.w	800cbcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	2b02      	cmp	r3, #2
 800caca:	f200 80a1 	bhi.w	800cc10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d003      	beq.n	800cadc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d056      	beq.n	800cb88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cada:	e099      	b.n	800cc10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cadc:	4b88      	ldr	r3, [pc, #544]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 0320 	and.w	r3, r3, #32
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d02d      	beq.n	800cb44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cae8:	4b85      	ldr	r3, [pc, #532]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	08db      	lsrs	r3, r3, #3
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	4a84      	ldr	r2, [pc, #528]	; (800cd04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800caf4:	fa22 f303 	lsr.w	r3, r2, r3
 800caf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cb42:	e087      	b.n	800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb56:	4b6a      	ldr	r3, [pc, #424]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb86:	e065      	b.n	800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb9a:	4b59      	ldr	r3, [pc, #356]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbca:	e043      	b.n	800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	ee07 3a90 	vmov	s15, r3
 800cbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cbda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbde:	4b48      	ldr	r3, [pc, #288]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc0e:	e021      	b.n	800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc22:	4b37      	ldr	r3, [pc, #220]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc2a:	ee07 3a90 	vmov	s15, r3
 800cc2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cc54:	4b2a      	ldr	r3, [pc, #168]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc58:	0a5b      	lsrs	r3, r3, #9
 800cc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7a:	ee17 2a90 	vmov	r2, s15
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cc82:	4b1f      	ldr	r3, [pc, #124]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc86:	0c1b      	lsrs	r3, r3, #16
 800cc88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8c:	ee07 3a90 	vmov	s15, r3
 800cc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca8:	ee17 2a90 	vmov	r2, s15
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ccb0:	4b13      	ldr	r3, [pc, #76]	; (800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb4:	0e1b      	lsrs	r3, r3, #24
 800ccb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccca:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd6:	ee17 2a90 	vmov	r2, s15
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ccde:	e008      	b.n	800ccf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	609a      	str	r2, [r3, #8]
}
 800ccf2:	bf00      	nop
 800ccf4:	3724      	adds	r7, #36	; 0x24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	58024400 	.word	0x58024400
 800cd04:	03d09000 	.word	0x03d09000
 800cd08:	46000000 	.word	0x46000000
 800cd0c:	4c742400 	.word	0x4c742400
 800cd10:	4a742400 	.word	0x4a742400
 800cd14:	4bbebc20 	.word	0x4bbebc20

0800cd18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b089      	sub	sp, #36	; 0x24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd20:	4ba0      	ldr	r3, [pc, #640]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	f003 0303 	and.w	r3, r3, #3
 800cd28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800cd2a:	4b9e      	ldr	r3, [pc, #632]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2e:	091b      	lsrs	r3, r3, #4
 800cd30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cd36:	4b9b      	ldr	r3, [pc, #620]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cd40:	4b98      	ldr	r3, [pc, #608]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd44:	08db      	lsrs	r3, r3, #3
 800cd46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd4a:	693a      	ldr	r2, [r7, #16]
 800cd4c:	fb02 f303 	mul.w	r3, r2, r3
 800cd50:	ee07 3a90 	vmov	s15, r3
 800cd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f000 8111 	beq.w	800cf86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	f000 8083 	beq.w	800ce72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	f200 80a1 	bhi.w	800ceb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d003      	beq.n	800cd82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d056      	beq.n	800ce2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cd80:	e099      	b.n	800ceb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd82:	4b88      	ldr	r3, [pc, #544]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0320 	and.w	r3, r3, #32
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d02d      	beq.n	800cdea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd8e:	4b85      	ldr	r3, [pc, #532]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	08db      	lsrs	r3, r3, #3
 800cd94:	f003 0303 	and.w	r3, r3, #3
 800cd98:	4a83      	ldr	r2, [pc, #524]	; (800cfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cd9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	ee07 3a90 	vmov	s15, r3
 800cdb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb8:	4b7a      	ldr	r3, [pc, #488]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc0:	ee07 3a90 	vmov	s15, r3
 800cdc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdcc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cfac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cde8:	e087      	b.n	800cefa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	ee07 3a90 	vmov	s15, r3
 800cdf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cdf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfc:	4b69      	ldr	r3, [pc, #420]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce04:	ee07 3a90 	vmov	s15, r3
 800ce08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce10:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cfac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce2c:	e065      	b.n	800cefa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	ee07 3a90 	vmov	s15, r3
 800ce34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ce3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce40:	4b58      	ldr	r3, [pc, #352]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce48:	ee07 3a90 	vmov	s15, r3
 800ce4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce54:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cfac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce70:	e043      	b.n	800cefa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	ee07 3a90 	vmov	s15, r3
 800ce78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ce80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce84:	4b47      	ldr	r3, [pc, #284]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8c:	ee07 3a90 	vmov	s15, r3
 800ce90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce98:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cfac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ceb4:	e021      	b.n	800cefa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	ee07 3a90 	vmov	s15, r3
 800cebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec8:	4b36      	ldr	r3, [pc, #216]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced0:	ee07 3a90 	vmov	s15, r3
 800ced4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cedc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cfac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cef8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800cefa:	4b2a      	ldr	r3, [pc, #168]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefe:	0a5b      	lsrs	r3, r3, #9
 800cf00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf04:	ee07 3a90 	vmov	s15, r3
 800cf08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf14:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf20:	ee17 2a90 	vmov	r2, s15
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800cf28:	4b1e      	ldr	r3, [pc, #120]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2c:	0c1b      	lsrs	r3, r3, #16
 800cf2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf4e:	ee17 2a90 	vmov	r2, s15
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800cf56:	4b13      	ldr	r3, [pc, #76]	; (800cfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	0e1b      	lsrs	r3, r3, #24
 800cf5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf60:	ee07 3a90 	vmov	s15, r3
 800cf64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf70:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf7c:	ee17 2a90 	vmov	r2, s15
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cf84:	e008      	b.n	800cf98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	609a      	str	r2, [r3, #8]
}
 800cf98:	bf00      	nop
 800cf9a:	3724      	adds	r7, #36	; 0x24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	58024400 	.word	0x58024400
 800cfa8:	03d09000 	.word	0x03d09000
 800cfac:	46000000 	.word	0x46000000
 800cfb0:	4c742400 	.word	0x4c742400
 800cfb4:	4a742400 	.word	0x4a742400
 800cfb8:	4bbebc20 	.word	0x4bbebc20

0800cfbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfca:	4b53      	ldr	r3, [pc, #332]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfce:	f003 0303 	and.w	r3, r3, #3
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d101      	bne.n	800cfda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e099      	b.n	800d10e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cfda:	4b4f      	ldr	r3, [pc, #316]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a4e      	ldr	r2, [pc, #312]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800cfe0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfe6:	f7f7 f993 	bl	8004310 <HAL_GetTick>
 800cfea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfec:	e008      	b.n	800d000 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cfee:	f7f7 f98f 	bl	8004310 <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d901      	bls.n	800d000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e086      	b.n	800d10e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d000:	4b45      	ldr	r3, [pc, #276]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f0      	bne.n	800cfee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d00c:	4b42      	ldr	r3, [pc, #264]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	031b      	lsls	r3, r3, #12
 800d01a:	493f      	ldr	r1, [pc, #252]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d01c:	4313      	orrs	r3, r2
 800d01e:	628b      	str	r3, [r1, #40]	; 0x28
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	3b01      	subs	r3, #1
 800d026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	3b01      	subs	r3, #1
 800d030:	025b      	lsls	r3, r3, #9
 800d032:	b29b      	uxth	r3, r3
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	3b01      	subs	r3, #1
 800d04a:	061b      	lsls	r3, r3, #24
 800d04c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d050:	4931      	ldr	r1, [pc, #196]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d052:	4313      	orrs	r3, r2
 800d054:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d056:	4b30      	ldr	r3, [pc, #192]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	492d      	ldr	r1, [pc, #180]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d064:	4313      	orrs	r3, r2
 800d066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	f023 0220 	bic.w	r2, r3, #32
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	4928      	ldr	r1, [pc, #160]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d07a:	4b27      	ldr	r3, [pc, #156]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	4a26      	ldr	r2, [pc, #152]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d080:	f023 0310 	bic.w	r3, r3, #16
 800d084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d086:	4b24      	ldr	r3, [pc, #144]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d08a:	4b24      	ldr	r3, [pc, #144]	; (800d11c <RCCEx_PLL2_Config+0x160>)
 800d08c:	4013      	ands	r3, r2
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	69d2      	ldr	r2, [r2, #28]
 800d092:	00d2      	lsls	r2, r2, #3
 800d094:	4920      	ldr	r1, [pc, #128]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d096:	4313      	orrs	r3, r2
 800d098:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d09a:	4b1f      	ldr	r3, [pc, #124]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09e:	4a1e      	ldr	r2, [pc, #120]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0a0:	f043 0310 	orr.w	r3, r3, #16
 800d0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b0:	4a19      	ldr	r2, [pc, #100]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0b8:	e00f      	b.n	800d0da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d106      	bne.n	800d0ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0c0:	4b15      	ldr	r3, [pc, #84]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	4a14      	ldr	r2, [pc, #80]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0cc:	e005      	b.n	800d0da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0ce:	4b12      	ldr	r3, [pc, #72]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	4a11      	ldr	r2, [pc, #68]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d0da:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a0e      	ldr	r2, [pc, #56]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d0e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0e6:	f7f7 f913 	bl	8004310 <HAL_GetTick>
 800d0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0ec:	e008      	b.n	800d100 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d0ee:	f7f7 f90f 	bl	8004310 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d901      	bls.n	800d100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e006      	b.n	800d10e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <RCCEx_PLL2_Config+0x15c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0f0      	beq.n	800d0ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	58024400 	.word	0x58024400
 800d11c:	ffff0007 	.word	0xffff0007

0800d120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d12e:	4b53      	ldr	r3, [pc, #332]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d132:	f003 0303 	and.w	r3, r3, #3
 800d136:	2b03      	cmp	r3, #3
 800d138:	d101      	bne.n	800d13e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e099      	b.n	800d272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d13e:	4b4f      	ldr	r3, [pc, #316]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a4e      	ldr	r2, [pc, #312]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d14a:	f7f7 f8e1 	bl	8004310 <HAL_GetTick>
 800d14e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d150:	e008      	b.n	800d164 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d152:	f7f7 f8dd 	bl	8004310 <HAL_GetTick>
 800d156:	4602      	mov	r2, r0
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d901      	bls.n	800d164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d160:	2303      	movs	r3, #3
 800d162:	e086      	b.n	800d272 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d164:	4b45      	ldr	r3, [pc, #276]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1f0      	bne.n	800d152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d170:	4b42      	ldr	r3, [pc, #264]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d174:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	051b      	lsls	r3, r3, #20
 800d17e:	493f      	ldr	r1, [pc, #252]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d180:	4313      	orrs	r3, r2
 800d182:	628b      	str	r3, [r1, #40]	; 0x28
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	3b01      	subs	r3, #1
 800d18a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	3b01      	subs	r3, #1
 800d194:	025b      	lsls	r3, r3, #9
 800d196:	b29b      	uxth	r3, r3
 800d198:	431a      	orrs	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	041b      	lsls	r3, r3, #16
 800d1a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	061b      	lsls	r3, r3, #24
 800d1b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1b4:	4931      	ldr	r1, [pc, #196]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1ba:	4b30      	ldr	r3, [pc, #192]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	492d      	ldr	r1, [pc, #180]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1cc:	4b2b      	ldr	r3, [pc, #172]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	4928      	ldr	r1, [pc, #160]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d1de:	4b27      	ldr	r3, [pc, #156]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	4a26      	ldr	r2, [pc, #152]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d1ea:	4b24      	ldr	r3, [pc, #144]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ee:	4b24      	ldr	r3, [pc, #144]	; (800d280 <RCCEx_PLL3_Config+0x160>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	69d2      	ldr	r2, [r2, #28]
 800d1f6:	00d2      	lsls	r2, r2, #3
 800d1f8:	4920      	ldr	r1, [pc, #128]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d1fe:	4b1f      	ldr	r3, [pc, #124]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d202:	4a1e      	ldr	r2, [pc, #120]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d106      	bne.n	800d21e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d210:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	4a19      	ldr	r2, [pc, #100]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d21a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d21c:	e00f      	b.n	800d23e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d106      	bne.n	800d232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d224:	4b15      	ldr	r3, [pc, #84]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	4a14      	ldr	r2, [pc, #80]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d22a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d22e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d230:	e005      	b.n	800d23e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d232:	4b12      	ldr	r3, [pc, #72]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	4a11      	ldr	r2, [pc, #68]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d23c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a0e      	ldr	r2, [pc, #56]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d24a:	f7f7 f861 	bl	8004310 <HAL_GetTick>
 800d24e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d250:	e008      	b.n	800d264 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d252:	f7f7 f85d 	bl	8004310 <HAL_GetTick>
 800d256:	4602      	mov	r2, r0
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d901      	bls.n	800d264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d260:	2303      	movs	r3, #3
 800d262:	e006      	b.n	800d272 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d264:	4b05      	ldr	r3, [pc, #20]	; (800d27c <RCCEx_PLL3_Config+0x15c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0f0      	beq.n	800d252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	58024400 	.word	0x58024400
 800d280:	ffff0007 	.word	0xffff0007

0800d284 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e04d      	b.n	800d332 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7a5b      	ldrb	r3, [r3, #9]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d105      	bne.n	800d2ac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7f5 fdca 	bl	8002e40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f023 0120 	bic.w	r1, r3, #32
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f042 0204 	orr.w	r2, r2, #4
 800d2d6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e2:	2b40      	cmp	r3, #64	; 0x40
 800d2e4:	d104      	bne.n	800d2f0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2204      	movs	r2, #4
 800d2ea:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e020      	b.n	800d332 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d2f0:	f7f7 f80e 	bl	8004310 <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d2f6:	e00e      	b.n	800d316 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d2f8:	f7f7 f80a 	bl	8004310 <HAL_GetTick>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	2b02      	cmp	r3, #2
 800d304:	d907      	bls.n	800d316 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2204      	movs	r2, #4
 800d30a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2202      	movs	r2, #2
 800d310:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e00d      	b.n	800d332 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f003 0304 	and.w	r3, r3, #4
 800d320:	2b04      	cmp	r3, #4
 800d322:	d0e9      	beq.n	800d2f8 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7a1b      	ldrb	r3, [r3, #8]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d101      	bne.n	800d354 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d350:	2302      	movs	r3, #2
 800d352:	e03d      	b.n	800d3d0 <HAL_RNG_GenerateRandomNumber+0x96>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	7a5b      	ldrb	r3, [r3, #9]
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b01      	cmp	r3, #1
 800d362:	d12c      	bne.n	800d3be <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2202      	movs	r2, #2
 800d368:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d36a:	f7f6 ffd1 	bl	8004310 <HAL_GetTick>
 800d36e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d370:	e011      	b.n	800d396 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d372:	f7f6 ffcd 	bl	8004310 <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d90a      	bls.n	800d396 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2202      	movs	r2, #2
 800d38a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e01c      	b.n	800d3d0 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d1e6      	bne.n	800d372 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	689a      	ldr	r2, [r3, #8]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	691a      	ldr	r2, [r3, #16]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	725a      	strb	r2, [r3, #9]
 800d3bc:	e004      	b.n	800d3c8 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2204      	movs	r2, #4
 800d3c2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	721a      	strb	r2, [r3, #8]

  return status;
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
 800d3e4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d904      	bls.n	800d3f6 <HAL_SAI_InitProtocol+0x1e>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	3b03      	subs	r3, #3
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d812      	bhi.n	800d41a <HAL_SAI_InitProtocol+0x42>
 800d3f4:	e008      	b.n	800d408 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	68b9      	ldr	r1, [r7, #8]
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f000 fb7d 	bl	800dafc <SAI_InitI2S>
 800d402:	4603      	mov	r3, r0
 800d404:	75fb      	strb	r3, [r7, #23]
      break;
 800d406:	e00b      	b.n	800d420 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 fc26 	bl	800dc60 <SAI_InitPCM>
 800d414:	4603      	mov	r3, r0
 800d416:	75fb      	strb	r3, [r7, #23]
      break;
 800d418:	e002      	b.n	800d420 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
      break;
 800d41e:	bf00      	nop
  }

  if (status == HAL_OK)
 800d420:	7dfb      	ldrb	r3, [r7, #23]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d104      	bne.n	800d430 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 f808 	bl	800d43c <HAL_SAI_Init>
 800d42c:	4603      	mov	r3, r0
 800d42e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d430:	7dfb      	ldrb	r3, [r7, #23]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	; 0x28
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d101      	bne.n	800d44e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e283      	b.n	800d956 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d44e:	f7f6 ff8f 	bl	8004370 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d113      	bne.n	800d484 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a94      	ldr	r2, [pc, #592]	; (800d6b4 <HAL_SAI_Init+0x278>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d004      	beq.n	800d470 <HAL_SAI_Init+0x34>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a93      	ldr	r2, [pc, #588]	; (800d6b8 <HAL_SAI_Init+0x27c>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d107      	bne.n	800d480 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d474:	2b01      	cmp	r3, #1
 800d476:	d103      	bne.n	800d480 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800d480:	2301      	movs	r3, #1
 800d482:	e268      	b.n	800d956 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a8a      	ldr	r2, [pc, #552]	; (800d6b4 <HAL_SAI_Init+0x278>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d004      	beq.n	800d498 <HAL_SAI_Init+0x5c>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a8a      	ldr	r2, [pc, #552]	; (800d6bc <HAL_SAI_Init+0x280>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d102      	bne.n	800d49e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800d498:	4b89      	ldr	r3, [pc, #548]	; (800d6c0 <HAL_SAI_Init+0x284>)
 800d49a:	61bb      	str	r3, [r7, #24]
 800d49c:	e028      	b.n	800d4f0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a88      	ldr	r2, [pc, #544]	; (800d6c4 <HAL_SAI_Init+0x288>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d004      	beq.n	800d4b2 <HAL_SAI_Init+0x76>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a86      	ldr	r2, [pc, #536]	; (800d6c8 <HAL_SAI_Init+0x28c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d102      	bne.n	800d4b8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800d4b2:	4b86      	ldr	r3, [pc, #536]	; (800d6cc <HAL_SAI_Init+0x290>)
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	e01b      	b.n	800d4f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a84      	ldr	r2, [pc, #528]	; (800d6d0 <HAL_SAI_Init+0x294>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d004      	beq.n	800d4cc <HAL_SAI_Init+0x90>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a83      	ldr	r2, [pc, #524]	; (800d6d4 <HAL_SAI_Init+0x298>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d102      	bne.n	800d4d2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800d4cc:	4b82      	ldr	r3, [pc, #520]	; (800d6d8 <HAL_SAI_Init+0x29c>)
 800d4ce:	61bb      	str	r3, [r7, #24]
 800d4d0:	e00e      	b.n	800d4f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a78      	ldr	r2, [pc, #480]	; (800d6b8 <HAL_SAI_Init+0x27c>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d004      	beq.n	800d4e6 <HAL_SAI_Init+0xaa>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a7e      	ldr	r2, [pc, #504]	; (800d6dc <HAL_SAI_Init+0x2a0>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d102      	bne.n	800d4ec <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800d4e6:	4b7e      	ldr	r3, [pc, #504]	; (800d6e0 <HAL_SAI_Init+0x2a4>)
 800d4e8:	61bb      	str	r3, [r7, #24]
 800d4ea:	e001      	b.n	800d4f0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e232      	b.n	800d956 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d106      	bne.n	800d50a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7f5 fd09 	bl	8002f1c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fc62 	bl	800ddd4 <SAI_Disable>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e21d      	b.n	800d956 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2202      	movs	r2, #2
 800d51e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d00c      	beq.n	800d544 <HAL_SAI_Init+0x108>
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d80d      	bhi.n	800d54a <HAL_SAI_Init+0x10e>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <HAL_SAI_Init+0xfc>
 800d532:	2b01      	cmp	r3, #1
 800d534:	d003      	beq.n	800d53e <HAL_SAI_Init+0x102>
 800d536:	e008      	b.n	800d54a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d53c:	e008      	b.n	800d550 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d53e:	2310      	movs	r3, #16
 800d540:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d542:	e005      	b.n	800d550 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d544:	2320      	movs	r3, #32
 800d546:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d548:	e002      	b.n	800d550 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d54e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	2b05      	cmp	r3, #5
 800d556:	d832      	bhi.n	800d5be <HAL_SAI_Init+0x182>
 800d558:	a201      	add	r2, pc, #4	; (adr r2, 800d560 <HAL_SAI_Init+0x124>)
 800d55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55e:	bf00      	nop
 800d560:	0800d579 	.word	0x0800d579
 800d564:	0800d57f 	.word	0x0800d57f
 800d568:	0800d587 	.word	0x0800d587
 800d56c:	0800d58f 	.word	0x0800d58f
 800d570:	0800d59f 	.word	0x0800d59f
 800d574:	0800d5af 	.word	0x0800d5af
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
      break;
 800d57c:	e022      	b.n	800d5c4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d582:	61fb      	str	r3, [r7, #28]
      break;
 800d584:	e01e      	b.n	800d5c4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d58a:	61fb      	str	r3, [r7, #28]
      break;
 800d58c:	e01a      	b.n	800d5c4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d58e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d592:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	f043 0301 	orr.w	r3, r3, #1
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d59c:	e012      	b.n	800d5c4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d59e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	f043 0302 	orr.w	r3, r3, #2
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d5ac:	e00a      	b.n	800d5c4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d5ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5b2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	f043 0303 	orr.w	r3, r3, #3
 800d5ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d5bc:	e002      	b.n	800d5c4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	61fb      	str	r3, [r7, #28]
      break;
 800d5c2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f000 80ba 	beq.w	800d748 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a35      	ldr	r2, [pc, #212]	; (800d6b4 <HAL_SAI_Init+0x278>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d004      	beq.n	800d5ec <HAL_SAI_Init+0x1b0>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a35      	ldr	r2, [pc, #212]	; (800d6bc <HAL_SAI_Init+0x280>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d104      	bne.n	800d5f6 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d5ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d5f0:	f7fe fc02 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d5f4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a32      	ldr	r2, [pc, #200]	; (800d6c4 <HAL_SAI_Init+0x288>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d004      	beq.n	800d60a <HAL_SAI_Init+0x1ce>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a30      	ldr	r2, [pc, #192]	; (800d6c8 <HAL_SAI_Init+0x28c>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d104      	bne.n	800d614 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d60a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d60e:	f7fe fbf3 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d612:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a2d      	ldr	r2, [pc, #180]	; (800d6d0 <HAL_SAI_Init+0x294>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d004      	beq.n	800d628 <HAL_SAI_Init+0x1ec>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a2c      	ldr	r2, [pc, #176]	; (800d6d4 <HAL_SAI_Init+0x298>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d104      	bne.n	800d632 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800d628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d62c:	f7fe fbe4 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d630:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a20      	ldr	r2, [pc, #128]	; (800d6b8 <HAL_SAI_Init+0x27c>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d104      	bne.n	800d646 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800d63c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d640:	f7fe fbda 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d644:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a24      	ldr	r2, [pc, #144]	; (800d6dc <HAL_SAI_Init+0x2a0>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d104      	bne.n	800d65a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800d650:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d654:	f7fe fbd0 	bl	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d658:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d662:	d120      	bne.n	800d6a6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d668:	2b04      	cmp	r3, #4
 800d66a:	d102      	bne.n	800d672 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800d66c:	2340      	movs	r3, #64	; 0x40
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	e00a      	b.n	800d688 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d676:	2b08      	cmp	r3, #8
 800d678:	d103      	bne.n	800d682 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800d67a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e002      	b.n	800d688 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d686:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	4613      	mov	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	4619      	mov	r1, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	fb02 f303 	mul.w	r3, r2, r3
 800d69e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d6a2:	613b      	str	r3, [r7, #16]
 800d6a4:	e02f      	b.n	800d706 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d6ae:	d119      	bne.n	800d6e4 <HAL_SAI_Init+0x2a8>
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	e018      	b.n	800d6e6 <HAL_SAI_Init+0x2aa>
 800d6b4:	40015804 	.word	0x40015804
 800d6b8:	58005404 	.word	0x58005404
 800d6bc:	40015824 	.word	0x40015824
 800d6c0:	40015800 	.word	0x40015800
 800d6c4:	40015c04 	.word	0x40015c04
 800d6c8:	40015c24 	.word	0x40015c24
 800d6cc:	40015c00 	.word	0x40015c00
 800d6d0:	40016004 	.word	0x40016004
 800d6d4:	40016024 	.word	0x40016024
 800d6d8:	40016000 	.word	0x40016000
 800d6dc:	58005424 	.word	0x58005424
 800d6e0:	58005400 	.word	0x58005400
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d6e8:	697a      	ldr	r2, [r7, #20]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	fb02 f303 	mul.w	r3, r2, r3
 800d6fe:	021b      	lsls	r3, r3, #8
 800d700:	fbb1 f3f3 	udiv	r3, r1, r3
 800d704:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	4a95      	ldr	r2, [pc, #596]	; (800d960 <HAL_SAI_Init+0x524>)
 800d70a:	fba2 2303 	umull	r2, r3, r2, r3
 800d70e:	08da      	lsrs	r2, r3, #3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d714:	6939      	ldr	r1, [r7, #16]
 800d716:	4b92      	ldr	r3, [pc, #584]	; (800d960 <HAL_SAI_Init+0x524>)
 800d718:	fba3 2301 	umull	r2, r3, r3, r1
 800d71c:	08da      	lsrs	r2, r3, #3
 800d71e:	4613      	mov	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	1aca      	subs	r2, r1, r3
 800d728:	2a08      	cmp	r2, #8
 800d72a:	d904      	bls.n	800d736 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d104      	bne.n	800d748 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	085a      	lsrs	r2, r3, #1
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <HAL_SAI_Init+0x31c>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b02      	cmp	r3, #2
 800d756:	d109      	bne.n	800d76c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d101      	bne.n	800d764 <HAL_SAI_Init+0x328>
 800d760:	2300      	movs	r3, #0
 800d762:	e001      	b.n	800d768 <HAL_SAI_Init+0x32c>
 800d764:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d768:	623b      	str	r3, [r7, #32]
 800d76a:	e008      	b.n	800d77e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d770:	2b01      	cmp	r3, #1
 800d772:	d102      	bne.n	800d77a <HAL_SAI_Init+0x33e>
 800d774:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d778:	e000      	b.n	800d77c <HAL_SAI_Init+0x340>
 800d77a:	2300      	movs	r3, #0
 800d77c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d77e:	f7f6 fdf7 	bl	8004370 <HAL_GetREVID>
 800d782:	4603      	mov	r3, r0
 800d784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d788:	d331      	bcc.n	800d7ee <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6819      	ldr	r1, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	4b73      	ldr	r3, [pc, #460]	; (800d964 <HAL_SAI_Init+0x528>)
 800d796:	400b      	ands	r3, r1
 800d798:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6819      	ldr	r1, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d7ae:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d7c2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d7ce:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d4:	051b      	lsls	r3, r3, #20
 800d7d6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d7dc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	e02d      	b.n	800d84a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6819      	ldr	r1, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	4b5b      	ldr	r3, [pc, #364]	; (800d968 <HAL_SAI_Init+0x52c>)
 800d7fa:	400b      	ands	r3, r1
 800d7fc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6819      	ldr	r1, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d80c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d812:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d818:	431a      	orrs	r2, r3
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d826:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d832:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	051b      	lsls	r3, r3, #20
 800d83a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d840:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	430a      	orrs	r2, r1
 800d848:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6859      	ldr	r1, [r3, #4]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	4b45      	ldr	r3, [pc, #276]	; (800d96c <HAL_SAI_Init+0x530>)
 800d856:	400b      	ands	r3, r1
 800d858:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6859      	ldr	r1, [r3, #4]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	69da      	ldr	r2, [r3, #28]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d86e:	431a      	orrs	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6899      	ldr	r1, [r3, #8]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b3b      	ldr	r3, [pc, #236]	; (800d970 <HAL_SAI_Init+0x534>)
 800d884:	400b      	ands	r3, r1
 800d886:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6899      	ldr	r1, [r3, #8]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d892:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d898:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800d89e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800d8a4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d8ae:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68d9      	ldr	r1, [r3, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d8c6:	400b      	ands	r3, r1
 800d8c8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68d9      	ldr	r1, [r3, #12]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8d8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8de:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d8e0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	021b      	lsls	r3, r3, #8
 800d8ea:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a1e      	ldr	r2, [pc, #120]	; (800d974 <HAL_SAI_Init+0x538>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d004      	beq.n	800d908 <HAL_SAI_Init+0x4cc>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a1d      	ldr	r2, [pc, #116]	; (800d978 <HAL_SAI_Init+0x53c>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d119      	bne.n	800d93c <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d90c:	f023 0201 	bic.w	r2, r3, #1
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d10e      	bne.n	800d93c <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d926:	3b01      	subs	r3, #1
 800d928:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d92a:	431a      	orrs	r2, r3
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d934:	f043 0201 	orr.w	r2, r3, #1
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3728      	adds	r7, #40	; 0x28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	cccccccd 	.word	0xcccccccd
 800d964:	f005c010 	.word	0xf005c010
 800d968:	f805c010 	.word	0xf805c010
 800d96c:	ffff1ff0 	.word	0xffff1ff0
 800d970:	fff88000 	.word	0xfff88000
 800d974:	40015804 	.word	0x40015804
 800d978:	58005404 	.word	0x58005404

0800d97c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	4613      	mov	r3, r2
 800d988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d98a:	f7f6 fcc1 	bl	8004310 <HAL_GetTick>
 800d98e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <HAL_SAI_Transmit_DMA+0x20>
 800d996:	88fb      	ldrh	r3, [r7, #6]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	e098      	b.n	800dad2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	f040 8091 	bne.w	800dad0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d101      	bne.n	800d9bc <HAL_SAI_Transmit_DMA+0x40>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e08a      	b.n	800dad2 <HAL_SAI_Transmit_DMA+0x156>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	88fa      	ldrh	r2, [r7, #6]
 800d9ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2212      	movs	r2, #18
 800d9e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9f0:	4a3a      	ldr	r2, [pc, #232]	; (800dadc <HAL_SAI_Transmit_DMA+0x160>)
 800d9f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9fa:	4a39      	ldr	r2, [pc, #228]	; (800dae0 <HAL_SAI_Transmit_DMA+0x164>)
 800d9fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da04:	4a37      	ldr	r2, [pc, #220]	; (800dae4 <HAL_SAI_Transmit_DMA+0x168>)
 800da06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da0e:	2200      	movs	r2, #0
 800da10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da1c:	4619      	mov	r1, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	331c      	adds	r3, #28
 800da24:	461a      	mov	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800da2c:	f7f8 fc78 	bl	8006320 <HAL_DMA_Start_IT>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d005      	beq.n	800da42 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e047      	b.n	800dad2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800da42:	2100      	movs	r1, #0
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f000 f98d 	bl	800dd64 <SAI_InterruptFlag>
 800da4a:	4601      	mov	r1, r0
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	691a      	ldr	r2, [r3, #16]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800da68:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800da6a:	e015      	b.n	800da98 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800da6c:	f7f6 fc50 	bl	8004310 <HAL_GetTick>
 800da70:	4602      	mov	r2, r0
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da7a:	d90d      	bls.n	800da98 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800da82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e01c      	b.n	800dad2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0e2      	beq.n	800da6c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d107      	bne.n	800dac4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dac2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	e000      	b.n	800dad2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800dad0:	2302      	movs	r3, #2
  }
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	0800dea9 	.word	0x0800dea9
 800dae0:	0800de49 	.word	0x0800de49
 800dae4:	0800dec5 	.word	0x0800dec5

0800dae8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b087      	sub	sp, #28
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <SAI_InitI2S+0x2e>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	2b02      	cmp	r3, #2
 800db28:	d103      	bne.n	800db32 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	651a      	str	r2, [r3, #80]	; 0x50
 800db30:	e002      	b.n	800db38 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2201      	movs	r2, #1
 800db36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800db3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db46:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
 800db60:	e077      	b.n	800dc52 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d107      	bne.n	800db78 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800db74:	665a      	str	r2, [r3, #100]	; 0x64
 800db76:	e006      	b.n	800db86 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800db7e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2200      	movs	r2, #0
 800db84:	665a      	str	r2, [r3, #100]	; 0x64
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d84f      	bhi.n	800dc2c <SAI_InitI2S+0x130>
 800db8c:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <SAI_InitI2S+0x98>)
 800db8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db92:	bf00      	nop
 800db94:	0800dba5 	.word	0x0800dba5
 800db98:	0800dbc7 	.word	0x0800dbc7
 800db9c:	0800dbe9 	.word	0x0800dbe9
 800dba0:	0800dc0b 	.word	0x0800dc0b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2280      	movs	r2, #128	; 0x80
 800dba8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	085b      	lsrs	r3, r3, #1
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	011a      	lsls	r2, r3, #4
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2240      	movs	r2, #64	; 0x40
 800dbc2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dbc4:	e035      	b.n	800dc32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2280      	movs	r2, #128	; 0x80
 800dbca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	085b      	lsrs	r3, r3, #1
 800dbd0:	019a      	lsls	r2, r3, #6
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	085b      	lsrs	r3, r3, #1
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2280      	movs	r2, #128	; 0x80
 800dbe4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dbe6:	e024      	b.n	800dc32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	22c0      	movs	r2, #192	; 0xc0
 800dbec:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	085b      	lsrs	r3, r3, #1
 800dbf2:	019a      	lsls	r2, r3, #6
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	085b      	lsrs	r3, r3, #1
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2280      	movs	r2, #128	; 0x80
 800dc06:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dc08:	e013      	b.n	800dc32 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	22e0      	movs	r2, #224	; 0xe0
 800dc0e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	085b      	lsrs	r3, r3, #1
 800dc14:	019a      	lsls	r2, r3, #6
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	085b      	lsrs	r3, r3, #1
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2280      	movs	r2, #128	; 0x80
 800dc28:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dc2a:	e002      	b.n	800dc32 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	75fb      	strb	r3, [r7, #23]
      break;
 800dc30:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d10b      	bne.n	800dc50 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d102      	bne.n	800dc44 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2210      	movs	r2, #16
 800dc42:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d102      	bne.n	800dc50 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2208      	movs	r2, #8
 800dc4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	371c      	adds	r7, #28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
 800dc6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d003      	beq.n	800dc8e <SAI_InitPCM+0x2e>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d103      	bne.n	800dc96 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2201      	movs	r2, #1
 800dc92:	651a      	str	r2, [r3, #80]	; 0x50
 800dc94:	e002      	b.n	800dc9c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800dca8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800dcb0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcc4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d103      	bne.n	800dcd4 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	659a      	str	r2, [r3, #88]	; 0x58
 800dcd2:	e002      	b.n	800dcda <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	220d      	movs	r2, #13
 800dcd8:	659a      	str	r2, [r3, #88]	; 0x58
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d837      	bhi.n	800dd50 <SAI_InitPCM+0xf0>
 800dce0:	a201      	add	r2, pc, #4	; (adr r2, 800dce8 <SAI_InitPCM+0x88>)
 800dce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce6:	bf00      	nop
 800dce8:	0800dcf9 	.word	0x0800dcf9
 800dcec:	0800dd0f 	.word	0x0800dd0f
 800dcf0:	0800dd25 	.word	0x0800dd25
 800dcf4:	0800dd3b 	.word	0x0800dd3b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2280      	movs	r2, #128	; 0x80
 800dcfc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	011a      	lsls	r2, r3, #4
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2240      	movs	r2, #64	; 0x40
 800dd0a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dd0c:	e023      	b.n	800dd56 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2280      	movs	r2, #128	; 0x80
 800dd12:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2280      	movs	r2, #128	; 0x80
 800dd20:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dd22:	e018      	b.n	800dd56 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	22c0      	movs	r2, #192	; 0xc0
 800dd28:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2280      	movs	r2, #128	; 0x80
 800dd36:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dd38:	e00d      	b.n	800dd56 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	22e0      	movs	r2, #224	; 0xe0
 800dd3e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2280      	movs	r2, #128	; 0x80
 800dd4c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dd4e:	e002      	b.n	800dd56 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	75fb      	strb	r3, [r7, #23]
      break;
 800dd54:	bf00      	nop
  }

  return status;
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	371c      	adds	r7, #28
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d103      	bne.n	800dd82 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f043 0308 	orr.w	r3, r3, #8
 800dd80:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd86:	2b08      	cmp	r3, #8
 800dd88:	d10b      	bne.n	800dda2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d003      	beq.n	800dd9a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d103      	bne.n	800dda2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f043 0310 	orr.w	r3, r3, #16
 800dda0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d003      	beq.n	800ddb2 <SAI_InterruptFlag+0x4e>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d104      	bne.n	800ddbc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	e003      	b.n	800ddc4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f043 0304 	orr.w	r3, r3, #4
 800ddc2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800dddc:	4b18      	ldr	r3, [pc, #96]	; (800de40 <SAI_Disable+0x6c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a18      	ldr	r2, [pc, #96]	; (800de44 <SAI_Disable+0x70>)
 800dde2:	fba2 2303 	umull	r2, r3, r2, r3
 800dde6:	0b1b      	lsrs	r3, r3, #12
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ddfe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10a      	bne.n	800de1c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	72fb      	strb	r3, [r7, #11]
      break;
 800de1a:	e009      	b.n	800de30 <SAI_Disable+0x5c>
    }
    count--;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3b01      	subs	r3, #1
 800de20:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e7      	bne.n	800de00 <SAI_Disable+0x2c>

  return status;
 800de30:	7afb      	ldrb	r3, [r7, #11]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	24000000 	.word	0x24000000
 800de44:	95cbec1b 	.word	0x95cbec1b

0800de48 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de54:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de5e:	d01c      	beq.n	800de9a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800de76:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de78:	2100      	movs	r1, #0
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7ff ff72 	bl	800dd64 <SAI_InterruptFlag>
 800de80:	4603      	mov	r3, r0
 800de82:	43d9      	mvns	r1, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	691a      	ldr	r2, [r3, #16]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	400a      	ands	r2, r1
 800de90:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f004 fc6a 	bl	8012774 <HAL_SAI_TxCpltCallback>
#endif
}
 800dea0:	bf00      	nop
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f004 fc46 	bl	8012748 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800debc:	bf00      	nop
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7f9 fbb8 	bl	8007648 <HAL_DMA_GetError>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d01d      	beq.n	800df1a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800defc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f7ff ff68 	bl	800ddd4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff fde7 	bl	800dae8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800df1a:	bf00      	nop
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800df2c:	2300      	movs	r3, #0
 800df2e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e0eb      	b.n	800e112 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a75      	ldr	r2, [pc, #468]	; (800e11c <HAL_SPI_Init+0x1f8>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d00f      	beq.n	800df6a <HAL_SPI_Init+0x46>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a74      	ldr	r2, [pc, #464]	; (800e120 <HAL_SPI_Init+0x1fc>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d00a      	beq.n	800df6a <HAL_SPI_Init+0x46>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a72      	ldr	r2, [pc, #456]	; (800e124 <HAL_SPI_Init+0x200>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d005      	beq.n	800df6a <HAL_SPI_Init+0x46>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	2b0f      	cmp	r3, #15
 800df64:	d901      	bls.n	800df6a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	e0d3      	b.n	800e112 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f001 f888 	bl	800f080 <SPI_GetPacketSize>
 800df70:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a69      	ldr	r2, [pc, #420]	; (800e11c <HAL_SPI_Init+0x1f8>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d00c      	beq.n	800df96 <HAL_SPI_Init+0x72>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a67      	ldr	r2, [pc, #412]	; (800e120 <HAL_SPI_Init+0x1fc>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d007      	beq.n	800df96 <HAL_SPI_Init+0x72>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a66      	ldr	r2, [pc, #408]	; (800e124 <HAL_SPI_Init+0x200>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d002      	beq.n	800df96 <HAL_SPI_Init+0x72>
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b08      	cmp	r3, #8
 800df94:	d811      	bhi.n	800dfba <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df9a:	4a60      	ldr	r2, [pc, #384]	; (800e11c <HAL_SPI_Init+0x1f8>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d009      	beq.n	800dfb4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a5e      	ldr	r2, [pc, #376]	; (800e120 <HAL_SPI_Init+0x1fc>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d004      	beq.n	800dfb4 <HAL_SPI_Init+0x90>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a5d      	ldr	r2, [pc, #372]	; (800e124 <HAL_SPI_Init+0x200>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d104      	bne.n	800dfbe <HAL_SPI_Init+0x9a>
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b10      	cmp	r3, #16
 800dfb8:	d901      	bls.n	800dfbe <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e0a9      	b.n	800e112 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f5 f8c0 	bl	8003158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2202      	movs	r2, #2
 800dfdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f022 0201 	bic.w	r2, r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dff8:	d119      	bne.n	800e02e <HAL_SPI_Init+0x10a>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e002:	d103      	bne.n	800e00c <HAL_SPI_Init+0xe8>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d008      	beq.n	800e01e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10c      	bne.n	800e02e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e01c:	d107      	bne.n	800e02e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e02c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	69da      	ldr	r2, [r3, #28]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e036:	431a      	orrs	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	431a      	orrs	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e040:	ea42 0103 	orr.w	r1, r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	68da      	ldr	r2, [r3, #12]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	430a      	orrs	r2, r1
 800e04e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	431a      	orrs	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	431a      	orrs	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	431a      	orrs	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e082:	431a      	orrs	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	431a      	orrs	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e08e:	ea42 0103 	orr.w	r1, r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	430a      	orrs	r2, r1
 800e09c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d113      	bne.n	800e0ce <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f022 0201 	bic.w	r2, r2, #1
 800e0dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	430a      	orrs	r2, r1
 800e0fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	40013000 	.word	0x40013000
 800e120:	40003800 	.word	0x40003800
 800e124:	40003c00 	.word	0x40003c00

0800e128 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	4613      	mov	r3, r2
 800e136:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3320      	adds	r3, #32
 800e13e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d101      	bne.n	800e152 <HAL_SPI_Transmit+0x2a>
 800e14e:	2302      	movs	r3, #2
 800e150:	e1d7      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e15a:	f7f6 f8d9 	bl	8004310 <HAL_GetTick>
 800e15e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d007      	beq.n	800e17c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e16c:	2302      	movs	r3, #2
 800e16e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e178:	7efb      	ldrb	r3, [r7, #27]
 800e17a:	e1c2      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d002      	beq.n	800e188 <HAL_SPI_Transmit+0x60>
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d107      	bne.n	800e198 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e194:	7efb      	ldrb	r3, [r7, #27]
 800e196:	e1b4      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2203      	movs	r2, #3
 800e19c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	88fa      	ldrh	r2, [r7, #6]
 800e1ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e1e8:	d107      	bne.n	800e1fa <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	4b96      	ldr	r3, [pc, #600]	; (800e45c <HAL_SPI_Transmit+0x334>)
 800e202:	4013      	ands	r3, r2
 800e204:	88f9      	ldrh	r1, [r7, #6]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	430b      	orrs	r3, r1
 800e20c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f042 0201 	orr.w	r2, r2, #1
 800e21c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e226:	d107      	bne.n	800e238 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	2b0f      	cmp	r3, #15
 800e23e:	d947      	bls.n	800e2d0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e240:	e03f      	b.n	800e2c2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	695b      	ldr	r3, [r3, #20]
 800e248:	f003 0302 	and.w	r3, r3, #2
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d114      	bne.n	800e27a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6812      	ldr	r2, [r2, #0]
 800e25a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e260:	1d1a      	adds	r2, r3, #4
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	3b01      	subs	r3, #1
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e278:	e023      	b.n	800e2c2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e27a:	f7f6 f849 	bl	8004310 <HAL_GetTick>
 800e27e:	4602      	mov	r2, r0
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	429a      	cmp	r2, r3
 800e288:	d803      	bhi.n	800e292 <HAL_SPI_Transmit+0x16a>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e290:	d102      	bne.n	800e298 <HAL_SPI_Transmit+0x170>
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d114      	bne.n	800e2c2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fe23 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e11f      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1b9      	bne.n	800e242 <HAL_SPI_Transmit+0x11a>
 800e2ce:	e0f2      	b.n	800e4b6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	2b07      	cmp	r3, #7
 800e2d6:	f240 80e7 	bls.w	800e4a8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e2da:	e05d      	b.n	800e398 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	695b      	ldr	r3, [r3, #20]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d132      	bne.n	800e350 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d918      	bls.n	800e328 <HAL_SPI_Transmit+0x200>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d014      	beq.n	800e328 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6812      	ldr	r2, [r2, #0]
 800e308:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e30e:	1d1a      	adds	r2, r3, #4
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	3b02      	subs	r3, #2
 800e31e:	b29a      	uxth	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e326:	e037      	b.n	800e398 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e32c:	881a      	ldrh	r2, [r3, #0]
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e336:	1c9a      	adds	r2, r3, #2
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e342:	b29b      	uxth	r3, r3
 800e344:	3b01      	subs	r3, #1
 800e346:	b29a      	uxth	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e34e:	e023      	b.n	800e398 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e350:	f7f5 ffde 	bl	8004310 <HAL_GetTick>
 800e354:	4602      	mov	r2, r0
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	683a      	ldr	r2, [r7, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d803      	bhi.n	800e368 <HAL_SPI_Transmit+0x240>
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e366:	d102      	bne.n	800e36e <HAL_SPI_Transmit+0x246>
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d114      	bne.n	800e398 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 fdb8 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	e0b4      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d19b      	bne.n	800e2dc <HAL_SPI_Transmit+0x1b4>
 800e3a4:	e087      	b.n	800e4b6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	f003 0302 	and.w	r3, r3, #2
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d155      	bne.n	800e460 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d918      	bls.n	800e3f2 <HAL_SPI_Transmit+0x2ca>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c4:	2b40      	cmp	r3, #64	; 0x40
 800e3c6:	d914      	bls.n	800e3f2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d8:	1d1a      	adds	r2, r3, #4
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	3b04      	subs	r3, #4
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e3f0:	e05a      	b.n	800e4a8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d917      	bls.n	800e42e <HAL_SPI_Transmit+0x306>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e402:	2b00      	cmp	r3, #0
 800e404:	d013      	beq.n	800e42e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e40a:	881a      	ldrh	r2, [r3, #0]
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e414:	1c9a      	adds	r2, r3, #2
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e420:	b29b      	uxth	r3, r3
 800e422:	3b02      	subs	r3, #2
 800e424:	b29a      	uxth	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e42c:	e03c      	b.n	800e4a8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3320      	adds	r3, #32
 800e438:	7812      	ldrb	r2, [r2, #0]
 800e43a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e440:	1c5a      	adds	r2, r3, #1
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	3b01      	subs	r3, #1
 800e450:	b29a      	uxth	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e458:	e026      	b.n	800e4a8 <HAL_SPI_Transmit+0x380>
 800e45a:	bf00      	nop
 800e45c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e460:	f7f5 ff56 	bl	8004310 <HAL_GetTick>
 800e464:	4602      	mov	r2, r0
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d803      	bhi.n	800e478 <HAL_SPI_Transmit+0x350>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e476:	d102      	bne.n	800e47e <HAL_SPI_Transmit+0x356>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d114      	bne.n	800e4a8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f000 fd30 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e02c      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f47f af78 	bne.w	800e3a6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2108      	movs	r1, #8
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f000 fdaf 	bl	800f024 <SPI_WaitOnFlagUntilTimeout>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d007      	beq.n	800e4dc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4d2:	f043 0220 	orr.w	r2, r3, #32
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 fd01 	bl	800eee4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e500:	7efb      	ldrb	r3, [r7, #27]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop

0800e50c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08a      	sub	sp, #40	; 0x28
 800e510:	af02      	add	r7, sp, #8
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	603b      	str	r3, [r7, #0]
 800e518:	4613      	mov	r3, r2
 800e51a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3330      	adds	r3, #48	; 0x30
 800e526:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e530:	d112      	bne.n	800e558 <HAL_SPI_Receive+0x4c>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10e      	bne.n	800e558 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2204      	movs	r2, #4
 800e53e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e542:	88fa      	ldrh	r2, [r7, #6]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	4613      	mov	r3, r2
 800e54a:	68ba      	ldr	r2, [r7, #8]
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 f9ce 	bl	800e8f0 <HAL_SPI_TransmitReceive>
 800e554:	4603      	mov	r3, r0
 800e556:	e1c7      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d101      	bne.n	800e566 <HAL_SPI_Receive+0x5a>
 800e562:	2302      	movs	r3, #2
 800e564:	e1c0      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e56e:	f7f5 fecf 	bl	8004310 <HAL_GetTick>
 800e572:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d007      	beq.n	800e590 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e580:	2302      	movs	r3, #2
 800e582:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e58c:	7ffb      	ldrb	r3, [r7, #31]
 800e58e:	e1ab      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <HAL_SPI_Receive+0x90>
 800e596:	88fb      	ldrh	r3, [r7, #6]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d107      	bne.n	800e5ac <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e5a8:	7ffb      	ldrb	r3, [r7, #31]
 800e5aa:	e19d      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2204      	movs	r2, #4
 800e5b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68ba      	ldr	r2, [r7, #8]
 800e5c0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	88fa      	ldrh	r2, [r7, #6]
 800e5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	88fa      	ldrh	r2, [r7, #6]
 800e5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e5fc:	d107      	bne.n	800e60e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e60c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	685a      	ldr	r2, [r3, #4]
 800e614:	4b94      	ldr	r3, [pc, #592]	; (800e868 <HAL_SPI_Receive+0x35c>)
 800e616:	4013      	ands	r3, r2
 800e618:	88f9      	ldrh	r1, [r7, #6]
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	6812      	ldr	r2, [r2, #0]
 800e61e:	430b      	orrs	r3, r1
 800e620:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f042 0201 	orr.w	r2, r2, #1
 800e630:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e63a:	d107      	bne.n	800e64c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e64a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	2b0f      	cmp	r3, #15
 800e652:	d948      	bls.n	800e6e6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e654:	e040      	b.n	800e6d8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	695a      	ldr	r2, [r3, #20]
 800e65c:	f248 0308 	movw	r3, #32776	; 0x8008
 800e660:	4013      	ands	r3, r2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d014      	beq.n	800e690 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e66e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e670:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e676:	1d1a      	adds	r2, r3, #4
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e682:	b29b      	uxth	r3, r3
 800e684:	3b01      	subs	r3, #1
 800e686:	b29a      	uxth	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e68e:	e023      	b.n	800e6d8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e690:	f7f5 fe3e 	bl	8004310 <HAL_GetTick>
 800e694:	4602      	mov	r2, r0
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d803      	bhi.n	800e6a8 <HAL_SPI_Receive+0x19c>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6a6:	d102      	bne.n	800e6ae <HAL_SPI_Receive+0x1a2>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d114      	bne.n	800e6d8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 fc18 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e107      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1b8      	bne.n	800e656 <HAL_SPI_Receive+0x14a>
 800e6e4:	e0ed      	b.n	800e8c2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	f240 80e2 	bls.w	800e8b4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e6f0:	e05b      	b.n	800e7aa <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d030      	beq.n	800e762 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	695b      	ldr	r3, [r3, #20]
 800e706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d014      	beq.n	800e738 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e716:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e718:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71e:	1d1a      	adds	r2, r3, #4
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	3b02      	subs	r3, #2
 800e72e:	b29a      	uxth	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e736:	e038      	b.n	800e7aa <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e73c:	69ba      	ldr	r2, [r7, #24]
 800e73e:	8812      	ldrh	r2, [r2, #0]
 800e740:	b292      	uxth	r2, r2
 800e742:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e748:	1c9a      	adds	r2, r3, #2
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e754:	b29b      	uxth	r3, r3
 800e756:	3b01      	subs	r3, #1
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e760:	e023      	b.n	800e7aa <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e762:	f7f5 fdd5 	bl	8004310 <HAL_GetTick>
 800e766:	4602      	mov	r2, r0
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d803      	bhi.n	800e77a <HAL_SPI_Receive+0x26e>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e778:	d102      	bne.n	800e780 <HAL_SPI_Receive+0x274>
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d114      	bne.n	800e7aa <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 fbaf 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e09e      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d19d      	bne.n	800e6f2 <HAL_SPI_Receive+0x1e6>
 800e7b6:	e084      	b.n	800e8c2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d052      	beq.n	800e86c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d014      	beq.n	800e7fe <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7e4:	1d1a      	adds	r2, r3, #4
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7fc:	e05a      	b.n	800e8b4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	695b      	ldr	r3, [r3, #20]
 800e804:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e80c:	d914      	bls.n	800e838 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	8812      	ldrh	r2, [r2, #0]
 800e816:	b292      	uxth	r2, r2
 800e818:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e81e:	1c9a      	adds	r2, r3, #2
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	3b02      	subs	r3, #2
 800e82e:	b29a      	uxth	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e836:	e03d      	b.n	800e8b4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	3b01      	subs	r3, #1
 800e85e:	b29a      	uxth	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e866:	e025      	b.n	800e8b4 <HAL_SPI_Receive+0x3a8>
 800e868:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86c:	f7f5 fd50 	bl	8004310 <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	683a      	ldr	r2, [r7, #0]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d803      	bhi.n	800e884 <HAL_SPI_Receive+0x378>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e882:	d102      	bne.n	800e88a <HAL_SPI_Receive+0x37e>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d114      	bne.n	800e8b4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f000 fb2a 	bl	800eee4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e89e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e019      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f47f af7b 	bne.w	800e7b8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f000 fb0e 	bl	800eee4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e000      	b.n	800e8e8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e8e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3720      	adds	r7, #32
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08e      	sub	sp, #56	; 0x38
 800e8f4:	af02      	add	r7, sp, #8
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3320      	adds	r3, #32
 800e90a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3330      	adds	r3, #48	; 0x30
 800e912:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d101      	bne.n	800e922 <HAL_SPI_TransmitReceive+0x32>
 800e91e:	2302      	movs	r3, #2
 800e920:	e2ce      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e92a:	f7f5 fcf1 	bl	8004310 <HAL_GetTick>
 800e92e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e930:	887b      	ldrh	r3, [r7, #2]
 800e932:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e934:	887b      	ldrh	r3, [r7, #2]
 800e936:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e93e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e946:	7efb      	ldrb	r3, [r7, #27]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d014      	beq.n	800e976 <HAL_SPI_TransmitReceive+0x86>
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e952:	d106      	bne.n	800e962 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <HAL_SPI_TransmitReceive+0x72>
 800e95c:	7efb      	ldrb	r3, [r7, #27]
 800e95e:	2b04      	cmp	r3, #4
 800e960:	d009      	beq.n	800e976 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e962:	2302      	movs	r3, #2
 800e964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e970:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e974:	e2a4      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <HAL_SPI_TransmitReceive+0x98>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <HAL_SPI_TransmitReceive+0x98>
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d109      	bne.n	800e99c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e99a:	e291      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b04      	cmp	r3, #4
 800e9a6:	d003      	beq.n	800e9b0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2205      	movs	r2, #5
 800e9ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	887a      	ldrh	r2, [r7, #2]
 800e9c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	887a      	ldrh	r2, [r7, #2]
 800e9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	887a      	ldrh	r2, [r7, #2]
 800e9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	887a      	ldrh	r2, [r7, #2]
 800e9e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	4b9f      	ldr	r3, [pc, #636]	; (800ec74 <HAL_SPI_TransmitReceive+0x384>)
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	8879      	ldrh	r1, [r7, #2]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	6812      	ldr	r2, [r2, #0]
 800ea00:	430b      	orrs	r3, r1
 800ea02:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f042 0201 	orr.w	r2, r2, #1
 800ea12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea1c:	d107      	bne.n	800ea2e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	2b0f      	cmp	r3, #15
 800ea34:	d970      	bls.n	800eb18 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ea36:	e068      	b.n	800eb0a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	d11a      	bne.n	800ea7c <HAL_SPI_TransmitReceive+0x18c>
 800ea46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d017      	beq.n	800ea7c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea5c:	1d1a      	adds	r2, r3, #4
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	695a      	ldr	r2, [r3, #20]
 800ea82:	f248 0308 	movw	r3, #32776	; 0x8008
 800ea86:	4013      	ands	r3, r2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01a      	beq.n	800eac2 <HAL_SPI_TransmitReceive+0x1d2>
 800ea8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d017      	beq.n	800eac2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ea9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaa2:	1d1a      	adds	r2, r3, #4
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eac0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eac2:	f7f5 fc25 	bl	8004310 <HAL_GetTick>
 800eac6:	4602      	mov	r2, r0
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eace:	429a      	cmp	r2, r3
 800ead0:	d803      	bhi.n	800eada <HAL_SPI_TransmitReceive+0x1ea>
 800ead2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead8:	d102      	bne.n	800eae0 <HAL_SPI_TransmitReceive+0x1f0>
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d114      	bne.n	800eb0a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 f9ff 	bl	800eee4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2201      	movs	r2, #1
 800eb02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	e1da      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eb0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d193      	bne.n	800ea38 <HAL_SPI_TransmitReceive+0x148>
 800eb10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d190      	bne.n	800ea38 <HAL_SPI_TransmitReceive+0x148>
 800eb16:	e1ac      	b.n	800ee72 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	2b07      	cmp	r3, #7
 800eb1e:	f240 81a0 	bls.w	800ee62 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eb22:	e0a9      	b.n	800ec78 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	f003 0302 	and.w	r3, r3, #2
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d139      	bne.n	800eba6 <HAL_SPI_TransmitReceive+0x2b6>
 800eb32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d036      	beq.n	800eba6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d91c      	bls.n	800eb78 <HAL_SPI_TransmitReceive+0x288>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d018      	beq.n	800eb78 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6812      	ldr	r2, [r2, #0]
 800eb50:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb56:	1d1a      	adds	r2, r3, #4
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3b02      	subs	r3, #2
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb76:	e016      	b.n	800eba6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb86:	1c9a      	adds	r2, r3, #2
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	3b01      	subs	r3, #1
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d03a      	beq.n	800ec2a <HAL_SPI_TransmitReceive+0x33a>
 800ebb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d037      	beq.n	800ec2a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d018      	beq.n	800ebfa <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ebd2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebd8:	1d1a      	adds	r2, r3, #4
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	3b02      	subs	r3, #2
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ebf8:	e017      	b.n	800ec2a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebfe:	6a3a      	ldr	r2, [r7, #32]
 800ec00:	8812      	ldrh	r2, [r2, #0]
 800ec02:	b292      	uxth	r2, r2
 800ec04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec0a:	1c9a      	adds	r2, r3, #2
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec28:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec2a:	f7f5 fb71 	bl	8004310 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d803      	bhi.n	800ec42 <HAL_SPI_TransmitReceive+0x352>
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec40:	d102      	bne.n	800ec48 <HAL_SPI_TransmitReceive+0x358>
 800ec42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d117      	bne.n	800ec78 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f000 f94b 	bl	800eee4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e126      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
 800ec72:	bf00      	nop
 800ec74:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ec78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f47f af52 	bne.w	800eb24 <HAL_SPI_TransmitReceive+0x234>
 800ec80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f47f af4e 	bne.w	800eb24 <HAL_SPI_TransmitReceive+0x234>
 800ec88:	e0f3      	b.n	800ee72 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	f003 0302 	and.w	r3, r3, #2
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d15a      	bne.n	800ed4e <HAL_SPI_TransmitReceive+0x45e>
 800ec98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d057      	beq.n	800ed4e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ec9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	d91c      	bls.n	800ecde <HAL_SPI_TransmitReceive+0x3ee>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca8:	2b40      	cmp	r3, #64	; 0x40
 800ecaa:	d918      	bls.n	800ecde <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6812      	ldr	r2, [r2, #0]
 800ecb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecbc:	1d1a      	adds	r2, r3, #4
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	3b04      	subs	r3, #4
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ecdc:	e037      	b.n	800ed4e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ecde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d91b      	bls.n	800ed1c <HAL_SPI_TransmitReceive+0x42c>
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d017      	beq.n	800ed1c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecf0:	881a      	ldrh	r2, [r3, #0]
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfa:	1c9a      	adds	r2, r3, #2
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	3b02      	subs	r3, #2
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed1a:	e018      	b.n	800ed4e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3320      	adds	r3, #32
 800ed26:	7812      	ldrb	r2, [r2, #0]
 800ed28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	695b      	ldr	r3, [r3, #20]
 800ed54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d05e      	beq.n	800ee1a <HAL_SPI_TransmitReceive+0x52a>
 800ed5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d05b      	beq.n	800ee1a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	695b      	ldr	r3, [r3, #20]
 800ed68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d018      	beq.n	800eda2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ed7a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed80:	1d1a      	adds	r2, r3, #4
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	3b04      	subs	r3, #4
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eda0:	e03b      	b.n	800ee1a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	695b      	ldr	r3, [r3, #20]
 800eda8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800edac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edb0:	d918      	bls.n	800ede4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edb6:	6a3a      	ldr	r2, [r7, #32]
 800edb8:	8812      	ldrh	r2, [r2, #0]
 800edba:	b292      	uxth	r2, r2
 800edbc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edc2:	1c9a      	adds	r2, r3, #2
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3b02      	subs	r3, #2
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ede0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ede2:	e01a      	b.n	800ee1a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edf0:	7812      	ldrb	r2, [r2, #0]
 800edf2:	b2d2      	uxtb	r2, r2
 800edf4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee18:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee1a:	f7f5 fa79 	bl	8004310 <HAL_GetTick>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d803      	bhi.n	800ee32 <HAL_SPI_TransmitReceive+0x542>
 800ee2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee30:	d102      	bne.n	800ee38 <HAL_SPI_TransmitReceive+0x548>
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d114      	bne.n	800ee62 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f000 f853 	bl	800eee4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e02e      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ee62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f47f af10 	bne.w	800ec8a <HAL_SPI_TransmitReceive+0x39a>
 800ee6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f47f af0c 	bne.w	800ec8a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	9300      	str	r3, [sp, #0]
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2108      	movs	r1, #8
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f000 f8d1 	bl	800f024 <SPI_WaitOnFlagUntilTimeout>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d007      	beq.n	800ee98 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8e:	f043 0220 	orr.w	r2, r3, #32
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 f823 	bl	800eee4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e001      	b.n	800eec0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800eebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3730      	adds	r7, #48	; 0x30
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eed6:	b2db      	uxtb	r3, r3
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	699a      	ldr	r2, [r3, #24]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f042 0208 	orr.w	r2, r2, #8
 800ef02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	699a      	ldr	r2, [r3, #24]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f042 0210 	orr.w	r2, r2, #16
 800ef12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f022 0201 	bic.w	r2, r2, #1
 800ef22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	6919      	ldr	r1, [r3, #16]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	4b3c      	ldr	r3, [pc, #240]	; (800f020 <SPI_CloseTransfer+0x13c>)
 800ef30:	400b      	ands	r3, r1
 800ef32:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	689a      	ldr	r2, [r3, #8]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ef42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b04      	cmp	r3, #4
 800ef4e:	d014      	beq.n	800ef7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f003 0320 	and.w	r3, r3, #32
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00f      	beq.n	800ef7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	699a      	ldr	r2, [r3, #24]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f042 0220 	orr.w	r2, r2, #32
 800ef78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	2b03      	cmp	r3, #3
 800ef84:	d014      	beq.n	800efb0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00f      	beq.n	800efb0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef96:	f043 0204 	orr.w	r2, r3, #4
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	699a      	ldr	r2, [r3, #24]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00f      	beq.n	800efda <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efc0:	f043 0201 	orr.w	r2, r3, #1
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	699a      	ldr	r2, [r3, #24]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efd8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00f      	beq.n	800f004 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efea:	f043 0208 	orr.w	r2, r3, #8
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	699a      	ldr	r2, [r3, #24]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f002:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f014:	bf00      	nop
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	fffffc90 	.word	0xfffffc90

0800f024 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	4613      	mov	r3, r2
 800f032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f034:	e010      	b.n	800f058 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f036:	f7f5 f96b 	bl	8004310 <HAL_GetTick>
 800f03a:	4602      	mov	r2, r0
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	69ba      	ldr	r2, [r7, #24]
 800f042:	429a      	cmp	r2, r3
 800f044:	d803      	bhi.n	800f04e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f04c:	d102      	bne.n	800f054 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f054:	2303      	movs	r3, #3
 800f056:	e00f      	b.n	800f078 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	695a      	ldr	r2, [r3, #20]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	4013      	ands	r3, r2
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	429a      	cmp	r2, r3
 800f066:	bf0c      	ite	eq
 800f068:	2301      	moveq	r3, #1
 800f06a:	2300      	movne	r3, #0
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	79fb      	ldrb	r3, [r7, #7]
 800f072:	429a      	cmp	r2, r3
 800f074:	d0df      	beq.n	800f036 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08c:	095b      	lsrs	r3, r3, #5
 800f08e:	3301      	adds	r3, #1
 800f090:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	3301      	adds	r3, #1
 800f098:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	3307      	adds	r3, #7
 800f09e:	08db      	lsrs	r3, r3, #3
 800f0a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
	...

0800f0b8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e03e      	b.n	800f14c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7f2 fb62 	bl	80017ac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	3308      	adds	r3, #8
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f002 f994 	bl	8011420 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	461a      	mov	r2, r3
 800f102:	68b9      	ldr	r1, [r7, #8]
 800f104:	f002 fa1c 	bl	8011540 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6858      	ldr	r0, [r3, #4]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	689a      	ldr	r2, [r3, #8]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	f002 fa63 	bl	80115e0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	6892      	ldr	r2, [r2, #8]
 800f122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	6892      	ldr	r2, [r2, #8]
 800f12e:	f041 0101 	orr.w	r1, r1, #1
 800f132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f136:	4b07      	ldr	r3, [pc, #28]	; (800f154 <HAL_SRAM_Init+0x9c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a06      	ldr	r2, [pc, #24]	; (800f154 <HAL_SRAM_Init+0x9c>)
 800f13c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f140:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2201      	movs	r2, #1
 800f146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	52004000 	.word	0x52004000

0800f158 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800f158:	b480      	push	{r7}
 800f15a:	b089      	sub	sp, #36	; 0x24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b01      	cmp	r3, #1
 800f178:	d12b      	bne.n	800f1d2 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f180:	2b01      	cmp	r3, #1
 800f182:	d101      	bne.n	800f188 <HAL_SRAM_Write_8b+0x30>
 800f184:	2302      	movs	r3, #2
 800f186:	e025      	b.n	800f1d4 <HAL_SRAM_Write_8b+0x7c>
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2202      	movs	r2, #2
 800f194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	61fb      	str	r3, [r7, #28]
 800f19c:	e00c      	b.n	800f1b8 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	781a      	ldrb	r2, [r3, #0]
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	61fb      	str	r3, [r7, #28]
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1ef      	bne.n	800f19e <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	e000      	b.n	800f1d4 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3724      	adds	r7, #36	; 0x24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e049      	b.n	800f286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d106      	bne.n	800f20c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7f4 fc7a 	bl	8003b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2202      	movs	r2, #2
 800f210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3304      	adds	r3, #4
 800f21c:	4619      	mov	r1, r3
 800f21e:	4610      	mov	r0, r2
 800f220:	f000 fae6 	bl	800f7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2201      	movs	r2, #1
 800f270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b082      	sub	sp, #8
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d101      	bne.n	800f2a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e049      	b.n	800f334 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d106      	bne.n	800f2ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f4 fc01 	bl	8003abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2202      	movs	r2, #2
 800f2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f000 fa8f 	bl	800f7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2201      	movs	r2, #1
 800f306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2201      	movs	r2, #1
 800f30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2201      	movs	r2, #1
 800f316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2201      	movs	r2, #1
 800f326:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d109      	bne.n	800f360 <HAL_TIM_PWM_Start+0x24>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b01      	cmp	r3, #1
 800f356:	bf14      	ite	ne
 800f358:	2301      	movne	r3, #1
 800f35a:	2300      	moveq	r3, #0
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	e03c      	b.n	800f3da <HAL_TIM_PWM_Start+0x9e>
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	2b04      	cmp	r3, #4
 800f364:	d109      	bne.n	800f37a <HAL_TIM_PWM_Start+0x3e>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b01      	cmp	r3, #1
 800f370:	bf14      	ite	ne
 800f372:	2301      	movne	r3, #1
 800f374:	2300      	moveq	r3, #0
 800f376:	b2db      	uxtb	r3, r3
 800f378:	e02f      	b.n	800f3da <HAL_TIM_PWM_Start+0x9e>
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	2b08      	cmp	r3, #8
 800f37e:	d109      	bne.n	800f394 <HAL_TIM_PWM_Start+0x58>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b01      	cmp	r3, #1
 800f38a:	bf14      	ite	ne
 800f38c:	2301      	movne	r3, #1
 800f38e:	2300      	moveq	r3, #0
 800f390:	b2db      	uxtb	r3, r3
 800f392:	e022      	b.n	800f3da <HAL_TIM_PWM_Start+0x9e>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2b0c      	cmp	r3, #12
 800f398:	d109      	bne.n	800f3ae <HAL_TIM_PWM_Start+0x72>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	bf14      	ite	ne
 800f3a6:	2301      	movne	r3, #1
 800f3a8:	2300      	moveq	r3, #0
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	e015      	b.n	800f3da <HAL_TIM_PWM_Start+0x9e>
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b10      	cmp	r3, #16
 800f3b2:	d109      	bne.n	800f3c8 <HAL_TIM_PWM_Start+0x8c>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	bf14      	ite	ne
 800f3c0:	2301      	movne	r3, #1
 800f3c2:	2300      	moveq	r3, #0
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	e008      	b.n	800f3da <HAL_TIM_PWM_Start+0x9e>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	bf14      	ite	ne
 800f3d4:	2301      	movne	r3, #1
 800f3d6:	2300      	moveq	r3, #0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d001      	beq.n	800f3e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e09c      	b.n	800f51c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d104      	bne.n	800f3f2 <HAL_TIM_PWM_Start+0xb6>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f3f0:	e023      	b.n	800f43a <HAL_TIM_PWM_Start+0xfe>
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	2b04      	cmp	r3, #4
 800f3f6:	d104      	bne.n	800f402 <HAL_TIM_PWM_Start+0xc6>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f400:	e01b      	b.n	800f43a <HAL_TIM_PWM_Start+0xfe>
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	2b08      	cmp	r3, #8
 800f406:	d104      	bne.n	800f412 <HAL_TIM_PWM_Start+0xd6>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2202      	movs	r2, #2
 800f40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f410:	e013      	b.n	800f43a <HAL_TIM_PWM_Start+0xfe>
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2b0c      	cmp	r3, #12
 800f416:	d104      	bne.n	800f422 <HAL_TIM_PWM_Start+0xe6>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2202      	movs	r2, #2
 800f41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f420:	e00b      	b.n	800f43a <HAL_TIM_PWM_Start+0xfe>
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	2b10      	cmp	r3, #16
 800f426:	d104      	bne.n	800f432 <HAL_TIM_PWM_Start+0xf6>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2202      	movs	r2, #2
 800f42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f430:	e003      	b.n	800f43a <HAL_TIM_PWM_Start+0xfe>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2202      	movs	r2, #2
 800f436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2201      	movs	r2, #1
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fea1 	bl	801018a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a35      	ldr	r2, [pc, #212]	; (800f524 <HAL_TIM_PWM_Start+0x1e8>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d013      	beq.n	800f47a <HAL_TIM_PWM_Start+0x13e>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a34      	ldr	r2, [pc, #208]	; (800f528 <HAL_TIM_PWM_Start+0x1ec>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d00e      	beq.n	800f47a <HAL_TIM_PWM_Start+0x13e>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a32      	ldr	r2, [pc, #200]	; (800f52c <HAL_TIM_PWM_Start+0x1f0>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d009      	beq.n	800f47a <HAL_TIM_PWM_Start+0x13e>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a31      	ldr	r2, [pc, #196]	; (800f530 <HAL_TIM_PWM_Start+0x1f4>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d004      	beq.n	800f47a <HAL_TIM_PWM_Start+0x13e>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a2f      	ldr	r2, [pc, #188]	; (800f534 <HAL_TIM_PWM_Start+0x1f8>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d101      	bne.n	800f47e <HAL_TIM_PWM_Start+0x142>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <HAL_TIM_PWM_Start+0x144>
 800f47e:	2300      	movs	r3, #0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d007      	beq.n	800f494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f492:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4a22      	ldr	r2, [pc, #136]	; (800f524 <HAL_TIM_PWM_Start+0x1e8>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d01d      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4a6:	d018      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a22      	ldr	r2, [pc, #136]	; (800f538 <HAL_TIM_PWM_Start+0x1fc>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d013      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a21      	ldr	r2, [pc, #132]	; (800f53c <HAL_TIM_PWM_Start+0x200>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d00e      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a1f      	ldr	r2, [pc, #124]	; (800f540 <HAL_TIM_PWM_Start+0x204>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d009      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a17      	ldr	r2, [pc, #92]	; (800f528 <HAL_TIM_PWM_Start+0x1ec>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d004      	beq.n	800f4da <HAL_TIM_PWM_Start+0x19e>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a1b      	ldr	r2, [pc, #108]	; (800f544 <HAL_TIM_PWM_Start+0x208>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d115      	bne.n	800f506 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	689a      	ldr	r2, [r3, #8]
 800f4e0:	4b19      	ldr	r3, [pc, #100]	; (800f548 <HAL_TIM_PWM_Start+0x20c>)
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2b06      	cmp	r3, #6
 800f4ea:	d015      	beq.n	800f518 <HAL_TIM_PWM_Start+0x1dc>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4f2:	d011      	beq.n	800f518 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f042 0201 	orr.w	r2, r2, #1
 800f502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f504:	e008      	b.n	800f518 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f042 0201 	orr.w	r2, r2, #1
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e000      	b.n	800f51a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	40010000 	.word	0x40010000
 800f528:	40010400 	.word	0x40010400
 800f52c:	40014000 	.word	0x40014000
 800f530:	40014400 	.word	0x40014400
 800f534:	40014800 	.word	0x40014800
 800f538:	40000400 	.word	0x40000400
 800f53c:	40000800 	.word	0x40000800
 800f540:	40000c00 	.word	0x40000c00
 800f544:	40001800 	.word	0x40001800
 800f548:	00010007 	.word	0x00010007

0800f54c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d101      	bne.n	800f566 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f562:	2302      	movs	r3, #2
 800f564:	e0fd      	b.n	800f762 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2201      	movs	r2, #1
 800f56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b14      	cmp	r3, #20
 800f572:	f200 80f0 	bhi.w	800f756 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f576:	a201      	add	r2, pc, #4	; (adr r2, 800f57c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f5d1 	.word	0x0800f5d1
 800f580:	0800f757 	.word	0x0800f757
 800f584:	0800f757 	.word	0x0800f757
 800f588:	0800f757 	.word	0x0800f757
 800f58c:	0800f611 	.word	0x0800f611
 800f590:	0800f757 	.word	0x0800f757
 800f594:	0800f757 	.word	0x0800f757
 800f598:	0800f757 	.word	0x0800f757
 800f59c:	0800f653 	.word	0x0800f653
 800f5a0:	0800f757 	.word	0x0800f757
 800f5a4:	0800f757 	.word	0x0800f757
 800f5a8:	0800f757 	.word	0x0800f757
 800f5ac:	0800f693 	.word	0x0800f693
 800f5b0:	0800f757 	.word	0x0800f757
 800f5b4:	0800f757 	.word	0x0800f757
 800f5b8:	0800f757 	.word	0x0800f757
 800f5bc:	0800f6d5 	.word	0x0800f6d5
 800f5c0:	0800f757 	.word	0x0800f757
 800f5c4:	0800f757 	.word	0x0800f757
 800f5c8:	0800f757 	.word	0x0800f757
 800f5cc:	0800f715 	.word	0x0800f715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	68b9      	ldr	r1, [r7, #8]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f000 f9a4 	bl	800f924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	699a      	ldr	r2, [r3, #24]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f042 0208 	orr.w	r2, r2, #8
 800f5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	699a      	ldr	r2, [r3, #24]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f022 0204 	bic.w	r2, r2, #4
 800f5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6999      	ldr	r1, [r3, #24]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	691a      	ldr	r2, [r3, #16]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	430a      	orrs	r2, r1
 800f60c:	619a      	str	r2, [r3, #24]
      break;
 800f60e:	e0a3      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68b9      	ldr	r1, [r7, #8]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fa14 	bl	800fa44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	699a      	ldr	r2, [r3, #24]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f62a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	699a      	ldr	r2, [r3, #24]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f63a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6999      	ldr	r1, [r3, #24]
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	021a      	lsls	r2, r3, #8
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	430a      	orrs	r2, r1
 800f64e:	619a      	str	r2, [r3, #24]
      break;
 800f650:	e082      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68b9      	ldr	r1, [r7, #8]
 800f658:	4618      	mov	r0, r3
 800f65a:	f000 fa7d 	bl	800fb58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	69da      	ldr	r2, [r3, #28]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f042 0208 	orr.w	r2, r2, #8
 800f66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	69da      	ldr	r2, [r3, #28]
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f022 0204 	bic.w	r2, r2, #4
 800f67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	69d9      	ldr	r1, [r3, #28]
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	691a      	ldr	r2, [r3, #16]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	430a      	orrs	r2, r1
 800f68e:	61da      	str	r2, [r3, #28]
      break;
 800f690:	e062      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	4618      	mov	r0, r3
 800f69a:	f000 fae3 	bl	800fc64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	69da      	ldr	r2, [r3, #28]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	69da      	ldr	r2, [r3, #28]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	69d9      	ldr	r1, [r3, #28]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	691b      	ldr	r3, [r3, #16]
 800f6c8:	021a      	lsls	r2, r3, #8
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	61da      	str	r2, [r3, #28]
      break;
 800f6d2:	e041      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 fb2a 	bl	800fd34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f042 0208 	orr.w	r2, r2, #8
 800f6ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f022 0204 	bic.w	r2, r2, #4
 800f6fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	691a      	ldr	r2, [r3, #16]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f712:	e021      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 fb6c 	bl	800fdf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f72e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f73e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	021a      	lsls	r2, r3, #8
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	430a      	orrs	r2, r1
 800f752:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f754:	e000      	b.n	800f758 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop

0800f76c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d101      	bne.n	800f784 <HAL_TIM_SlaveConfigSynchro+0x18>
 800f780:	2302      	movs	r3, #2
 800f782:	e031      	b.n	800f7e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2201      	movs	r2, #1
 800f788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2202      	movs	r2, #2
 800f790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fb92 	bl	800fec0 <TIM_SlaveTimer_SetConfig>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e018      	b.n	800f7e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68da      	ldr	r2, [r3, #12]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	68da      	ldr	r2, [r3, #12]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f7d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a40      	ldr	r2, [pc, #256]	; (800f904 <TIM_Base_SetConfig+0x114>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d013      	beq.n	800f830 <TIM_Base_SetConfig+0x40>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f80e:	d00f      	beq.n	800f830 <TIM_Base_SetConfig+0x40>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a3d      	ldr	r2, [pc, #244]	; (800f908 <TIM_Base_SetConfig+0x118>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d00b      	beq.n	800f830 <TIM_Base_SetConfig+0x40>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a3c      	ldr	r2, [pc, #240]	; (800f90c <TIM_Base_SetConfig+0x11c>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d007      	beq.n	800f830 <TIM_Base_SetConfig+0x40>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a3b      	ldr	r2, [pc, #236]	; (800f910 <TIM_Base_SetConfig+0x120>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d003      	beq.n	800f830 <TIM_Base_SetConfig+0x40>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a3a      	ldr	r2, [pc, #232]	; (800f914 <TIM_Base_SetConfig+0x124>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d108      	bne.n	800f842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	4313      	orrs	r3, r2
 800f840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a2f      	ldr	r2, [pc, #188]	; (800f904 <TIM_Base_SetConfig+0x114>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d01f      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f850:	d01b      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4a2c      	ldr	r2, [pc, #176]	; (800f908 <TIM_Base_SetConfig+0x118>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d017      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4a2b      	ldr	r2, [pc, #172]	; (800f90c <TIM_Base_SetConfig+0x11c>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d013      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4a2a      	ldr	r2, [pc, #168]	; (800f910 <TIM_Base_SetConfig+0x120>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d00f      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a29      	ldr	r2, [pc, #164]	; (800f914 <TIM_Base_SetConfig+0x124>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d00b      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a28      	ldr	r2, [pc, #160]	; (800f918 <TIM_Base_SetConfig+0x128>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d007      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a27      	ldr	r2, [pc, #156]	; (800f91c <TIM_Base_SetConfig+0x12c>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d003      	beq.n	800f88a <TIM_Base_SetConfig+0x9a>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4a26      	ldr	r2, [pc, #152]	; (800f920 <TIM_Base_SetConfig+0x130>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d108      	bne.n	800f89c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4313      	orrs	r3, r2
 800f89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	695b      	ldr	r3, [r3, #20]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	689a      	ldr	r2, [r3, #8]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a10      	ldr	r2, [pc, #64]	; (800f904 <TIM_Base_SetConfig+0x114>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d00f      	beq.n	800f8e8 <TIM_Base_SetConfig+0xf8>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a12      	ldr	r2, [pc, #72]	; (800f914 <TIM_Base_SetConfig+0x124>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d00b      	beq.n	800f8e8 <TIM_Base_SetConfig+0xf8>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a11      	ldr	r2, [pc, #68]	; (800f918 <TIM_Base_SetConfig+0x128>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d007      	beq.n	800f8e8 <TIM_Base_SetConfig+0xf8>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a10      	ldr	r2, [pc, #64]	; (800f91c <TIM_Base_SetConfig+0x12c>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d003      	beq.n	800f8e8 <TIM_Base_SetConfig+0xf8>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a0f      	ldr	r2, [pc, #60]	; (800f920 <TIM_Base_SetConfig+0x130>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d103      	bne.n	800f8f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	691a      	ldr	r2, [r3, #16]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	615a      	str	r2, [r3, #20]
}
 800f8f6:	bf00      	nop
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	40010000 	.word	0x40010000
 800f908:	40000400 	.word	0x40000400
 800f90c:	40000800 	.word	0x40000800
 800f910:	40000c00 	.word	0x40000c00
 800f914:	40010400 	.word	0x40010400
 800f918:	40014000 	.word	0x40014000
 800f91c:	40014400 	.word	0x40014400
 800f920:	40014800 	.word	0x40014800

0800f924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	f023 0201 	bic.w	r2, r3, #1
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	4b37      	ldr	r3, [pc, #220]	; (800fa2c <TIM_OC1_SetConfig+0x108>)
 800f950:	4013      	ands	r3, r2
 800f952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f023 0303 	bic.w	r3, r3, #3
 800f95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	4313      	orrs	r3, r2
 800f964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f023 0302 	bic.w	r3, r3, #2
 800f96c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	4313      	orrs	r3, r2
 800f976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a2d      	ldr	r2, [pc, #180]	; (800fa30 <TIM_OC1_SetConfig+0x10c>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d00f      	beq.n	800f9a0 <TIM_OC1_SetConfig+0x7c>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a2c      	ldr	r2, [pc, #176]	; (800fa34 <TIM_OC1_SetConfig+0x110>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d00b      	beq.n	800f9a0 <TIM_OC1_SetConfig+0x7c>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a2b      	ldr	r2, [pc, #172]	; (800fa38 <TIM_OC1_SetConfig+0x114>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d007      	beq.n	800f9a0 <TIM_OC1_SetConfig+0x7c>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a2a      	ldr	r2, [pc, #168]	; (800fa3c <TIM_OC1_SetConfig+0x118>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d003      	beq.n	800f9a0 <TIM_OC1_SetConfig+0x7c>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a29      	ldr	r2, [pc, #164]	; (800fa40 <TIM_OC1_SetConfig+0x11c>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d10c      	bne.n	800f9ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f023 0308 	bic.w	r3, r3, #8
 800f9a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f023 0304 	bic.w	r3, r3, #4
 800f9b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a1c      	ldr	r2, [pc, #112]	; (800fa30 <TIM_OC1_SetConfig+0x10c>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d00f      	beq.n	800f9e2 <TIM_OC1_SetConfig+0xbe>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a1b      	ldr	r2, [pc, #108]	; (800fa34 <TIM_OC1_SetConfig+0x110>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d00b      	beq.n	800f9e2 <TIM_OC1_SetConfig+0xbe>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a1a      	ldr	r2, [pc, #104]	; (800fa38 <TIM_OC1_SetConfig+0x114>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d007      	beq.n	800f9e2 <TIM_OC1_SetConfig+0xbe>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a19      	ldr	r2, [pc, #100]	; (800fa3c <TIM_OC1_SetConfig+0x118>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d003      	beq.n	800f9e2 <TIM_OC1_SetConfig+0xbe>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a18      	ldr	r2, [pc, #96]	; (800fa40 <TIM_OC1_SetConfig+0x11c>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d111      	bne.n	800fa06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	685a      	ldr	r2, [r3, #4]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	621a      	str	r2, [r3, #32]
}
 800fa20:	bf00      	nop
 800fa22:	371c      	adds	r7, #28
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	fffeff8f 	.word	0xfffeff8f
 800fa30:	40010000 	.word	0x40010000
 800fa34:	40010400 	.word	0x40010400
 800fa38:	40014000 	.word	0x40014000
 800fa3c:	40014400 	.word	0x40014400
 800fa40:	40014800 	.word	0x40014800

0800fa44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b087      	sub	sp, #28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	f023 0210 	bic.w	r2, r3, #16
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4b34      	ldr	r3, [pc, #208]	; (800fb40 <TIM_OC2_SetConfig+0xfc>)
 800fa70:	4013      	ands	r3, r2
 800fa72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	4313      	orrs	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	f023 0320 	bic.w	r3, r3, #32
 800fa8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	689b      	ldr	r3, [r3, #8]
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a29      	ldr	r2, [pc, #164]	; (800fb44 <TIM_OC2_SetConfig+0x100>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d003      	beq.n	800faac <TIM_OC2_SetConfig+0x68>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4a28      	ldr	r2, [pc, #160]	; (800fb48 <TIM_OC2_SetConfig+0x104>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d10d      	bne.n	800fac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	011b      	lsls	r3, r3, #4
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4a1e      	ldr	r2, [pc, #120]	; (800fb44 <TIM_OC2_SetConfig+0x100>)
 800facc:	4293      	cmp	r3, r2
 800face:	d00f      	beq.n	800faf0 <TIM_OC2_SetConfig+0xac>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4a1d      	ldr	r2, [pc, #116]	; (800fb48 <TIM_OC2_SetConfig+0x104>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d00b      	beq.n	800faf0 <TIM_OC2_SetConfig+0xac>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a1c      	ldr	r2, [pc, #112]	; (800fb4c <TIM_OC2_SetConfig+0x108>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d007      	beq.n	800faf0 <TIM_OC2_SetConfig+0xac>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a1b      	ldr	r2, [pc, #108]	; (800fb50 <TIM_OC2_SetConfig+0x10c>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d003      	beq.n	800faf0 <TIM_OC2_SetConfig+0xac>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a1a      	ldr	r2, [pc, #104]	; (800fb54 <TIM_OC2_SetConfig+0x110>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d113      	bne.n	800fb18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800faf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fafe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	685a      	ldr	r2, [r3, #4]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	621a      	str	r2, [r3, #32]
}
 800fb32:	bf00      	nop
 800fb34:	371c      	adds	r7, #28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	feff8fff 	.word	0xfeff8fff
 800fb44:	40010000 	.word	0x40010000
 800fb48:	40010400 	.word	0x40010400
 800fb4c:	40014000 	.word	0x40014000
 800fb50:	40014400 	.word	0x40014400
 800fb54:	40014800 	.word	0x40014800

0800fb58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b087      	sub	sp, #28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f023 0303 	bic.w	r3, r3, #3
 800fb8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	021b      	lsls	r3, r3, #8
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4a27      	ldr	r2, [pc, #156]	; (800fc50 <TIM_OC3_SetConfig+0xf8>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d003      	beq.n	800fbbe <TIM_OC3_SetConfig+0x66>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a26      	ldr	r2, [pc, #152]	; (800fc54 <TIM_OC3_SetConfig+0xfc>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d10d      	bne.n	800fbda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a1c      	ldr	r2, [pc, #112]	; (800fc50 <TIM_OC3_SetConfig+0xf8>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d00f      	beq.n	800fc02 <TIM_OC3_SetConfig+0xaa>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a1b      	ldr	r2, [pc, #108]	; (800fc54 <TIM_OC3_SetConfig+0xfc>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d00b      	beq.n	800fc02 <TIM_OC3_SetConfig+0xaa>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a1a      	ldr	r2, [pc, #104]	; (800fc58 <TIM_OC3_SetConfig+0x100>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d007      	beq.n	800fc02 <TIM_OC3_SetConfig+0xaa>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a19      	ldr	r2, [pc, #100]	; (800fc5c <TIM_OC3_SetConfig+0x104>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d003      	beq.n	800fc02 <TIM_OC3_SetConfig+0xaa>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a18      	ldr	r2, [pc, #96]	; (800fc60 <TIM_OC3_SetConfig+0x108>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d113      	bne.n	800fc2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	621a      	str	r2, [r3, #32]
}
 800fc44:	bf00      	nop
 800fc46:	371c      	adds	r7, #28
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	40010000 	.word	0x40010000
 800fc54:	40010400 	.word	0x40010400
 800fc58:	40014000 	.word	0x40014000
 800fc5c:	40014400 	.word	0x40014400
 800fc60:	40014800 	.word	0x40014800

0800fc64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	69db      	ldr	r3, [r3, #28]
 800fc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	021b      	lsls	r3, r3, #8
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	031b      	lsls	r3, r3, #12
 800fcb6:	693a      	ldr	r2, [r7, #16]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4a18      	ldr	r2, [pc, #96]	; (800fd20 <TIM_OC4_SetConfig+0xbc>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d00f      	beq.n	800fce4 <TIM_OC4_SetConfig+0x80>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4a17      	ldr	r2, [pc, #92]	; (800fd24 <TIM_OC4_SetConfig+0xc0>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d00b      	beq.n	800fce4 <TIM_OC4_SetConfig+0x80>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4a16      	ldr	r2, [pc, #88]	; (800fd28 <TIM_OC4_SetConfig+0xc4>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d007      	beq.n	800fce4 <TIM_OC4_SetConfig+0x80>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a15      	ldr	r2, [pc, #84]	; (800fd2c <TIM_OC4_SetConfig+0xc8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d003      	beq.n	800fce4 <TIM_OC4_SetConfig+0x80>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4a14      	ldr	r2, [pc, #80]	; (800fd30 <TIM_OC4_SetConfig+0xcc>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d109      	bne.n	800fcf8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	695b      	ldr	r3, [r3, #20]
 800fcf0:	019b      	lsls	r3, r3, #6
 800fcf2:	697a      	ldr	r2, [r7, #20]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	685a      	ldr	r2, [r3, #4]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	621a      	str	r2, [r3, #32]
}
 800fd12:	bf00      	nop
 800fd14:	371c      	adds	r7, #28
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	40010000 	.word	0x40010000
 800fd24:	40010400 	.word	0x40010400
 800fd28:	40014000 	.word	0x40014000
 800fd2c:	40014400 	.word	0x40014400
 800fd30:	40014800 	.word	0x40014800

0800fd34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a1b      	ldr	r3, [r3, #32]
 800fd42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fd74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	689b      	ldr	r3, [r3, #8]
 800fd7a:	041b      	lsls	r3, r3, #16
 800fd7c:	693a      	ldr	r2, [r7, #16]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a17      	ldr	r2, [pc, #92]	; (800fde4 <TIM_OC5_SetConfig+0xb0>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d00f      	beq.n	800fdaa <TIM_OC5_SetConfig+0x76>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a16      	ldr	r2, [pc, #88]	; (800fde8 <TIM_OC5_SetConfig+0xb4>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d00b      	beq.n	800fdaa <TIM_OC5_SetConfig+0x76>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a15      	ldr	r2, [pc, #84]	; (800fdec <TIM_OC5_SetConfig+0xb8>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d007      	beq.n	800fdaa <TIM_OC5_SetConfig+0x76>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a14      	ldr	r2, [pc, #80]	; (800fdf0 <TIM_OC5_SetConfig+0xbc>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d003      	beq.n	800fdaa <TIM_OC5_SetConfig+0x76>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4a13      	ldr	r2, [pc, #76]	; (800fdf4 <TIM_OC5_SetConfig+0xc0>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d109      	bne.n	800fdbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	021b      	lsls	r3, r3, #8
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	697a      	ldr	r2, [r7, #20]
 800fdc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	685a      	ldr	r2, [r3, #4]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	621a      	str	r2, [r3, #32]
}
 800fdd8:	bf00      	nop
 800fdda:	371c      	adds	r7, #28
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	40010000 	.word	0x40010000
 800fde8:	40010400 	.word	0x40010400
 800fdec:	40014000 	.word	0x40014000
 800fdf0:	40014400 	.word	0x40014400
 800fdf4:	40014800 	.word	0x40014800

0800fdf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a1b      	ldr	r3, [r3, #32]
 800fe06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	021b      	lsls	r3, r3, #8
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	051b      	lsls	r3, r3, #20
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	4313      	orrs	r3, r2
 800fe46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	4a18      	ldr	r2, [pc, #96]	; (800feac <TIM_OC6_SetConfig+0xb4>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d00f      	beq.n	800fe70 <TIM_OC6_SetConfig+0x78>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	4a17      	ldr	r2, [pc, #92]	; (800feb0 <TIM_OC6_SetConfig+0xb8>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d00b      	beq.n	800fe70 <TIM_OC6_SetConfig+0x78>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4a16      	ldr	r2, [pc, #88]	; (800feb4 <TIM_OC6_SetConfig+0xbc>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d007      	beq.n	800fe70 <TIM_OC6_SetConfig+0x78>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a15      	ldr	r2, [pc, #84]	; (800feb8 <TIM_OC6_SetConfig+0xc0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d003      	beq.n	800fe70 <TIM_OC6_SetConfig+0x78>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a14      	ldr	r2, [pc, #80]	; (800febc <TIM_OC6_SetConfig+0xc4>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d109      	bne.n	800fe84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	029b      	lsls	r3, r3, #10
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	621a      	str	r2, [r3, #32]
}
 800fe9e:	bf00      	nop
 800fea0:	371c      	adds	r7, #28
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	40010000 	.word	0x40010000
 800feb0:	40010400 	.word	0x40010400
 800feb4:	40014000 	.word	0x40014000
 800feb8:	40014400 	.word	0x40014400
 800febc:	40014800 	.word	0x40014800

0800fec0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fed2:	697a      	ldr	r2, [r7, #20]
 800fed4:	4b64      	ldr	r3, [pc, #400]	; (8010068 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800fed6:	4013      	ands	r3, r2
 800fed8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800fee4:	697a      	ldr	r2, [r7, #20]
 800fee6:	4b61      	ldr	r3, [pc, #388]	; (801006c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800fee8:	4013      	ands	r3, r2
 800feea:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	697a      	ldr	r2, [r7, #20]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	4a5b      	ldr	r2, [pc, #364]	; (8010070 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	f000 80a7 	beq.w	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff0a:	4a59      	ldr	r2, [pc, #356]	; (8010070 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	f200 80a5 	bhi.w	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff16:	f000 809f 	beq.w	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff1e:	f200 809d 	bhi.w	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff22:	4a54      	ldr	r2, [pc, #336]	; (8010074 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	f000 8097 	beq.w	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff2a:	4a52      	ldr	r2, [pc, #328]	; (8010074 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	f200 8095 	bhi.w	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff32:	4a51      	ldr	r2, [pc, #324]	; (8010078 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	f000 808f 	beq.w	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff3a:	4a4f      	ldr	r2, [pc, #316]	; (8010078 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	f200 808d 	bhi.w	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff42:	4a4e      	ldr	r2, [pc, #312]	; (801007c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	f000 8087 	beq.w	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff4a:	4a4c      	ldr	r2, [pc, #304]	; (801007c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	f200 8085 	bhi.w	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff52:	4a4b      	ldr	r2, [pc, #300]	; (8010080 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d07f      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff58:	4a49      	ldr	r2, [pc, #292]	; (8010080 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d87e      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff5e:	4a49      	ldr	r2, [pc, #292]	; (8010084 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d079      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff64:	4a47      	ldr	r2, [pc, #284]	; (8010084 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d878      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff6a:	4a47      	ldr	r2, [pc, #284]	; (8010088 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d073      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff70:	4a45      	ldr	r2, [pc, #276]	; (8010088 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d872      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff76:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ff7a:	d06d      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ff80:	d86c      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff86:	d067      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ff88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff8c:	d866      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff8e:	2b70      	cmp	r3, #112	; 0x70
 800ff90:	d01a      	beq.n	800ffc8 <TIM_SlaveTimer_SetConfig+0x108>
 800ff92:	2b70      	cmp	r3, #112	; 0x70
 800ff94:	d862      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff96:	2b60      	cmp	r3, #96	; 0x60
 800ff98:	d054      	beq.n	8010044 <TIM_SlaveTimer_SetConfig+0x184>
 800ff9a:	2b60      	cmp	r3, #96	; 0x60
 800ff9c:	d85e      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ff9e:	2b50      	cmp	r3, #80	; 0x50
 800ffa0:	d046      	beq.n	8010030 <TIM_SlaveTimer_SetConfig+0x170>
 800ffa2:	2b50      	cmp	r3, #80	; 0x50
 800ffa4:	d85a      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ffa6:	2b40      	cmp	r3, #64	; 0x40
 800ffa8:	d019      	beq.n	800ffde <TIM_SlaveTimer_SetConfig+0x11e>
 800ffaa:	2b40      	cmp	r3, #64	; 0x40
 800ffac:	d856      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ffae:	2b30      	cmp	r3, #48	; 0x30
 800ffb0:	d052      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ffb2:	2b30      	cmp	r3, #48	; 0x30
 800ffb4:	d852      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ffb6:	2b20      	cmp	r3, #32
 800ffb8:	d04e      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ffba:	2b20      	cmp	r3, #32
 800ffbc:	d84e      	bhi.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d04a      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
 800ffc2:	2b10      	cmp	r3, #16
 800ffc4:	d048      	beq.n	8010058 <TIM_SlaveTimer_SetConfig+0x198>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800ffc6:	e049      	b.n	801005c <TIM_SlaveTimer_SetConfig+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6818      	ldr	r0, [r3, #0]
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	68d9      	ldr	r1, [r3, #12]
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	689a      	ldr	r2, [r3, #8]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	f000 f8b7 	bl	801014a <TIM_ETR_SetConfig>
      break;
 800ffdc:	e03f      	b.n	801005e <TIM_SlaveTimer_SetConfig+0x19e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b05      	cmp	r3, #5
 800ffe4:	d101      	bne.n	800ffea <TIM_SlaveTimer_SetConfig+0x12a>
        return HAL_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e03a      	b.n	8010060 <TIM_SlaveTimer_SetConfig+0x1a0>
      tmpccer = htim->Instance->CCER;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	6a1b      	ldr	r3, [r3, #32]
 800fff0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6a1a      	ldr	r2, [r3, #32]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f022 0201 	bic.w	r2, r2, #1
 8010000:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010010:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	011b      	lsls	r3, r3, #4
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	4313      	orrs	r3, r2
 801001c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	693a      	ldr	r2, [r7, #16]
 801002c:	621a      	str	r2, [r3, #32]
      break;
 801002e:	e016      	b.n	801005e <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6818      	ldr	r0, [r3, #0]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	6899      	ldr	r1, [r3, #8]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	461a      	mov	r2, r3
 801003e:	f000 f825 	bl	801008c <TIM_TI1_ConfigInputStage>
      break;
 8010042:	e00c      	b.n	801005e <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	6899      	ldr	r1, [r3, #8]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	461a      	mov	r2, r3
 8010052:	f000 f84a 	bl	80100ea <TIM_TI2_ConfigInputStage>
      break;
 8010056:	e002      	b.n	801005e <TIM_SlaveTimer_SetConfig+0x19e>
        break;
 8010058:	bf00      	nop
 801005a:	e000      	b.n	801005e <TIM_SlaveTimer_SetConfig+0x19e>
      break;
 801005c:	bf00      	nop
  }
  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	ffcfff8f 	.word	0xffcfff8f
 801006c:	fffefff8 	.word	0xfffefff8
 8010070:	00200010 	.word	0x00200010
 8010074:	00100070 	.word	0x00100070
 8010078:	00100060 	.word	0x00100060
 801007c:	00100050 	.word	0x00100050
 8010080:	00100040 	.word	0x00100040
 8010084:	00100030 	.word	0x00100030
 8010088:	00100020 	.word	0x00100020

0801008c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801008c:	b480      	push	{r7}
 801008e:	b087      	sub	sp, #28
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6a1b      	ldr	r3, [r3, #32]
 801009c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	f023 0201 	bic.w	r2, r3, #1
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	699b      	ldr	r3, [r3, #24]
 80100ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80100b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	4313      	orrs	r3, r2
 80100c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	f023 030a 	bic.w	r3, r3, #10
 80100c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80100ca:	697a      	ldr	r2, [r7, #20]
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	621a      	str	r2, [r3, #32]
}
 80100de:	bf00      	nop
 80100e0:	371c      	adds	r7, #28
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b087      	sub	sp, #28
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	6a1b      	ldr	r3, [r3, #32]
 80100fa:	f023 0210 	bic.w	r2, r3, #16
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	031b      	lsls	r3, r3, #12
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	4313      	orrs	r3, r2
 801011e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	011b      	lsls	r3, r3, #4
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	4313      	orrs	r3, r2
 8010130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	697a      	ldr	r2, [r7, #20]
 8010136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	621a      	str	r2, [r3, #32]
}
 801013e:	bf00      	nop
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801014a:	b480      	push	{r7}
 801014c:	b087      	sub	sp, #28
 801014e:	af00      	add	r7, sp, #0
 8010150:	60f8      	str	r0, [r7, #12]
 8010152:	60b9      	str	r1, [r7, #8]
 8010154:	607a      	str	r2, [r7, #4]
 8010156:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	689b      	ldr	r3, [r3, #8]
 801015c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010164:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	021a      	lsls	r2, r3, #8
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	431a      	orrs	r2, r3
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	4313      	orrs	r3, r2
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	4313      	orrs	r3, r2
 8010176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	609a      	str	r2, [r3, #8]
}
 801017e:	bf00      	nop
 8010180:	371c      	adds	r7, #28
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801018a:	b480      	push	{r7}
 801018c:	b087      	sub	sp, #28
 801018e:	af00      	add	r7, sp, #0
 8010190:	60f8      	str	r0, [r7, #12]
 8010192:	60b9      	str	r1, [r7, #8]
 8010194:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	f003 031f 	and.w	r3, r3, #31
 801019c:	2201      	movs	r2, #1
 801019e:	fa02 f303 	lsl.w	r3, r2, r3
 80101a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6a1a      	ldr	r2, [r3, #32]
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	43db      	mvns	r3, r3
 80101ac:	401a      	ands	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6a1a      	ldr	r2, [r3, #32]
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	f003 031f 	and.w	r3, r3, #31
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	fa01 f303 	lsl.w	r3, r1, r3
 80101c2:	431a      	orrs	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	621a      	str	r2, [r3, #32]
}
 80101c8:	bf00      	nop
 80101ca:	371c      	adds	r7, #28
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d101      	bne.n	80101ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80101e8:	2302      	movs	r3, #2
 80101ea:	e068      	b.n	80102be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2202      	movs	r2, #2
 80101f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a2e      	ldr	r2, [pc, #184]	; (80102cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d004      	beq.n	8010220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a2d      	ldr	r2, [pc, #180]	; (80102d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d108      	bne.n	8010232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4313      	orrs	r3, r2
 8010230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	4313      	orrs	r3, r2
 8010242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a1e      	ldr	r2, [pc, #120]	; (80102cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d01d      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801025e:	d018      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a1b      	ldr	r2, [pc, #108]	; (80102d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d013      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a1a      	ldr	r2, [pc, #104]	; (80102d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d00e      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a18      	ldr	r2, [pc, #96]	; (80102dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d009      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4a13      	ldr	r2, [pc, #76]	; (80102d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d004      	beq.n	8010292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4a14      	ldr	r2, [pc, #80]	; (80102e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d10c      	bne.n	80102ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3714      	adds	r7, #20
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	40010000 	.word	0x40010000
 80102d0:	40010400 	.word	0x40010400
 80102d4:	40000400 	.word	0x40000400
 80102d8:	40000800 	.word	0x40000800
 80102dc:	40000c00 	.word	0x40000c00
 80102e0:	40001800 	.word	0x40001800

080102e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80102ee:	2300      	movs	r3, #0
 80102f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d101      	bne.n	8010300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80102fc:	2302      	movs	r3, #2
 80102fe:	e065      	b.n	80103cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	4313      	orrs	r3, r2
 8010314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	4313      	orrs	r3, r2
 8010322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	4313      	orrs	r3, r2
 8010330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4313      	orrs	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	4313      	orrs	r3, r2
 801034c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	695b      	ldr	r3, [r3, #20]
 8010358:	4313      	orrs	r3, r2
 801035a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010366:	4313      	orrs	r3, r2
 8010368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	699b      	ldr	r3, [r3, #24]
 8010374:	041b      	lsls	r3, r3, #16
 8010376:	4313      	orrs	r3, r2
 8010378:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4a16      	ldr	r2, [pc, #88]	; (80103d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d004      	beq.n	801038e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4a14      	ldr	r2, [pc, #80]	; (80103dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d115      	bne.n	80103ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	051b      	lsls	r3, r3, #20
 801039a:	4313      	orrs	r3, r2
 801039c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	69db      	ldr	r3, [r3, #28]
 80103a8:	4313      	orrs	r3, r2
 80103aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	6a1b      	ldr	r3, [r3, #32]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2200      	movs	r2, #0
 80103c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	40010000 	.word	0x40010000
 80103dc:	40010400 	.word	0x40010400

080103e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d101      	bne.n	80103f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80103ee:	2301      	movs	r3, #1
 80103f0:	e042      	b.n	8010478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d106      	bne.n	801040a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7f3 fd0f 	bl	8003e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2224      	movs	r2, #36	; 0x24
 801040e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f022 0201 	bic.w	r2, r2, #1
 8010420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 f82c 	bl	8010480 <UART_SetConfig>
 8010428:	4603      	mov	r3, r0
 801042a:	2b01      	cmp	r3, #1
 801042c:	d101      	bne.n	8010432 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	e022      	b.n	8010478 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 fd80 	bl	8010f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	685a      	ldr	r2, [r3, #4]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801044e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	689a      	ldr	r2, [r3, #8]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801045e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f042 0201 	orr.w	r2, r2, #1
 801046e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 fe07 	bl	8011084 <UART_CheckIdleState>
 8010476:	4603      	mov	r3, r0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010480:	b5b0      	push	{r4, r5, r7, lr}
 8010482:	b08e      	sub	sp, #56	; 0x38
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010488:	2300      	movs	r3, #0
 801048a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	689a      	ldr	r2, [r3, #8]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	431a      	orrs	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	695b      	ldr	r3, [r3, #20]
 801049c:	431a      	orrs	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	69db      	ldr	r3, [r3, #28]
 80104a2:	4313      	orrs	r3, r2
 80104a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	4bbf      	ldr	r3, [pc, #764]	; (80107ac <UART_SetConfig+0x32c>)
 80104ae:	4013      	ands	r3, r2
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	6812      	ldr	r2, [r2, #0]
 80104b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104b6:	430b      	orrs	r3, r1
 80104b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68da      	ldr	r2, [r3, #12]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	430a      	orrs	r2, r1
 80104ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4ab5      	ldr	r2, [pc, #724]	; (80107b0 <UART_SetConfig+0x330>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d004      	beq.n	80104ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104e6:	4313      	orrs	r3, r2
 80104e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	689a      	ldr	r2, [r3, #8]
 80104f0:	4bb0      	ldr	r3, [pc, #704]	; (80107b4 <UART_SetConfig+0x334>)
 80104f2:	4013      	ands	r3, r2
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	6812      	ldr	r2, [r2, #0]
 80104f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104fa:	430b      	orrs	r3, r1
 80104fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010504:	f023 010f 	bic.w	r1, r3, #15
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	430a      	orrs	r2, r1
 8010512:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4aa7      	ldr	r2, [pc, #668]	; (80107b8 <UART_SetConfig+0x338>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d176      	bne.n	801060c <UART_SetConfig+0x18c>
 801051e:	4ba7      	ldr	r3, [pc, #668]	; (80107bc <UART_SetConfig+0x33c>)
 8010520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010526:	2b28      	cmp	r3, #40	; 0x28
 8010528:	d86c      	bhi.n	8010604 <UART_SetConfig+0x184>
 801052a:	a201      	add	r2, pc, #4	; (adr r2, 8010530 <UART_SetConfig+0xb0>)
 801052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010530:	080105d5 	.word	0x080105d5
 8010534:	08010605 	.word	0x08010605
 8010538:	08010605 	.word	0x08010605
 801053c:	08010605 	.word	0x08010605
 8010540:	08010605 	.word	0x08010605
 8010544:	08010605 	.word	0x08010605
 8010548:	08010605 	.word	0x08010605
 801054c:	08010605 	.word	0x08010605
 8010550:	080105dd 	.word	0x080105dd
 8010554:	08010605 	.word	0x08010605
 8010558:	08010605 	.word	0x08010605
 801055c:	08010605 	.word	0x08010605
 8010560:	08010605 	.word	0x08010605
 8010564:	08010605 	.word	0x08010605
 8010568:	08010605 	.word	0x08010605
 801056c:	08010605 	.word	0x08010605
 8010570:	080105e5 	.word	0x080105e5
 8010574:	08010605 	.word	0x08010605
 8010578:	08010605 	.word	0x08010605
 801057c:	08010605 	.word	0x08010605
 8010580:	08010605 	.word	0x08010605
 8010584:	08010605 	.word	0x08010605
 8010588:	08010605 	.word	0x08010605
 801058c:	08010605 	.word	0x08010605
 8010590:	080105ed 	.word	0x080105ed
 8010594:	08010605 	.word	0x08010605
 8010598:	08010605 	.word	0x08010605
 801059c:	08010605 	.word	0x08010605
 80105a0:	08010605 	.word	0x08010605
 80105a4:	08010605 	.word	0x08010605
 80105a8:	08010605 	.word	0x08010605
 80105ac:	08010605 	.word	0x08010605
 80105b0:	080105f5 	.word	0x080105f5
 80105b4:	08010605 	.word	0x08010605
 80105b8:	08010605 	.word	0x08010605
 80105bc:	08010605 	.word	0x08010605
 80105c0:	08010605 	.word	0x08010605
 80105c4:	08010605 	.word	0x08010605
 80105c8:	08010605 	.word	0x08010605
 80105cc:	08010605 	.word	0x08010605
 80105d0:	080105fd 	.word	0x080105fd
 80105d4:	2301      	movs	r3, #1
 80105d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105da:	e222      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80105dc:	2304      	movs	r3, #4
 80105de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105e2:	e21e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80105e4:	2308      	movs	r3, #8
 80105e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ea:	e21a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80105ec:	2310      	movs	r3, #16
 80105ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105f2:	e216      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80105f4:	2320      	movs	r3, #32
 80105f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105fa:	e212      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80105fc:	2340      	movs	r3, #64	; 0x40
 80105fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010602:	e20e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010604:	2380      	movs	r3, #128	; 0x80
 8010606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801060a:	e20a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a6b      	ldr	r2, [pc, #428]	; (80107c0 <UART_SetConfig+0x340>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d130      	bne.n	8010678 <UART_SetConfig+0x1f8>
 8010616:	4b69      	ldr	r3, [pc, #420]	; (80107bc <UART_SetConfig+0x33c>)
 8010618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801061a:	f003 0307 	and.w	r3, r3, #7
 801061e:	2b05      	cmp	r3, #5
 8010620:	d826      	bhi.n	8010670 <UART_SetConfig+0x1f0>
 8010622:	a201      	add	r2, pc, #4	; (adr r2, 8010628 <UART_SetConfig+0x1a8>)
 8010624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010628:	08010641 	.word	0x08010641
 801062c:	08010649 	.word	0x08010649
 8010630:	08010651 	.word	0x08010651
 8010634:	08010659 	.word	0x08010659
 8010638:	08010661 	.word	0x08010661
 801063c:	08010669 	.word	0x08010669
 8010640:	2300      	movs	r3, #0
 8010642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010646:	e1ec      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010648:	2304      	movs	r3, #4
 801064a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801064e:	e1e8      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010650:	2308      	movs	r3, #8
 8010652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010656:	e1e4      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010658:	2310      	movs	r3, #16
 801065a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801065e:	e1e0      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010660:	2320      	movs	r3, #32
 8010662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010666:	e1dc      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010668:	2340      	movs	r3, #64	; 0x40
 801066a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801066e:	e1d8      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010670:	2380      	movs	r3, #128	; 0x80
 8010672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010676:	e1d4      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a51      	ldr	r2, [pc, #324]	; (80107c4 <UART_SetConfig+0x344>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d130      	bne.n	80106e4 <UART_SetConfig+0x264>
 8010682:	4b4e      	ldr	r3, [pc, #312]	; (80107bc <UART_SetConfig+0x33c>)
 8010684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010686:	f003 0307 	and.w	r3, r3, #7
 801068a:	2b05      	cmp	r3, #5
 801068c:	d826      	bhi.n	80106dc <UART_SetConfig+0x25c>
 801068e:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <UART_SetConfig+0x214>)
 8010690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010694:	080106ad 	.word	0x080106ad
 8010698:	080106b5 	.word	0x080106b5
 801069c:	080106bd 	.word	0x080106bd
 80106a0:	080106c5 	.word	0x080106c5
 80106a4:	080106cd 	.word	0x080106cd
 80106a8:	080106d5 	.word	0x080106d5
 80106ac:	2300      	movs	r3, #0
 80106ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106b2:	e1b6      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106b4:	2304      	movs	r3, #4
 80106b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106ba:	e1b2      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106bc:	2308      	movs	r3, #8
 80106be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106c2:	e1ae      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106c4:	2310      	movs	r3, #16
 80106c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106ca:	e1aa      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106cc:	2320      	movs	r3, #32
 80106ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106d2:	e1a6      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106d4:	2340      	movs	r3, #64	; 0x40
 80106d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106da:	e1a2      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106dc:	2380      	movs	r3, #128	; 0x80
 80106de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106e2:	e19e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a37      	ldr	r2, [pc, #220]	; (80107c8 <UART_SetConfig+0x348>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d130      	bne.n	8010750 <UART_SetConfig+0x2d0>
 80106ee:	4b33      	ldr	r3, [pc, #204]	; (80107bc <UART_SetConfig+0x33c>)
 80106f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106f2:	f003 0307 	and.w	r3, r3, #7
 80106f6:	2b05      	cmp	r3, #5
 80106f8:	d826      	bhi.n	8010748 <UART_SetConfig+0x2c8>
 80106fa:	a201      	add	r2, pc, #4	; (adr r2, 8010700 <UART_SetConfig+0x280>)
 80106fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010700:	08010719 	.word	0x08010719
 8010704:	08010721 	.word	0x08010721
 8010708:	08010729 	.word	0x08010729
 801070c:	08010731 	.word	0x08010731
 8010710:	08010739 	.word	0x08010739
 8010714:	08010741 	.word	0x08010741
 8010718:	2300      	movs	r3, #0
 801071a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801071e:	e180      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010720:	2304      	movs	r3, #4
 8010722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010726:	e17c      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010728:	2308      	movs	r3, #8
 801072a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801072e:	e178      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010730:	2310      	movs	r3, #16
 8010732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010736:	e174      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010738:	2320      	movs	r3, #32
 801073a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801073e:	e170      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010740:	2340      	movs	r3, #64	; 0x40
 8010742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010746:	e16c      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010748:	2380      	movs	r3, #128	; 0x80
 801074a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801074e:	e168      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a1d      	ldr	r2, [pc, #116]	; (80107cc <UART_SetConfig+0x34c>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d142      	bne.n	80107e0 <UART_SetConfig+0x360>
 801075a:	4b18      	ldr	r3, [pc, #96]	; (80107bc <UART_SetConfig+0x33c>)
 801075c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801075e:	f003 0307 	and.w	r3, r3, #7
 8010762:	2b05      	cmp	r3, #5
 8010764:	d838      	bhi.n	80107d8 <UART_SetConfig+0x358>
 8010766:	a201      	add	r2, pc, #4	; (adr r2, 801076c <UART_SetConfig+0x2ec>)
 8010768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076c:	08010785 	.word	0x08010785
 8010770:	0801078d 	.word	0x0801078d
 8010774:	08010795 	.word	0x08010795
 8010778:	0801079d 	.word	0x0801079d
 801077c:	080107a5 	.word	0x080107a5
 8010780:	080107d1 	.word	0x080107d1
 8010784:	2300      	movs	r3, #0
 8010786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801078a:	e14a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801078c:	2304      	movs	r3, #4
 801078e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010792:	e146      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010794:	2308      	movs	r3, #8
 8010796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801079a:	e142      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801079c:	2310      	movs	r3, #16
 801079e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107a2:	e13e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80107a4:	2320      	movs	r3, #32
 80107a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107aa:	e13a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80107ac:	cfff69f3 	.word	0xcfff69f3
 80107b0:	58000c00 	.word	0x58000c00
 80107b4:	11fff4ff 	.word	0x11fff4ff
 80107b8:	40011000 	.word	0x40011000
 80107bc:	58024400 	.word	0x58024400
 80107c0:	40004400 	.word	0x40004400
 80107c4:	40004800 	.word	0x40004800
 80107c8:	40004c00 	.word	0x40004c00
 80107cc:	40005000 	.word	0x40005000
 80107d0:	2340      	movs	r3, #64	; 0x40
 80107d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107d6:	e124      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80107d8:	2380      	movs	r3, #128	; 0x80
 80107da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107de:	e120      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4acc      	ldr	r2, [pc, #816]	; (8010b18 <UART_SetConfig+0x698>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d176      	bne.n	80108d8 <UART_SetConfig+0x458>
 80107ea:	4bcc      	ldr	r3, [pc, #816]	; (8010b1c <UART_SetConfig+0x69c>)
 80107ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107f2:	2b28      	cmp	r3, #40	; 0x28
 80107f4:	d86c      	bhi.n	80108d0 <UART_SetConfig+0x450>
 80107f6:	a201      	add	r2, pc, #4	; (adr r2, 80107fc <UART_SetConfig+0x37c>)
 80107f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fc:	080108a1 	.word	0x080108a1
 8010800:	080108d1 	.word	0x080108d1
 8010804:	080108d1 	.word	0x080108d1
 8010808:	080108d1 	.word	0x080108d1
 801080c:	080108d1 	.word	0x080108d1
 8010810:	080108d1 	.word	0x080108d1
 8010814:	080108d1 	.word	0x080108d1
 8010818:	080108d1 	.word	0x080108d1
 801081c:	080108a9 	.word	0x080108a9
 8010820:	080108d1 	.word	0x080108d1
 8010824:	080108d1 	.word	0x080108d1
 8010828:	080108d1 	.word	0x080108d1
 801082c:	080108d1 	.word	0x080108d1
 8010830:	080108d1 	.word	0x080108d1
 8010834:	080108d1 	.word	0x080108d1
 8010838:	080108d1 	.word	0x080108d1
 801083c:	080108b1 	.word	0x080108b1
 8010840:	080108d1 	.word	0x080108d1
 8010844:	080108d1 	.word	0x080108d1
 8010848:	080108d1 	.word	0x080108d1
 801084c:	080108d1 	.word	0x080108d1
 8010850:	080108d1 	.word	0x080108d1
 8010854:	080108d1 	.word	0x080108d1
 8010858:	080108d1 	.word	0x080108d1
 801085c:	080108b9 	.word	0x080108b9
 8010860:	080108d1 	.word	0x080108d1
 8010864:	080108d1 	.word	0x080108d1
 8010868:	080108d1 	.word	0x080108d1
 801086c:	080108d1 	.word	0x080108d1
 8010870:	080108d1 	.word	0x080108d1
 8010874:	080108d1 	.word	0x080108d1
 8010878:	080108d1 	.word	0x080108d1
 801087c:	080108c1 	.word	0x080108c1
 8010880:	080108d1 	.word	0x080108d1
 8010884:	080108d1 	.word	0x080108d1
 8010888:	080108d1 	.word	0x080108d1
 801088c:	080108d1 	.word	0x080108d1
 8010890:	080108d1 	.word	0x080108d1
 8010894:	080108d1 	.word	0x080108d1
 8010898:	080108d1 	.word	0x080108d1
 801089c:	080108c9 	.word	0x080108c9
 80108a0:	2301      	movs	r3, #1
 80108a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108a6:	e0bc      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108a8:	2304      	movs	r3, #4
 80108aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ae:	e0b8      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108b0:	2308      	movs	r3, #8
 80108b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108b6:	e0b4      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108b8:	2310      	movs	r3, #16
 80108ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108be:	e0b0      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108c0:	2320      	movs	r3, #32
 80108c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108c6:	e0ac      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108c8:	2340      	movs	r3, #64	; 0x40
 80108ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ce:	e0a8      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108d0:	2380      	movs	r3, #128	; 0x80
 80108d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108d6:	e0a4      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a90      	ldr	r2, [pc, #576]	; (8010b20 <UART_SetConfig+0x6a0>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d130      	bne.n	8010944 <UART_SetConfig+0x4c4>
 80108e2:	4b8e      	ldr	r3, [pc, #568]	; (8010b1c <UART_SetConfig+0x69c>)
 80108e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b05      	cmp	r3, #5
 80108ec:	d826      	bhi.n	801093c <UART_SetConfig+0x4bc>
 80108ee:	a201      	add	r2, pc, #4	; (adr r2, 80108f4 <UART_SetConfig+0x474>)
 80108f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f4:	0801090d 	.word	0x0801090d
 80108f8:	08010915 	.word	0x08010915
 80108fc:	0801091d 	.word	0x0801091d
 8010900:	08010925 	.word	0x08010925
 8010904:	0801092d 	.word	0x0801092d
 8010908:	08010935 	.word	0x08010935
 801090c:	2300      	movs	r3, #0
 801090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010912:	e086      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010914:	2304      	movs	r3, #4
 8010916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801091a:	e082      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801091c:	2308      	movs	r3, #8
 801091e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010922:	e07e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010924:	2310      	movs	r3, #16
 8010926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801092a:	e07a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801092c:	2320      	movs	r3, #32
 801092e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010932:	e076      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010934:	2340      	movs	r3, #64	; 0x40
 8010936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801093a:	e072      	b.n	8010a22 <UART_SetConfig+0x5a2>
 801093c:	2380      	movs	r3, #128	; 0x80
 801093e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010942:	e06e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a76      	ldr	r2, [pc, #472]	; (8010b24 <UART_SetConfig+0x6a4>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d130      	bne.n	80109b0 <UART_SetConfig+0x530>
 801094e:	4b73      	ldr	r3, [pc, #460]	; (8010b1c <UART_SetConfig+0x69c>)
 8010950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b05      	cmp	r3, #5
 8010958:	d826      	bhi.n	80109a8 <UART_SetConfig+0x528>
 801095a:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <UART_SetConfig+0x4e0>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	08010979 	.word	0x08010979
 8010964:	08010981 	.word	0x08010981
 8010968:	08010989 	.word	0x08010989
 801096c:	08010991 	.word	0x08010991
 8010970:	08010999 	.word	0x08010999
 8010974:	080109a1 	.word	0x080109a1
 8010978:	2300      	movs	r3, #0
 801097a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801097e:	e050      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010980:	2304      	movs	r3, #4
 8010982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010986:	e04c      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010988:	2308      	movs	r3, #8
 801098a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801098e:	e048      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010990:	2310      	movs	r3, #16
 8010992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010996:	e044      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010998:	2320      	movs	r3, #32
 801099a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801099e:	e040      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109a0:	2340      	movs	r3, #64	; 0x40
 80109a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109a6:	e03c      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109a8:	2380      	movs	r3, #128	; 0x80
 80109aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ae:	e038      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a5c      	ldr	r2, [pc, #368]	; (8010b28 <UART_SetConfig+0x6a8>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d130      	bne.n	8010a1c <UART_SetConfig+0x59c>
 80109ba:	4b58      	ldr	r3, [pc, #352]	; (8010b1c <UART_SetConfig+0x69c>)
 80109bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109be:	f003 0307 	and.w	r3, r3, #7
 80109c2:	2b05      	cmp	r3, #5
 80109c4:	d826      	bhi.n	8010a14 <UART_SetConfig+0x594>
 80109c6:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <UART_SetConfig+0x54c>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	080109e5 	.word	0x080109e5
 80109d0:	080109ed 	.word	0x080109ed
 80109d4:	080109f5 	.word	0x080109f5
 80109d8:	080109fd 	.word	0x080109fd
 80109dc:	08010a05 	.word	0x08010a05
 80109e0:	08010a0d 	.word	0x08010a0d
 80109e4:	2302      	movs	r3, #2
 80109e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ea:	e01a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109ec:	2304      	movs	r3, #4
 80109ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109f2:	e016      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109f4:	2308      	movs	r3, #8
 80109f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109fa:	e012      	b.n	8010a22 <UART_SetConfig+0x5a2>
 80109fc:	2310      	movs	r3, #16
 80109fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a02:	e00e      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010a04:	2320      	movs	r3, #32
 8010a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a0a:	e00a      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010a0c:	2340      	movs	r3, #64	; 0x40
 8010a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a12:	e006      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010a14:	2380      	movs	r3, #128	; 0x80
 8010a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a1a:	e002      	b.n	8010a22 <UART_SetConfig+0x5a2>
 8010a1c:	2380      	movs	r3, #128	; 0x80
 8010a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a40      	ldr	r2, [pc, #256]	; (8010b28 <UART_SetConfig+0x6a8>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	f040 80ef 	bne.w	8010c0c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a32:	2b20      	cmp	r3, #32
 8010a34:	dc46      	bgt.n	8010ac4 <UART_SetConfig+0x644>
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	f2c0 8081 	blt.w	8010b3e <UART_SetConfig+0x6be>
 8010a3c:	3b02      	subs	r3, #2
 8010a3e:	2b1e      	cmp	r3, #30
 8010a40:	d87d      	bhi.n	8010b3e <UART_SetConfig+0x6be>
 8010a42:	a201      	add	r2, pc, #4	; (adr r2, 8010a48 <UART_SetConfig+0x5c8>)
 8010a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a48:	08010acb 	.word	0x08010acb
 8010a4c:	08010b3f 	.word	0x08010b3f
 8010a50:	08010ad3 	.word	0x08010ad3
 8010a54:	08010b3f 	.word	0x08010b3f
 8010a58:	08010b3f 	.word	0x08010b3f
 8010a5c:	08010b3f 	.word	0x08010b3f
 8010a60:	08010ae3 	.word	0x08010ae3
 8010a64:	08010b3f 	.word	0x08010b3f
 8010a68:	08010b3f 	.word	0x08010b3f
 8010a6c:	08010b3f 	.word	0x08010b3f
 8010a70:	08010b3f 	.word	0x08010b3f
 8010a74:	08010b3f 	.word	0x08010b3f
 8010a78:	08010b3f 	.word	0x08010b3f
 8010a7c:	08010b3f 	.word	0x08010b3f
 8010a80:	08010af3 	.word	0x08010af3
 8010a84:	08010b3f 	.word	0x08010b3f
 8010a88:	08010b3f 	.word	0x08010b3f
 8010a8c:	08010b3f 	.word	0x08010b3f
 8010a90:	08010b3f 	.word	0x08010b3f
 8010a94:	08010b3f 	.word	0x08010b3f
 8010a98:	08010b3f 	.word	0x08010b3f
 8010a9c:	08010b3f 	.word	0x08010b3f
 8010aa0:	08010b3f 	.word	0x08010b3f
 8010aa4:	08010b3f 	.word	0x08010b3f
 8010aa8:	08010b3f 	.word	0x08010b3f
 8010aac:	08010b3f 	.word	0x08010b3f
 8010ab0:	08010b3f 	.word	0x08010b3f
 8010ab4:	08010b3f 	.word	0x08010b3f
 8010ab8:	08010b3f 	.word	0x08010b3f
 8010abc:	08010b3f 	.word	0x08010b3f
 8010ac0:	08010b31 	.word	0x08010b31
 8010ac4:	2b40      	cmp	r3, #64	; 0x40
 8010ac6:	d036      	beq.n	8010b36 <UART_SetConfig+0x6b6>
 8010ac8:	e039      	b.n	8010b3e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010aca:	f7fb fe67 	bl	800c79c <HAL_RCCEx_GetD3PCLK1Freq>
 8010ace:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010ad0:	e03b      	b.n	8010b4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ad2:	f107 0314 	add.w	r3, r7, #20
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fb fe76 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ae0:	e033      	b.n	8010b4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ae2:	f107 0308 	add.w	r3, r7, #8
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fb ffc2 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010af0:	e02b      	b.n	8010b4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010af2:	4b0a      	ldr	r3, [pc, #40]	; (8010b1c <UART_SetConfig+0x69c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f003 0320 	and.w	r3, r3, #32
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d009      	beq.n	8010b12 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010afe:	4b07      	ldr	r3, [pc, #28]	; (8010b1c <UART_SetConfig+0x69c>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	08db      	lsrs	r3, r3, #3
 8010b04:	f003 0303 	and.w	r3, r3, #3
 8010b08:	4a08      	ldr	r2, [pc, #32]	; (8010b2c <UART_SetConfig+0x6ac>)
 8010b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b10:	e01b      	b.n	8010b4a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010b12:	4b06      	ldr	r3, [pc, #24]	; (8010b2c <UART_SetConfig+0x6ac>)
 8010b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b16:	e018      	b.n	8010b4a <UART_SetConfig+0x6ca>
 8010b18:	40011400 	.word	0x40011400
 8010b1c:	58024400 	.word	0x58024400
 8010b20:	40007800 	.word	0x40007800
 8010b24:	40007c00 	.word	0x40007c00
 8010b28:	58000c00 	.word	0x58000c00
 8010b2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b30:	4bc4      	ldr	r3, [pc, #784]	; (8010e44 <UART_SetConfig+0x9c4>)
 8010b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b34:	e009      	b.n	8010b4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b3c:	e005      	b.n	8010b4a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010b42:	2301      	movs	r3, #1
 8010b44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f000 81da 	beq.w	8010f06 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b56:	4abc      	ldr	r2, [pc, #752]	; (8010e48 <UART_SetConfig+0x9c8>)
 8010b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b64:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685a      	ldr	r2, [r3, #4]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4413      	add	r3, r2
 8010b70:	6a3a      	ldr	r2, [r7, #32]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d305      	bcc.n	8010b82 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b7c:	6a3a      	ldr	r2, [r7, #32]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d903      	bls.n	8010b8a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010b82:	2301      	movs	r3, #1
 8010b84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010b88:	e1bd      	b.n	8010f06 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f04f 0100 	mov.w	r1, #0
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b96:	4aac      	ldr	r2, [pc, #688]	; (8010e48 <UART_SetConfig+0x9c8>)
 8010b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	f04f 0300 	mov.w	r3, #0
 8010ba2:	f7ef fdb1 	bl	8000708 <__aeabi_uldivmod>
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	460b      	mov	r3, r1
 8010baa:	4610      	mov	r0, r2
 8010bac:	4619      	mov	r1, r3
 8010bae:	f04f 0200 	mov.w	r2, #0
 8010bb2:	f04f 0300 	mov.w	r3, #0
 8010bb6:	020b      	lsls	r3, r1, #8
 8010bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010bbc:	0202      	lsls	r2, r0, #8
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	6849      	ldr	r1, [r1, #4]
 8010bc2:	0849      	lsrs	r1, r1, #1
 8010bc4:	4608      	mov	r0, r1
 8010bc6:	f04f 0100 	mov.w	r1, #0
 8010bca:	1814      	adds	r4, r2, r0
 8010bcc:	eb43 0501 	adc.w	r5, r3, r1
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	f04f 0300 	mov.w	r3, #0
 8010bda:	4620      	mov	r0, r4
 8010bdc:	4629      	mov	r1, r5
 8010bde:	f7ef fd93 	bl	8000708 <__aeabi_uldivmod>
 8010be2:	4602      	mov	r2, r0
 8010be4:	460b      	mov	r3, r1
 8010be6:	4613      	mov	r3, r2
 8010be8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010bf0:	d308      	bcc.n	8010c04 <UART_SetConfig+0x784>
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bf8:	d204      	bcs.n	8010c04 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c00:	60da      	str	r2, [r3, #12]
 8010c02:	e180      	b.n	8010f06 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010c0a:	e17c      	b.n	8010f06 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	69db      	ldr	r3, [r3, #28]
 8010c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c14:	f040 80bf 	bne.w	8010d96 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8010c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010c1c:	2b20      	cmp	r3, #32
 8010c1e:	dc49      	bgt.n	8010cb4 <UART_SetConfig+0x834>
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	db7c      	blt.n	8010d1e <UART_SetConfig+0x89e>
 8010c24:	2b20      	cmp	r3, #32
 8010c26:	d87a      	bhi.n	8010d1e <UART_SetConfig+0x89e>
 8010c28:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <UART_SetConfig+0x7b0>)
 8010c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2e:	bf00      	nop
 8010c30:	08010cbb 	.word	0x08010cbb
 8010c34:	08010cc3 	.word	0x08010cc3
 8010c38:	08010d1f 	.word	0x08010d1f
 8010c3c:	08010d1f 	.word	0x08010d1f
 8010c40:	08010ccb 	.word	0x08010ccb
 8010c44:	08010d1f 	.word	0x08010d1f
 8010c48:	08010d1f 	.word	0x08010d1f
 8010c4c:	08010d1f 	.word	0x08010d1f
 8010c50:	08010cdb 	.word	0x08010cdb
 8010c54:	08010d1f 	.word	0x08010d1f
 8010c58:	08010d1f 	.word	0x08010d1f
 8010c5c:	08010d1f 	.word	0x08010d1f
 8010c60:	08010d1f 	.word	0x08010d1f
 8010c64:	08010d1f 	.word	0x08010d1f
 8010c68:	08010d1f 	.word	0x08010d1f
 8010c6c:	08010d1f 	.word	0x08010d1f
 8010c70:	08010ceb 	.word	0x08010ceb
 8010c74:	08010d1f 	.word	0x08010d1f
 8010c78:	08010d1f 	.word	0x08010d1f
 8010c7c:	08010d1f 	.word	0x08010d1f
 8010c80:	08010d1f 	.word	0x08010d1f
 8010c84:	08010d1f 	.word	0x08010d1f
 8010c88:	08010d1f 	.word	0x08010d1f
 8010c8c:	08010d1f 	.word	0x08010d1f
 8010c90:	08010d1f 	.word	0x08010d1f
 8010c94:	08010d1f 	.word	0x08010d1f
 8010c98:	08010d1f 	.word	0x08010d1f
 8010c9c:	08010d1f 	.word	0x08010d1f
 8010ca0:	08010d1f 	.word	0x08010d1f
 8010ca4:	08010d1f 	.word	0x08010d1f
 8010ca8:	08010d1f 	.word	0x08010d1f
 8010cac:	08010d1f 	.word	0x08010d1f
 8010cb0:	08010d11 	.word	0x08010d11
 8010cb4:	2b40      	cmp	r3, #64	; 0x40
 8010cb6:	d02e      	beq.n	8010d16 <UART_SetConfig+0x896>
 8010cb8:	e031      	b.n	8010d1e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cba:	f7fa f931 	bl	800af20 <HAL_RCC_GetPCLK1Freq>
 8010cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010cc0:	e033      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010cc2:	f7fa f943 	bl	800af4c <HAL_RCC_GetPCLK2Freq>
 8010cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010cc8:	e02f      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cca:	f107 0314 	add.w	r3, r7, #20
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fb fd7a 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010cd8:	e027      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010cda:	f107 0308 	add.w	r3, r7, #8
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fb fec6 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ce8:	e01f      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cea:	4b58      	ldr	r3, [pc, #352]	; (8010e4c <UART_SetConfig+0x9cc>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f003 0320 	and.w	r3, r3, #32
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010cf6:	4b55      	ldr	r3, [pc, #340]	; (8010e4c <UART_SetConfig+0x9cc>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	08db      	lsrs	r3, r3, #3
 8010cfc:	f003 0303 	and.w	r3, r3, #3
 8010d00:	4a53      	ldr	r2, [pc, #332]	; (8010e50 <UART_SetConfig+0x9d0>)
 8010d02:	fa22 f303 	lsr.w	r3, r2, r3
 8010d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d08:	e00f      	b.n	8010d2a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010d0a:	4b51      	ldr	r3, [pc, #324]	; (8010e50 <UART_SetConfig+0x9d0>)
 8010d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d0e:	e00c      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d10:	4b4c      	ldr	r3, [pc, #304]	; (8010e44 <UART_SetConfig+0x9c4>)
 8010d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d14:	e009      	b.n	8010d2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d1c:	e005      	b.n	8010d2a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010d22:	2301      	movs	r3, #1
 8010d24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 80ea 	beq.w	8010f06 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d36:	4a44      	ldr	r2, [pc, #272]	; (8010e48 <UART_SetConfig+0x9c8>)
 8010d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d44:	005a      	lsls	r2, r3, #1
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	085b      	lsrs	r3, r3, #1
 8010d4c:	441a      	add	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5c:	2b0f      	cmp	r3, #15
 8010d5e:	d916      	bls.n	8010d8e <UART_SetConfig+0x90e>
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d66:	d212      	bcs.n	8010d8e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	f023 030f 	bic.w	r3, r3, #15
 8010d70:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	085b      	lsrs	r3, r3, #1
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	f003 0307 	and.w	r3, r3, #7
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d80:	4313      	orrs	r3, r2
 8010d82:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010d8a:	60da      	str	r2, [r3, #12]
 8010d8c:	e0bb      	b.n	8010f06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010d94:	e0b7      	b.n	8010f06 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010d9a:	2b20      	cmp	r3, #32
 8010d9c:	dc4a      	bgt.n	8010e34 <UART_SetConfig+0x9b4>
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f2c0 8086 	blt.w	8010eb0 <UART_SetConfig+0xa30>
 8010da4:	2b20      	cmp	r3, #32
 8010da6:	f200 8083 	bhi.w	8010eb0 <UART_SetConfig+0xa30>
 8010daa:	a201      	add	r2, pc, #4	; (adr r2, 8010db0 <UART_SetConfig+0x930>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010e3b 	.word	0x08010e3b
 8010db4:	08010e55 	.word	0x08010e55
 8010db8:	08010eb1 	.word	0x08010eb1
 8010dbc:	08010eb1 	.word	0x08010eb1
 8010dc0:	08010e5d 	.word	0x08010e5d
 8010dc4:	08010eb1 	.word	0x08010eb1
 8010dc8:	08010eb1 	.word	0x08010eb1
 8010dcc:	08010eb1 	.word	0x08010eb1
 8010dd0:	08010e6d 	.word	0x08010e6d
 8010dd4:	08010eb1 	.word	0x08010eb1
 8010dd8:	08010eb1 	.word	0x08010eb1
 8010ddc:	08010eb1 	.word	0x08010eb1
 8010de0:	08010eb1 	.word	0x08010eb1
 8010de4:	08010eb1 	.word	0x08010eb1
 8010de8:	08010eb1 	.word	0x08010eb1
 8010dec:	08010eb1 	.word	0x08010eb1
 8010df0:	08010e7d 	.word	0x08010e7d
 8010df4:	08010eb1 	.word	0x08010eb1
 8010df8:	08010eb1 	.word	0x08010eb1
 8010dfc:	08010eb1 	.word	0x08010eb1
 8010e00:	08010eb1 	.word	0x08010eb1
 8010e04:	08010eb1 	.word	0x08010eb1
 8010e08:	08010eb1 	.word	0x08010eb1
 8010e0c:	08010eb1 	.word	0x08010eb1
 8010e10:	08010eb1 	.word	0x08010eb1
 8010e14:	08010eb1 	.word	0x08010eb1
 8010e18:	08010eb1 	.word	0x08010eb1
 8010e1c:	08010eb1 	.word	0x08010eb1
 8010e20:	08010eb1 	.word	0x08010eb1
 8010e24:	08010eb1 	.word	0x08010eb1
 8010e28:	08010eb1 	.word	0x08010eb1
 8010e2c:	08010eb1 	.word	0x08010eb1
 8010e30:	08010ea3 	.word	0x08010ea3
 8010e34:	2b40      	cmp	r3, #64	; 0x40
 8010e36:	d037      	beq.n	8010ea8 <UART_SetConfig+0xa28>
 8010e38:	e03a      	b.n	8010eb0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e3a:	f7fa f871 	bl	800af20 <HAL_RCC_GetPCLK1Freq>
 8010e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e40:	e03c      	b.n	8010ebc <UART_SetConfig+0xa3c>
 8010e42:	bf00      	nop
 8010e44:	003d0900 	.word	0x003d0900
 8010e48:	08027cc4 	.word	0x08027cc4
 8010e4c:	58024400 	.word	0x58024400
 8010e50:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e54:	f7fa f87a 	bl	800af4c <HAL_RCC_GetPCLK2Freq>
 8010e58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e5a:	e02f      	b.n	8010ebc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e5c:	f107 0314 	add.w	r3, r7, #20
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fb fcb1 	bl	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e6a:	e027      	b.n	8010ebc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fb fdfd 	bl	800ca70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010e7a:	e01f      	b.n	8010ebc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e7c:	4b2c      	ldr	r3, [pc, #176]	; (8010f30 <UART_SetConfig+0xab0>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f003 0320 	and.w	r3, r3, #32
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d009      	beq.n	8010e9c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e88:	4b29      	ldr	r3, [pc, #164]	; (8010f30 <UART_SetConfig+0xab0>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	08db      	lsrs	r3, r3, #3
 8010e8e:	f003 0303 	and.w	r3, r3, #3
 8010e92:	4a28      	ldr	r2, [pc, #160]	; (8010f34 <UART_SetConfig+0xab4>)
 8010e94:	fa22 f303 	lsr.w	r3, r2, r3
 8010e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e9a:	e00f      	b.n	8010ebc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8010e9c:	4b25      	ldr	r3, [pc, #148]	; (8010f34 <UART_SetConfig+0xab4>)
 8010e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ea0:	e00c      	b.n	8010ebc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ea2:	4b25      	ldr	r3, [pc, #148]	; (8010f38 <UART_SetConfig+0xab8>)
 8010ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ea6:	e009      	b.n	8010ebc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010eae:	e005      	b.n	8010ebc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010eba:	bf00      	nop
    }

    if (pclk != 0U)
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d021      	beq.n	8010f06 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec6:	4a1d      	ldr	r2, [pc, #116]	; (8010f3c <UART_SetConfig+0xabc>)
 8010ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	085b      	lsrs	r3, r3, #1
 8010eda:	441a      	add	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	2b0f      	cmp	r3, #15
 8010eec:	d908      	bls.n	8010f00 <UART_SetConfig+0xa80>
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ef4:	d204      	bcs.n	8010f00 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	e002      	b.n	8010f06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2201      	movs	r2, #1
 8010f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010f22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3738      	adds	r7, #56	; 0x38
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	58024400 	.word	0x58024400
 8010f34:	03d09000 	.word	0x03d09000
 8010f38:	003d0900 	.word	0x003d0900
 8010f3c:	08027cc4 	.word	0x08027cc4

08010f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00a      	beq.n	8010f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	430a      	orrs	r2, r1
 8010f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00a      	beq.n	8010f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	430a      	orrs	r2, r1
 8010f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00a      	beq.n	8010fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	430a      	orrs	r2, r1
 8010fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb2:	f003 0308 	and.w	r3, r3, #8
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00a      	beq.n	8010fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	430a      	orrs	r2, r1
 8010fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fd4:	f003 0310 	and.w	r3, r3, #16
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00a      	beq.n	8010ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	430a      	orrs	r2, r1
 8010ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff6:	f003 0320 	and.w	r3, r3, #32
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00a      	beq.n	8011014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	430a      	orrs	r2, r1
 8011012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801101c:	2b00      	cmp	r3, #0
 801101e:	d01a      	beq.n	8011056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	430a      	orrs	r2, r1
 8011034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801103a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801103e:	d10a      	bne.n	8011056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	430a      	orrs	r2, r1
 8011054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00a      	beq.n	8011078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	430a      	orrs	r2, r1
 8011076:	605a      	str	r2, [r3, #4]
  }
}
 8011078:	bf00      	nop
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af02      	add	r7, sp, #8
 801108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011094:	f7f3 f93c 	bl	8004310 <HAL_GetTick>
 8011098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f003 0308 	and.w	r3, r3, #8
 80110a4:	2b08      	cmp	r3, #8
 80110a6:	d10e      	bne.n	80110c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2200      	movs	r2, #0
 80110b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 f82f 	bl	801111a <UART_WaitOnFlagUntilTimeout>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110c2:	2303      	movs	r3, #3
 80110c4:	e025      	b.n	8011112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f003 0304 	and.w	r3, r3, #4
 80110d0:	2b04      	cmp	r3, #4
 80110d2:	d10e      	bne.n	80110f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80110d8:	9300      	str	r3, [sp, #0]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2200      	movs	r2, #0
 80110de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 f819 	bl	801111a <UART_WaitOnFlagUntilTimeout>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d001      	beq.n	80110f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110ee:	2303      	movs	r3, #3
 80110f0:	e00f      	b.n	8011112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2220      	movs	r2, #32
 80110f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2220      	movs	r2, #32
 80110fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011110:	2300      	movs	r3, #0
}
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b084      	sub	sp, #16
 801111e:	af00      	add	r7, sp, #0
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	60b9      	str	r1, [r7, #8]
 8011124:	603b      	str	r3, [r7, #0]
 8011126:	4613      	mov	r3, r2
 8011128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801112a:	e062      	b.n	80111f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011132:	d05e      	beq.n	80111f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011134:	f7f3 f8ec 	bl	8004310 <HAL_GetTick>
 8011138:	4602      	mov	r2, r0
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	69ba      	ldr	r2, [r7, #24]
 8011140:	429a      	cmp	r2, r3
 8011142:	d302      	bcc.n	801114a <UART_WaitOnFlagUntilTimeout+0x30>
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d11d      	bne.n	8011186 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011158:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	689a      	ldr	r2, [r3, #8]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f022 0201 	bic.w	r2, r2, #1
 8011168:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2220      	movs	r2, #32
 801116e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2220      	movs	r2, #32
 8011176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2200      	movs	r2, #0
 801117e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011182:	2303      	movs	r3, #3
 8011184:	e045      	b.n	8011212 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f003 0304 	and.w	r3, r3, #4
 8011190:	2b00      	cmp	r3, #0
 8011192:	d02e      	beq.n	80111f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	69db      	ldr	r3, [r3, #28]
 801119a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801119e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111a2:	d126      	bne.n	80111f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80111bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	689a      	ldr	r2, [r3, #8]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 0201 	bic.w	r2, r2, #1
 80111cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2220      	movs	r2, #32
 80111d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2220      	movs	r2, #32
 80111da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2220      	movs	r2, #32
 80111e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80111ee:	2303      	movs	r3, #3
 80111f0:	e00f      	b.n	8011212 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	69da      	ldr	r2, [r3, #28]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	4013      	ands	r3, r2
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	429a      	cmp	r2, r3
 8011200:	bf0c      	ite	eq
 8011202:	2301      	moveq	r3, #1
 8011204:	2300      	movne	r3, #0
 8011206:	b2db      	uxtb	r3, r3
 8011208:	461a      	mov	r2, r3
 801120a:	79fb      	ldrb	r3, [r7, #7]
 801120c:	429a      	cmp	r2, r3
 801120e:	d08d      	beq.n	801112c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011210:	2300      	movs	r3, #0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801121a:	b480      	push	{r7}
 801121c:	b085      	sub	sp, #20
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011228:	2b01      	cmp	r3, #1
 801122a:	d101      	bne.n	8011230 <HAL_UARTEx_DisableFifoMode+0x16>
 801122c:	2302      	movs	r3, #2
 801122e:	e027      	b.n	8011280 <HAL_UARTEx_DisableFifoMode+0x66>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2224      	movs	r2, #36	; 0x24
 801123c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f022 0201 	bic.w	r2, r2, #1
 8011256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801125e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2220      	movs	r2, #32
 8011272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2200      	movs	r2, #0
 801127a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801129c:	2b01      	cmp	r3, #1
 801129e:	d101      	bne.n	80112a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80112a0:	2302      	movs	r3, #2
 80112a2:	e02d      	b.n	8011300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2224      	movs	r2, #36	; 0x24
 80112b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f022 0201 	bic.w	r2, r2, #1
 80112ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	430a      	orrs	r2, r1
 80112de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 f84f 	bl	8011384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	68fa      	ldr	r2, [r7, #12]
 80112ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2220      	movs	r2, #32
 80112f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011318:	2b01      	cmp	r3, #1
 801131a:	d101      	bne.n	8011320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801131c:	2302      	movs	r3, #2
 801131e:	e02d      	b.n	801137c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2224      	movs	r2, #36	; 0x24
 801132c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f022 0201 	bic.w	r2, r2, #1
 8011346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	683a      	ldr	r2, [r7, #0]
 8011358:	430a      	orrs	r2, r1
 801135a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f811 	bl	8011384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2220      	movs	r2, #32
 801136e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011390:	2b00      	cmp	r3, #0
 8011392:	d108      	bne.n	80113a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2201      	movs	r2, #1
 8011398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80113a4:	e031      	b.n	801140a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80113a6:	2310      	movs	r3, #16
 80113a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80113aa:	2310      	movs	r3, #16
 80113ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	0e5b      	lsrs	r3, r3, #25
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f003 0307 	and.w	r3, r3, #7
 80113bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	689b      	ldr	r3, [r3, #8]
 80113c4:	0f5b      	lsrs	r3, r3, #29
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	f003 0307 	and.w	r3, r3, #7
 80113cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
 80113d0:	7b3a      	ldrb	r2, [r7, #12]
 80113d2:	4911      	ldr	r1, [pc, #68]	; (8011418 <UARTEx_SetNbDataToProcess+0x94>)
 80113d4:	5c8a      	ldrb	r2, [r1, r2]
 80113d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80113da:	7b3a      	ldrb	r2, [r7, #12]
 80113dc:	490f      	ldr	r1, [pc, #60]	; (801141c <UARTEx_SetNbDataToProcess+0x98>)
 80113de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
 80113ee:	7b7a      	ldrb	r2, [r7, #13]
 80113f0:	4909      	ldr	r1, [pc, #36]	; (8011418 <UARTEx_SetNbDataToProcess+0x94>)
 80113f2:	5c8a      	ldrb	r2, [r1, r2]
 80113f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80113f8:	7b7a      	ldrb	r2, [r7, #13]
 80113fa:	4908      	ldr	r1, [pc, #32]	; (801141c <UARTEx_SetNbDataToProcess+0x98>)
 80113fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8011402:	b29a      	uxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801140a:	bf00      	nop
 801140c:	3714      	adds	r7, #20
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	08027cdc 	.word	0x08027cdc
 801141c:	08027ce4 	.word	0x08027ce4

08011420 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8011420:	b480      	push	{r7}
 8011422:	b087      	sub	sp, #28
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	681a      	ldr	r2, [r3, #0]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	6812      	ldr	r2, [r2, #0]
 8011438:	f023 0101 	bic.w	r1, r3, #1
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	2b08      	cmp	r3, #8
 8011448:	d102      	bne.n	8011450 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 801144a:	2340      	movs	r3, #64	; 0x40
 801144c:	617b      	str	r3, [r7, #20]
 801144e:	e001      	b.n	8011454 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8011450:	2300      	movs	r3, #0
 8011452:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8011460:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8011466:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 801146c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8011472:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8011478:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 801147e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8011484:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 801148a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8011490:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8011496:	4313      	orrs	r3, r2
 8011498:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	4313      	orrs	r3, r2
 80114a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a8:	693a      	ldr	r2, [r7, #16]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b2:	693a      	ldr	r2, [r7, #16]
 80114b4:	4313      	orrs	r3, r2
 80114b6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80114b8:	4b20      	ldr	r3, [pc, #128]	; (801153c <FMC_NORSRAM_Init+0x11c>)
 80114ba:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114c2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80114ca:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80114d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	43db      	mvns	r3, r3
 80114e2:	ea02 0103 	and.w	r1, r2, r3
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	4319      	orrs	r1, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114fc:	d10c      	bne.n	8011518 <FMC_NORSRAM_Init+0xf8>
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d008      	beq.n	8011518 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011512:	431a      	orrs	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d006      	beq.n	801152e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011528:	431a      	orrs	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801152e:	2300      	movs	r3, #0
}
 8011530:	4618      	mov	r0, r3
 8011532:	371c      	adds	r7, #28
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr
 801153c:	0008fb7f 	.word	0x0008fb7f

08011540 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011540:	b480      	push	{r7}
 8011542:	b087      	sub	sp, #28
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	1c5a      	adds	r2, r3, #1
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011556:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	011b      	lsls	r3, r3, #4
 8011564:	431a      	orrs	r2, r3
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	021b      	lsls	r3, r3, #8
 801156c:	431a      	orrs	r2, r3
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	041b      	lsls	r3, r3, #16
 8011574:	431a      	orrs	r2, r3
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	691b      	ldr	r3, [r3, #16]
 801157a:	3b01      	subs	r3, #1
 801157c:	051b      	lsls	r3, r3, #20
 801157e:	431a      	orrs	r2, r3
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	695b      	ldr	r3, [r3, #20]
 8011584:	3b02      	subs	r3, #2
 8011586:	061b      	lsls	r3, r3, #24
 8011588:	431a      	orrs	r2, r3
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	699b      	ldr	r3, [r3, #24]
 801158e:	4313      	orrs	r3, r2
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	3201      	adds	r2, #1
 8011594:	4319      	orrs	r1, r3
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80115a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a8:	d113      	bne.n	80115d2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80115b2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	3b01      	subs	r3, #1
 80115ba:	051b      	lsls	r3, r3, #20
 80115bc:	697a      	ldr	r2, [r7, #20]
 80115be:	4313      	orrs	r3, r2
 80115c0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	431a      	orrs	r2, r3
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80115d2:	2300      	movs	r3, #0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	371c      	adds	r7, #28
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
 80115ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80115f4:	d11d      	bne.n	8011632 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80115fe:	4b13      	ldr	r3, [pc, #76]	; (801164c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8011600:	4013      	ands	r3, r2
 8011602:	68ba      	ldr	r2, [r7, #8]
 8011604:	6811      	ldr	r1, [r2, #0]
 8011606:	68ba      	ldr	r2, [r7, #8]
 8011608:	6852      	ldr	r2, [r2, #4]
 801160a:	0112      	lsls	r2, r2, #4
 801160c:	4311      	orrs	r1, r2
 801160e:	68ba      	ldr	r2, [r7, #8]
 8011610:	6892      	ldr	r2, [r2, #8]
 8011612:	0212      	lsls	r2, r2, #8
 8011614:	4311      	orrs	r1, r2
 8011616:	68ba      	ldr	r2, [r7, #8]
 8011618:	6992      	ldr	r2, [r2, #24]
 801161a:	4311      	orrs	r1, r2
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	68d2      	ldr	r2, [r2, #12]
 8011620:	0412      	lsls	r2, r2, #16
 8011622:	430a      	orrs	r2, r1
 8011624:	ea43 0102 	orr.w	r1, r3, r2
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011630:	e005      	b.n	801163e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3714      	adds	r7, #20
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	cff00000 	.word	0xcff00000

08011650 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8011656:	4b8d      	ldr	r3, [pc, #564]	; (801188c <MX_LWIP_Init+0x23c>)
 8011658:	22c0      	movs	r2, #192	; 0xc0
 801165a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801165c:	4b8b      	ldr	r3, [pc, #556]	; (801188c <MX_LWIP_Init+0x23c>)
 801165e:	22a8      	movs	r2, #168	; 0xa8
 8011660:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8011662:	4b8a      	ldr	r3, [pc, #552]	; (801188c <MX_LWIP_Init+0x23c>)
 8011664:	2201      	movs	r2, #1
 8011666:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8011668:	4b88      	ldr	r3, [pc, #544]	; (801188c <MX_LWIP_Init+0x23c>)
 801166a:	2201      	movs	r2, #1
 801166c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801166e:	4b88      	ldr	r3, [pc, #544]	; (8011890 <MX_LWIP_Init+0x240>)
 8011670:	22ff      	movs	r2, #255	; 0xff
 8011672:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8011674:	4b86      	ldr	r3, [pc, #536]	; (8011890 <MX_LWIP_Init+0x240>)
 8011676:	22ff      	movs	r2, #255	; 0xff
 8011678:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801167a:	4b85      	ldr	r3, [pc, #532]	; (8011890 <MX_LWIP_Init+0x240>)
 801167c:	22ff      	movs	r2, #255	; 0xff
 801167e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011680:	4b83      	ldr	r3, [pc, #524]	; (8011890 <MX_LWIP_Init+0x240>)
 8011682:	2200      	movs	r2, #0
 8011684:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8011686:	4b83      	ldr	r3, [pc, #524]	; (8011894 <MX_LWIP_Init+0x244>)
 8011688:	2200      	movs	r2, #0
 801168a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 801168c:	4b81      	ldr	r3, [pc, #516]	; (8011894 <MX_LWIP_Init+0x244>)
 801168e:	2200      	movs	r2, #0
 8011690:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8011692:	4b80      	ldr	r3, [pc, #512]	; (8011894 <MX_LWIP_Init+0x244>)
 8011694:	2200      	movs	r2, #0
 8011696:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8011698:	4b7e      	ldr	r3, [pc, #504]	; (8011894 <MX_LWIP_Init+0x244>)
 801169a:	2200      	movs	r2, #0
 801169c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801169e:	f002 fc8b 	bl	8013fb8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80116a2:	4b7a      	ldr	r3, [pc, #488]	; (801188c <MX_LWIP_Init+0x23c>)
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	061a      	lsls	r2, r3, #24
 80116a8:	4b78      	ldr	r3, [pc, #480]	; (801188c <MX_LWIP_Init+0x23c>)
 80116aa:	785b      	ldrb	r3, [r3, #1]
 80116ac:	041b      	lsls	r3, r3, #16
 80116ae:	431a      	orrs	r2, r3
 80116b0:	4b76      	ldr	r3, [pc, #472]	; (801188c <MX_LWIP_Init+0x23c>)
 80116b2:	789b      	ldrb	r3, [r3, #2]
 80116b4:	021b      	lsls	r3, r3, #8
 80116b6:	4313      	orrs	r3, r2
 80116b8:	4a74      	ldr	r2, [pc, #464]	; (801188c <MX_LWIP_Init+0x23c>)
 80116ba:	78d2      	ldrb	r2, [r2, #3]
 80116bc:	4313      	orrs	r3, r2
 80116be:	061a      	lsls	r2, r3, #24
 80116c0:	4b72      	ldr	r3, [pc, #456]	; (801188c <MX_LWIP_Init+0x23c>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	0619      	lsls	r1, r3, #24
 80116c6:	4b71      	ldr	r3, [pc, #452]	; (801188c <MX_LWIP_Init+0x23c>)
 80116c8:	785b      	ldrb	r3, [r3, #1]
 80116ca:	041b      	lsls	r3, r3, #16
 80116cc:	4319      	orrs	r1, r3
 80116ce:	4b6f      	ldr	r3, [pc, #444]	; (801188c <MX_LWIP_Init+0x23c>)
 80116d0:	789b      	ldrb	r3, [r3, #2]
 80116d2:	021b      	lsls	r3, r3, #8
 80116d4:	430b      	orrs	r3, r1
 80116d6:	496d      	ldr	r1, [pc, #436]	; (801188c <MX_LWIP_Init+0x23c>)
 80116d8:	78c9      	ldrb	r1, [r1, #3]
 80116da:	430b      	orrs	r3, r1
 80116dc:	021b      	lsls	r3, r3, #8
 80116de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80116e2:	431a      	orrs	r2, r3
 80116e4:	4b69      	ldr	r3, [pc, #420]	; (801188c <MX_LWIP_Init+0x23c>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	0619      	lsls	r1, r3, #24
 80116ea:	4b68      	ldr	r3, [pc, #416]	; (801188c <MX_LWIP_Init+0x23c>)
 80116ec:	785b      	ldrb	r3, [r3, #1]
 80116ee:	041b      	lsls	r3, r3, #16
 80116f0:	4319      	orrs	r1, r3
 80116f2:	4b66      	ldr	r3, [pc, #408]	; (801188c <MX_LWIP_Init+0x23c>)
 80116f4:	789b      	ldrb	r3, [r3, #2]
 80116f6:	021b      	lsls	r3, r3, #8
 80116f8:	430b      	orrs	r3, r1
 80116fa:	4964      	ldr	r1, [pc, #400]	; (801188c <MX_LWIP_Init+0x23c>)
 80116fc:	78c9      	ldrb	r1, [r1, #3]
 80116fe:	430b      	orrs	r3, r1
 8011700:	0a1b      	lsrs	r3, r3, #8
 8011702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011706:	431a      	orrs	r2, r3
 8011708:	4b60      	ldr	r3, [pc, #384]	; (801188c <MX_LWIP_Init+0x23c>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	0619      	lsls	r1, r3, #24
 801170e:	4b5f      	ldr	r3, [pc, #380]	; (801188c <MX_LWIP_Init+0x23c>)
 8011710:	785b      	ldrb	r3, [r3, #1]
 8011712:	041b      	lsls	r3, r3, #16
 8011714:	4319      	orrs	r1, r3
 8011716:	4b5d      	ldr	r3, [pc, #372]	; (801188c <MX_LWIP_Init+0x23c>)
 8011718:	789b      	ldrb	r3, [r3, #2]
 801171a:	021b      	lsls	r3, r3, #8
 801171c:	430b      	orrs	r3, r1
 801171e:	495b      	ldr	r1, [pc, #364]	; (801188c <MX_LWIP_Init+0x23c>)
 8011720:	78c9      	ldrb	r1, [r1, #3]
 8011722:	430b      	orrs	r3, r1
 8011724:	0e1b      	lsrs	r3, r3, #24
 8011726:	4313      	orrs	r3, r2
 8011728:	4a5b      	ldr	r2, [pc, #364]	; (8011898 <MX_LWIP_Init+0x248>)
 801172a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801172c:	4b58      	ldr	r3, [pc, #352]	; (8011890 <MX_LWIP_Init+0x240>)
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	061a      	lsls	r2, r3, #24
 8011732:	4b57      	ldr	r3, [pc, #348]	; (8011890 <MX_LWIP_Init+0x240>)
 8011734:	785b      	ldrb	r3, [r3, #1]
 8011736:	041b      	lsls	r3, r3, #16
 8011738:	431a      	orrs	r2, r3
 801173a:	4b55      	ldr	r3, [pc, #340]	; (8011890 <MX_LWIP_Init+0x240>)
 801173c:	789b      	ldrb	r3, [r3, #2]
 801173e:	021b      	lsls	r3, r3, #8
 8011740:	4313      	orrs	r3, r2
 8011742:	4a53      	ldr	r2, [pc, #332]	; (8011890 <MX_LWIP_Init+0x240>)
 8011744:	78d2      	ldrb	r2, [r2, #3]
 8011746:	4313      	orrs	r3, r2
 8011748:	061a      	lsls	r2, r3, #24
 801174a:	4b51      	ldr	r3, [pc, #324]	; (8011890 <MX_LWIP_Init+0x240>)
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	0619      	lsls	r1, r3, #24
 8011750:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <MX_LWIP_Init+0x240>)
 8011752:	785b      	ldrb	r3, [r3, #1]
 8011754:	041b      	lsls	r3, r3, #16
 8011756:	4319      	orrs	r1, r3
 8011758:	4b4d      	ldr	r3, [pc, #308]	; (8011890 <MX_LWIP_Init+0x240>)
 801175a:	789b      	ldrb	r3, [r3, #2]
 801175c:	021b      	lsls	r3, r3, #8
 801175e:	430b      	orrs	r3, r1
 8011760:	494b      	ldr	r1, [pc, #300]	; (8011890 <MX_LWIP_Init+0x240>)
 8011762:	78c9      	ldrb	r1, [r1, #3]
 8011764:	430b      	orrs	r3, r1
 8011766:	021b      	lsls	r3, r3, #8
 8011768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801176c:	431a      	orrs	r2, r3
 801176e:	4b48      	ldr	r3, [pc, #288]	; (8011890 <MX_LWIP_Init+0x240>)
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	0619      	lsls	r1, r3, #24
 8011774:	4b46      	ldr	r3, [pc, #280]	; (8011890 <MX_LWIP_Init+0x240>)
 8011776:	785b      	ldrb	r3, [r3, #1]
 8011778:	041b      	lsls	r3, r3, #16
 801177a:	4319      	orrs	r1, r3
 801177c:	4b44      	ldr	r3, [pc, #272]	; (8011890 <MX_LWIP_Init+0x240>)
 801177e:	789b      	ldrb	r3, [r3, #2]
 8011780:	021b      	lsls	r3, r3, #8
 8011782:	430b      	orrs	r3, r1
 8011784:	4942      	ldr	r1, [pc, #264]	; (8011890 <MX_LWIP_Init+0x240>)
 8011786:	78c9      	ldrb	r1, [r1, #3]
 8011788:	430b      	orrs	r3, r1
 801178a:	0a1b      	lsrs	r3, r3, #8
 801178c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011790:	431a      	orrs	r2, r3
 8011792:	4b3f      	ldr	r3, [pc, #252]	; (8011890 <MX_LWIP_Init+0x240>)
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	0619      	lsls	r1, r3, #24
 8011798:	4b3d      	ldr	r3, [pc, #244]	; (8011890 <MX_LWIP_Init+0x240>)
 801179a:	785b      	ldrb	r3, [r3, #1]
 801179c:	041b      	lsls	r3, r3, #16
 801179e:	4319      	orrs	r1, r3
 80117a0:	4b3b      	ldr	r3, [pc, #236]	; (8011890 <MX_LWIP_Init+0x240>)
 80117a2:	789b      	ldrb	r3, [r3, #2]
 80117a4:	021b      	lsls	r3, r3, #8
 80117a6:	430b      	orrs	r3, r1
 80117a8:	4939      	ldr	r1, [pc, #228]	; (8011890 <MX_LWIP_Init+0x240>)
 80117aa:	78c9      	ldrb	r1, [r1, #3]
 80117ac:	430b      	orrs	r3, r1
 80117ae:	0e1b      	lsrs	r3, r3, #24
 80117b0:	4313      	orrs	r3, r2
 80117b2:	4a3a      	ldr	r2, [pc, #232]	; (801189c <MX_LWIP_Init+0x24c>)
 80117b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80117b6:	4b37      	ldr	r3, [pc, #220]	; (8011894 <MX_LWIP_Init+0x244>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	061a      	lsls	r2, r3, #24
 80117bc:	4b35      	ldr	r3, [pc, #212]	; (8011894 <MX_LWIP_Init+0x244>)
 80117be:	785b      	ldrb	r3, [r3, #1]
 80117c0:	041b      	lsls	r3, r3, #16
 80117c2:	431a      	orrs	r2, r3
 80117c4:	4b33      	ldr	r3, [pc, #204]	; (8011894 <MX_LWIP_Init+0x244>)
 80117c6:	789b      	ldrb	r3, [r3, #2]
 80117c8:	021b      	lsls	r3, r3, #8
 80117ca:	4313      	orrs	r3, r2
 80117cc:	4a31      	ldr	r2, [pc, #196]	; (8011894 <MX_LWIP_Init+0x244>)
 80117ce:	78d2      	ldrb	r2, [r2, #3]
 80117d0:	4313      	orrs	r3, r2
 80117d2:	061a      	lsls	r2, r3, #24
 80117d4:	4b2f      	ldr	r3, [pc, #188]	; (8011894 <MX_LWIP_Init+0x244>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	0619      	lsls	r1, r3, #24
 80117da:	4b2e      	ldr	r3, [pc, #184]	; (8011894 <MX_LWIP_Init+0x244>)
 80117dc:	785b      	ldrb	r3, [r3, #1]
 80117de:	041b      	lsls	r3, r3, #16
 80117e0:	4319      	orrs	r1, r3
 80117e2:	4b2c      	ldr	r3, [pc, #176]	; (8011894 <MX_LWIP_Init+0x244>)
 80117e4:	789b      	ldrb	r3, [r3, #2]
 80117e6:	021b      	lsls	r3, r3, #8
 80117e8:	430b      	orrs	r3, r1
 80117ea:	492a      	ldr	r1, [pc, #168]	; (8011894 <MX_LWIP_Init+0x244>)
 80117ec:	78c9      	ldrb	r1, [r1, #3]
 80117ee:	430b      	orrs	r3, r1
 80117f0:	021b      	lsls	r3, r3, #8
 80117f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80117f6:	431a      	orrs	r2, r3
 80117f8:	4b26      	ldr	r3, [pc, #152]	; (8011894 <MX_LWIP_Init+0x244>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	0619      	lsls	r1, r3, #24
 80117fe:	4b25      	ldr	r3, [pc, #148]	; (8011894 <MX_LWIP_Init+0x244>)
 8011800:	785b      	ldrb	r3, [r3, #1]
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	4319      	orrs	r1, r3
 8011806:	4b23      	ldr	r3, [pc, #140]	; (8011894 <MX_LWIP_Init+0x244>)
 8011808:	789b      	ldrb	r3, [r3, #2]
 801180a:	021b      	lsls	r3, r3, #8
 801180c:	430b      	orrs	r3, r1
 801180e:	4921      	ldr	r1, [pc, #132]	; (8011894 <MX_LWIP_Init+0x244>)
 8011810:	78c9      	ldrb	r1, [r1, #3]
 8011812:	430b      	orrs	r3, r1
 8011814:	0a1b      	lsrs	r3, r3, #8
 8011816:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801181a:	431a      	orrs	r2, r3
 801181c:	4b1d      	ldr	r3, [pc, #116]	; (8011894 <MX_LWIP_Init+0x244>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	0619      	lsls	r1, r3, #24
 8011822:	4b1c      	ldr	r3, [pc, #112]	; (8011894 <MX_LWIP_Init+0x244>)
 8011824:	785b      	ldrb	r3, [r3, #1]
 8011826:	041b      	lsls	r3, r3, #16
 8011828:	4319      	orrs	r1, r3
 801182a:	4b1a      	ldr	r3, [pc, #104]	; (8011894 <MX_LWIP_Init+0x244>)
 801182c:	789b      	ldrb	r3, [r3, #2]
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	430b      	orrs	r3, r1
 8011832:	4918      	ldr	r1, [pc, #96]	; (8011894 <MX_LWIP_Init+0x244>)
 8011834:	78c9      	ldrb	r1, [r1, #3]
 8011836:	430b      	orrs	r3, r1
 8011838:	0e1b      	lsrs	r3, r3, #24
 801183a:	4313      	orrs	r3, r2
 801183c:	4a18      	ldr	r2, [pc, #96]	; (80118a0 <MX_LWIP_Init+0x250>)
 801183e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8011840:	4b18      	ldr	r3, [pc, #96]	; (80118a4 <MX_LWIP_Init+0x254>)
 8011842:	9302      	str	r3, [sp, #8]
 8011844:	4b18      	ldr	r3, [pc, #96]	; (80118a8 <MX_LWIP_Init+0x258>)
 8011846:	9301      	str	r3, [sp, #4]
 8011848:	2300      	movs	r3, #0
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	4b14      	ldr	r3, [pc, #80]	; (80118a0 <MX_LWIP_Init+0x250>)
 801184e:	4a13      	ldr	r2, [pc, #76]	; (801189c <MX_LWIP_Init+0x24c>)
 8011850:	4911      	ldr	r1, [pc, #68]	; (8011898 <MX_LWIP_Init+0x248>)
 8011852:	4816      	ldr	r0, [pc, #88]	; (80118ac <MX_LWIP_Init+0x25c>)
 8011854:	f004 f9a8 	bl	8015ba8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011858:	4814      	ldr	r0, [pc, #80]	; (80118ac <MX_LWIP_Init+0x25c>)
 801185a:	f004 fb57 	bl	8015f0c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801185e:	4b13      	ldr	r3, [pc, #76]	; (80118ac <MX_LWIP_Init+0x25c>)
 8011860:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011864:	089b      	lsrs	r3, r3, #2
 8011866:	f003 0301 	and.w	r3, r3, #1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d003      	beq.n	8011878 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8011870:	480e      	ldr	r0, [pc, #56]	; (80118ac <MX_LWIP_Init+0x25c>)
 8011872:	f004 fb5b 	bl	8015f2c <netif_set_up>
 8011876:	e002      	b.n	801187e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8011878:	480c      	ldr	r0, [pc, #48]	; (80118ac <MX_LWIP_Init+0x25c>)
 801187a:	f004 fbc3 	bl	8016004 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801187e:	490c      	ldr	r1, [pc, #48]	; (80118b0 <MX_LWIP_Init+0x260>)
 8011880:	480a      	ldr	r0, [pc, #40]	; (80118ac <MX_LWIP_Init+0x25c>)
 8011882:	f004 fc55 	bl	8016130 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011886:	bf00      	nop
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	24005980 	.word	0x24005980
 8011890:	2400597c 	.word	0x2400597c
 8011894:	2400593c 	.word	0x2400593c
 8011898:	24005974 	.word	0x24005974
 801189c:	24005984 	.word	0x24005984
 80118a0:	24005988 	.word	0x24005988
 80118a4:	0801392d 	.word	0x0801392d
 80118a8:	08011e2d 	.word	0x08011e2d
 80118ac:	24005940 	.word	0x24005940
 80118b0:	08011905 	.word	0x08011905

080118b4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80118bc:	f7f2 fd28 	bl	8004310 <HAL_GetTick>
 80118c0:	4602      	mov	r2, r0
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <Ethernet_Link_Periodic_Handle+0x30>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	2b63      	cmp	r3, #99	; 0x63
 80118ca:	d907      	bls.n	80118dc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80118cc:	f7f2 fd20 	bl	8004310 <HAL_GetTick>
 80118d0:	4603      	mov	r3, r0
 80118d2:	4a04      	ldr	r2, [pc, #16]	; (80118e4 <Ethernet_Link_Periodic_Handle+0x30>)
 80118d4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fb3c 	bl	8011f54 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	24005978 	.word	0x24005978

080118e8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80118ec:	4804      	ldr	r0, [pc, #16]	; (8011900 <MX_LWIP_Process+0x18>)
 80118ee:	f000 fa7d 	bl	8011dec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80118f2:	f00b fd3b 	bl	801d36c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80118f6:	4802      	ldr	r0, [pc, #8]	; (8011900 <MX_LWIP_Process+0x18>)
 80118f8:	f7ff ffdc 	bl	80118b4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80118fc:	bf00      	nop
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	24005940 	.word	0x24005940

08011904 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b08e      	sub	sp, #56	; 0x38
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	605a      	str	r2, [r3, #4]
 801192a:	609a      	str	r2, [r3, #8]
 801192c:	60da      	str	r2, [r3, #12]
 801192e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4a4d      	ldr	r2, [pc, #308]	; (8011a6c <HAL_ETH_MspInit+0x154>)
 8011936:	4293      	cmp	r3, r2
 8011938:	f040 8093 	bne.w	8011a62 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801193c:	4b4c      	ldr	r3, [pc, #304]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801193e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011942:	4a4b      	ldr	r2, [pc, #300]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 8011944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011948:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801194c:	4b48      	ldr	r3, [pc, #288]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801194e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011956:	623b      	str	r3, [r7, #32]
 8011958:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801195a:	4b45      	ldr	r3, [pc, #276]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801195c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011960:	4a43      	ldr	r2, [pc, #268]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 8011962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011966:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801196a:	4b41      	ldr	r3, [pc, #260]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801196c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011974:	61fb      	str	r3, [r7, #28]
 8011976:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8011978:	4b3d      	ldr	r3, [pc, #244]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801197a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801197e:	4a3c      	ldr	r2, [pc, #240]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 8011980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011984:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011988:	4b39      	ldr	r3, [pc, #228]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801198a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011992:	61bb      	str	r3, [r7, #24]
 8011994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011996:	4b36      	ldr	r3, [pc, #216]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 8011998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801199c:	4a34      	ldr	r2, [pc, #208]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 801199e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80119a6:	4b32      	ldr	r3, [pc, #200]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80119ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80119b4:	4b2e      	ldr	r3, [pc, #184]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80119ba:	4a2d      	ldr	r2, [pc, #180]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119bc:	f043 0304 	orr.w	r3, r3, #4
 80119c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80119c4:	4b2a      	ldr	r3, [pc, #168]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80119ca:	f003 0304 	and.w	r3, r3, #4
 80119ce:	613b      	str	r3, [r7, #16]
 80119d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119d2:	4b27      	ldr	r3, [pc, #156]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80119d8:	4a25      	ldr	r2, [pc, #148]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119da:	f043 0301 	orr.w	r3, r3, #1
 80119de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80119e2:	4b23      	ldr	r3, [pc, #140]	; (8011a70 <HAL_ETH_MspInit+0x158>)
 80119e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	60fb      	str	r3, [r7, #12]
 80119ee:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80119f0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80119f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119f6:	2302      	movs	r3, #2
 80119f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119fa:	2300      	movs	r3, #0
 80119fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119fe:	2303      	movs	r3, #3
 8011a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011a02:	230b      	movs	r3, #11
 8011a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	4819      	ldr	r0, [pc, #100]	; (8011a74 <HAL_ETH_MspInit+0x15c>)
 8011a0e:	f7f8 f887 	bl	8009b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8011a12:	2332      	movs	r3, #50	; 0x32
 8011a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a16:	2302      	movs	r3, #2
 8011a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a1e:	2303      	movs	r3, #3
 8011a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011a22:	230b      	movs	r3, #11
 8011a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4812      	ldr	r0, [pc, #72]	; (8011a78 <HAL_ETH_MspInit+0x160>)
 8011a2e:	f7f8 f877 	bl	8009b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8011a32:	2386      	movs	r3, #134	; 0x86
 8011a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a36:	2302      	movs	r3, #2
 8011a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011a42:	230b      	movs	r3, #11
 8011a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	480b      	ldr	r0, [pc, #44]	; (8011a7c <HAL_ETH_MspInit+0x164>)
 8011a4e:	f7f8 f867 	bl	8009b20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8011a52:	2200      	movs	r2, #0
 8011a54:	2101      	movs	r1, #1
 8011a56:	203d      	movs	r0, #61	; 0x3d
 8011a58:	f7f3 ff57 	bl	800590a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011a5c:	203d      	movs	r0, #61	; 0x3d
 8011a5e:	f7f3 ff6e 	bl	800593e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011a62:	bf00      	nop
 8011a64:	3738      	adds	r7, #56	; 0x38
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	40028000 	.word	0x40028000
 8011a70:	58024400 	.word	0x58024400
 8011a74:	58021800 	.word	0x58021800
 8011a78:	58020800 	.word	0x58020800
 8011a7c:	58020000 	.word	0x58020000

08011a80 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011a90:	4b4a      	ldr	r3, [pc, #296]	; (8011bbc <low_level_init+0x13c>)
 8011a92:	4a4b      	ldr	r2, [pc, #300]	; (8011bc0 <low_level_init+0x140>)
 8011a94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8011a96:	2300      	movs	r3, #0
 8011a98:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8011a9a:	2380      	movs	r3, #128	; 0x80
 8011a9c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8011a9e:	23e1      	movs	r3, #225	; 0xe1
 8011aa0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8011aae:	4a43      	ldr	r2, [pc, #268]	; (8011bbc <low_level_init+0x13c>)
 8011ab0:	f107 030c 	add.w	r3, r7, #12
 8011ab4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8011ab6:	4b41      	ldr	r3, [pc, #260]	; (8011bbc <low_level_init+0x13c>)
 8011ab8:	2201      	movs	r2, #1
 8011aba:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011abc:	4b3f      	ldr	r3, [pc, #252]	; (8011bbc <low_level_init+0x13c>)
 8011abe:	4a41      	ldr	r2, [pc, #260]	; (8011bc4 <low_level_init+0x144>)
 8011ac0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011ac2:	4b3e      	ldr	r3, [pc, #248]	; (8011bbc <low_level_init+0x13c>)
 8011ac4:	4a40      	ldr	r2, [pc, #256]	; (8011bc8 <low_level_init+0x148>)
 8011ac6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8011ac8:	4b3c      	ldr	r3, [pc, #240]	; (8011bbc <low_level_init+0x13c>)
 8011aca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011ace:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011ad0:	483a      	ldr	r0, [pc, #232]	; (8011bbc <low_level_init+0x13c>)
 8011ad2:	f7f6 f9ad 	bl	8007e30 <HAL_ETH_Init>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011ada:	2234      	movs	r2, #52	; 0x34
 8011adc:	2100      	movs	r1, #0
 8011ade:	483b      	ldr	r0, [pc, #236]	; (8011bcc <low_level_init+0x14c>)
 8011ae0:	f00d f8f0 	bl	801ecc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8011ae4:	4b39      	ldr	r3, [pc, #228]	; (8011bcc <low_level_init+0x14c>)
 8011ae6:	2221      	movs	r2, #33	; 0x21
 8011ae8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011aea:	4b38      	ldr	r3, [pc, #224]	; (8011bcc <low_level_init+0x14c>)
 8011aec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011af0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8011af2:	4b36      	ldr	r3, [pc, #216]	; (8011bcc <low_level_init+0x14c>)
 8011af4:	2200      	movs	r2, #0
 8011af6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011af8:	4835      	ldr	r0, [pc, #212]	; (8011bd0 <low_level_init+0x150>)
 8011afa:	f003 ff1d 	bl	8015938 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2206      	movs	r2, #6
 8011b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011b06:	4b2d      	ldr	r3, [pc, #180]	; (8011bbc <low_level_init+0x13c>)
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	781a      	ldrb	r2, [r3, #0]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011b12:	4b2a      	ldr	r3, [pc, #168]	; (8011bbc <low_level_init+0x13c>)
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	785a      	ldrb	r2, [r3, #1]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011b1e:	4b27      	ldr	r3, [pc, #156]	; (8011bbc <low_level_init+0x13c>)
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	789a      	ldrb	r2, [r3, #2]
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011b2a:	4b24      	ldr	r3, [pc, #144]	; (8011bbc <low_level_init+0x13c>)
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	78da      	ldrb	r2, [r3, #3]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011b36:	4b21      	ldr	r3, [pc, #132]	; (8011bbc <low_level_init+0x13c>)
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	791a      	ldrb	r2, [r3, #4]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011b42:	4b1e      	ldr	r3, [pc, #120]	; (8011bbc <low_level_init+0x13c>)
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	795a      	ldrb	r2, [r3, #5]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b54:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b5c:	f043 030a 	orr.w	r3, r3, #10
 8011b60:	b2da      	uxtb	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8011b68:	2300      	movs	r3, #0
 8011b6a:	617b      	str	r3, [r7, #20]
 8011b6c:	e00e      	b.n	8011b8c <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011b74:	fb02 f303 	mul.w	r3, r2, r3
 8011b78:	4a16      	ldr	r2, [pc, #88]	; (8011bd4 <low_level_init+0x154>)
 8011b7a:	441a      	add	r2, r3
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	6979      	ldr	r1, [r7, #20]
 8011b80:	480e      	ldr	r0, [pc, #56]	; (8011bbc <low_level_init+0x13c>)
 8011b82:	f7f6 fa2f 	bl	8007fe4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	2b03      	cmp	r3, #3
 8011b90:	d9ed      	bls.n	8011b6e <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011b92:	4911      	ldr	r1, [pc, #68]	; (8011bd8 <low_level_init+0x158>)
 8011b94:	4811      	ldr	r0, [pc, #68]	; (8011bdc <low_level_init+0x15c>)
 8011b96:	f7f2 f9d4 	bl	8003f42 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8011b9a:	4810      	ldr	r0, [pc, #64]	; (8011bdc <low_level_init+0x15c>)
 8011b9c:	f7f2 fa03 	bl	8003fa6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8011ba0:	7cfb      	ldrb	r3, [r7, #19]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d103      	bne.n	8011bae <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f9d4 	bl	8011f54 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011bac:	e001      	b.n	8011bb2 <low_level_init+0x132>
    Error_Handler();
 8011bae:	f7f1 f92b 	bl	8002e08 <Error_Handler>
}
 8011bb2:	bf00      	nop
 8011bb4:	3718      	adds	r7, #24
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	24005a78 	.word	0x24005a78
 8011bc0:	40028000 	.word	0x40028000
 8011bc4:	30040060 	.word	0x30040060
 8011bc8:	30040000 	.word	0x30040000
 8011bcc:	24005b00 	.word	0x24005b00
 8011bd0:	08027cec 	.word	0x08027cec
 8011bd4:	30040200 	.word	0x30040200
 8011bd8:	24000010 	.word	0x24000010
 8011bdc:	24005a58 	.word	0x24005a58

08011be0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b092      	sub	sp, #72	; 0x48
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8011bea:	2300      	movs	r3, #0
 8011bec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011bf4:	f107 030c 	add.w	r3, r7, #12
 8011bf8:	2230      	movs	r2, #48	; 0x30
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f00d f861 	bl	801ecc4 <memset>

  for(q = p; q != NULL; q = q->next)
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	643b      	str	r3, [r7, #64]	; 0x40
 8011c06:	e049      	b.n	8011c9c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0a:	2b03      	cmp	r3, #3
 8011c0c:	d902      	bls.n	8011c14 <low_level_output+0x34>
      return ERR_IF;
 8011c0e:	f06f 030b 	mvn.w	r3, #11
 8011c12:	e056      	b.n	8011cc2 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8011c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c16:	6859      	ldr	r1, [r3, #4]
 8011c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	005b      	lsls	r3, r3, #1
 8011c1e:	4413      	add	r3, r2
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011c26:	4413      	add	r3, r2
 8011c28:	3b3c      	subs	r3, #60	; 0x3c
 8011c2a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c2e:	895b      	ldrh	r3, [r3, #10]
 8011c30:	4619      	mov	r1, r3
 8011c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c34:	4613      	mov	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4413      	add	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011c40:	4413      	add	r3, r2
 8011c42:	3b38      	subs	r3, #56	; 0x38
 8011c44:	6019      	str	r1, [r3, #0]

    if(i>0)
 8011c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d012      	beq.n	8011c72 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8011c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4e:	1e5a      	subs	r2, r3, #1
 8011c50:	f107 000c 	add.w	r0, r7, #12
 8011c54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011c56:	460b      	mov	r3, r1
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	440b      	add	r3, r1
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	18c1      	adds	r1, r0, r3
 8011c60:	4613      	mov	r3, r2
 8011c62:	005b      	lsls	r3, r3, #1
 8011c64:	4413      	add	r3, r2
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011c6c:	4413      	add	r3, r2
 8011c6e:	3b34      	subs	r3, #52	; 0x34
 8011c70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8011c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d10a      	bne.n	8011c90 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8011c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	005b      	lsls	r3, r3, #1
 8011c80:	4413      	add	r3, r2
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011c88:	4413      	add	r3, r2
 8011c8a:	3b34      	subs	r3, #52	; 0x34
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c92:	3301      	adds	r3, #1
 8011c94:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8011c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8011c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1b2      	bne.n	8011c08 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	891b      	ldrh	r3, [r3, #8]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	4b08      	ldr	r3, [pc, #32]	; (8011ccc <low_level_output+0xec>)
 8011caa:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011cac:	4a07      	ldr	r2, [pc, #28]	; (8011ccc <low_level_output+0xec>)
 8011cae:	f107 030c 	add.w	r3, r7, #12
 8011cb2:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8011cb4:	2214      	movs	r2, #20
 8011cb6:	4905      	ldr	r1, [pc, #20]	; (8011ccc <low_level_output+0xec>)
 8011cb8:	4805      	ldr	r0, [pc, #20]	; (8011cd0 <low_level_output+0xf0>)
 8011cba:	f7f6 fa80 	bl	80081be <HAL_ETH_Transmit>

  return errval;
 8011cbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3748      	adds	r7, #72	; 0x48
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	24005b00 	.word	0x24005b00
 8011cd0:	24005a78 	.word	0x24005a78

08011cd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b098      	sub	sp, #96	; 0x60
 8011cd8:	af02      	add	r7, sp, #8
 8011cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	60bb      	str	r3, [r7, #8]
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011ce8:	f107 030c 	add.w	r3, r7, #12
 8011cec:	2230      	movs	r2, #48	; 0x30
 8011cee:	2100      	movs	r1, #0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f00c ffe7 	bl	801ecc4 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8011cfa:	e015      	b.n	8011d28 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8011cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cfe:	1c5a      	adds	r2, r3, #1
 8011d00:	f107 010c 	add.w	r1, r7, #12
 8011d04:	4613      	mov	r3, r2
 8011d06:	005b      	lsls	r3, r3, #1
 8011d08:	4413      	add	r3, r2
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4419      	add	r1, r3
 8011d0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d10:	4613      	mov	r3, r2
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	4413      	add	r3, r2
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d1c:	4413      	add	r3, r2
 8011d1e:	3b44      	subs	r3, #68	; 0x44
 8011d20:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8011d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d24:	3301      	adds	r3, #1
 8011d26:	657b      	str	r3, [r7, #84]	; 0x54
 8011d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	d9e6      	bls.n	8011cfc <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8011d2e:	482b      	ldr	r0, [pc, #172]	; (8011ddc <low_level_input+0x108>)
 8011d30:	f7f6 face 	bl	80082d0 <HAL_ETH_IsRxDataAvailable>
 8011d34:	4603      	mov	r3, r0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d04a      	beq.n	8011dd0 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8011d3a:	f107 030c 	add.w	r3, r7, #12
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4826      	ldr	r0, [pc, #152]	; (8011ddc <low_level_input+0x108>)
 8011d42:	f7f6 fbb5 	bl	80084b0 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8011d46:	f107 0308 	add.w	r3, r7, #8
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4823      	ldr	r0, [pc, #140]	; (8011ddc <low_level_input+0x108>)
 8011d4e:	f7f6 fc4d 	bl	80085ec <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8011d52:	4822      	ldr	r0, [pc, #136]	; (8011ddc <low_level_input+0x108>)
 8011d54:	f7f6 fc7d 	bl	8008652 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	68ba      	ldr	r2, [r7, #8]
 8011d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d5e:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 8011d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	dd1d      	ble.n	8011da2 <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d68:	f003 021f 	and.w	r2, r3, #31
 8011d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d6e:	4413      	add	r3, r2
 8011d70:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8011d76:	f3bf 8f4f 	dsb	sy
}
 8011d7a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011d7c:	4a18      	ldr	r2, [pc, #96]	; (8011de0 <low_level_input+0x10c>)
 8011d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d80:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d86:	3320      	adds	r3, #32
 8011d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d8c:	3b20      	subs	r3, #32
 8011d8e:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8011d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	dcf2      	bgt.n	8011d7c <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d96:	f3bf 8f4f 	dsb	sy
}
 8011d9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d9c:	f3bf 8f6f 	isb	sy
}
 8011da0:	bf00      	nop
}
 8011da2:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8011da4:	480f      	ldr	r0, [pc, #60]	; (8011de4 <low_level_input+0x110>)
 8011da6:	f003 fe3b 	bl	8015a20 <memp_malloc_pool>
 8011daa:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8011dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dae:	4a0e      	ldr	r2, [pc, #56]	; (8011de8 <low_level_input+0x114>)
 8011db0:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	b299      	uxth	r1, r3
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	b292      	uxth	r2, r2
 8011dbc:	9201      	str	r2, [sp, #4]
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dc2:	2241      	movs	r2, #65	; 0x41
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	f004 fb79 	bl	80164bc <pbuf_alloced_custom>
 8011dca:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8011dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dce:	e000      	b.n	8011dd2 <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8011dd0:	2300      	movs	r3, #0
  }
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3758      	adds	r7, #88	; 0x58
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	24005a78 	.word	0x24005a78
 8011de0:	e000ed00 	.word	0xe000ed00
 8011de4:	08027cec 	.word	0x08027cec
 8011de8:	08011e89 	.word	0x08011e89

08011dec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff ff6d 	bl	8011cd4 <low_level_input>
 8011dfa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d010      	beq.n	8011e24 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	6879      	ldr	r1, [r7, #4]
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	4798      	blx	r3
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8011e10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d006      	beq.n	8011e26 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f004 fd09 	bl	8016830 <pbuf_free>
    p = NULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	e000      	b.n	8011e26 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8011e24:	bf00      	nop
  }

}
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d106      	bne.n	8011e48 <ethernetif_init+0x1c>
 8011e3a:	4b0e      	ldr	r3, [pc, #56]	; (8011e74 <ethernetif_init+0x48>)
 8011e3c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8011e40:	490d      	ldr	r1, [pc, #52]	; (8011e78 <ethernetif_init+0x4c>)
 8011e42:	480e      	ldr	r0, [pc, #56]	; (8011e7c <ethernetif_init+0x50>)
 8011e44:	f00d fe36 	bl	801fab4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2273      	movs	r2, #115	; 0x73
 8011e4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2274      	movs	r2, #116	; 0x74
 8011e54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4a09      	ldr	r2, [pc, #36]	; (8011e80 <ethernetif_init+0x54>)
 8011e5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4a08      	ldr	r2, [pc, #32]	; (8011e84 <ethernetif_init+0x58>)
 8011e62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7ff fe0b 	bl	8011a80 <low_level_init>

  return ERR_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	080249d8 	.word	0x080249d8
 8011e78:	080249f4 	.word	0x080249f4
 8011e7c:	08024a04 	.word	0x08024a04
 8011e80:	0801332d 	.word	0x0801332d
 8011e84:	08011be1 	.word	0x08011be1

08011e88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011e94:	68f9      	ldr	r1, [r7, #12]
 8011e96:	4803      	ldr	r0, [pc, #12]	; (8011ea4 <pbuf_free_custom+0x1c>)
 8011e98:	f003 fe30 	bl	8015afc <memp_free_pool>
}
 8011e9c:	bf00      	nop
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	08027cec 	.word	0x08027cec

08011ea8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011eac:	f7f2 fa30 	bl	8004310 <HAL_GetTick>
 8011eb0:	4603      	mov	r3, r0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	bd80      	pop	{r7, pc}
	...

08011eb8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8011ebc:	4802      	ldr	r0, [pc, #8]	; (8011ec8 <ETH_PHY_IO_Init+0x10>)
 8011ebe:	f7f7 f81d 	bl	8008efc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	24005a78 	.word	0x24005a78

08011ecc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	af00      	add	r7, sp, #0
  return 0;
 8011ed0:	2300      	movs	r3, #0
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	4807      	ldr	r0, [pc, #28]	; (8011f0c <ETH_PHY_IO_ReadReg+0x30>)
 8011ef0:	f7f6 fd6e 	bl	80089d0 <HAL_ETH_ReadPHYRegister>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8011efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011efe:	e000      	b.n	8011f02 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	24005a78 	.word	0x24005a78

08011f10 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	68f9      	ldr	r1, [r7, #12]
 8011f22:	4807      	ldr	r0, [pc, #28]	; (8011f40 <ETH_PHY_IO_WriteReg+0x30>)
 8011f24:	f7f6 fda8 	bl	8008a78 <HAL_ETH_WritePHYRegister>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d002      	beq.n	8011f34 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8011f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f32:	e000      	b.n	8011f36 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8011f34:	2300      	movs	r3, #0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	24005a78 	.word	0x24005a78

08011f44 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011f48:	f7f2 f9e2 	bl	8004310 <HAL_GetTick>
 8011f4c:	4603      	mov	r3, r0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b0a0      	sub	sp, #128	; 0x80
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f60:	2300      	movs	r3, #0
 8011f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f64:	2300      	movs	r3, #0
 8011f66:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011f68:	483a      	ldr	r0, [pc, #232]	; (8012054 <ethernet_link_check_state+0x100>)
 8011f6a:	f7f2 f8c4 	bl	80040f6 <LAN8742_GetLinkState>
 8011f6e:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f76:	089b      	lsrs	r3, r3, #2
 8011f78:	f003 0301 	and.w	r3, r3, #1
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d00c      	beq.n	8011f9c <ethernet_link_check_state+0x48>
 8011f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	dc09      	bgt.n	8011f9c <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 8011f88:	4833      	ldr	r0, [pc, #204]	; (8012058 <ethernet_link_check_state+0x104>)
 8011f8a:	f7f6 f8c8 	bl	800811e <HAL_ETH_Stop>
    netif_set_down(netif);
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f004 f838 	bl	8016004 <netif_set_down>
    netif_set_link_down(netif);
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f004 f89b 	bl	80160d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8011f9a:	e056      	b.n	801204a <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fa2:	f003 0304 	and.w	r3, r3, #4
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d14f      	bne.n	801204a <ethernet_link_check_state+0xf6>
 8011faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	dd4c      	ble.n	801204a <ethernet_link_check_state+0xf6>
 8011fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fb2:	3b02      	subs	r3, #2
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d82b      	bhi.n	8012010 <ethernet_link_check_state+0xbc>
 8011fb8:	a201      	add	r2, pc, #4	; (adr r2, 8011fc0 <ethernet_link_check_state+0x6c>)
 8011fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbe:	bf00      	nop
 8011fc0:	08011fd1 	.word	0x08011fd1
 8011fc4:	08011fe3 	.word	0x08011fe3
 8011fc8:	08011ff3 	.word	0x08011ff3
 8011fcc:	08012003 	.word	0x08012003
      duplex = ETH_FULLDUPLEX_MODE;
 8011fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011fd4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011fd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011fda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011fe0:	e017      	b.n	8012012 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011fea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011fec:	2301      	movs	r3, #1
 8011fee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011ff0:	e00f      	b.n	8012012 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8011ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ff6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012000:	e007      	b.n	8012012 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8012002:	2300      	movs	r3, #0
 8012004:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012006:	2300      	movs	r3, #0
 8012008:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801200a:	2301      	movs	r3, #1
 801200c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801200e:	e000      	b.n	8012012 <ethernet_link_check_state+0xbe>
      break;
 8012010:	bf00      	nop
    if(linkchanged)
 8012012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012014:	2b00      	cmp	r3, #0
 8012016:	d018      	beq.n	801204a <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012018:	f107 030c 	add.w	r3, r7, #12
 801201c:	4619      	mov	r1, r3
 801201e:	480e      	ldr	r0, [pc, #56]	; (8012058 <ethernet_link_check_state+0x104>)
 8012020:	f7f6 fd7e 	bl	8008b20 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8012024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012026:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8012028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801202a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801202c:	f107 030c 	add.w	r3, r7, #12
 8012030:	4619      	mov	r1, r3
 8012032:	4809      	ldr	r0, [pc, #36]	; (8012058 <ethernet_link_check_state+0x104>)
 8012034:	f7f6 ff48 	bl	8008ec8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8012038:	4807      	ldr	r0, [pc, #28]	; (8012058 <ethernet_link_check_state+0x104>)
 801203a:	f7f6 f814 	bl	8008066 <HAL_ETH_Start>
      netif_set_up(netif);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f003 ff74 	bl	8015f2c <netif_set_up>
      netif_set_link_up(netif);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f004 f80f 	bl	8016068 <netif_set_link_up>
}
 801204a:	bf00      	nop
 801204c:	3780      	adds	r7, #128	; 0x80
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	24005a58 	.word	0x24005a58
 8012058:	24005a78 	.word	0x24005a78

0801205c <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 801205c:	b590      	push	{r4, r7, lr}
 801205e:	ed2d 8b02 	vpush	{d8}
 8012062:	b0c7      	sub	sp, #284	; 0x11c
 8012064:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 8012066:	2300      	movs	r3, #0
 8012068:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t aRandom32bit = 0;
 801206c:	2300      	movs	r3, #0
 801206e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t FreqStr[256] = {0};
 8012072:	1d3b      	adds	r3, r7, #4
 8012074:	2200      	movs	r2, #0
 8012076:	601a      	str	r2, [r3, #0]
 8012078:	3304      	adds	r3, #4
 801207a:	22fc      	movs	r2, #252	; 0xfc
 801207c:	2100      	movs	r1, #0
 801207e:	4618      	mov	r0, r3
 8012080:	f00c fe20 	bl	801ecc4 <memset>

	//allocate the contiguous memory area for storage image data
	imageData = malloc(cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 8012084:	f00b fd36 	bl	801daf4 <cis_GetEffectivePixelNb>
 8012088:	4603      	mov	r3, r0
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4618      	mov	r0, r3
 801208e:	f00c fddb 	bl	801ec48 <malloc>
 8012092:	4603      	mov	r3, r0
 8012094:	461a      	mov	r2, r3
 8012096:	4b73      	ldr	r3, [pc, #460]	; (8012264 <synth_IfftInit+0x208>)
 8012098:	601a      	str	r2, [r3, #0]
	if (imageData == NULL)
 801209a:	4b72      	ldr	r3, [pc, #456]	; (8012264 <synth_IfftInit+0x208>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d101      	bne.n	80120a6 <synth_IfftInit+0x4a>
	{
		Error_Handler();
 80120a2:	f7f0 feb1 	bl	8002e08 <Error_Handler>
	}

	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80120a6:	4b6f      	ldr	r3, [pc, #444]	; (8012264 <synth_IfftInit+0x208>)
 80120a8:	681c      	ldr	r4, [r3, #0]
 80120aa:	f00b fd23 	bl	801daf4 <cis_GetEffectivePixelNb>
 80120ae:	4603      	mov	r3, r0
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	461a      	mov	r2, r3
 80120b4:	2100      	movs	r1, #0
 80120b6:	4620      	mov	r0, r4
 80120b8:	f00c fe04 	bl	801ecc4 <memset>

	buffer_len = init_waves(&unitary_waveform, waves);
 80120bc:	496a      	ldr	r1, [pc, #424]	; (8012268 <synth_IfftInit+0x20c>)
 80120be:	486b      	ldr	r0, [pc, #428]	; (801226c <synth_IfftInit+0x210>)
 80120c0:	f000 fb9e 	bl	8012800 <init_waves>
 80120c4:	4603      	mov	r3, r0
 80120c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 80120ca:	2300      	movs	r3, #0
 80120cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80120d0:	e037      	b.n	8012142 <synth_IfftInit+0xe6>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 80120d2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80120d6:	4619      	mov	r1, r3
 80120d8:	4865      	ldr	r0, [pc, #404]	; (8012270 <synth_IfftInit+0x214>)
 80120da:	f7fb f92e 	bl	800d33a <HAL_RNG_GenerateRandomNumber>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <synth_IfftInit+0x8c>
		{
			/* Random number generation error */
			Error_Handler();
 80120e4:	f7f0 fe90 	bl	8002e08 <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 80120e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80120ec:	485e      	ldr	r0, [pc, #376]	; (8012268 <synth_IfftInit+0x20c>)
 80120ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80120f2:	460b      	mov	r3, r1
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	440b      	add	r3, r1
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	4403      	add	r3, r0
 80120fc:	3306      	adds	r3, #6
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	fbb2 f1f3 	udiv	r1, r2, r3
 8012104:	fb03 f301 	mul.w	r3, r3, r1
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	b298      	uxth	r0, r3
 801210c:	4956      	ldr	r1, [pc, #344]	; (8012268 <synth_IfftInit+0x20c>)
 801210e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8012112:	4613      	mov	r3, r2
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	4413      	add	r3, r2
 8012118:	009b      	lsls	r3, r3, #2
 801211a:	440b      	add	r3, r1
 801211c:	3304      	adds	r3, #4
 801211e:	4602      	mov	r2, r0
 8012120:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 8012122:	4951      	ldr	r1, [pc, #324]	; (8012268 <synth_IfftInit+0x20c>)
 8012124:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8012128:	4613      	mov	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	330c      	adds	r3, #12
 8012134:	2200      	movs	r2, #0
 8012136:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 8012138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801213c:	3301      	adds	r3, #1
 801213e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012146:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 801214a:	d3c2      	bcc.n	80120d2 <synth_IfftInit+0x76>
	}

	if (buffer_len < 0)
 801214c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012150:	2b00      	cmp	r3, #0
 8012152:	da05      	bge.n	8012160 <synth_IfftInit+0x104>
	{
		printf("RAM overflow");
 8012154:	4847      	ldr	r0, [pc, #284]	; (8012274 <synth_IfftInit+0x218>)
 8012156:	f00d fcad 	bl	801fab4 <iprintf>
		return -1;
 801215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801215e:	e07a      	b.n	8012256 <synth_IfftInit+0x1fa>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 8012160:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8012164:	4844      	ldr	r0, [pc, #272]	; (8012278 <synth_IfftInit+0x21c>)
 8012166:	f00d fca5 	bl	801fab4 <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 801216a:	2300      	movs	r3, #0
 801216c:	9301      	str	r3, [sp, #4]
 801216e:	2305      	movs	r3, #5
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	2340      	movs	r3, #64	; 0x40
 8012174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012178:	2139      	movs	r1, #57	; 0x39
 801217a:	2000      	movs	r0, #0
 801217c:	f00c fa60 	bl	801e640 <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 8012180:	4b39      	ldr	r3, [pc, #228]	; (8012268 <synth_IfftInit+0x20c>)
 8012182:	edd3 7a04 	vldr	s15, [r3, #16]
 8012186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801218a:	4b37      	ldr	r3, [pc, #220]	; (8012268 <synth_IfftInit+0x20c>)
 801218c:	88db      	ldrh	r3, [r3, #6]
 801218e:	461a      	mov	r2, r3
 8012190:	4b35      	ldr	r3, [pc, #212]	; (8012268 <synth_IfftInit+0x20c>)
 8012192:	891b      	ldrh	r3, [r3, #8]
 8012194:	1d38      	adds	r0, r7, #4
 8012196:	9300      	str	r3, [sp, #0]
 8012198:	4613      	mov	r3, r2
 801219a:	ee17 2a90 	vmov	r2, s15
 801219e:	4937      	ldr	r1, [pc, #220]	; (801227c <synth_IfftInit+0x220>)
 80121a0:	f00d fd6c 	bl	801fc7c <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 80121a4:	1d3a      	adds	r2, r7, #4
 80121a6:	2308      	movs	r3, #8
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	2300      	movs	r3, #0
 80121ac:	2139      	movs	r1, #57	; 0x39
 80121ae:	2000      	movs	r0, #0
 80121b0:	f00c fba9 	bl	801e906 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 80121b4:	4a2c      	ldr	r2, [pc, #176]	; (8012268 <synth_IfftInit+0x20c>)
 80121b6:	f241 637c 	movw	r3, #5756	; 0x167c
 80121ba:	4413      	add	r3, r2
 80121bc:	edd3 7a00 	vldr	s15, [r3]
 80121c0:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80121c4:	4a28      	ldr	r2, [pc, #160]	; (8012268 <synth_IfftInit+0x20c>)
 80121c6:	f241 6372 	movw	r3, #5746	; 0x1672
 80121ca:	4413      	add	r3, r2
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	461c      	mov	r4, r3
 80121d0:	4a25      	ldr	r2, [pc, #148]	; (8012268 <synth_IfftInit+0x20c>)
 80121d2:	f241 6374 	movw	r3, #5748	; 0x1674
 80121d6:	4413      	add	r3, r2
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	ee07 3a90 	vmov	s15, r3
 80121de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80121e2:	eeb0 0b47 	vmov.f64	d0, d7
 80121e6:	f011 fcab 	bl	8023b40 <sqrt>
 80121ea:	eeb0 7b40 	vmov.f64	d7, d0
 80121ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80121f2:	ee17 3a90 	vmov	r3, s15
 80121f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80121fa:	4a1b      	ldr	r2, [pc, #108]	; (8012268 <synth_IfftInit+0x20c>)
 80121fc:	f241 6374 	movw	r3, #5748	; 0x1674
 8012200:	4413      	add	r3, r2
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	ee07 3a90 	vmov	s15, r3
 8012208:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801220c:	eeb0 0b47 	vmov.f64	d0, d7
 8012210:	f011 fc96 	bl	8023b40 <sqrt>
 8012214:	eeb0 7b40 	vmov.f64	d7, d0
 8012218:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801221c:	ee17 3a90 	vmov	r3, s15
 8012220:	1d38      	adds	r0, r7, #4
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	4623      	mov	r3, r4
 8012226:	ee18 2a10 	vmov	r2, s16
 801222a:	4914      	ldr	r1, [pc, #80]	; (801227c <synth_IfftInit+0x220>)
 801222c:	f00d fd26 	bl	801fc7c <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 8012230:	1d3a      	adds	r2, r7, #4
 8012232:	2308      	movs	r3, #8
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	2300      	movs	r3, #0
 8012238:	2139      	movs	r1, #57	; 0x39
 801223a:	2080      	movs	r0, #128	; 0x80
 801223c:	f00c fb63 	bl	801e906 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8012240:	f00c fc30 	bl	801eaa4 <ssd1362_writeFullBuffer>
	//		//				HAL_Delay(1);
	//	}
	//	printf("---- END ----");
#endif

	if (synth_AudioInit() == 0)
 8012244:	f000 f81c 	bl	8012280 <synth_AudioInit>
 8012248:	4603      	mov	r3, r0
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <synth_IfftInit+0x1f6>
		return 0;
 801224e:	2300      	movs	r3, #0
 8012250:	e001      	b.n	8012256 <synth_IfftInit+0x1fa>
	else
		return -1;
 8012252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012256:	4618      	mov	r0, r3
 8012258:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801225c:	46bd      	mov	sp, r7
 801225e:	ecbd 8b02 	vpop	{d8}
 8012262:	bd90      	pop	{r4, r7, pc}
 8012264:	24004ce0 	.word	0x24004ce0
 8012268:	2400365c 	.word	0x2400365c
 801226c:	24003658 	.word	0x24003658
 8012270:	24005580 	.word	0x24005580
 8012274:	08024a2c 	.word	0x08024a2c
 8012278:	08024a3c 	.word	0x08024a3c
 801227c:	08024a50 	.word	0x08024a50

08012280 <synth_AudioInit>:

int32_t synth_AudioInit(void)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 8012284:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <synth_AudioInit+0x20>)
 8012286:	2200      	movs	r2, #0
 8012288:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
 801228a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801228e:	4905      	ldr	r1, [pc, #20]	; (80122a4 <synth_AudioInit+0x24>)
 8012290:	4805      	ldr	r0, [pc, #20]	; (80122a8 <synth_AudioInit+0x28>)
 8012292:	f7fb fb73 	bl	800d97c <HAL_SAI_Transmit_DMA>

	return -1;
 8012296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801229a:	4618      	mov	r0, r3
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	24005b34 	.word	0x24005b34
 80122a4:	24004ce4 	.word	0x24004ce4
 80122a8:	2400560c 	.word	0x2400560c

080122ac <synth_GetAudioData>:
 * @brief  Get RFFT buffer data
 * @param  Index
 * @retval Value
 */
int16_t synth_GetAudioData(uint32_t index)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 80122b4:	4a04      	ldr	r2, [pc, #16]	; (80122c8 <synth_GetAudioData+0x1c>)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	24004ce4 	.word	0x24004ce4

080122cc <synth_SetImageData>:
 * @brief  Set Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_SetImageData(uint32_t index, uint16_t value)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	807b      	strh	r3, [r7, #2]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	imageData[index] = value;
 80122d8:	4b06      	ldr	r3, [pc, #24]	; (80122f4 <synth_SetImageData+0x28>)
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	887a      	ldrh	r2, [r7, #2]
 80122e4:	801a      	strh	r2, [r3, #0]
	return 0;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr
 80122f4:	24004ce0 	.word	0x24004ce0

080122f8 <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 8012304:	4b51      	ldr	r3, [pc, #324]	; (801244c <synth_IfftMode+0x154>)
 8012306:	2200      	movs	r2, #0
 8012308:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < NbrOfData)
 801230a:	e168      	b.n	80125de <synth_IfftMode+0x2e6>
	{
		signal_summation = 0;
 801230c:	4b50      	ldr	r3, [pc, #320]	; (8012450 <synth_IfftMode+0x158>)
 801230e:	2200      	movs	r2, #0
 8012310:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 8012312:	4b50      	ldr	r3, [pc, #320]	; (8012454 <synth_IfftMode+0x15c>)
 8012314:	2200      	movs	r2, #0
 8012316:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 8012318:	4b4f      	ldr	r3, [pc, #316]	; (8012458 <synth_IfftMode+0x160>)
 801231a:	2200      	movs	r2, #0
 801231c:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 801231e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8012322:	617b      	str	r3, [r7, #20]
 8012324:	e11f      	b.n	8012566 <synth_IfftMode+0x26e>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 8012326:	494d      	ldr	r1, [pc, #308]	; (801245c <synth_IfftMode+0x164>)
 8012328:	697a      	ldr	r2, [r7, #20]
 801232a:	4613      	mov	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	440b      	add	r3, r1
 8012334:	3304      	adds	r3, #4
 8012336:	8819      	ldrh	r1, [r3, #0]
 8012338:	4848      	ldr	r0, [pc, #288]	; (801245c <synth_IfftMode+0x164>)
 801233a:	697a      	ldr	r2, [r7, #20]
 801233c:	4613      	mov	r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	4413      	add	r3, r2
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	4403      	add	r3, r0
 8012346:	3308      	adds	r3, #8
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	440b      	add	r3, r1
 801234c:	b29a      	uxth	r2, r3
 801234e:	4b44      	ldr	r3, [pc, #272]	; (8012460 <synth_IfftMode+0x168>)
 8012350:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 8012352:	4942      	ldr	r1, [pc, #264]	; (801245c <synth_IfftMode+0x164>)
 8012354:	697a      	ldr	r2, [r7, #20]
 8012356:	4613      	mov	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4413      	add	r3, r2
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	440b      	add	r3, r1
 8012360:	3306      	adds	r3, #6
 8012362:	881a      	ldrh	r2, [r3, #0]
 8012364:	4b3e      	ldr	r3, [pc, #248]	; (8012460 <synth_IfftMode+0x168>)
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	429a      	cmp	r2, r3
 801236a:	d80e      	bhi.n	801238a <synth_IfftMode+0x92>
				new_idx -= waves[note].aera_size;
 801236c:	4b3c      	ldr	r3, [pc, #240]	; (8012460 <synth_IfftMode+0x168>)
 801236e:	8819      	ldrh	r1, [r3, #0]
 8012370:	483a      	ldr	r0, [pc, #232]	; (801245c <synth_IfftMode+0x164>)
 8012372:	697a      	ldr	r2, [r7, #20]
 8012374:	4613      	mov	r3, r2
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	4413      	add	r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	4403      	add	r3, r0
 801237e:	3306      	adds	r3, #6
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	1acb      	subs	r3, r1, r3
 8012384:	b29a      	uxth	r2, r3
 8012386:	4b36      	ldr	r3, [pc, #216]	; (8012460 <synth_IfftMode+0x168>)
 8012388:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 801238a:	697a      	ldr	r2, [r7, #20]
 801238c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012390:	4413      	add	r3, r2
 8012392:	005b      	lsls	r3, r3, #1
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	4413      	add	r3, r2
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	4619      	mov	r1, r3
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	4413      	add	r3, r2
 80123a4:	881b      	ldrh	r3, [r3, #0]
 80123a6:	1acb      	subs	r3, r1, r3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	dd11      	ble.n	80123d0 <synth_IfftMode+0xd8>
				current_image_data = imageData[note - 1] - imageData[note];
 80123ac:	697a      	ldr	r2, [r7, #20]
 80123ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80123b2:	4413      	add	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	4413      	add	r3, r2
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	4619      	mov	r1, r3
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	005b      	lsls	r3, r3, #1
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	4413      	add	r3, r2
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	1acb      	subs	r3, r1, r3
 80123ca:	4a26      	ldr	r2, [pc, #152]	; (8012464 <synth_IfftMode+0x16c>)
 80123cc:	6013      	str	r3, [r2, #0]
 80123ce:	e002      	b.n	80123d6 <synth_IfftMode+0xde>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 80123d0:	4b24      	ldr	r3, [pc, #144]	; (8012464 <synth_IfftMode+0x16c>)
 80123d2:	2200      	movs	r2, #0
 80123d4:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 80123d6:	4921      	ldr	r1, [pc, #132]	; (801245c <synth_IfftMode+0x164>)
 80123d8:	697a      	ldr	r2, [r7, #20]
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	440b      	add	r3, r1
 80123e4:	330c      	adds	r3, #12
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	4b1e      	ldr	r3, [pc, #120]	; (8012464 <synth_IfftMode+0x16c>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	da3b      	bge.n	8012468 <synth_IfftMode+0x170>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 80123f0:	491a      	ldr	r1, [pc, #104]	; (801245c <synth_IfftMode+0x164>)
 80123f2:	697a      	ldr	r2, [r7, #20]
 80123f4:	4613      	mov	r3, r2
 80123f6:	009b      	lsls	r3, r3, #2
 80123f8:	4413      	add	r3, r2
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	440b      	add	r3, r1
 80123fe:	330c      	adds	r3, #12
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8012406:	4815      	ldr	r0, [pc, #84]	; (801245c <synth_IfftMode+0x164>)
 8012408:	697a      	ldr	r2, [r7, #20]
 801240a:	4613      	mov	r3, r2
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	4413      	add	r3, r2
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	4403      	add	r3, r0
 8012414:	330c      	adds	r3, #12
 8012416:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 8012418:	4910      	ldr	r1, [pc, #64]	; (801245c <synth_IfftMode+0x164>)
 801241a:	697a      	ldr	r2, [r7, #20]
 801241c:	4613      	mov	r3, r2
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	4413      	add	r3, r2
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	440b      	add	r3, r1
 8012426:	330c      	adds	r3, #12
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	4b0e      	ldr	r3, [pc, #56]	; (8012464 <synth_IfftMode+0x16c>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	429a      	cmp	r2, r3
 8012430:	dd46      	ble.n	80124c0 <synth_IfftMode+0x1c8>
					waves[note].current_volume = current_image_data;
 8012432:	4b0c      	ldr	r3, [pc, #48]	; (8012464 <synth_IfftMode+0x16c>)
 8012434:	6819      	ldr	r1, [r3, #0]
 8012436:	4809      	ldr	r0, [pc, #36]	; (801245c <synth_IfftMode+0x164>)
 8012438:	697a      	ldr	r2, [r7, #20]
 801243a:	4613      	mov	r3, r2
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	4413      	add	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4403      	add	r3, r0
 8012444:	330c      	adds	r3, #12
 8012446:	6019      	str	r1, [r3, #0]
 8012448:	e03a      	b.n	80124c0 <synth_IfftMode+0x1c8>
 801244a:	bf00      	nop
 801244c:	240050e4 	.word	0x240050e4
 8012450:	240050e8 	.word	0x240050e8
 8012454:	240050ec 	.word	0x240050ec
 8012458:	240050f0 	.word	0x240050f0
 801245c:	2400365c 	.word	0x2400365c
 8012460:	240050f4 	.word	0x240050f4
 8012464:	240050f8 	.word	0x240050f8
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8012468:	4966      	ldr	r1, [pc, #408]	; (8012604 <synth_IfftMode+0x30c>)
 801246a:	697a      	ldr	r2, [r7, #20]
 801246c:	4613      	mov	r3, r2
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	009b      	lsls	r3, r3, #2
 8012474:	440b      	add	r3, r1
 8012476:	330c      	adds	r3, #12
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f1a3 0129 	sub.w	r1, r3, #41	; 0x29
 801247e:	4861      	ldr	r0, [pc, #388]	; (8012604 <synth_IfftMode+0x30c>)
 8012480:	697a      	ldr	r2, [r7, #20]
 8012482:	4613      	mov	r3, r2
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4413      	add	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	4403      	add	r3, r0
 801248c:	330c      	adds	r3, #12
 801248e:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 8012490:	495c      	ldr	r1, [pc, #368]	; (8012604 <synth_IfftMode+0x30c>)
 8012492:	697a      	ldr	r2, [r7, #20]
 8012494:	4613      	mov	r3, r2
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4413      	add	r3, r2
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	440b      	add	r3, r1
 801249e:	330c      	adds	r3, #12
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	4b59      	ldr	r3, [pc, #356]	; (8012608 <synth_IfftMode+0x310>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	da0a      	bge.n	80124c0 <synth_IfftMode+0x1c8>
					waves[note].current_volume = current_image_data;
 80124aa:	4b57      	ldr	r3, [pc, #348]	; (8012608 <synth_IfftMode+0x310>)
 80124ac:	6819      	ldr	r1, [r3, #0]
 80124ae:	4855      	ldr	r0, [pc, #340]	; (8012604 <synth_IfftMode+0x30c>)
 80124b0:	697a      	ldr	r2, [r7, #20]
 80124b2:	4613      	mov	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4403      	add	r3, r0
 80124bc:	330c      	adds	r3, #12
 80124be:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 80124c0:	4950      	ldr	r1, [pc, #320]	; (8012604 <synth_IfftMode+0x30c>)
 80124c2:	697a      	ldr	r2, [r7, #20]
 80124c4:	4613      	mov	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4413      	add	r3, r2
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	440b      	add	r3, r1
 80124ce:	330c      	adds	r3, #12
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	4b4e      	ldr	r3, [pc, #312]	; (801260c <synth_IfftMode+0x314>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	dd0a      	ble.n	80124f0 <synth_IfftMode+0x1f8>
				max_volume = waves[note].current_volume;
 80124da:	494a      	ldr	r1, [pc, #296]	; (8012604 <synth_IfftMode+0x30c>)
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	4613      	mov	r3, r2
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	4413      	add	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	440b      	add	r3, r1
 80124e8:	330c      	adds	r3, #12
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4a47      	ldr	r2, [pc, #284]	; (801260c <synth_IfftMode+0x314>)
 80124ee:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 80124f0:	4944      	ldr	r1, [pc, #272]	; (8012604 <synth_IfftMode+0x30c>)
 80124f2:	697a      	ldr	r2, [r7, #20]
 80124f4:	4613      	mov	r3, r2
 80124f6:	009b      	lsls	r3, r3, #2
 80124f8:	4413      	add	r3, r2
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	440b      	add	r3, r1
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	4b43      	ldr	r3, [pc, #268]	; (8012610 <synth_IfftMode+0x318>)
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	005b      	lsls	r3, r3, #1
 8012506:	4413      	add	r3, r2
 8012508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801250c:	4618      	mov	r0, r3
 801250e:	493d      	ldr	r1, [pc, #244]	; (8012604 <synth_IfftMode+0x30c>)
 8012510:	697a      	ldr	r2, [r7, #20]
 8012512:	4613      	mov	r3, r2
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	4413      	add	r3, r2
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	440b      	add	r3, r1
 801251c:	330c      	adds	r3, #12
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	fb03 f300 	mul.w	r3, r3, r0
 8012524:	141a      	asrs	r2, r3, #16
 8012526:	4b3b      	ldr	r3, [pc, #236]	; (8012614 <synth_IfftMode+0x31c>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4413      	add	r3, r2
 801252c:	4a39      	ldr	r2, [pc, #228]	; (8012614 <synth_IfftMode+0x31c>)
 801252e:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 8012530:	4934      	ldr	r1, [pc, #208]	; (8012604 <synth_IfftMode+0x30c>)
 8012532:	697a      	ldr	r2, [r7, #20]
 8012534:	4613      	mov	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	4413      	add	r3, r2
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	440b      	add	r3, r1
 801253e:	330c      	adds	r3, #12
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	461a      	mov	r2, r3
 8012544:	4b34      	ldr	r3, [pc, #208]	; (8012618 <synth_IfftMode+0x320>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4413      	add	r3, r2
 801254a:	4a33      	ldr	r2, [pc, #204]	; (8012618 <synth_IfftMode+0x320>)
 801254c:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 801254e:	4b30      	ldr	r3, [pc, #192]	; (8012610 <synth_IfftMode+0x318>)
 8012550:	8818      	ldrh	r0, [r3, #0]
 8012552:	492c      	ldr	r1, [pc, #176]	; (8012604 <synth_IfftMode+0x30c>)
 8012554:	697a      	ldr	r2, [r7, #20]
 8012556:	4613      	mov	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	440b      	add	r3, r1
 8012560:	3304      	adds	r3, #4
 8012562:	4602      	mov	r2, r0
 8012564:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	3b01      	subs	r3, #1
 801256a:	617b      	str	r3, [r7, #20]
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	2b00      	cmp	r3, #0
 8012570:	f73f aed9 	bgt.w	8012326 <synth_IfftMode+0x2e>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 8012574:	4b27      	ldr	r3, [pc, #156]	; (8012614 <synth_IfftMode+0x31c>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	ee07 3a90 	vmov	s15, r3
 801257c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012580:	4b22      	ldr	r3, [pc, #136]	; (801260c <synth_IfftMode+0x314>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	ee07 3a90 	vmov	s15, r3
 8012588:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801258c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8012590:	4b21      	ldr	r3, [pc, #132]	; (8012618 <synth_IfftMode+0x320>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	ee07 3a90 	vmov	s15, r3
 8012598:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801259c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80125a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80125a4:	ee17 3a90 	vmov	r3, s15
 80125a8:	b21a      	sxth	r2, r3
 80125aa:	4b1c      	ldr	r3, [pc, #112]	; (801261c <synth_IfftMode+0x324>)
 80125ac:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = rfft;		//L
 80125ae:	4b1c      	ldr	r3, [pc, #112]	; (8012620 <synth_IfftMode+0x328>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	005b      	lsls	r3, r3, #1
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	4413      	add	r3, r2
 80125b8:	4a18      	ldr	r2, [pc, #96]	; (801261c <synth_IfftMode+0x324>)
 80125ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80125be:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;	//R
 80125c0:	4b17      	ldr	r3, [pc, #92]	; (8012620 <synth_IfftMode+0x328>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	68ba      	ldr	r2, [r7, #8]
 80125ca:	4413      	add	r3, r2
 80125cc:	4a13      	ldr	r2, [pc, #76]	; (801261c <synth_IfftMode+0x324>)
 80125ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80125d2:	801a      	strh	r2, [r3, #0]
		write_data_nbr += 2;
 80125d4:	4b12      	ldr	r3, [pc, #72]	; (8012620 <synth_IfftMode+0x328>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	3302      	adds	r3, #2
 80125da:	4a11      	ldr	r2, [pc, #68]	; (8012620 <synth_IfftMode+0x328>)
 80125dc:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < NbrOfData)
 80125de:	4b10      	ldr	r3, [pc, #64]	; (8012620 <synth_IfftMode+0x328>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	f63f ae91 	bhi.w	801230c <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData / 2;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	085a      	lsrs	r2, r3, #1
 80125ee:	4b0d      	ldr	r3, [pc, #52]	; (8012624 <synth_IfftMode+0x32c>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4413      	add	r3, r2
 80125f4:	4a0b      	ldr	r2, [pc, #44]	; (8012624 <synth_IfftMode+0x32c>)
 80125f6:	6013      	str	r3, [r2, #0]
}
 80125f8:	bf00      	nop
 80125fa:	371c      	adds	r7, #28
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	2400365c 	.word	0x2400365c
 8012608:	240050f8 	.word	0x240050f8
 801260c:	240050f0 	.word	0x240050f0
 8012610:	240050f4 	.word	0x240050f4
 8012614:	240050e8 	.word	0x240050e8
 8012618:	240050ec 	.word	0x240050ec
 801261c:	240050fc 	.word	0x240050fc
 8012620:	240050e4 	.word	0x240050e4
 8012624:	24004cdc 	.word	0x24004cdc

08012628 <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08a      	sub	sp, #40	; 0x28
 801262c:	af00      	add	r7, sp, #0
 801262e:	4603      	mov	r3, r0
 8012630:	71fb      	strb	r3, [r7, #7]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_HALF)
 8012632:	4b40      	ldr	r3, [pc, #256]	; (8012734 <synth_AudioProcess+0x10c>)
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d139      	bne.n	80126ae <synth_AudioProcess+0x86>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 801263a:	4b3e      	ldr	r3, [pc, #248]	; (8012734 <synth_AudioProcess+0x10c>)
 801263c:	2200      	movs	r2, #0
 801263e:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8012640:	4b3d      	ldr	r3, [pc, #244]	; (8012738 <synth_AudioProcess+0x110>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4618      	mov	r0, r3
 8012646:	f00b fab1 	bl	801dbac <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 801264a:	79fb      	ldrb	r3, [r7, #7]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d107      	bne.n	8012660 <synth_AudioProcess+0x38>
			synth_IfftMode(imageData, &audioBuff[0], AUDIO_BUFFER_SIZE / 2);
 8012650:	4b39      	ldr	r3, [pc, #228]	; (8012738 <synth_AudioProcess+0x110>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012658:	4938      	ldr	r1, [pc, #224]	; (801273c <synth_AudioProcess+0x114>)
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff fe4c 	bl	80122f8 <synth_IfftMode>
 8012660:	4b36      	ldr	r3, [pc, #216]	; (801273c <synth_AudioProcess+0x114>)
 8012662:	627b      	str	r3, [r7, #36]	; 0x24
 8012664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012668:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 801266a:	6a3b      	ldr	r3, [r7, #32]
 801266c:	2b00      	cmp	r3, #0
 801266e:	dd1d      	ble.n	80126ac <synth_AudioProcess+0x84>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	f003 021f 	and.w	r2, r3, #31
 8012676:	6a3b      	ldr	r3, [r7, #32]
 8012678:	4413      	add	r3, r2
 801267a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8012680:	f3bf 8f4f 	dsb	sy
}
 8012684:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012686:	4a2e      	ldr	r2, [pc, #184]	; (8012740 <synth_AudioProcess+0x118>)
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	3320      	adds	r3, #32
 8012692:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	3b20      	subs	r3, #32
 8012698:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	2b00      	cmp	r3, #0
 801269e:	dcf2      	bgt.n	8012686 <synth_AudioProcess+0x5e>
  __ASM volatile ("dsb 0xF":::"memory");
 80126a0:	f3bf 8f4f 	dsb	sy
}
 80126a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80126a6:	f3bf 8f6f 	isb	sy
}
 80126aa:	bf00      	nop
}
 80126ac:	bf00      	nop
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_FULL)
 80126ae:	4b21      	ldr	r3, [pc, #132]	; (8012734 <synth_AudioProcess+0x10c>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d13a      	bne.n	801272c <synth_AudioProcess+0x104>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 80126b6:	4b1f      	ldr	r3, [pc, #124]	; (8012734 <synth_AudioProcess+0x10c>)
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 80126bc:	4b1e      	ldr	r3, [pc, #120]	; (8012738 <synth_AudioProcess+0x110>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f00b fa73 	bl	801dbac <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d107      	bne.n	80126dc <synth_AudioProcess+0xb4>
			synth_IfftMode(imageData, &audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2);
 80126cc:	4b1a      	ldr	r3, [pc, #104]	; (8012738 <synth_AudioProcess+0x110>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126d4:	491b      	ldr	r1, [pc, #108]	; (8012744 <synth_AudioProcess+0x11c>)
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff fe0e 	bl	80122f8 <synth_IfftMode>
 80126dc:	4b19      	ldr	r3, [pc, #100]	; (8012744 <synth_AudioProcess+0x11c>)
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126e4:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dd1d      	ble.n	8012728 <synth_AudioProcess+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	f003 021f 	and.w	r2, r3, #31
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	4413      	add	r3, r2
 80126f6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80126fc:	f3bf 8f4f 	dsb	sy
}
 8012700:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012702:	4a0f      	ldr	r2, [pc, #60]	; (8012740 <synth_AudioProcess+0x118>)
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	3320      	adds	r3, #32
 801270e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	3b20      	subs	r3, #32
 8012714:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b00      	cmp	r3, #0
 801271a:	dcf2      	bgt.n	8012702 <synth_AudioProcess+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 801271c:	f3bf 8f4f 	dsb	sy
}
 8012720:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012722:	f3bf 8f6f 	isb	sy
}
 8012726:	bf00      	nop
}
 8012728:	bf00      	nop
		//			else
		//				synth_PlayMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE);
	}
	return;
 801272a:	bf00      	nop
 801272c:	bf00      	nop
}
 801272e:	3728      	adds	r7, #40	; 0x28
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	24005b34 	.word	0x24005b34
 8012738:	24004ce0 	.word	0x24004ce0
 801273c:	24004ce4 	.word	0x24004ce4
 8012740:	e000ed00 	.word	0xe000ed00
 8012744:	24004ee4 	.word	0x24004ee4

08012748 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4a05      	ldr	r2, [pc, #20]	; (801276c <HAL_SAI_TxHalfCpltCallback+0x24>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d102      	bne.n	8012760 <HAL_SAI_TxHalfCpltCallback+0x18>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_HALF;
 801275a:	4b05      	ldr	r3, [pc, #20]	; (8012770 <HAL_SAI_TxHalfCpltCallback+0x28>)
 801275c:	2201      	movs	r2, #1
 801275e:	701a      	strb	r2, [r3, #0]
	}
}
 8012760:	bf00      	nop
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	40015804 	.word	0x40015804
 8012770:	24005b34 	.word	0x24005b34

08012774 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a05      	ldr	r2, [pc, #20]	; (8012798 <HAL_SAI_TxCpltCallback+0x24>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d102      	bne.n	801278c <HAL_SAI_TxCpltCallback+0x18>
	{
		/* allows AUDIO_Process() to refill 2nd part of the buffer  */
		bufferAudioState = AUDIO_BUFFER_OFFSET_FULL;
 8012786:	4b05      	ldr	r3, [pc, #20]	; (801279c <HAL_SAI_TxCpltCallback+0x28>)
 8012788:	2202      	movs	r2, #2
 801278a:	701a      	strb	r2, [r3, #0]
	}
}
 801278c:	bf00      	nop
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	40015804 	.word	0x40015804
 801279c:	24005b34 	.word	0x24005b34

080127a0 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 80127a8:	f04f 0300 	mov.w	r3, #0
 80127ac:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	ee07 3a90 	vmov	s15, r3
 80127b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80127b8:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80127f0 <calculate_frequency+0x50>
 80127bc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80127c0:	eeb0 1b46 	vmov.f64	d1, d6
 80127c4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80127c8:	f010 feae 	bl	8023528 <pow>
 80127cc:	eeb0 7b40 	vmov.f64	d7, d0
 80127d0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80127f8 <calculate_frequency+0x58>
 80127d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80127dc:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	ee07 3a90 	vmov	s15, r3
}
 80127e6:	eeb0 0a67 	vmov.f32	s0, s15
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	00000000 	.word	0x00000000
 80127f4:	404e0000 	.word	0x404e0000
 80127f8:	00000000 	.word	0x00000000
 80127fc:	40518000 	.word	0x40518000

08012800 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	ed2d 8b02 	vpush	{d8}
 8012806:	b08c      	sub	sp, #48	; 0x30
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 801280e:	2300      	movs	r3, #0
 8012810:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8012812:	2300      	movs	r3, #0
 8012814:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8012816:	2300      	movs	r3, #0
 8012818:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 801281a:	2300      	movs	r3, #0
 801281c:	623b      	str	r3, [r7, #32]
 801281e:	e014      	b.n	801284a <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8012820:	6a38      	ldr	r0, [r7, #32]
 8012822:	f7ff ffbd 	bl	80127a0 <calculate_frequency>
 8012826:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 801282a:	eddf 6a81 	vldr	s13, [pc, #516]	; 8012a30 <init_waves+0x230>
 801282e:	ed97 7a02 	vldr	s14, [r7, #8]
 8012832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801283a:	ee17 2a90 	vmov	r2, s15
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	4413      	add	r3, r2
 8012842:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8012844:	6a3b      	ldr	r3, [r7, #32]
 8012846:	3301      	adds	r3, #1
 8012848:	623b      	str	r3, [r7, #32]
 801284a:	6a3b      	ldr	r3, [r7, #32]
 801284c:	2b3b      	cmp	r3, #59	; 0x3b
 801284e:	d9e7      	bls.n	8012820 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	009b      	lsls	r3, r3, #2
 8012854:	4618      	mov	r0, r3
 8012856:	f00c f9f7 	bl	801ec48 <malloc>
 801285a:	4603      	mov	r3, r0
 801285c:	461a      	mov	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d101      	bne.n	801286e <init_waves+0x6e>
	{
		Error_Handler();
 801286a:	f7f0 facd 	bl	8002e08 <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 801286e:	2300      	movs	r3, #0
 8012870:	61fb      	str	r3, [r7, #28]
 8012872:	e0bf      	b.n	80129f4 <init_waves+0x1f4>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8012874:	69f8      	ldr	r0, [r7, #28]
 8012876:	f7ff ff93 	bl	80127a0 <calculate_frequency>
 801287a:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 801287e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8012a30 <init_waves+0x230>
 8012882:	ed97 7a04 	vldr	s14, [r7, #16]
 8012886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801288a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801288e:	ee17 3a90 	vmov	r3, s15
 8012892:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 8012894:	2300      	movs	r3, #0
 8012896:	61bb      	str	r3, [r7, #24]
 8012898:	e030      	b.n	80128fc <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 801289a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289e:	429a      	cmp	r2, r3
 80128a0:	d229      	bcs.n	80128f6 <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	ee07 3a90 	vmov	s15, r3
 80128a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80128ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80128b0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8012a20 <init_waves+0x220>
 80128b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	ee07 3a90 	vmov	s15, r3
 80128be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80128c2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80128c6:	eeb0 0b45 	vmov.f64	d0, d5
 80128ca:	f011 f8f1 	bl	8023ab0 <sin>
 80128ce:	eeb0 7b40 	vmov.f64	d7, d0
 80128d2:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8012a28 <init_waves+0x228>
 80128d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	4413      	add	r3, r2
 80128e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80128e8:	ee17 2a90 	vmov	r2, s15
 80128ec:	b212      	sxth	r2, r2
 80128ee:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 80128f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f2:	3301      	adds	r3, #1
 80128f4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	3301      	adds	r3, #1
 80128fa:	61bb      	str	r3, [r7, #24]
 80128fc:	69ba      	ldr	r2, [r7, #24]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	429a      	cmp	r2, r3
 8012902:	d3ca      	bcc.n	801289a <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8012904:	2300      	movs	r3, #0
 8012906:	617b      	str	r3, [r7, #20]
 8012908:	e06e      	b.n	80129e8 <init_waves+0x1e8>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 801290a:	697a      	ldr	r2, [r7, #20]
 801290c:	4613      	mov	r3, r2
 801290e:	011b      	lsls	r3, r3, #4
 8012910:	1a9b      	subs	r3, r3, r2
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	461a      	mov	r2, r3
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	4413      	add	r3, r2
 801291a:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8012922:	d25e      	bcs.n	80129e2 <init_waves+0x1e2>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8012924:	edd7 7a04 	vldr	s15, [r7, #16]
 8012928:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	ee07 3a90 	vmov	s15, r3
 8012932:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012936:	eeb0 1b47 	vmov.f64	d1, d7
 801293a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 801293e:	f010 fdf3 	bl	8023528 <pow>
 8012942:	eeb0 7b40 	vmov.f64	d7, d0
 8012946:	ee28 7b07 	vmul.f64	d7, d8, d7
 801294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801294c:	4613      	mov	r3, r2
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	4413      	add	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	461a      	mov	r2, r3
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	4413      	add	r3, r2
 801295a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801295e:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	ee07 3a90 	vmov	s15, r3
 8012968:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801296c:	eeb0 1b47 	vmov.f64	d1, d7
 8012970:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8012974:	f010 fdd8 	bl	8023528 <pow>
 8012978:	eeb0 7b40 	vmov.f64	d7, d0
 801297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297e:	4613      	mov	r3, r2
 8012980:	009b      	lsls	r3, r3, #2
 8012982:	4413      	add	r3, r2
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	461a      	mov	r2, r3
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	4413      	add	r3, r2
 801298c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8012990:	ee17 2a90 	vmov	r2, s15
 8012994:	b292      	uxth	r2, r2
 8012996:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 8012998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299a:	4613      	mov	r3, r2
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	4413      	add	r3, r2
 80129a0:	009b      	lsls	r3, r3, #2
 80129a2:	461a      	mov	r2, r3
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	4413      	add	r3, r2
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	b292      	uxth	r2, r2
 80129ac:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6818      	ldr	r0, [r3, #0]
 80129b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	0059      	lsls	r1, r3, #1
 80129ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129bc:	4613      	mov	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	461a      	mov	r2, r3
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	4413      	add	r3, r2
 80129ca:	1842      	adds	r2, r0, r1
 80129cc:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 80129ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129d0:	4613      	mov	r3, r2
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	4413      	add	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	461a      	mov	r2, r3
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	4413      	add	r3, r2
 80129de:	2200      	movs	r2, #0
 80129e0:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	3301      	adds	r3, #1
 80129e6:	617b      	str	r3, [r7, #20]
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2b0a      	cmp	r3, #10
 80129ec:	d98d      	bls.n	801290a <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	3301      	adds	r3, #1
 80129f2:	61fb      	str	r3, [r7, #28]
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	2b3b      	cmp	r3, #59	; 0x3b
 80129f8:	f67f af3c 	bls.w	8012874 <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8012a02:	d206      	bcs.n	8012a12 <init_waves+0x212>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	4619      	mov	r1, r3
 8012a08:	480a      	ldr	r0, [pc, #40]	; (8012a34 <init_waves+0x234>)
 8012a0a:	f00d f853 	bl	801fab4 <iprintf>
		Error_Handler();
 8012a0e:	f7f0 f9fb 	bl	8002e08 <Error_Handler>
	}

	return buffer_len;
 8012a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3730      	adds	r7, #48	; 0x30
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	ecbd 8b02 	vpop	{d8}
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	54442eea 	.word	0x54442eea
 8012a24:	400921fb 	.word	0x400921fb
 8012a28:	00000000 	.word	0x00000000
 8012a2c:	40dfffe0 	.word	0x40dfffe0
 8012a30:	473b8000 	.word	0x473b8000
 8012a34:	08024a60 	.word	0x08024a60

08012a38 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012a42:	88fb      	ldrh	r3, [r7, #6]
 8012a44:	021b      	lsls	r3, r3, #8
 8012a46:	b21a      	sxth	r2, r3
 8012a48:	88fb      	ldrh	r3, [r7, #6]
 8012a4a:	0a1b      	lsrs	r3, r3, #8
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	b21b      	sxth	r3, r3
 8012a50:	4313      	orrs	r3, r2
 8012a52:	b21b      	sxth	r3, r3
 8012a54:	b29b      	uxth	r3, r3
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr

08012a62 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012a62:	b480      	push	{r7}
 8012a64:	b083      	sub	sp, #12
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	061a      	lsls	r2, r3, #24
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	021b      	lsls	r3, r3, #8
 8012a72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012a76:	431a      	orrs	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	0a1b      	lsrs	r3, r3, #8
 8012a7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012a80:	431a      	orrs	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	0e1b      	lsrs	r3, r3, #24
 8012a86:	4313      	orrs	r3, r2
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012a9c:	4915      	ldr	r1, [pc, #84]	; (8012af4 <etharp_free_entry+0x60>)
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	4413      	add	r3, r2
 8012aa6:	00db      	lsls	r3, r3, #3
 8012aa8:	440b      	add	r3, r1
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d013      	beq.n	8012ad8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012ab0:	4910      	ldr	r1, [pc, #64]	; (8012af4 <etharp_free_entry+0x60>)
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	4413      	add	r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	440b      	add	r3, r1
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f003 feb5 	bl	8016830 <pbuf_free>
    arp_table[i].q = NULL;
 8012ac6:	490b      	ldr	r1, [pc, #44]	; (8012af4 <etharp_free_entry+0x60>)
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	440b      	add	r3, r1
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012ad8:	4906      	ldr	r1, [pc, #24]	; (8012af4 <etharp_free_entry+0x60>)
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	4613      	mov	r3, r2
 8012ade:	005b      	lsls	r3, r3, #1
 8012ae0:	4413      	add	r3, r2
 8012ae2:	00db      	lsls	r3, r3, #3
 8012ae4:	440b      	add	r3, r1
 8012ae6:	3314      	adds	r3, #20
 8012ae8:	2200      	movs	r2, #0
 8012aea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012aec:	bf00      	nop
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	24005100 	.word	0x24005100

08012af8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012afe:	2300      	movs	r3, #0
 8012b00:	607b      	str	r3, [r7, #4]
 8012b02:	e096      	b.n	8012c32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012b04:	494f      	ldr	r1, [pc, #316]	; (8012c44 <etharp_tmr+0x14c>)
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	4613      	mov	r3, r2
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	4413      	add	r3, r2
 8012b0e:	00db      	lsls	r3, r3, #3
 8012b10:	440b      	add	r3, r1
 8012b12:	3314      	adds	r3, #20
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012b18:	78fb      	ldrb	r3, [r7, #3]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 8086 	beq.w	8012c2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012b20:	4948      	ldr	r1, [pc, #288]	; (8012c44 <etharp_tmr+0x14c>)
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	4613      	mov	r3, r2
 8012b26:	005b      	lsls	r3, r3, #1
 8012b28:	4413      	add	r3, r2
 8012b2a:	00db      	lsls	r3, r3, #3
 8012b2c:	440b      	add	r3, r1
 8012b2e:	3312      	adds	r3, #18
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	3301      	adds	r3, #1
 8012b34:	b298      	uxth	r0, r3
 8012b36:	4943      	ldr	r1, [pc, #268]	; (8012c44 <etharp_tmr+0x14c>)
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	005b      	lsls	r3, r3, #1
 8012b3e:	4413      	add	r3, r2
 8012b40:	00db      	lsls	r3, r3, #3
 8012b42:	440b      	add	r3, r1
 8012b44:	3312      	adds	r3, #18
 8012b46:	4602      	mov	r2, r0
 8012b48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012b4a:	493e      	ldr	r1, [pc, #248]	; (8012c44 <etharp_tmr+0x14c>)
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	005b      	lsls	r3, r3, #1
 8012b52:	4413      	add	r3, r2
 8012b54:	00db      	lsls	r3, r3, #3
 8012b56:	440b      	add	r3, r1
 8012b58:	3312      	adds	r3, #18
 8012b5a:	881b      	ldrh	r3, [r3, #0]
 8012b5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012b60:	d215      	bcs.n	8012b8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b62:	4938      	ldr	r1, [pc, #224]	; (8012c44 <etharp_tmr+0x14c>)
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	4613      	mov	r3, r2
 8012b68:	005b      	lsls	r3, r3, #1
 8012b6a:	4413      	add	r3, r2
 8012b6c:	00db      	lsls	r3, r3, #3
 8012b6e:	440b      	add	r3, r1
 8012b70:	3314      	adds	r3, #20
 8012b72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d10e      	bne.n	8012b96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012b78:	4932      	ldr	r1, [pc, #200]	; (8012c44 <etharp_tmr+0x14c>)
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	440b      	add	r3, r1
 8012b86:	3312      	adds	r3, #18
 8012b88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b8a:	2b04      	cmp	r3, #4
 8012b8c:	d903      	bls.n	8012b96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f7ff ff80 	bl	8012a94 <etharp_free_entry>
 8012b94:	e04a      	b.n	8012c2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012b96:	492b      	ldr	r1, [pc, #172]	; (8012c44 <etharp_tmr+0x14c>)
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3314      	adds	r3, #20
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b03      	cmp	r3, #3
 8012baa:	d10a      	bne.n	8012bc2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012bac:	4925      	ldr	r1, [pc, #148]	; (8012c44 <etharp_tmr+0x14c>)
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	4413      	add	r3, r2
 8012bb6:	00db      	lsls	r3, r3, #3
 8012bb8:	440b      	add	r3, r1
 8012bba:	3314      	adds	r3, #20
 8012bbc:	2204      	movs	r2, #4
 8012bbe:	701a      	strb	r2, [r3, #0]
 8012bc0:	e034      	b.n	8012c2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012bc2:	4920      	ldr	r1, [pc, #128]	; (8012c44 <etharp_tmr+0x14c>)
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	4413      	add	r3, r2
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	440b      	add	r3, r1
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d10a      	bne.n	8012bee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012bd8:	491a      	ldr	r1, [pc, #104]	; (8012c44 <etharp_tmr+0x14c>)
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	4613      	mov	r3, r2
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	4413      	add	r3, r2
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	440b      	add	r3, r1
 8012be6:	3314      	adds	r3, #20
 8012be8:	2202      	movs	r2, #2
 8012bea:	701a      	strb	r2, [r3, #0]
 8012bec:	e01e      	b.n	8012c2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012bee:	4915      	ldr	r1, [pc, #84]	; (8012c44 <etharp_tmr+0x14c>)
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	005b      	lsls	r3, r3, #1
 8012bf6:	4413      	add	r3, r2
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	440b      	add	r3, r1
 8012bfc:	3314      	adds	r3, #20
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d113      	bne.n	8012c2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012c04:	490f      	ldr	r1, [pc, #60]	; (8012c44 <etharp_tmr+0x14c>)
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	4613      	mov	r3, r2
 8012c0a:	005b      	lsls	r3, r3, #1
 8012c0c:	4413      	add	r3, r2
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	440b      	add	r3, r1
 8012c12:	3308      	adds	r3, #8
 8012c14:	6818      	ldr	r0, [r3, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	4613      	mov	r3, r2
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	4413      	add	r3, r2
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	4a08      	ldr	r2, [pc, #32]	; (8012c44 <etharp_tmr+0x14c>)
 8012c22:	4413      	add	r3, r2
 8012c24:	3304      	adds	r3, #4
 8012c26:	4619      	mov	r1, r3
 8012c28:	f000 fe6e 	bl	8013908 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	607b      	str	r3, [r7, #4]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b09      	cmp	r3, #9
 8012c36:	f77f af65 	ble.w	8012b04 <etharp_tmr+0xc>
      }
    }
  }
}
 8012c3a:	bf00      	nop
 8012c3c:	bf00      	nop
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	24005100 	.word	0x24005100

08012c48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b08a      	sub	sp, #40	; 0x28
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	460b      	mov	r3, r1
 8012c52:	607a      	str	r2, [r7, #4]
 8012c54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012c56:	230a      	movs	r3, #10
 8012c58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012c5a:	230a      	movs	r3, #10
 8012c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012c5e:	230a      	movs	r3, #10
 8012c60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012c66:	230a      	movs	r3, #10
 8012c68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	83bb      	strh	r3, [r7, #28]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	837b      	strh	r3, [r7, #26]
 8012c72:	2300      	movs	r3, #0
 8012c74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c76:	2300      	movs	r3, #0
 8012c78:	843b      	strh	r3, [r7, #32]
 8012c7a:	e0ae      	b.n	8012dda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012c7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c80:	49a6      	ldr	r1, [pc, #664]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012c82:	4613      	mov	r3, r2
 8012c84:	005b      	lsls	r3, r3, #1
 8012c86:	4413      	add	r3, r2
 8012c88:	00db      	lsls	r3, r3, #3
 8012c8a:	440b      	add	r3, r1
 8012c8c:	3314      	adds	r3, #20
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012c92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012c96:	2b0a      	cmp	r3, #10
 8012c98:	d105      	bne.n	8012ca6 <etharp_find_entry+0x5e>
 8012c9a:	7dfb      	ldrb	r3, [r7, #23]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d102      	bne.n	8012ca6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012ca0:	8c3b      	ldrh	r3, [r7, #32]
 8012ca2:	847b      	strh	r3, [r7, #34]	; 0x22
 8012ca4:	e095      	b.n	8012dd2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012ca6:	7dfb      	ldrb	r3, [r7, #23]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f000 8092 	beq.w	8012dd2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012cae:	7dfb      	ldrb	r3, [r7, #23]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d009      	beq.n	8012cc8 <etharp_find_entry+0x80>
 8012cb4:	7dfb      	ldrb	r3, [r7, #23]
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d806      	bhi.n	8012cc8 <etharp_find_entry+0x80>
 8012cba:	4b99      	ldr	r3, [pc, #612]	; (8012f20 <etharp_find_entry+0x2d8>)
 8012cbc:	f240 1223 	movw	r2, #291	; 0x123
 8012cc0:	4998      	ldr	r1, [pc, #608]	; (8012f24 <etharp_find_entry+0x2dc>)
 8012cc2:	4899      	ldr	r0, [pc, #612]	; (8012f28 <etharp_find_entry+0x2e0>)
 8012cc4:	f00c fef6 	bl	801fab4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d020      	beq.n	8012d10 <etharp_find_entry+0xc8>
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6819      	ldr	r1, [r3, #0]
 8012cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cd6:	4891      	ldr	r0, [pc, #580]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012cd8:	4613      	mov	r3, r2
 8012cda:	005b      	lsls	r3, r3, #1
 8012cdc:	4413      	add	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	4403      	add	r3, r0
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4299      	cmp	r1, r3
 8012ce8:	d112      	bne.n	8012d10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00c      	beq.n	8012d0a <etharp_find_entry+0xc2>
 8012cf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cf4:	4989      	ldr	r1, [pc, #548]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	4413      	add	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	440b      	add	r3, r1
 8012d00:	3308      	adds	r3, #8
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d102      	bne.n	8012d10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012d0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d0e:	e100      	b.n	8012f12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012d10:	7dfb      	ldrb	r3, [r7, #23]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d140      	bne.n	8012d98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012d16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d1a:	4980      	ldr	r1, [pc, #512]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012d1c:	4613      	mov	r3, r2
 8012d1e:	005b      	lsls	r3, r3, #1
 8012d20:	4413      	add	r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	440b      	add	r3, r1
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d01a      	beq.n	8012d62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012d2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d30:	497a      	ldr	r1, [pc, #488]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012d32:	4613      	mov	r3, r2
 8012d34:	005b      	lsls	r3, r3, #1
 8012d36:	4413      	add	r3, r2
 8012d38:	00db      	lsls	r3, r3, #3
 8012d3a:	440b      	add	r3, r1
 8012d3c:	3312      	adds	r3, #18
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	8bba      	ldrh	r2, [r7, #28]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d845      	bhi.n	8012dd2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012d46:	8c3b      	ldrh	r3, [r7, #32]
 8012d48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012d4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d4e:	4973      	ldr	r1, [pc, #460]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012d50:	4613      	mov	r3, r2
 8012d52:	005b      	lsls	r3, r3, #1
 8012d54:	4413      	add	r3, r2
 8012d56:	00db      	lsls	r3, r3, #3
 8012d58:	440b      	add	r3, r1
 8012d5a:	3312      	adds	r3, #18
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	83bb      	strh	r3, [r7, #28]
 8012d60:	e037      	b.n	8012dd2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012d62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d66:	496d      	ldr	r1, [pc, #436]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012d68:	4613      	mov	r3, r2
 8012d6a:	005b      	lsls	r3, r3, #1
 8012d6c:	4413      	add	r3, r2
 8012d6e:	00db      	lsls	r3, r3, #3
 8012d70:	440b      	add	r3, r1
 8012d72:	3312      	adds	r3, #18
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	8b7a      	ldrh	r2, [r7, #26]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d82a      	bhi.n	8012dd2 <etharp_find_entry+0x18a>
            old_pending = i;
 8012d7c:	8c3b      	ldrh	r3, [r7, #32]
 8012d7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012d80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d84:	4965      	ldr	r1, [pc, #404]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012d86:	4613      	mov	r3, r2
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4413      	add	r3, r2
 8012d8c:	00db      	lsls	r3, r3, #3
 8012d8e:	440b      	add	r3, r1
 8012d90:	3312      	adds	r3, #18
 8012d92:	881b      	ldrh	r3, [r3, #0]
 8012d94:	837b      	strh	r3, [r7, #26]
 8012d96:	e01c      	b.n	8012dd2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012d98:	7dfb      	ldrb	r3, [r7, #23]
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d919      	bls.n	8012dd2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012da2:	495e      	ldr	r1, [pc, #376]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012da4:	4613      	mov	r3, r2
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	4413      	add	r3, r2
 8012daa:	00db      	lsls	r3, r3, #3
 8012dac:	440b      	add	r3, r1
 8012dae:	3312      	adds	r3, #18
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	8b3a      	ldrh	r2, [r7, #24]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d80c      	bhi.n	8012dd2 <etharp_find_entry+0x18a>
            old_stable = i;
 8012db8:	8c3b      	ldrh	r3, [r7, #32]
 8012dba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012dbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dc0:	4956      	ldr	r1, [pc, #344]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	4413      	add	r3, r2
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	440b      	add	r3, r1
 8012dcc:	3312      	adds	r3, #18
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dd2:	8c3b      	ldrh	r3, [r7, #32]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	843b      	strh	r3, [r7, #32]
 8012dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012dde:	2b09      	cmp	r3, #9
 8012de0:	f77f af4c 	ble.w	8012c7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012de4:	7afb      	ldrb	r3, [r7, #11]
 8012de6:	f003 0302 	and.w	r3, r3, #2
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d108      	bne.n	8012e00 <etharp_find_entry+0x1b8>
 8012dee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012df2:	2b0a      	cmp	r3, #10
 8012df4:	d107      	bne.n	8012e06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012df6:	7afb      	ldrb	r3, [r7, #11]
 8012df8:	f003 0301 	and.w	r3, r3, #1
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d102      	bne.n	8012e06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e04:	e085      	b.n	8012f12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012e06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012e0a:	2b09      	cmp	r3, #9
 8012e0c:	dc02      	bgt.n	8012e14 <etharp_find_entry+0x1cc>
    i = empty;
 8012e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e10:	843b      	strh	r3, [r7, #32]
 8012e12:	e039      	b.n	8012e88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012e14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012e18:	2b09      	cmp	r3, #9
 8012e1a:	dc14      	bgt.n	8012e46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e24:	493d      	ldr	r1, [pc, #244]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012e26:	4613      	mov	r3, r2
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	4413      	add	r3, r2
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	440b      	add	r3, r1
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d018      	beq.n	8012e68 <etharp_find_entry+0x220>
 8012e36:	4b3a      	ldr	r3, [pc, #232]	; (8012f20 <etharp_find_entry+0x2d8>)
 8012e38:	f240 126d 	movw	r2, #365	; 0x16d
 8012e3c:	493b      	ldr	r1, [pc, #236]	; (8012f2c <etharp_find_entry+0x2e4>)
 8012e3e:	483a      	ldr	r0, [pc, #232]	; (8012f28 <etharp_find_entry+0x2e0>)
 8012e40:	f00c fe38 	bl	801fab4 <iprintf>
 8012e44:	e010      	b.n	8012e68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012e46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012e4a:	2b09      	cmp	r3, #9
 8012e4c:	dc02      	bgt.n	8012e54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012e4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e50:	843b      	strh	r3, [r7, #32]
 8012e52:	e009      	b.n	8012e68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012e54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012e58:	2b09      	cmp	r3, #9
 8012e5a:	dc02      	bgt.n	8012e62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012e5c:	8bfb      	ldrh	r3, [r7, #30]
 8012e5e:	843b      	strh	r3, [r7, #32]
 8012e60:	e002      	b.n	8012e68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e66:	e054      	b.n	8012f12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012e68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e6c:	2b09      	cmp	r3, #9
 8012e6e:	dd06      	ble.n	8012e7e <etharp_find_entry+0x236>
 8012e70:	4b2b      	ldr	r3, [pc, #172]	; (8012f20 <etharp_find_entry+0x2d8>)
 8012e72:	f240 127f 	movw	r2, #383	; 0x17f
 8012e76:	492e      	ldr	r1, [pc, #184]	; (8012f30 <etharp_find_entry+0x2e8>)
 8012e78:	482b      	ldr	r0, [pc, #172]	; (8012f28 <etharp_find_entry+0x2e0>)
 8012e7a:	f00c fe1b 	bl	801fab4 <iprintf>
    etharp_free_entry(i);
 8012e7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fe06 	bl	8012a94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012e88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e8c:	2b09      	cmp	r3, #9
 8012e8e:	dd06      	ble.n	8012e9e <etharp_find_entry+0x256>
 8012e90:	4b23      	ldr	r3, [pc, #140]	; (8012f20 <etharp_find_entry+0x2d8>)
 8012e92:	f240 1283 	movw	r2, #387	; 0x183
 8012e96:	4926      	ldr	r1, [pc, #152]	; (8012f30 <etharp_find_entry+0x2e8>)
 8012e98:	4823      	ldr	r0, [pc, #140]	; (8012f28 <etharp_find_entry+0x2e0>)
 8012e9a:	f00c fe0b 	bl	801fab4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ea2:	491e      	ldr	r1, [pc, #120]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	005b      	lsls	r3, r3, #1
 8012ea8:	4413      	add	r3, r2
 8012eaa:	00db      	lsls	r3, r3, #3
 8012eac:	440b      	add	r3, r1
 8012eae:	3314      	adds	r3, #20
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d006      	beq.n	8012ec4 <etharp_find_entry+0x27c>
 8012eb6:	4b1a      	ldr	r3, [pc, #104]	; (8012f20 <etharp_find_entry+0x2d8>)
 8012eb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012ebc:	491d      	ldr	r1, [pc, #116]	; (8012f34 <etharp_find_entry+0x2ec>)
 8012ebe:	481a      	ldr	r0, [pc, #104]	; (8012f28 <etharp_find_entry+0x2e0>)
 8012ec0:	f00c fdf8 	bl	801fab4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00b      	beq.n	8012ee2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6819      	ldr	r1, [r3, #0]
 8012ed2:	4812      	ldr	r0, [pc, #72]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	4403      	add	r3, r0
 8012ede:	3304      	adds	r3, #4
 8012ee0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012ee2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ee6:	490d      	ldr	r1, [pc, #52]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012ee8:	4613      	mov	r3, r2
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	4413      	add	r3, r2
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	440b      	add	r3, r1
 8012ef2:	3312      	adds	r3, #18
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012ef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012efc:	4907      	ldr	r1, [pc, #28]	; (8012f1c <etharp_find_entry+0x2d4>)
 8012efe:	4613      	mov	r3, r2
 8012f00:	005b      	lsls	r3, r3, #1
 8012f02:	4413      	add	r3, r2
 8012f04:	00db      	lsls	r3, r3, #3
 8012f06:	440b      	add	r3, r1
 8012f08:	3308      	adds	r3, #8
 8012f0a:	687a      	ldr	r2, [r7, #4]
 8012f0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012f0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3728      	adds	r7, #40	; 0x28
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	24005100 	.word	0x24005100
 8012f20:	08024a88 	.word	0x08024a88
 8012f24:	08024aec 	.word	0x08024aec
 8012f28:	08024b2c 	.word	0x08024b2c
 8012f2c:	08024b54 	.word	0x08024b54
 8012f30:	08024b6c 	.word	0x08024b6c
 8012f34:	08024b80 	.word	0x08024b80

08012f38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af02      	add	r7, sp, #8
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f4c:	2b06      	cmp	r3, #6
 8012f4e:	d006      	beq.n	8012f5e <etharp_update_arp_entry+0x26>
 8012f50:	4b48      	ldr	r3, [pc, #288]	; (8013074 <etharp_update_arp_entry+0x13c>)
 8012f52:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012f56:	4948      	ldr	r1, [pc, #288]	; (8013078 <etharp_update_arp_entry+0x140>)
 8012f58:	4848      	ldr	r0, [pc, #288]	; (801307c <etharp_update_arp_entry+0x144>)
 8012f5a:	f00c fdab 	bl	801fab4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d012      	beq.n	8012f8a <etharp_update_arp_entry+0x52>
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d00e      	beq.n	8012f8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	68f9      	ldr	r1, [r7, #12]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f001 facc 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8012f78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d105      	bne.n	8012f8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f86:	2be0      	cmp	r3, #224	; 0xe0
 8012f88:	d102      	bne.n	8012f90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012f8a:	f06f 030f 	mvn.w	r3, #15
 8012f8e:	e06c      	b.n	801306a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012f90:	78fb      	ldrb	r3, [r7, #3]
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	4619      	mov	r1, r3
 8012f96:	68b8      	ldr	r0, [r7, #8]
 8012f98:	f7ff fe56 	bl	8012c48 <etharp_find_entry>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012fa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	da02      	bge.n	8012fae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012fa8:	8afb      	ldrh	r3, [r7, #22]
 8012faa:	b25b      	sxtb	r3, r3
 8012fac:	e05d      	b.n	801306a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012fae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fb2:	4933      	ldr	r1, [pc, #204]	; (8013080 <etharp_update_arp_entry+0x148>)
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	00db      	lsls	r3, r3, #3
 8012fbc:	440b      	add	r3, r1
 8012fbe:	3314      	adds	r3, #20
 8012fc0:	2202      	movs	r2, #2
 8012fc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012fc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fc8:	492d      	ldr	r1, [pc, #180]	; (8013080 <etharp_update_arp_entry+0x148>)
 8012fca:	4613      	mov	r3, r2
 8012fcc:	005b      	lsls	r3, r3, #1
 8012fce:	4413      	add	r3, r2
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	440b      	add	r3, r1
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012fda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	4413      	add	r3, r2
 8012fe4:	00db      	lsls	r3, r3, #3
 8012fe6:	3308      	adds	r3, #8
 8012fe8:	4a25      	ldr	r2, [pc, #148]	; (8013080 <etharp_update_arp_entry+0x148>)
 8012fea:	4413      	add	r3, r2
 8012fec:	3304      	adds	r3, #4
 8012fee:	2206      	movs	r2, #6
 8012ff0:	6879      	ldr	r1, [r7, #4]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f00b fe3e 	bl	801ec74 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ffc:	4920      	ldr	r1, [pc, #128]	; (8013080 <etharp_update_arp_entry+0x148>)
 8012ffe:	4613      	mov	r3, r2
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	4413      	add	r3, r2
 8013004:	00db      	lsls	r3, r3, #3
 8013006:	440b      	add	r3, r1
 8013008:	3312      	adds	r3, #18
 801300a:	2200      	movs	r2, #0
 801300c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801300e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013012:	491b      	ldr	r1, [pc, #108]	; (8013080 <etharp_update_arp_entry+0x148>)
 8013014:	4613      	mov	r3, r2
 8013016:	005b      	lsls	r3, r3, #1
 8013018:	4413      	add	r3, r2
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	440b      	add	r3, r1
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d021      	beq.n	8013068 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013028:	4915      	ldr	r1, [pc, #84]	; (8013080 <etharp_update_arp_entry+0x148>)
 801302a:	4613      	mov	r3, r2
 801302c:	005b      	lsls	r3, r3, #1
 801302e:	4413      	add	r3, r2
 8013030:	00db      	lsls	r3, r3, #3
 8013032:	440b      	add	r3, r1
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801303c:	4910      	ldr	r1, [pc, #64]	; (8013080 <etharp_update_arp_entry+0x148>)
 801303e:	4613      	mov	r3, r2
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4413      	add	r3, r2
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	440b      	add	r3, r1
 8013048:	2200      	movs	r2, #0
 801304a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6939      	ldr	r1, [r7, #16]
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 fcf3 	bl	8013a48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013062:	6938      	ldr	r0, [r7, #16]
 8013064:	f003 fbe4 	bl	8016830 <pbuf_free>
  }
  return ERR_OK;
 8013068:	2300      	movs	r3, #0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	08024a88 	.word	0x08024a88
 8013078:	08024bac 	.word	0x08024bac
 801307c:	08024b2c 	.word	0x08024b2c
 8013080:	24005100 	.word	0x24005100

08013084 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801308c:	2300      	movs	r3, #0
 801308e:	60fb      	str	r3, [r7, #12]
 8013090:	e01e      	b.n	80130d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013092:	4913      	ldr	r1, [pc, #76]	; (80130e0 <etharp_cleanup_netif+0x5c>)
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	4613      	mov	r3, r2
 8013098:	005b      	lsls	r3, r3, #1
 801309a:	4413      	add	r3, r2
 801309c:	00db      	lsls	r3, r3, #3
 801309e:	440b      	add	r3, r1
 80130a0:	3314      	adds	r3, #20
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80130a6:	7afb      	ldrb	r3, [r7, #11]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d00e      	beq.n	80130ca <etharp_cleanup_netif+0x46>
 80130ac:	490c      	ldr	r1, [pc, #48]	; (80130e0 <etharp_cleanup_netif+0x5c>)
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	4613      	mov	r3, r2
 80130b2:	005b      	lsls	r3, r3, #1
 80130b4:	4413      	add	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	440b      	add	r3, r1
 80130ba:	3308      	adds	r3, #8
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d102      	bne.n	80130ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80130c4:	68f8      	ldr	r0, [r7, #12]
 80130c6:	f7ff fce5 	bl	8012a94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	3301      	adds	r3, #1
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b09      	cmp	r3, #9
 80130d4:	dddd      	ble.n	8013092 <etharp_cleanup_netif+0xe>
    }
  }
}
 80130d6:	bf00      	nop
 80130d8:	bf00      	nop
 80130da:	3710      	adds	r7, #16
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	24005100 	.word	0x24005100

080130e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80130e4:	b5b0      	push	{r4, r5, r7, lr}
 80130e6:	b08a      	sub	sp, #40	; 0x28
 80130e8:	af04      	add	r7, sp, #16
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d107      	bne.n	8013104 <etharp_input+0x20>
 80130f4:	4b3d      	ldr	r3, [pc, #244]	; (80131ec <etharp_input+0x108>)
 80130f6:	f240 228a 	movw	r2, #650	; 0x28a
 80130fa:	493d      	ldr	r1, [pc, #244]	; (80131f0 <etharp_input+0x10c>)
 80130fc:	483d      	ldr	r0, [pc, #244]	; (80131f4 <etharp_input+0x110>)
 80130fe:	f00c fcd9 	bl	801fab4 <iprintf>
 8013102:	e06f      	b.n	80131e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	b29b      	uxth	r3, r3
 8013110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013114:	d10c      	bne.n	8013130 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801311a:	2b06      	cmp	r3, #6
 801311c:	d108      	bne.n	8013130 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013122:	2b04      	cmp	r3, #4
 8013124:	d104      	bne.n	8013130 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	885b      	ldrh	r3, [r3, #2]
 801312a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801312c:	2b08      	cmp	r3, #8
 801312e:	d003      	beq.n	8013138 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f003 fb7d 	bl	8016830 <pbuf_free>
    return;
 8013136:	e055      	b.n	80131e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	330e      	adds	r3, #14
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	3318      	adds	r3, #24
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	3304      	adds	r3, #4
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <etharp_input+0x74>
    for_us = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	75fb      	strb	r3, [r7, #23]
 8013156:	e009      	b.n	801316c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	3304      	adds	r3, #4
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	429a      	cmp	r2, r3
 8013162:	bf0c      	ite	eq
 8013164:	2301      	moveq	r3, #1
 8013166:	2300      	movne	r3, #0
 8013168:	b2db      	uxtb	r3, r3
 801316a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	f103 0208 	add.w	r2, r3, #8
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d001      	beq.n	801317c <etharp_input+0x98>
 8013178:	2301      	movs	r3, #1
 801317a:	e000      	b.n	801317e <etharp_input+0x9a>
 801317c:	2302      	movs	r3, #2
 801317e:	f107 010c 	add.w	r1, r7, #12
 8013182:	6838      	ldr	r0, [r7, #0]
 8013184:	f7ff fed8 	bl	8012f38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	88db      	ldrh	r3, [r3, #6]
 801318c:	b29b      	uxth	r3, r3
 801318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013192:	d003      	beq.n	801319c <etharp_input+0xb8>
 8013194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013198:	d01e      	beq.n	80131d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801319a:	e020      	b.n	80131de <etharp_input+0xfa>
      if (for_us) {
 801319c:	7dfb      	ldrb	r3, [r7, #23]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d01c      	beq.n	80131dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80131b8:	693a      	ldr	r2, [r7, #16]
 80131ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80131bc:	2102      	movs	r1, #2
 80131be:	9103      	str	r1, [sp, #12]
 80131c0:	f107 010c 	add.w	r1, r7, #12
 80131c4:	9102      	str	r1, [sp, #8]
 80131c6:	9201      	str	r2, [sp, #4]
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	462b      	mov	r3, r5
 80131cc:	4622      	mov	r2, r4
 80131ce:	4601      	mov	r1, r0
 80131d0:	6838      	ldr	r0, [r7, #0]
 80131d2:	f000 faeb 	bl	80137ac <etharp_raw>
      break;
 80131d6:	e001      	b.n	80131dc <etharp_input+0xf8>
      break;
 80131d8:	bf00      	nop
 80131da:	e000      	b.n	80131de <etharp_input+0xfa>
      break;
 80131dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f003 fb26 	bl	8016830 <pbuf_free>
}
 80131e4:	3718      	adds	r7, #24
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bdb0      	pop	{r4, r5, r7, pc}
 80131ea:	bf00      	nop
 80131ec:	08024a88 	.word	0x08024a88
 80131f0:	08024c04 	.word	0x08024c04
 80131f4:	08024b2c 	.word	0x08024b2c

080131f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af02      	add	r7, sp, #8
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	4613      	mov	r3, r2
 8013204:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013206:	79fa      	ldrb	r2, [r7, #7]
 8013208:	4944      	ldr	r1, [pc, #272]	; (801331c <etharp_output_to_arp_index+0x124>)
 801320a:	4613      	mov	r3, r2
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	4413      	add	r3, r2
 8013210:	00db      	lsls	r3, r3, #3
 8013212:	440b      	add	r3, r1
 8013214:	3314      	adds	r3, #20
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d806      	bhi.n	801322a <etharp_output_to_arp_index+0x32>
 801321c:	4b40      	ldr	r3, [pc, #256]	; (8013320 <etharp_output_to_arp_index+0x128>)
 801321e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013222:	4940      	ldr	r1, [pc, #256]	; (8013324 <etharp_output_to_arp_index+0x12c>)
 8013224:	4840      	ldr	r0, [pc, #256]	; (8013328 <etharp_output_to_arp_index+0x130>)
 8013226:	f00c fc45 	bl	801fab4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801322a:	79fa      	ldrb	r2, [r7, #7]
 801322c:	493b      	ldr	r1, [pc, #236]	; (801331c <etharp_output_to_arp_index+0x124>)
 801322e:	4613      	mov	r3, r2
 8013230:	005b      	lsls	r3, r3, #1
 8013232:	4413      	add	r3, r2
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	440b      	add	r3, r1
 8013238:	3314      	adds	r3, #20
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b02      	cmp	r3, #2
 801323e:	d153      	bne.n	80132e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013240:	79fa      	ldrb	r2, [r7, #7]
 8013242:	4936      	ldr	r1, [pc, #216]	; (801331c <etharp_output_to_arp_index+0x124>)
 8013244:	4613      	mov	r3, r2
 8013246:	005b      	lsls	r3, r3, #1
 8013248:	4413      	add	r3, r2
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	440b      	add	r3, r1
 801324e:	3312      	adds	r3, #18
 8013250:	881b      	ldrh	r3, [r3, #0]
 8013252:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013256:	d919      	bls.n	801328c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013258:	79fa      	ldrb	r2, [r7, #7]
 801325a:	4613      	mov	r3, r2
 801325c:	005b      	lsls	r3, r3, #1
 801325e:	4413      	add	r3, r2
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	4a2e      	ldr	r2, [pc, #184]	; (801331c <etharp_output_to_arp_index+0x124>)
 8013264:	4413      	add	r3, r2
 8013266:	3304      	adds	r3, #4
 8013268:	4619      	mov	r1, r3
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f000 fb4c 	bl	8013908 <etharp_request>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d138      	bne.n	80132e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013276:	79fa      	ldrb	r2, [r7, #7]
 8013278:	4928      	ldr	r1, [pc, #160]	; (801331c <etharp_output_to_arp_index+0x124>)
 801327a:	4613      	mov	r3, r2
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	4413      	add	r3, r2
 8013280:	00db      	lsls	r3, r3, #3
 8013282:	440b      	add	r3, r1
 8013284:	3314      	adds	r3, #20
 8013286:	2203      	movs	r2, #3
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	e02d      	b.n	80132e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801328c:	79fa      	ldrb	r2, [r7, #7]
 801328e:	4923      	ldr	r1, [pc, #140]	; (801331c <etharp_output_to_arp_index+0x124>)
 8013290:	4613      	mov	r3, r2
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	4413      	add	r3, r2
 8013296:	00db      	lsls	r3, r3, #3
 8013298:	440b      	add	r3, r1
 801329a:	3312      	adds	r3, #18
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80132a2:	d321      	bcc.n	80132e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80132a4:	79fa      	ldrb	r2, [r7, #7]
 80132a6:	4613      	mov	r3, r2
 80132a8:	005b      	lsls	r3, r3, #1
 80132aa:	4413      	add	r3, r2
 80132ac:	00db      	lsls	r3, r3, #3
 80132ae:	4a1b      	ldr	r2, [pc, #108]	; (801331c <etharp_output_to_arp_index+0x124>)
 80132b0:	4413      	add	r3, r2
 80132b2:	1d19      	adds	r1, r3, #4
 80132b4:	79fa      	ldrb	r2, [r7, #7]
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	3308      	adds	r3, #8
 80132c0:	4a16      	ldr	r2, [pc, #88]	; (801331c <etharp_output_to_arp_index+0x124>)
 80132c2:	4413      	add	r3, r2
 80132c4:	3304      	adds	r3, #4
 80132c6:	461a      	mov	r2, r3
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 fafb 	bl	80138c4 <etharp_request_dst>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d109      	bne.n	80132e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80132d4:	79fa      	ldrb	r2, [r7, #7]
 80132d6:	4911      	ldr	r1, [pc, #68]	; (801331c <etharp_output_to_arp_index+0x124>)
 80132d8:	4613      	mov	r3, r2
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	4413      	add	r3, r2
 80132de:	00db      	lsls	r3, r3, #3
 80132e0:	440b      	add	r3, r1
 80132e2:	3314      	adds	r3, #20
 80132e4:	2203      	movs	r2, #3
 80132e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80132ee:	79fa      	ldrb	r2, [r7, #7]
 80132f0:	4613      	mov	r3, r2
 80132f2:	005b      	lsls	r3, r3, #1
 80132f4:	4413      	add	r3, r2
 80132f6:	00db      	lsls	r3, r3, #3
 80132f8:	3308      	adds	r3, #8
 80132fa:	4a08      	ldr	r2, [pc, #32]	; (801331c <etharp_output_to_arp_index+0x124>)
 80132fc:	4413      	add	r3, r2
 80132fe:	3304      	adds	r3, #4
 8013300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013304:	9200      	str	r2, [sp, #0]
 8013306:	460a      	mov	r2, r1
 8013308:	68b9      	ldr	r1, [r7, #8]
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	f000 fb9c 	bl	8013a48 <ethernet_output>
 8013310:	4603      	mov	r3, r0
}
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	24005100 	.word	0x24005100
 8013320:	08024a88 	.word	0x08024a88
 8013324:	08024c24 	.word	0x08024c24
 8013328:	08024b2c 	.word	0x08024b2c

0801332c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b08a      	sub	sp, #40	; 0x28
 8013330:	af02      	add	r7, sp, #8
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <etharp_output+0x24>
 8013342:	4b73      	ldr	r3, [pc, #460]	; (8013510 <etharp_output+0x1e4>)
 8013344:	f240 321e 	movw	r2, #798	; 0x31e
 8013348:	4972      	ldr	r1, [pc, #456]	; (8013514 <etharp_output+0x1e8>)
 801334a:	4873      	ldr	r0, [pc, #460]	; (8013518 <etharp_output+0x1ec>)
 801334c:	f00c fbb2 	bl	801fab4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d106      	bne.n	8013364 <etharp_output+0x38>
 8013356:	4b6e      	ldr	r3, [pc, #440]	; (8013510 <etharp_output+0x1e4>)
 8013358:	f240 321f 	movw	r2, #799	; 0x31f
 801335c:	496f      	ldr	r1, [pc, #444]	; (801351c <etharp_output+0x1f0>)
 801335e:	486e      	ldr	r0, [pc, #440]	; (8013518 <etharp_output+0x1ec>)
 8013360:	f00c fba8 	bl	801fab4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d106      	bne.n	8013378 <etharp_output+0x4c>
 801336a:	4b69      	ldr	r3, [pc, #420]	; (8013510 <etharp_output+0x1e4>)
 801336c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013370:	496b      	ldr	r1, [pc, #428]	; (8013520 <etharp_output+0x1f4>)
 8013372:	4869      	ldr	r0, [pc, #420]	; (8013518 <etharp_output+0x1ec>)
 8013374:	f00c fb9e 	bl	801fab4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	68f9      	ldr	r1, [r7, #12]
 801337e:	4618      	mov	r0, r3
 8013380:	f001 f8c6 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d002      	beq.n	8013390 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801338a:	4b66      	ldr	r3, [pc, #408]	; (8013524 <etharp_output+0x1f8>)
 801338c:	61fb      	str	r3, [r7, #28]
 801338e:	e0af      	b.n	80134f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013398:	2be0      	cmp	r3, #224	; 0xe0
 801339a:	d118      	bne.n	80133ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801339c:	2301      	movs	r3, #1
 801339e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80133a0:	2300      	movs	r3, #0
 80133a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80133a4:	235e      	movs	r3, #94	; 0x5e
 80133a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3301      	adds	r3, #1
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	3302      	adds	r3, #2
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	3303      	adds	r3, #3
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80133c6:	f107 0310 	add.w	r3, r7, #16
 80133ca:	61fb      	str	r3, [r7, #28]
 80133cc:	e090      	b.n	80134f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	3304      	adds	r3, #4
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	405a      	eors	r2, r3
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	3308      	adds	r3, #8
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4013      	ands	r3, r2
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d012      	beq.n	801340c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80133ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d00b      	beq.n	801340c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	330c      	adds	r3, #12
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d003      	beq.n	8013406 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	330c      	adds	r3, #12
 8013402:	61bb      	str	r3, [r7, #24]
 8013404:	e002      	b.n	801340c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013406:	f06f 0303 	mvn.w	r3, #3
 801340a:	e07d      	b.n	8013508 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801340c:	4b46      	ldr	r3, [pc, #280]	; (8013528 <etharp_output+0x1fc>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	4619      	mov	r1, r3
 8013412:	4a46      	ldr	r2, [pc, #280]	; (801352c <etharp_output+0x200>)
 8013414:	460b      	mov	r3, r1
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	440b      	add	r3, r1
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	4413      	add	r3, r2
 801341e:	3314      	adds	r3, #20
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b01      	cmp	r3, #1
 8013424:	d925      	bls.n	8013472 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013426:	4b40      	ldr	r3, [pc, #256]	; (8013528 <etharp_output+0x1fc>)
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	4619      	mov	r1, r3
 801342c:	4a3f      	ldr	r2, [pc, #252]	; (801352c <etharp_output+0x200>)
 801342e:	460b      	mov	r3, r1
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	440b      	add	r3, r1
 8013434:	00db      	lsls	r3, r3, #3
 8013436:	4413      	add	r3, r2
 8013438:	3308      	adds	r3, #8
 801343a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	429a      	cmp	r2, r3
 8013440:	d117      	bne.n	8013472 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	4b38      	ldr	r3, [pc, #224]	; (8013528 <etharp_output+0x1fc>)
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	4618      	mov	r0, r3
 801344c:	4937      	ldr	r1, [pc, #220]	; (801352c <etharp_output+0x200>)
 801344e:	4603      	mov	r3, r0
 8013450:	005b      	lsls	r3, r3, #1
 8013452:	4403      	add	r3, r0
 8013454:	00db      	lsls	r3, r3, #3
 8013456:	440b      	add	r3, r1
 8013458:	3304      	adds	r3, #4
 801345a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801345c:	429a      	cmp	r2, r3
 801345e:	d108      	bne.n	8013472 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013460:	4b31      	ldr	r3, [pc, #196]	; (8013528 <etharp_output+0x1fc>)
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	461a      	mov	r2, r3
 8013466:	68b9      	ldr	r1, [r7, #8]
 8013468:	68f8      	ldr	r0, [r7, #12]
 801346a:	f7ff fec5 	bl	80131f8 <etharp_output_to_arp_index>
 801346e:	4603      	mov	r3, r0
 8013470:	e04a      	b.n	8013508 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013472:	2300      	movs	r3, #0
 8013474:	75fb      	strb	r3, [r7, #23]
 8013476:	e031      	b.n	80134dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013478:	7dfa      	ldrb	r2, [r7, #23]
 801347a:	492c      	ldr	r1, [pc, #176]	; (801352c <etharp_output+0x200>)
 801347c:	4613      	mov	r3, r2
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	4413      	add	r3, r2
 8013482:	00db      	lsls	r3, r3, #3
 8013484:	440b      	add	r3, r1
 8013486:	3314      	adds	r3, #20
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d923      	bls.n	80134d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801348e:	7dfa      	ldrb	r2, [r7, #23]
 8013490:	4926      	ldr	r1, [pc, #152]	; (801352c <etharp_output+0x200>)
 8013492:	4613      	mov	r3, r2
 8013494:	005b      	lsls	r3, r3, #1
 8013496:	4413      	add	r3, r2
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	440b      	add	r3, r1
 801349c:	3308      	adds	r3, #8
 801349e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d117      	bne.n	80134d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	6819      	ldr	r1, [r3, #0]
 80134aa:	7dfa      	ldrb	r2, [r7, #23]
 80134ac:	481f      	ldr	r0, [pc, #124]	; (801352c <etharp_output+0x200>)
 80134ae:	4613      	mov	r3, r2
 80134b0:	005b      	lsls	r3, r3, #1
 80134b2:	4413      	add	r3, r2
 80134b4:	00db      	lsls	r3, r3, #3
 80134b6:	4403      	add	r3, r0
 80134b8:	3304      	adds	r3, #4
 80134ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80134bc:	4299      	cmp	r1, r3
 80134be:	d10a      	bne.n	80134d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80134c0:	4a19      	ldr	r2, [pc, #100]	; (8013528 <etharp_output+0x1fc>)
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
 80134c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80134c6:	7dfb      	ldrb	r3, [r7, #23]
 80134c8:	461a      	mov	r2, r3
 80134ca:	68b9      	ldr	r1, [r7, #8]
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	f7ff fe93 	bl	80131f8 <etharp_output_to_arp_index>
 80134d2:	4603      	mov	r3, r0
 80134d4:	e018      	b.n	8013508 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	3301      	adds	r3, #1
 80134da:	75fb      	strb	r3, [r7, #23]
 80134dc:	7dfb      	ldrb	r3, [r7, #23]
 80134de:	2b09      	cmp	r3, #9
 80134e0:	d9ca      	bls.n	8013478 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80134e2:	68ba      	ldr	r2, [r7, #8]
 80134e4:	69b9      	ldr	r1, [r7, #24]
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f000 f822 	bl	8013530 <etharp_query>
 80134ec:	4603      	mov	r3, r0
 80134ee:	e00b      	b.n	8013508 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80134f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	68b9      	ldr	r1, [r7, #8]
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f000 faa1 	bl	8013a48 <ethernet_output>
 8013506:	4603      	mov	r3, r0
}
 8013508:	4618      	mov	r0, r3
 801350a:	3720      	adds	r7, #32
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	08024a88 	.word	0x08024a88
 8013514:	08024c04 	.word	0x08024c04
 8013518:	08024b2c 	.word	0x08024b2c
 801351c:	08024c54 	.word	0x08024c54
 8013520:	08024bf4 	.word	0x08024bf4
 8013524:	08027cf8 	.word	0x08027cf8
 8013528:	240051f0 	.word	0x240051f0
 801352c:	24005100 	.word	0x24005100

08013530 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08c      	sub	sp, #48	; 0x30
 8013534:	af02      	add	r7, sp, #8
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	3326      	adds	r3, #38	; 0x26
 8013540:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013542:	23ff      	movs	r3, #255	; 0xff
 8013544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013548:	2300      	movs	r3, #0
 801354a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	68f9      	ldr	r1, [r7, #12]
 8013552:	4618      	mov	r0, r3
 8013554:	f000 ffdc 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d10c      	bne.n	8013578 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013566:	2be0      	cmp	r3, #224	; 0xe0
 8013568:	d006      	beq.n	8013578 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d003      	beq.n	8013578 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d102      	bne.n	801357e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013578:	f06f 030f 	mvn.w	r3, #15
 801357c:	e101      	b.n	8013782 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	2101      	movs	r1, #1
 8013582:	68b8      	ldr	r0, [r7, #8]
 8013584:	f7ff fb60 	bl	8012c48 <etharp_find_entry>
 8013588:	4603      	mov	r3, r0
 801358a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801358c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013590:	2b00      	cmp	r3, #0
 8013592:	da02      	bge.n	801359a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013594:	8a7b      	ldrh	r3, [r7, #18]
 8013596:	b25b      	sxtb	r3, r3
 8013598:	e0f3      	b.n	8013782 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801359a:	8a7b      	ldrh	r3, [r7, #18]
 801359c:	2b7e      	cmp	r3, #126	; 0x7e
 801359e:	d906      	bls.n	80135ae <etharp_query+0x7e>
 80135a0:	4b7a      	ldr	r3, [pc, #488]	; (801378c <etharp_query+0x25c>)
 80135a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80135a6:	497a      	ldr	r1, [pc, #488]	; (8013790 <etharp_query+0x260>)
 80135a8:	487a      	ldr	r0, [pc, #488]	; (8013794 <etharp_query+0x264>)
 80135aa:	f00c fa83 	bl	801fab4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80135ae:	8a7b      	ldrh	r3, [r7, #18]
 80135b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80135b2:	7c7a      	ldrb	r2, [r7, #17]
 80135b4:	4978      	ldr	r1, [pc, #480]	; (8013798 <etharp_query+0x268>)
 80135b6:	4613      	mov	r3, r2
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	4413      	add	r3, r2
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	440b      	add	r3, r1
 80135c0:	3314      	adds	r3, #20
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d115      	bne.n	80135f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80135c8:	2301      	movs	r3, #1
 80135ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80135cc:	7c7a      	ldrb	r2, [r7, #17]
 80135ce:	4972      	ldr	r1, [pc, #456]	; (8013798 <etharp_query+0x268>)
 80135d0:	4613      	mov	r3, r2
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	440b      	add	r3, r1
 80135da:	3314      	adds	r3, #20
 80135dc:	2201      	movs	r2, #1
 80135de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80135e0:	7c7a      	ldrb	r2, [r7, #17]
 80135e2:	496d      	ldr	r1, [pc, #436]	; (8013798 <etharp_query+0x268>)
 80135e4:	4613      	mov	r3, r2
 80135e6:	005b      	lsls	r3, r3, #1
 80135e8:	4413      	add	r3, r2
 80135ea:	00db      	lsls	r3, r3, #3
 80135ec:	440b      	add	r3, r1
 80135ee:	3308      	adds	r3, #8
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80135f4:	7c7a      	ldrb	r2, [r7, #17]
 80135f6:	4968      	ldr	r1, [pc, #416]	; (8013798 <etharp_query+0x268>)
 80135f8:	4613      	mov	r3, r2
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	4413      	add	r3, r2
 80135fe:	00db      	lsls	r3, r3, #3
 8013600:	440b      	add	r3, r1
 8013602:	3314      	adds	r3, #20
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	2b01      	cmp	r3, #1
 8013608:	d011      	beq.n	801362e <etharp_query+0xfe>
 801360a:	7c7a      	ldrb	r2, [r7, #17]
 801360c:	4962      	ldr	r1, [pc, #392]	; (8013798 <etharp_query+0x268>)
 801360e:	4613      	mov	r3, r2
 8013610:	005b      	lsls	r3, r3, #1
 8013612:	4413      	add	r3, r2
 8013614:	00db      	lsls	r3, r3, #3
 8013616:	440b      	add	r3, r1
 8013618:	3314      	adds	r3, #20
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d806      	bhi.n	801362e <etharp_query+0xfe>
 8013620:	4b5a      	ldr	r3, [pc, #360]	; (801378c <etharp_query+0x25c>)
 8013622:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013626:	495d      	ldr	r1, [pc, #372]	; (801379c <etharp_query+0x26c>)
 8013628:	485a      	ldr	r0, [pc, #360]	; (8013794 <etharp_query+0x264>)
 801362a:	f00c fa43 	bl	801fab4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801362e:	6a3b      	ldr	r3, [r7, #32]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d102      	bne.n	801363a <etharp_query+0x10a>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10c      	bne.n	8013654 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801363a:	68b9      	ldr	r1, [r7, #8]
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f000 f963 	bl	8013908 <etharp_request>
 8013642:	4603      	mov	r3, r0
 8013644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d102      	bne.n	8013654 <etharp_query+0x124>
      return result;
 801364e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013652:	e096      	b.n	8013782 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d106      	bne.n	8013668 <etharp_query+0x138>
 801365a:	4b4c      	ldr	r3, [pc, #304]	; (801378c <etharp_query+0x25c>)
 801365c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013660:	494f      	ldr	r1, [pc, #316]	; (80137a0 <etharp_query+0x270>)
 8013662:	484c      	ldr	r0, [pc, #304]	; (8013794 <etharp_query+0x264>)
 8013664:	f00c fa26 	bl	801fab4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013668:	7c7a      	ldrb	r2, [r7, #17]
 801366a:	494b      	ldr	r1, [pc, #300]	; (8013798 <etharp_query+0x268>)
 801366c:	4613      	mov	r3, r2
 801366e:	005b      	lsls	r3, r3, #1
 8013670:	4413      	add	r3, r2
 8013672:	00db      	lsls	r3, r3, #3
 8013674:	440b      	add	r3, r1
 8013676:	3314      	adds	r3, #20
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	2b01      	cmp	r3, #1
 801367c:	d917      	bls.n	80136ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801367e:	4a49      	ldr	r2, [pc, #292]	; (80137a4 <etharp_query+0x274>)
 8013680:	7c7b      	ldrb	r3, [r7, #17]
 8013682:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013684:	7c7a      	ldrb	r2, [r7, #17]
 8013686:	4613      	mov	r3, r2
 8013688:	005b      	lsls	r3, r3, #1
 801368a:	4413      	add	r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	3308      	adds	r3, #8
 8013690:	4a41      	ldr	r2, [pc, #260]	; (8013798 <etharp_query+0x268>)
 8013692:	4413      	add	r3, r2
 8013694:	3304      	adds	r3, #4
 8013696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801369a:	9200      	str	r2, [sp, #0]
 801369c:	697a      	ldr	r2, [r7, #20]
 801369e:	6879      	ldr	r1, [r7, #4]
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f000 f9d1 	bl	8013a48 <ethernet_output>
 80136a6:	4603      	mov	r3, r0
 80136a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136ac:	e067      	b.n	801377e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80136ae:	7c7a      	ldrb	r2, [r7, #17]
 80136b0:	4939      	ldr	r1, [pc, #228]	; (8013798 <etharp_query+0x268>)
 80136b2:	4613      	mov	r3, r2
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	4413      	add	r3, r2
 80136b8:	00db      	lsls	r3, r3, #3
 80136ba:	440b      	add	r3, r1
 80136bc:	3314      	adds	r3, #20
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d15c      	bne.n	801377e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80136cc:	e01c      	b.n	8013708 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	895a      	ldrh	r2, [r3, #10]
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	891b      	ldrh	r3, [r3, #8]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d10a      	bne.n	80136f0 <etharp_query+0x1c0>
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d006      	beq.n	80136f0 <etharp_query+0x1c0>
 80136e2:	4b2a      	ldr	r3, [pc, #168]	; (801378c <etharp_query+0x25c>)
 80136e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80136e8:	492f      	ldr	r1, [pc, #188]	; (80137a8 <etharp_query+0x278>)
 80136ea:	482a      	ldr	r0, [pc, #168]	; (8013794 <etharp_query+0x264>)
 80136ec:	f00c f9e2 	bl	801fab4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	7b1b      	ldrb	r3, [r3, #12]
 80136f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d002      	beq.n	8013702 <etharp_query+0x1d2>
        copy_needed = 1;
 80136fc:	2301      	movs	r3, #1
 80136fe:	61bb      	str	r3, [r7, #24]
        break;
 8013700:	e005      	b.n	801370e <etharp_query+0x1de>
      }
      p = p->next;
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1df      	bne.n	80136ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d007      	beq.n	8013724 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	f44f 7120 	mov.w	r1, #640	; 0x280
 801371a:	200e      	movs	r0, #14
 801371c:	f003 fb0e 	bl	8016d3c <pbuf_clone>
 8013720:	61f8      	str	r0, [r7, #28]
 8013722:	e004      	b.n	801372e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013728:	69f8      	ldr	r0, [r7, #28]
 801372a:	f003 f921 	bl	8016970 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d021      	beq.n	8013778 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013734:	7c7a      	ldrb	r2, [r7, #17]
 8013736:	4918      	ldr	r1, [pc, #96]	; (8013798 <etharp_query+0x268>)
 8013738:	4613      	mov	r3, r2
 801373a:	005b      	lsls	r3, r3, #1
 801373c:	4413      	add	r3, r2
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	440b      	add	r3, r1
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00a      	beq.n	801375e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013748:	7c7a      	ldrb	r2, [r7, #17]
 801374a:	4913      	ldr	r1, [pc, #76]	; (8013798 <etharp_query+0x268>)
 801374c:	4613      	mov	r3, r2
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	4413      	add	r3, r2
 8013752:	00db      	lsls	r3, r3, #3
 8013754:	440b      	add	r3, r1
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4618      	mov	r0, r3
 801375a:	f003 f869 	bl	8016830 <pbuf_free>
      }
      arp_table[i].q = p;
 801375e:	7c7a      	ldrb	r2, [r7, #17]
 8013760:	490d      	ldr	r1, [pc, #52]	; (8013798 <etharp_query+0x268>)
 8013762:	4613      	mov	r3, r2
 8013764:	005b      	lsls	r3, r3, #1
 8013766:	4413      	add	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	440b      	add	r3, r1
 801376c:	69fa      	ldr	r2, [r7, #28]
 801376e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013770:	2300      	movs	r3, #0
 8013772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013776:	e002      	b.n	801377e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013778:	23ff      	movs	r3, #255	; 0xff
 801377a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801377e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013782:	4618      	mov	r0, r3
 8013784:	3728      	adds	r7, #40	; 0x28
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
 801378a:	bf00      	nop
 801378c:	08024a88 	.word	0x08024a88
 8013790:	08024c60 	.word	0x08024c60
 8013794:	08024b2c 	.word	0x08024b2c
 8013798:	24005100 	.word	0x24005100
 801379c:	08024c70 	.word	0x08024c70
 80137a0:	08024c54 	.word	0x08024c54
 80137a4:	240051f0 	.word	0x240051f0
 80137a8:	08024c98 	.word	0x08024c98

080137ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08a      	sub	sp, #40	; 0x28
 80137b0:	af02      	add	r7, sp, #8
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80137ba:	2300      	movs	r3, #0
 80137bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <etharp_raw+0x26>
 80137c4:	4b3a      	ldr	r3, [pc, #232]	; (80138b0 <etharp_raw+0x104>)
 80137c6:	f240 4257 	movw	r2, #1111	; 0x457
 80137ca:	493a      	ldr	r1, [pc, #232]	; (80138b4 <etharp_raw+0x108>)
 80137cc:	483a      	ldr	r0, [pc, #232]	; (80138b8 <etharp_raw+0x10c>)
 80137ce:	f00c f971 	bl	801fab4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80137d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137d6:	211c      	movs	r1, #28
 80137d8:	200e      	movs	r0, #14
 80137da:	f002 fd45 	bl	8016268 <pbuf_alloc>
 80137de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d102      	bne.n	80137ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80137e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137ea:	e05d      	b.n	80138a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	895b      	ldrh	r3, [r3, #10]
 80137f0:	2b1b      	cmp	r3, #27
 80137f2:	d806      	bhi.n	8013802 <etharp_raw+0x56>
 80137f4:	4b2e      	ldr	r3, [pc, #184]	; (80138b0 <etharp_raw+0x104>)
 80137f6:	f240 4262 	movw	r2, #1122	; 0x462
 80137fa:	4930      	ldr	r1, [pc, #192]	; (80138bc <etharp_raw+0x110>)
 80137fc:	482e      	ldr	r0, [pc, #184]	; (80138b8 <etharp_raw+0x10c>)
 80137fe:	f00c f959 	bl	801fab4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013808:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801380a:	4618      	mov	r0, r3
 801380c:	f7ff f914 	bl	8012a38 <lwip_htons>
 8013810:	4603      	mov	r3, r0
 8013812:	461a      	mov	r2, r3
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801381e:	2b06      	cmp	r3, #6
 8013820:	d006      	beq.n	8013830 <etharp_raw+0x84>
 8013822:	4b23      	ldr	r3, [pc, #140]	; (80138b0 <etharp_raw+0x104>)
 8013824:	f240 4269 	movw	r2, #1129	; 0x469
 8013828:	4925      	ldr	r1, [pc, #148]	; (80138c0 <etharp_raw+0x114>)
 801382a:	4823      	ldr	r0, [pc, #140]	; (80138b8 <etharp_raw+0x10c>)
 801382c:	f00c f942 	bl	801fab4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	3308      	adds	r3, #8
 8013834:	2206      	movs	r2, #6
 8013836:	6839      	ldr	r1, [r7, #0]
 8013838:	4618      	mov	r0, r3
 801383a:	f00b fa1b 	bl	801ec74 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	3312      	adds	r3, #18
 8013842:	2206      	movs	r2, #6
 8013844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013846:	4618      	mov	r0, r3
 8013848:	f00b fa14 	bl	801ec74 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	330e      	adds	r3, #14
 8013850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013852:	6812      	ldr	r2, [r2, #0]
 8013854:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	3318      	adds	r3, #24
 801385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801385c:	6812      	ldr	r2, [r2, #0]
 801385e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	2200      	movs	r2, #0
 8013864:	701a      	strb	r2, [r3, #0]
 8013866:	2200      	movs	r2, #0
 8013868:	f042 0201 	orr.w	r2, r2, #1
 801386c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	2200      	movs	r2, #0
 8013872:	f042 0208 	orr.w	r2, r2, #8
 8013876:	709a      	strb	r2, [r3, #2]
 8013878:	2200      	movs	r2, #0
 801387a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	2206      	movs	r2, #6
 8013880:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	2204      	movs	r2, #4
 8013886:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013888:	f640 0306 	movw	r3, #2054	; 0x806
 801388c:	9300      	str	r3, [sp, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	69b9      	ldr	r1, [r7, #24]
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f000 f8d7 	bl	8013a48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801389a:	69b8      	ldr	r0, [r7, #24]
 801389c:	f002 ffc8 	bl	8016830 <pbuf_free>
  p = NULL;
 80138a0:	2300      	movs	r3, #0
 80138a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80138a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3720      	adds	r7, #32
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	08024a88 	.word	0x08024a88
 80138b4:	08024c04 	.word	0x08024c04
 80138b8:	08024b2c 	.word	0x08024b2c
 80138bc:	08024cb4 	.word	0x08024cb4
 80138c0:	08024ce8 	.word	0x08024ce8

080138c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b088      	sub	sp, #32
 80138c8:	af04      	add	r7, sp, #16
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80138e0:	2201      	movs	r2, #1
 80138e2:	9203      	str	r2, [sp, #12]
 80138e4:	68ba      	ldr	r2, [r7, #8]
 80138e6:	9202      	str	r2, [sp, #8]
 80138e8:	4a06      	ldr	r2, [pc, #24]	; (8013904 <etharp_request_dst+0x40>)
 80138ea:	9201      	str	r2, [sp, #4]
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	4603      	mov	r3, r0
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7ff ff5a 	bl	80137ac <etharp_raw>
 80138f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	08027d00 	.word	0x08027d00

08013908 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013912:	4a05      	ldr	r2, [pc, #20]	; (8013928 <etharp_request+0x20>)
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7ff ffd4 	bl	80138c4 <etharp_request_dst>
 801391c:	4603      	mov	r3, r0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3708      	adds	r7, #8
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	08027cf8 	.word	0x08027cf8

0801392c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b086      	sub	sp, #24
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013936:	230e      	movs	r3, #14
 8013938:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	895b      	ldrh	r3, [r3, #10]
 801393e:	2b0e      	cmp	r3, #14
 8013940:	d96e      	bls.n	8013a20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	7bdb      	ldrb	r3, [r3, #15]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d106      	bne.n	8013958 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013950:	3301      	adds	r3, #1
 8013952:	b2da      	uxtb	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	7b1a      	ldrb	r2, [r3, #12]
 8013962:	7b5b      	ldrb	r3, [r3, #13]
 8013964:	021b      	lsls	r3, r3, #8
 8013966:	4313      	orrs	r3, r2
 8013968:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	f003 0301 	and.w	r3, r3, #1
 8013972:	2b00      	cmp	r3, #0
 8013974:	d023      	beq.n	80139be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	2b01      	cmp	r3, #1
 801397c:	d10f      	bne.n	801399e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	785b      	ldrb	r3, [r3, #1]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d11b      	bne.n	80139be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801398a:	2b5e      	cmp	r3, #94	; 0x5e
 801398c:	d117      	bne.n	80139be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	7b5b      	ldrb	r3, [r3, #13]
 8013992:	f043 0310 	orr.w	r3, r3, #16
 8013996:	b2da      	uxtb	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	735a      	strb	r2, [r3, #13]
 801399c:	e00f      	b.n	80139be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	2206      	movs	r2, #6
 80139a2:	4928      	ldr	r1, [pc, #160]	; (8013a44 <ethernet_input+0x118>)
 80139a4:	4618      	mov	r0, r3
 80139a6:	f00b f957 	bl	801ec58 <memcmp>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d106      	bne.n	80139be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	7b5b      	ldrb	r3, [r3, #13]
 80139b4:	f043 0308 	orr.w	r3, r3, #8
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80139be:	89fb      	ldrh	r3, [r7, #14]
 80139c0:	2b08      	cmp	r3, #8
 80139c2:	d003      	beq.n	80139cc <ethernet_input+0xa0>
 80139c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80139c8:	d014      	beq.n	80139f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80139ca:	e032      	b.n	8013a32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139d2:	f003 0308 	and.w	r3, r3, #8
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d024      	beq.n	8013a24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80139da:	8afb      	ldrh	r3, [r7, #22]
 80139dc:	4619      	mov	r1, r3
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f002 fea0 	bl	8016724 <pbuf_remove_header>
 80139e4:	4603      	mov	r3, r0
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d11e      	bne.n	8013a28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80139ea:	6839      	ldr	r1, [r7, #0]
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 fb93 	bl	8014118 <ip4_input>
      break;
 80139f2:	e013      	b.n	8013a1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139fa:	f003 0308 	and.w	r3, r3, #8
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d014      	beq.n	8013a2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013a02:	8afb      	ldrh	r3, [r7, #22]
 8013a04:	4619      	mov	r1, r3
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f002 fe8c 	bl	8016724 <pbuf_remove_header>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d10e      	bne.n	8013a30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013a12:	6839      	ldr	r1, [r7, #0]
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f7ff fb65 	bl	80130e4 <etharp_input>
      break;
 8013a1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	e00c      	b.n	8013a3a <ethernet_input+0x10e>
    goto free_and_return;
 8013a20:	bf00      	nop
 8013a22:	e006      	b.n	8013a32 <ethernet_input+0x106>
        goto free_and_return;
 8013a24:	bf00      	nop
 8013a26:	e004      	b.n	8013a32 <ethernet_input+0x106>
        goto free_and_return;
 8013a28:	bf00      	nop
 8013a2a:	e002      	b.n	8013a32 <ethernet_input+0x106>
        goto free_and_return;
 8013a2c:	bf00      	nop
 8013a2e:	e000      	b.n	8013a32 <ethernet_input+0x106>
        goto free_and_return;
 8013a30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f002 fefc 	bl	8016830 <pbuf_free>
  return ERR_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3718      	adds	r7, #24
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	08027cf8 	.word	0x08027cf8

08013a48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b086      	sub	sp, #24
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013a56:	8c3b      	ldrh	r3, [r7, #32]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fe ffed 	bl	8012a38 <lwip_htons>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013a62:	210e      	movs	r1, #14
 8013a64:	68b8      	ldr	r0, [r7, #8]
 8013a66:	f002 fe4d 	bl	8016704 <pbuf_add_header>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d125      	bne.n	8013abc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	8afa      	ldrh	r2, [r7, #22]
 8013a7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	2206      	movs	r2, #6
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f00b f8f6 	bl	801ec74 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	3306      	adds	r3, #6
 8013a8c:	2206      	movs	r2, #6
 8013a8e:	6879      	ldr	r1, [r7, #4]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f00b f8ef 	bl	801ec74 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a9c:	2b06      	cmp	r3, #6
 8013a9e:	d006      	beq.n	8013aae <ethernet_output+0x66>
 8013aa0:	4b0a      	ldr	r3, [pc, #40]	; (8013acc <ethernet_output+0x84>)
 8013aa2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013aa6:	490a      	ldr	r1, [pc, #40]	; (8013ad0 <ethernet_output+0x88>)
 8013aa8:	480a      	ldr	r0, [pc, #40]	; (8013ad4 <ethernet_output+0x8c>)
 8013aaa:	f00c f803 	bl	801fab4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	699b      	ldr	r3, [r3, #24]
 8013ab2:	68b9      	ldr	r1, [r7, #8]
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	4798      	blx	r3
 8013ab8:	4603      	mov	r3, r0
 8013aba:	e002      	b.n	8013ac2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013abc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013abe:	f06f 0301 	mvn.w	r3, #1
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3718      	adds	r7, #24
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	08024d2c 	.word	0x08024d2c
 8013ad0:	08024d8c 	.word	0x08024d8c
 8013ad4:	08024dc0 	.word	0x08024dc0

08013ad8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08e      	sub	sp, #56	; 0x38
 8013adc:	af04      	add	r7, sp, #16
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013ae2:	4b87      	ldr	r3, [pc, #540]	; (8013d00 <icmp_input+0x228>)
 8013ae4:	689b      	ldr	r3, [r3, #8]
 8013ae6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	f003 030f 	and.w	r3, r3, #15
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	b2db      	uxtb	r3, r3
 8013af6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013afa:	2b13      	cmp	r3, #19
 8013afc:	f240 80e8 	bls.w	8013cd0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	895b      	ldrh	r3, [r3, #10]
 8013b04:	2b03      	cmp	r3, #3
 8013b06:	f240 80e5 	bls.w	8013cd4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013b14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f000 80d2 	beq.w	8013cc2 <icmp_input+0x1ea>
 8013b1e:	2b08      	cmp	r3, #8
 8013b20:	f040 80d2 	bne.w	8013cc8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013b24:	4b77      	ldr	r3, [pc, #476]	; (8013d04 <icmp_input+0x22c>)
 8013b26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b28:	4b75      	ldr	r3, [pc, #468]	; (8013d00 <icmp_input+0x228>)
 8013b2a:	695b      	ldr	r3, [r3, #20]
 8013b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b30:	2be0      	cmp	r3, #224	; 0xe0
 8013b32:	f000 80d6 	beq.w	8013ce2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013b36:	4b72      	ldr	r3, [pc, #456]	; (8013d00 <icmp_input+0x228>)
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	4a71      	ldr	r2, [pc, #452]	; (8013d00 <icmp_input+0x228>)
 8013b3c:	6812      	ldr	r2, [r2, #0]
 8013b3e:	4611      	mov	r1, r2
 8013b40:	4618      	mov	r0, r3
 8013b42:	f000 fce5 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f040 80cc 	bne.w	8013ce6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	891b      	ldrh	r3, [r3, #8]
 8013b52:	2b07      	cmp	r3, #7
 8013b54:	f240 80c0 	bls.w	8013cd8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 f9e0 	bl	8013f1e <inet_chksum_pbuf>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d003      	beq.n	8013b6c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f002 fe63 	bl	8016830 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013b6a:	e0c5      	b.n	8013cf8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013b6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b6e:	330e      	adds	r3, #14
 8013b70:	4619      	mov	r1, r3
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f002 fdc6 	bl	8016704 <pbuf_add_header>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d04b      	beq.n	8013c16 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	891a      	ldrh	r2, [r3, #8]
 8013b82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b84:	4413      	add	r3, r2
 8013b86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	891b      	ldrh	r3, [r3, #8]
 8013b8c:	8b7a      	ldrh	r2, [r7, #26]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	f0c0 80ab 	bcc.w	8013cea <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013b94:	8b7b      	ldrh	r3, [r7, #26]
 8013b96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	200e      	movs	r0, #14
 8013b9e:	f002 fb63 	bl	8016268 <pbuf_alloc>
 8013ba2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 80a1 	beq.w	8013cee <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	895b      	ldrh	r3, [r3, #10]
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bb4:	3308      	adds	r3, #8
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d203      	bcs.n	8013bc2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013bba:	6978      	ldr	r0, [r7, #20]
 8013bbc:	f002 fe38 	bl	8016830 <pbuf_free>
          goto icmperr;
 8013bc0:	e096      	b.n	8013cf0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f00b f852 	bl	801ec74 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	6978      	ldr	r0, [r7, #20]
 8013bd6:	f002 fda5 	bl	8016724 <pbuf_remove_header>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d009      	beq.n	8013bf4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013be0:	4b49      	ldr	r3, [pc, #292]	; (8013d08 <icmp_input+0x230>)
 8013be2:	22b6      	movs	r2, #182	; 0xb6
 8013be4:	4949      	ldr	r1, [pc, #292]	; (8013d0c <icmp_input+0x234>)
 8013be6:	484a      	ldr	r0, [pc, #296]	; (8013d10 <icmp_input+0x238>)
 8013be8:	f00b ff64 	bl	801fab4 <iprintf>
          pbuf_free(r);
 8013bec:	6978      	ldr	r0, [r7, #20]
 8013bee:	f002 fe1f 	bl	8016830 <pbuf_free>
          goto icmperr;
 8013bf2:	e07d      	b.n	8013cf0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013bf4:	6879      	ldr	r1, [r7, #4]
 8013bf6:	6978      	ldr	r0, [r7, #20]
 8013bf8:	f002 ff32 	bl	8016a60 <pbuf_copy>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d003      	beq.n	8013c0a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013c02:	6978      	ldr	r0, [r7, #20]
 8013c04:	f002 fe14 	bl	8016830 <pbuf_free>
          goto icmperr;
 8013c08:	e072      	b.n	8013cf0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f002 fe10 	bl	8016830 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	607b      	str	r3, [r7, #4]
 8013c14:	e00f      	b.n	8013c36 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c18:	330e      	adds	r3, #14
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f002 fd81 	bl	8016724 <pbuf_remove_header>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d006      	beq.n	8013c36 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013c28:	4b37      	ldr	r3, [pc, #220]	; (8013d08 <icmp_input+0x230>)
 8013c2a:	22c7      	movs	r2, #199	; 0xc7
 8013c2c:	4939      	ldr	r1, [pc, #228]	; (8013d14 <icmp_input+0x23c>)
 8013c2e:	4838      	ldr	r0, [pc, #224]	; (8013d10 <icmp_input+0x238>)
 8013c30:	f00b ff40 	bl	801fab4 <iprintf>
          goto icmperr;
 8013c34:	e05c      	b.n	8013cf0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c3e:	4619      	mov	r1, r3
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f002 fd5f 	bl	8016704 <pbuf_add_header>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d13c      	bne.n	8013cc6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013c5a:	4b29      	ldr	r3, [pc, #164]	; (8013d00 <icmp_input+0x228>)
 8013c5c:	691a      	ldr	r2, [r3, #16]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	2200      	movs	r2, #0
 8013c66:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	885b      	ldrh	r3, [r3, #2]
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013c72:	4293      	cmp	r3, r2
 8013c74:	d907      	bls.n	8013c86 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	885b      	ldrh	r3, [r3, #2]
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	3309      	adds	r3, #9
 8013c7e:	b29a      	uxth	r2, r3
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	805a      	strh	r2, [r3, #2]
 8013c84:	e006      	b.n	8013c94 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	885b      	ldrh	r3, [r3, #2]
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	22ff      	movs	r2, #255	; 0xff
 8013c98:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	729a      	strb	r2, [r3, #10]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	9302      	str	r3, [sp, #8]
 8013ca8:	2301      	movs	r3, #1
 8013caa:	9301      	str	r3, [sp, #4]
 8013cac:	2300      	movs	r3, #0
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	23ff      	movs	r3, #255	; 0xff
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	69f9      	ldr	r1, [r7, #28]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fb52 	bl	8014360 <ip4_output_if>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013cc0:	e001      	b.n	8013cc6 <icmp_input+0x1ee>
      break;
 8013cc2:	bf00      	nop
 8013cc4:	e000      	b.n	8013cc8 <icmp_input+0x1f0>
      break;
 8013cc6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f002 fdb1 	bl	8016830 <pbuf_free>
  return;
 8013cce:	e013      	b.n	8013cf8 <icmp_input+0x220>
    goto lenerr;
 8013cd0:	bf00      	nop
 8013cd2:	e002      	b.n	8013cda <icmp_input+0x202>
    goto lenerr;
 8013cd4:	bf00      	nop
 8013cd6:	e000      	b.n	8013cda <icmp_input+0x202>
        goto lenerr;
 8013cd8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f002 fda8 	bl	8016830 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ce0:	e00a      	b.n	8013cf8 <icmp_input+0x220>
        goto icmperr;
 8013ce2:	bf00      	nop
 8013ce4:	e004      	b.n	8013cf0 <icmp_input+0x218>
        goto icmperr;
 8013ce6:	bf00      	nop
 8013ce8:	e002      	b.n	8013cf0 <icmp_input+0x218>
          goto icmperr;
 8013cea:	bf00      	nop
 8013cec:	e000      	b.n	8013cf0 <icmp_input+0x218>
          goto icmperr;
 8013cee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f002 fd9d 	bl	8016830 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013cf6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013cf8:	3728      	adds	r7, #40	; 0x28
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	24005b38 	.word	0x24005b38
 8013d04:	24005b4c 	.word	0x24005b4c
 8013d08:	08024de8 	.word	0x08024de8
 8013d0c:	08024e48 	.word	0x08024e48
 8013d10:	08024e80 	.word	0x08024e80
 8013d14:	08024ea8 	.word	0x08024ea8

08013d18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	460b      	mov	r3, r1
 8013d22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013d24:	78fb      	ldrb	r3, [r7, #3]
 8013d26:	461a      	mov	r2, r3
 8013d28:	2103      	movs	r1, #3
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 f814 	bl	8013d58 <icmp_send_response>
}
 8013d30:	bf00      	nop
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	460b      	mov	r3, r1
 8013d42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013d44:	78fb      	ldrb	r3, [r7, #3]
 8013d46:	461a      	mov	r2, r3
 8013d48:	210b      	movs	r1, #11
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f000 f804 	bl	8013d58 <icmp_send_response>
}
 8013d50:	bf00      	nop
 8013d52:	3708      	adds	r7, #8
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b08c      	sub	sp, #48	; 0x30
 8013d5c:	af04      	add	r7, sp, #16
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	70fb      	strb	r3, [r7, #3]
 8013d64:	4613      	mov	r3, r2
 8013d66:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013d68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d6c:	2124      	movs	r1, #36	; 0x24
 8013d6e:	2022      	movs	r0, #34	; 0x22
 8013d70:	f002 fa7a 	bl	8016268 <pbuf_alloc>
 8013d74:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d056      	beq.n	8013e2a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	895b      	ldrh	r3, [r3, #10]
 8013d80:	2b23      	cmp	r3, #35	; 0x23
 8013d82:	d806      	bhi.n	8013d92 <icmp_send_response+0x3a>
 8013d84:	4b2b      	ldr	r3, [pc, #172]	; (8013e34 <icmp_send_response+0xdc>)
 8013d86:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013d8a:	492b      	ldr	r1, [pc, #172]	; (8013e38 <icmp_send_response+0xe0>)
 8013d8c:	482b      	ldr	r0, [pc, #172]	; (8013e3c <icmp_send_response+0xe4>)
 8013d8e:	f00b fe91 	bl	801fab4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	78fa      	ldrb	r2, [r7, #3]
 8013da2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	78ba      	ldrb	r2, [r7, #2]
 8013da8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	2200      	movs	r2, #0
 8013dae:	711a      	strb	r2, [r3, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	2200      	movs	r2, #0
 8013db8:	719a      	strb	r2, [r3, #6]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	f103 0008 	add.w	r0, r3, #8
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	221c      	movs	r2, #28
 8013dcc:	4619      	mov	r1, r3
 8013dce:	f00a ff51 	bl	801ec74 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013dd8:	f107 030c 	add.w	r3, r7, #12
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f000 f901 	bl	8013fe4 <ip4_route>
 8013de2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d01b      	beq.n	8013e22 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	2200      	movs	r2, #0
 8013dee:	709a      	strb	r2, [r3, #2]
 8013df0:	2200      	movs	r2, #0
 8013df2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	895b      	ldrh	r3, [r3, #10]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	6978      	ldr	r0, [r7, #20]
 8013dfc:	f000 f87d 	bl	8013efa <inet_chksum>
 8013e00:	4603      	mov	r3, r0
 8013e02:	461a      	mov	r2, r3
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013e08:	f107 020c 	add.w	r2, r7, #12
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	9302      	str	r3, [sp, #8]
 8013e10:	2301      	movs	r3, #1
 8013e12:	9301      	str	r3, [sp, #4]
 8013e14:	2300      	movs	r3, #0
 8013e16:	9300      	str	r3, [sp, #0]
 8013e18:	23ff      	movs	r3, #255	; 0xff
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	69f8      	ldr	r0, [r7, #28]
 8013e1e:	f000 fa9f 	bl	8014360 <ip4_output_if>
  }
  pbuf_free(q);
 8013e22:	69f8      	ldr	r0, [r7, #28]
 8013e24:	f002 fd04 	bl	8016830 <pbuf_free>
 8013e28:	e000      	b.n	8013e2c <icmp_send_response+0xd4>
    return;
 8013e2a:	bf00      	nop
}
 8013e2c:	3720      	adds	r7, #32
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	08024de8 	.word	0x08024de8
 8013e38:	08024edc 	.word	0x08024edc
 8013e3c:	08024e80 	.word	0x08024e80

08013e40 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b089      	sub	sp, #36	; 0x24
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	f003 0301 	and.w	r3, r3, #1
 8013e5c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00d      	beq.n	8013e80 <lwip_standard_chksum+0x40>
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	dd0a      	ble.n	8013e80 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013e6a:	69fa      	ldr	r2, [r7, #28]
 8013e6c:	1c53      	adds	r3, r2, #1
 8013e6e:	61fb      	str	r3, [r7, #28]
 8013e70:	f107 030e 	add.w	r3, r7, #14
 8013e74:	3301      	adds	r3, #1
 8013e76:	7812      	ldrb	r2, [r2, #0]
 8013e78:	701a      	strb	r2, [r3, #0]
    len--;
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	3b01      	subs	r3, #1
 8013e7e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013e84:	e00a      	b.n	8013e9c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013e86:	69bb      	ldr	r3, [r7, #24]
 8013e88:	1c9a      	adds	r2, r3, #2
 8013e8a:	61ba      	str	r2, [r7, #24]
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	4413      	add	r3, r2
 8013e94:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	3b02      	subs	r3, #2
 8013e9a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	dcf1      	bgt.n	8013e86 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	dd04      	ble.n	8013eb2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013ea8:	f107 030e 	add.w	r3, r7, #14
 8013eac:	69ba      	ldr	r2, [r7, #24]
 8013eae:	7812      	ldrb	r2, [r2, #0]
 8013eb0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8013eb2:	89fb      	ldrh	r3, [r7, #14]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	4413      	add	r3, r2
 8013eba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	0c1a      	lsrs	r2, r3, #16
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	4413      	add	r3, r2
 8013ec6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	0c1a      	lsrs	r2, r3, #16
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4413      	add	r3, r2
 8013ed2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d007      	beq.n	8013eea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	021b      	lsls	r3, r3, #8
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	0a1b      	lsrs	r3, r3, #8
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	b29b      	uxth	r3, r3
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3724      	adds	r7, #36	; 0x24
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr

08013efa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b082      	sub	sp, #8
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
 8013f02:	460b      	mov	r3, r1
 8013f04:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8013f06:	887b      	ldrh	r3, [r7, #2]
 8013f08:	4619      	mov	r1, r3
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7ff ff98 	bl	8013e40 <lwip_standard_chksum>
 8013f10:	4603      	mov	r3, r0
 8013f12:	43db      	mvns	r3, r3
 8013f14:	b29b      	uxth	r3, r3
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b086      	sub	sp, #24
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	613b      	str	r3, [r7, #16]
 8013f32:	e02b      	b.n	8013f8c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	685a      	ldr	r2, [r3, #4]
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	895b      	ldrh	r3, [r3, #10]
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	4610      	mov	r0, r2
 8013f40:	f7ff ff7e 	bl	8013e40 <lwip_standard_chksum>
 8013f44:	4603      	mov	r3, r0
 8013f46:	461a      	mov	r2, r3
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	0c1a      	lsrs	r2, r3, #16
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	4413      	add	r3, r2
 8013f58:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	895b      	ldrh	r3, [r3, #10]
 8013f5e:	f003 0301 	and.w	r3, r3, #1
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00e      	beq.n	8013f86 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	bf0c      	ite	eq
 8013f6e:	2301      	moveq	r3, #1
 8013f70:	2300      	movne	r3, #0
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	021b      	lsls	r3, r3, #8
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	0a1b      	lsrs	r3, r3, #8
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	4313      	orrs	r3, r2
 8013f84:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	613b      	str	r3, [r7, #16]
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1d0      	bne.n	8013f34 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d007      	beq.n	8013fa8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	021b      	lsls	r3, r3, #8
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	0a1b      	lsrs	r3, r3, #8
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	43db      	mvns	r3, r3
 8013fae:	b29b      	uxth	r3, r3
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3718      	adds	r7, #24
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8013fc2:	f001 f9e5 	bl	8015390 <mem_init>
  memp_init();
 8013fc6:	f001 fce7 	bl	8015998 <memp_init>
  pbuf_init();
  netif_init();
 8013fca:	f001 fde5 	bl	8015b98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013fce:	f009 fa0f 	bl	801d3f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013fd2:	f002 ff73 	bl	8016ebc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013fd6:	f009 f981 	bl	801d2dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013fda:	bf00      	nop
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
	...

08013fe4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b085      	sub	sp, #20
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013fec:	4b33      	ldr	r3, [pc, #204]	; (80140bc <ip4_route+0xd8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	e036      	b.n	8014062 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ffa:	f003 0301 	and.w	r3, r3, #1
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	2b00      	cmp	r3, #0
 8014002:	d02b      	beq.n	801405c <ip4_route+0x78>
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801400a:	089b      	lsrs	r3, r3, #2
 801400c:	f003 0301 	and.w	r3, r3, #1
 8014010:	b2db      	uxtb	r3, r3
 8014012:	2b00      	cmp	r3, #0
 8014014:	d022      	beq.n	801405c <ip4_route+0x78>
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	3304      	adds	r3, #4
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01d      	beq.n	801405c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	3304      	adds	r3, #4
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	405a      	eors	r2, r3
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	3308      	adds	r3, #8
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4013      	ands	r3, r2
 8014034:	2b00      	cmp	r3, #0
 8014036:	d101      	bne.n	801403c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	e038      	b.n	80140ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014042:	f003 0302 	and.w	r3, r3, #2
 8014046:	2b00      	cmp	r3, #0
 8014048:	d108      	bne.n	801405c <ip4_route+0x78>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	330c      	adds	r3, #12
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	429a      	cmp	r2, r3
 8014056:	d101      	bne.n	801405c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	e028      	b.n	80140ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	60fb      	str	r3, [r7, #12]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d1c5      	bne.n	8013ff4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014068:	4b15      	ldr	r3, [pc, #84]	; (80140c0 <ip4_route+0xdc>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d01a      	beq.n	80140a6 <ip4_route+0xc2>
 8014070:	4b13      	ldr	r3, [pc, #76]	; (80140c0 <ip4_route+0xdc>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014078:	f003 0301 	and.w	r3, r3, #1
 801407c:	2b00      	cmp	r3, #0
 801407e:	d012      	beq.n	80140a6 <ip4_route+0xc2>
 8014080:	4b0f      	ldr	r3, [pc, #60]	; (80140c0 <ip4_route+0xdc>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014088:	f003 0304 	and.w	r3, r3, #4
 801408c:	2b00      	cmp	r3, #0
 801408e:	d00a      	beq.n	80140a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014090:	4b0b      	ldr	r3, [pc, #44]	; (80140c0 <ip4_route+0xdc>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	3304      	adds	r3, #4
 8014096:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014098:	2b00      	cmp	r3, #0
 801409a:	d004      	beq.n	80140a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	2b7f      	cmp	r3, #127	; 0x7f
 80140a4:	d101      	bne.n	80140aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80140a6:	2300      	movs	r3, #0
 80140a8:	e001      	b.n	80140ae <ip4_route+0xca>
  }

  return netif_default;
 80140aa:	4b05      	ldr	r3, [pc, #20]	; (80140c0 <ip4_route+0xdc>)
 80140ac:	681b      	ldr	r3, [r3, #0]
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3714      	adds	r7, #20
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	24008a18 	.word	0x24008a18
 80140c0:	24008a1c 	.word	0x24008a1c

080140c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140d2:	f003 0301 	and.w	r3, r3, #1
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d016      	beq.n	801410a <ip4_input_accept+0x46>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	3304      	adds	r3, #4
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d011      	beq.n	801410a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80140e6:	4b0b      	ldr	r3, [pc, #44]	; (8014114 <ip4_input_accept+0x50>)
 80140e8:	695a      	ldr	r2, [r3, #20]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	3304      	adds	r3, #4
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d008      	beq.n	8014106 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80140f4:	4b07      	ldr	r3, [pc, #28]	; (8014114 <ip4_input_accept+0x50>)
 80140f6:	695b      	ldr	r3, [r3, #20]
 80140f8:	6879      	ldr	r1, [r7, #4]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f000 fa08 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8014100:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014102:	2b00      	cmp	r3, #0
 8014104:	d001      	beq.n	801410a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014106:	2301      	movs	r3, #1
 8014108:	e000      	b.n	801410c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801410a:	2300      	movs	r3, #0
}
 801410c:	4618      	mov	r0, r3
 801410e:	3708      	adds	r7, #8
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	24005b38 	.word	0x24005b38

08014118 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	091b      	lsrs	r3, r3, #4
 801412e:	b2db      	uxtb	r3, r3
 8014130:	2b04      	cmp	r3, #4
 8014132:	d004      	beq.n	801413e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f002 fb7b 	bl	8016830 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801413a:	2300      	movs	r3, #0
 801413c:	e107      	b.n	801434e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	f003 030f 	and.w	r3, r3, #15
 8014146:	b2db      	uxtb	r3, r3
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	b2db      	uxtb	r3, r3
 801414c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	885b      	ldrh	r3, [r3, #2]
 8014152:	b29b      	uxth	r3, r3
 8014154:	4618      	mov	r0, r3
 8014156:	f7fe fc6f 	bl	8012a38 <lwip_htons>
 801415a:	4603      	mov	r3, r0
 801415c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	891b      	ldrh	r3, [r3, #8]
 8014162:	89ba      	ldrh	r2, [r7, #12]
 8014164:	429a      	cmp	r2, r3
 8014166:	d204      	bcs.n	8014172 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014168:	89bb      	ldrh	r3, [r7, #12]
 801416a:	4619      	mov	r1, r3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f002 f9d9 	bl	8016524 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	895b      	ldrh	r3, [r3, #10]
 8014176:	89fa      	ldrh	r2, [r7, #14]
 8014178:	429a      	cmp	r2, r3
 801417a:	d807      	bhi.n	801418c <ip4_input+0x74>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	891b      	ldrh	r3, [r3, #8]
 8014180:	89ba      	ldrh	r2, [r7, #12]
 8014182:	429a      	cmp	r2, r3
 8014184:	d802      	bhi.n	801418c <ip4_input+0x74>
 8014186:	89fb      	ldrh	r3, [r7, #14]
 8014188:	2b13      	cmp	r3, #19
 801418a:	d804      	bhi.n	8014196 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f002 fb4f 	bl	8016830 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014192:	2300      	movs	r3, #0
 8014194:	e0db      	b.n	801434e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	691b      	ldr	r3, [r3, #16]
 801419a:	4a6f      	ldr	r2, [pc, #444]	; (8014358 <ip4_input+0x240>)
 801419c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	4a6d      	ldr	r2, [pc, #436]	; (8014358 <ip4_input+0x240>)
 80141a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80141a6:	4b6c      	ldr	r3, [pc, #432]	; (8014358 <ip4_input+0x240>)
 80141a8:	695b      	ldr	r3, [r3, #20]
 80141aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141ae:	2be0      	cmp	r3, #224	; 0xe0
 80141b0:	d112      	bne.n	80141d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141b8:	f003 0301 	and.w	r3, r3, #1
 80141bc:	b2db      	uxtb	r3, r3
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d007      	beq.n	80141d2 <ip4_input+0xba>
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	3304      	adds	r3, #4
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d002      	beq.n	80141d2 <ip4_input+0xba>
      netif = inp;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	613b      	str	r3, [r7, #16]
 80141d0:	e02a      	b.n	8014228 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141d2:	2300      	movs	r3, #0
 80141d4:	613b      	str	r3, [r7, #16]
 80141d6:	e027      	b.n	8014228 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80141d8:	6838      	ldr	r0, [r7, #0]
 80141da:	f7ff ff73 	bl	80140c4 <ip4_input_accept>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d002      	beq.n	80141ea <ip4_input+0xd2>
      netif = inp;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	613b      	str	r3, [r7, #16]
 80141e8:	e01e      	b.n	8014228 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141ea:	2300      	movs	r3, #0
 80141ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80141ee:	4b5a      	ldr	r3, [pc, #360]	; (8014358 <ip4_input+0x240>)
 80141f0:	695b      	ldr	r3, [r3, #20]
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	2b7f      	cmp	r3, #127	; 0x7f
 80141f6:	d017      	beq.n	8014228 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80141f8:	4b58      	ldr	r3, [pc, #352]	; (801435c <ip4_input+0x244>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	613b      	str	r3, [r7, #16]
 80141fe:	e00e      	b.n	801421e <ip4_input+0x106>
          if (netif == inp) {
 8014200:	693a      	ldr	r2, [r7, #16]
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	429a      	cmp	r2, r3
 8014206:	d006      	beq.n	8014216 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014208:	6938      	ldr	r0, [r7, #16]
 801420a:	f7ff ff5b 	bl	80140c4 <ip4_input_accept>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d108      	bne.n	8014226 <ip4_input+0x10e>
 8014214:	e000      	b.n	8014218 <ip4_input+0x100>
            continue;
 8014216:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	613b      	str	r3, [r7, #16]
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d1ed      	bne.n	8014200 <ip4_input+0xe8>
 8014224:	e000      	b.n	8014228 <ip4_input+0x110>
            break;
 8014226:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014228:	4b4b      	ldr	r3, [pc, #300]	; (8014358 <ip4_input+0x240>)
 801422a:	691b      	ldr	r3, [r3, #16]
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	4618      	mov	r0, r3
 8014230:	f000 f96e 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d105      	bne.n	8014246 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801423a:	4b47      	ldr	r3, [pc, #284]	; (8014358 <ip4_input+0x240>)
 801423c:	691b      	ldr	r3, [r3, #16]
 801423e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014242:	2be0      	cmp	r3, #224	; 0xe0
 8014244:	d104      	bne.n	8014250 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f002 faf2 	bl	8016830 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801424c:	2300      	movs	r3, #0
 801424e:	e07e      	b.n	801434e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d104      	bne.n	8014260 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f002 faea 	bl	8016830 <pbuf_free>
    return ERR_OK;
 801425c:	2300      	movs	r3, #0
 801425e:	e076      	b.n	801434e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	88db      	ldrh	r3, [r3, #6]
 8014264:	b29b      	uxth	r3, r3
 8014266:	461a      	mov	r2, r3
 8014268:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801426c:	4013      	ands	r3, r2
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00b      	beq.n	801428a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 fc92 	bl	8014b9c <ip4_reass>
 8014278:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d101      	bne.n	8014284 <ip4_input+0x16c>
      return ERR_OK;
 8014280:	2300      	movs	r3, #0
 8014282:	e064      	b.n	801434e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801428a:	4a33      	ldr	r2, [pc, #204]	; (8014358 <ip4_input+0x240>)
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014290:	4a31      	ldr	r2, [pc, #196]	; (8014358 <ip4_input+0x240>)
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014296:	4a30      	ldr	r2, [pc, #192]	; (8014358 <ip4_input+0x240>)
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	f003 030f 	and.w	r3, r3, #15
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	4b2a      	ldr	r3, [pc, #168]	; (8014358 <ip4_input+0x240>)
 80142ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80142b0:	89fb      	ldrh	r3, [r7, #14]
 80142b2:	4619      	mov	r1, r3
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f002 fa35 	bl	8016724 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	7a5b      	ldrb	r3, [r3, #9]
 80142be:	2b11      	cmp	r3, #17
 80142c0:	d006      	beq.n	80142d0 <ip4_input+0x1b8>
 80142c2:	2b11      	cmp	r3, #17
 80142c4:	dc13      	bgt.n	80142ee <ip4_input+0x1d6>
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d00c      	beq.n	80142e4 <ip4_input+0x1cc>
 80142ca:	2b06      	cmp	r3, #6
 80142cc:	d005      	beq.n	80142da <ip4_input+0x1c2>
 80142ce:	e00e      	b.n	80142ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80142d0:	6839      	ldr	r1, [r7, #0]
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f009 f93a 	bl	801d54c <udp_input>
        break;
 80142d8:	e026      	b.n	8014328 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f004 fd27 	bl	8018d30 <tcp_input>
        break;
 80142e2:	e021      	b.n	8014328 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff fbf6 	bl	8013ad8 <icmp_input>
        break;
 80142ec:	e01c      	b.n	8014328 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80142ee:	4b1a      	ldr	r3, [pc, #104]	; (8014358 <ip4_input+0x240>)
 80142f0:	695b      	ldr	r3, [r3, #20]
 80142f2:	6939      	ldr	r1, [r7, #16]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f000 f90b 	bl	8014510 <ip4_addr_isbroadcast_u32>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10f      	bne.n	8014320 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014300:	4b15      	ldr	r3, [pc, #84]	; (8014358 <ip4_input+0x240>)
 8014302:	695b      	ldr	r3, [r3, #20]
 8014304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014308:	2be0      	cmp	r3, #224	; 0xe0
 801430a:	d009      	beq.n	8014320 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801430c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014310:	4619      	mov	r1, r3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f002 fa79 	bl	801680a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014318:	2102      	movs	r1, #2
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff fcfc 	bl	8013d18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f002 fa85 	bl	8016830 <pbuf_free>
        break;
 8014326:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014328:	4b0b      	ldr	r3, [pc, #44]	; (8014358 <ip4_input+0x240>)
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801432e:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <ip4_input+0x240>)
 8014330:	2200      	movs	r2, #0
 8014332:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014334:	4b08      	ldr	r3, [pc, #32]	; (8014358 <ip4_input+0x240>)
 8014336:	2200      	movs	r2, #0
 8014338:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801433a:	4b07      	ldr	r3, [pc, #28]	; (8014358 <ip4_input+0x240>)
 801433c:	2200      	movs	r2, #0
 801433e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014340:	4b05      	ldr	r3, [pc, #20]	; (8014358 <ip4_input+0x240>)
 8014342:	2200      	movs	r2, #0
 8014344:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014346:	4b04      	ldr	r3, [pc, #16]	; (8014358 <ip4_input+0x240>)
 8014348:	2200      	movs	r2, #0
 801434a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801434c:	2300      	movs	r3, #0
}
 801434e:	4618      	mov	r0, r3
 8014350:	3718      	adds	r7, #24
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop
 8014358:	24005b38 	.word	0x24005b38
 801435c:	24008a18 	.word	0x24008a18

08014360 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b08a      	sub	sp, #40	; 0x28
 8014364:	af04      	add	r7, sp, #16
 8014366:	60f8      	str	r0, [r7, #12]
 8014368:	60b9      	str	r1, [r7, #8]
 801436a:	607a      	str	r2, [r7, #4]
 801436c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d009      	beq.n	801438c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d003      	beq.n	8014386 <ip4_output_if+0x26>
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d102      	bne.n	801438c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014388:	3304      	adds	r3, #4
 801438a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801438c:	78fa      	ldrb	r2, [r7, #3]
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	9302      	str	r3, [sp, #8]
 8014392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014396:	9301      	str	r3, [sp, #4]
 8014398:	f897 3020 	ldrb.w	r3, [r7, #32]
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4613      	mov	r3, r2
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	6979      	ldr	r1, [r7, #20]
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f000 f805 	bl	80143b4 <ip4_output_if_src>
 80143aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3718      	adds	r7, #24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b088      	sub	sp, #32
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
 80143c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	7b9b      	ldrb	r3, [r3, #14]
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d006      	beq.n	80143d8 <ip4_output_if_src+0x24>
 80143ca:	4b4b      	ldr	r3, [pc, #300]	; (80144f8 <ip4_output_if_src+0x144>)
 80143cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80143d0:	494a      	ldr	r1, [pc, #296]	; (80144fc <ip4_output_if_src+0x148>)
 80143d2:	484b      	ldr	r0, [pc, #300]	; (8014500 <ip4_output_if_src+0x14c>)
 80143d4:	f00b fb6e 	bl	801fab4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d060      	beq.n	80144a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80143de:	2314      	movs	r3, #20
 80143e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80143e2:	2114      	movs	r1, #20
 80143e4:	68f8      	ldr	r0, [r7, #12]
 80143e6:	f002 f98d 	bl	8016704 <pbuf_add_header>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d002      	beq.n	80143f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80143f0:	f06f 0301 	mvn.w	r3, #1
 80143f4:	e07c      	b.n	80144f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	895b      	ldrh	r3, [r3, #10]
 8014400:	2b13      	cmp	r3, #19
 8014402:	d806      	bhi.n	8014412 <ip4_output_if_src+0x5e>
 8014404:	4b3c      	ldr	r3, [pc, #240]	; (80144f8 <ip4_output_if_src+0x144>)
 8014406:	f44f 7262 	mov.w	r2, #904	; 0x388
 801440a:	493e      	ldr	r1, [pc, #248]	; (8014504 <ip4_output_if_src+0x150>)
 801440c:	483c      	ldr	r0, [pc, #240]	; (8014500 <ip4_output_if_src+0x14c>)
 801440e:	f00b fb51 	bl	801fab4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	78fa      	ldrb	r2, [r7, #3]
 8014416:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014418:	69fb      	ldr	r3, [r7, #28]
 801441a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801441e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014428:	8b7b      	ldrh	r3, [r7, #26]
 801442a:	089b      	lsrs	r3, r3, #2
 801442c:	b29b      	uxth	r3, r3
 801442e:	b2db      	uxtb	r3, r3
 8014430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014434:	b2da      	uxtb	r2, r3
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014440:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	891b      	ldrh	r3, [r3, #8]
 8014446:	4618      	mov	r0, r3
 8014448:	f7fe faf6 	bl	8012a38 <lwip_htons>
 801444c:	4603      	mov	r3, r0
 801444e:	461a      	mov	r2, r3
 8014450:	69fb      	ldr	r3, [r7, #28]
 8014452:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	2200      	movs	r2, #0
 8014458:	719a      	strb	r2, [r3, #6]
 801445a:	2200      	movs	r2, #0
 801445c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801445e:	4b2a      	ldr	r3, [pc, #168]	; (8014508 <ip4_output_if_src+0x154>)
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	4618      	mov	r0, r3
 8014464:	f7fe fae8 	bl	8012a38 <lwip_htons>
 8014468:	4603      	mov	r3, r0
 801446a:	461a      	mov	r2, r3
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014470:	4b25      	ldr	r3, [pc, #148]	; (8014508 <ip4_output_if_src+0x154>)
 8014472:	881b      	ldrh	r3, [r3, #0]
 8014474:	3301      	adds	r3, #1
 8014476:	b29a      	uxth	r2, r3
 8014478:	4b23      	ldr	r3, [pc, #140]	; (8014508 <ip4_output_if_src+0x154>)
 801447a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d104      	bne.n	801448c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014482:	4b22      	ldr	r3, [pc, #136]	; (801450c <ip4_output_if_src+0x158>)
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	69fb      	ldr	r3, [r7, #28]
 8014488:	60da      	str	r2, [r3, #12]
 801448a:	e003      	b.n	8014494 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	69fb      	ldr	r3, [r7, #28]
 8014492:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	2200      	movs	r2, #0
 8014498:	729a      	strb	r2, [r3, #10]
 801449a:	2200      	movs	r2, #0
 801449c:	72da      	strb	r2, [r3, #11]
 801449e:	e00f      	b.n	80144c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	895b      	ldrh	r3, [r3, #10]
 80144a4:	2b13      	cmp	r3, #19
 80144a6:	d802      	bhi.n	80144ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80144a8:	f06f 0301 	mvn.w	r3, #1
 80144ac:	e020      	b.n	80144f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80144ba:	f107 0314 	add.w	r3, r7, #20
 80144be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80144c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d00c      	beq.n	80144e2 <ip4_output_if_src+0x12e>
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	891a      	ldrh	r2, [r3, #8]
 80144cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d906      	bls.n	80144e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f000 fd4d 	bl	8014f78 <ip4_frag>
 80144de:	4603      	mov	r3, r0
 80144e0:	e006      	b.n	80144f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80144e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e4:	695b      	ldr	r3, [r3, #20]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	68f9      	ldr	r1, [r7, #12]
 80144ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144ec:	4798      	blx	r3
 80144ee:	4603      	mov	r3, r0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3720      	adds	r7, #32
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	08024f08 	.word	0x08024f08
 80144fc:	08024f68 	.word	0x08024f68
 8014500:	08024f74 	.word	0x08024f74
 8014504:	08024f9c 	.word	0x08024f9c
 8014508:	240051f2 	.word	0x240051f2
 801450c:	08027d08 	.word	0x08027d08

08014510 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014510:	b480      	push	{r7}
 8014512:	b085      	sub	sp, #20
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014524:	d002      	beq.n	801452c <ip4_addr_isbroadcast_u32+0x1c>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d101      	bne.n	8014530 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801452c:	2301      	movs	r3, #1
 801452e:	e02a      	b.n	8014586 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014536:	f003 0302 	and.w	r3, r3, #2
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801453e:	2300      	movs	r3, #0
 8014540:	e021      	b.n	8014586 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	3304      	adds	r3, #4
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	429a      	cmp	r2, r3
 801454c:	d101      	bne.n	8014552 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801454e:	2300      	movs	r3, #0
 8014550:	e019      	b.n	8014586 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	3304      	adds	r3, #4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	405a      	eors	r2, r3
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	3308      	adds	r3, #8
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4013      	ands	r3, r2
 8014564:	2b00      	cmp	r3, #0
 8014566:	d10d      	bne.n	8014584 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	3308      	adds	r3, #8
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	43da      	mvns	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	3308      	adds	r3, #8
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801457c:	429a      	cmp	r2, r3
 801457e:	d101      	bne.n	8014584 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014580:	2301      	movs	r3, #1
 8014582:	e000      	b.n	8014586 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014584:	2300      	movs	r3, #0
  }
}
 8014586:	4618      	mov	r0, r3
 8014588:	3714      	adds	r7, #20
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr
	...

08014594 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801459a:	2300      	movs	r3, #0
 801459c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801459e:	4b12      	ldr	r3, [pc, #72]	; (80145e8 <ip_reass_tmr+0x54>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80145a4:	e018      	b.n	80145d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	7fdb      	ldrb	r3, [r3, #31]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00b      	beq.n	80145c6 <ip_reass_tmr+0x32>
      r->timer--;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	7fdb      	ldrb	r3, [r3, #31]
 80145b2:	3b01      	subs	r3, #1
 80145b4:	b2da      	uxtb	r2, r3
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	60fb      	str	r3, [r7, #12]
 80145c4:	e008      	b.n	80145d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 f80a 	bl	80145ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d1e3      	bne.n	80145a6 <ip_reass_tmr+0x12>
    }
  }
}
 80145de:	bf00      	nop
 80145e0:	bf00      	nop
 80145e2:	3710      	adds	r7, #16
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	240051f4 	.word	0x240051f4

080145ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b088      	sub	sp, #32
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80145f6:	2300      	movs	r3, #0
 80145f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80145fa:	683a      	ldr	r2, [r7, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	429a      	cmp	r2, r3
 8014600:	d105      	bne.n	801460e <ip_reass_free_complete_datagram+0x22>
 8014602:	4b45      	ldr	r3, [pc, #276]	; (8014718 <ip_reass_free_complete_datagram+0x12c>)
 8014604:	22ab      	movs	r2, #171	; 0xab
 8014606:	4945      	ldr	r1, [pc, #276]	; (801471c <ip_reass_free_complete_datagram+0x130>)
 8014608:	4845      	ldr	r0, [pc, #276]	; (8014720 <ip_reass_free_complete_datagram+0x134>)
 801460a:	f00b fa53 	bl	801fab4 <iprintf>
  if (prev != NULL) {
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d00a      	beq.n	801462a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	429a      	cmp	r2, r3
 801461c:	d005      	beq.n	801462a <ip_reass_free_complete_datagram+0x3e>
 801461e:	4b3e      	ldr	r3, [pc, #248]	; (8014718 <ip_reass_free_complete_datagram+0x12c>)
 8014620:	22ad      	movs	r2, #173	; 0xad
 8014622:	4940      	ldr	r1, [pc, #256]	; (8014724 <ip_reass_free_complete_datagram+0x138>)
 8014624:	483e      	ldr	r0, [pc, #248]	; (8014720 <ip_reass_free_complete_datagram+0x134>)
 8014626:	f00b fa45 	bl	801fab4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	889b      	ldrh	r3, [r3, #4]
 8014636:	b29b      	uxth	r3, r3
 8014638:	2b00      	cmp	r3, #0
 801463a:	d12a      	bne.n	8014692 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	6858      	ldr	r0, [r3, #4]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	3308      	adds	r3, #8
 8014652:	2214      	movs	r2, #20
 8014654:	4619      	mov	r1, r3
 8014656:	f00a fb0d 	bl	801ec74 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801465a:	2101      	movs	r1, #1
 801465c:	69b8      	ldr	r0, [r7, #24]
 801465e:	f7ff fb6b 	bl	8013d38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014662:	69b8      	ldr	r0, [r7, #24]
 8014664:	f002 f96c 	bl	8016940 <pbuf_clen>
 8014668:	4603      	mov	r3, r0
 801466a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801466c:	8bfa      	ldrh	r2, [r7, #30]
 801466e:	8a7b      	ldrh	r3, [r7, #18]
 8014670:	4413      	add	r3, r2
 8014672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014676:	db05      	blt.n	8014684 <ip_reass_free_complete_datagram+0x98>
 8014678:	4b27      	ldr	r3, [pc, #156]	; (8014718 <ip_reass_free_complete_datagram+0x12c>)
 801467a:	22bc      	movs	r2, #188	; 0xbc
 801467c:	492a      	ldr	r1, [pc, #168]	; (8014728 <ip_reass_free_complete_datagram+0x13c>)
 801467e:	4828      	ldr	r0, [pc, #160]	; (8014720 <ip_reass_free_complete_datagram+0x134>)
 8014680:	f00b fa18 	bl	801fab4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014684:	8bfa      	ldrh	r2, [r7, #30]
 8014686:	8a7b      	ldrh	r3, [r7, #18]
 8014688:	4413      	add	r3, r2
 801468a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801468c:	69b8      	ldr	r0, [r7, #24]
 801468e:	f002 f8cf 	bl	8016830 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014698:	e01f      	b.n	80146da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80146aa:	68f8      	ldr	r0, [r7, #12]
 80146ac:	f002 f948 	bl	8016940 <pbuf_clen>
 80146b0:	4603      	mov	r3, r0
 80146b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80146b4:	8bfa      	ldrh	r2, [r7, #30]
 80146b6:	8a7b      	ldrh	r3, [r7, #18]
 80146b8:	4413      	add	r3, r2
 80146ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146be:	db05      	blt.n	80146cc <ip_reass_free_complete_datagram+0xe0>
 80146c0:	4b15      	ldr	r3, [pc, #84]	; (8014718 <ip_reass_free_complete_datagram+0x12c>)
 80146c2:	22cc      	movs	r2, #204	; 0xcc
 80146c4:	4918      	ldr	r1, [pc, #96]	; (8014728 <ip_reass_free_complete_datagram+0x13c>)
 80146c6:	4816      	ldr	r0, [pc, #88]	; (8014720 <ip_reass_free_complete_datagram+0x134>)
 80146c8:	f00b f9f4 	bl	801fab4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80146cc:	8bfa      	ldrh	r2, [r7, #30]
 80146ce:	8a7b      	ldrh	r3, [r7, #18]
 80146d0:	4413      	add	r3, r2
 80146d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f002 f8ab 	bl	8016830 <pbuf_free>
  while (p != NULL) {
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d1dc      	bne.n	801469a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80146e0:	6839      	ldr	r1, [r7, #0]
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f000 f8c2 	bl	801486c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80146e8:	4b10      	ldr	r3, [pc, #64]	; (801472c <ip_reass_free_complete_datagram+0x140>)
 80146ea:	881b      	ldrh	r3, [r3, #0]
 80146ec:	8bfa      	ldrh	r2, [r7, #30]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d905      	bls.n	80146fe <ip_reass_free_complete_datagram+0x112>
 80146f2:	4b09      	ldr	r3, [pc, #36]	; (8014718 <ip_reass_free_complete_datagram+0x12c>)
 80146f4:	22d2      	movs	r2, #210	; 0xd2
 80146f6:	490e      	ldr	r1, [pc, #56]	; (8014730 <ip_reass_free_complete_datagram+0x144>)
 80146f8:	4809      	ldr	r0, [pc, #36]	; (8014720 <ip_reass_free_complete_datagram+0x134>)
 80146fa:	f00b f9db 	bl	801fab4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80146fe:	4b0b      	ldr	r3, [pc, #44]	; (801472c <ip_reass_free_complete_datagram+0x140>)
 8014700:	881a      	ldrh	r2, [r3, #0]
 8014702:	8bfb      	ldrh	r3, [r7, #30]
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	b29a      	uxth	r2, r3
 8014708:	4b08      	ldr	r3, [pc, #32]	; (801472c <ip_reass_free_complete_datagram+0x140>)
 801470a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801470c:	8bfb      	ldrh	r3, [r7, #30]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3720      	adds	r7, #32
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	08024fcc 	.word	0x08024fcc
 801471c:	08025030 	.word	0x08025030
 8014720:	0802503c 	.word	0x0802503c
 8014724:	08025064 	.word	0x08025064
 8014728:	08025078 	.word	0x08025078
 801472c:	240051f8 	.word	0x240051f8
 8014730:	08025098 	.word	0x08025098

08014734 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b08a      	sub	sp, #40	; 0x28
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801473e:	2300      	movs	r3, #0
 8014740:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014746:	2300      	movs	r3, #0
 8014748:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801474a:	2300      	movs	r3, #0
 801474c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801474e:	2300      	movs	r3, #0
 8014750:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014752:	4b28      	ldr	r3, [pc, #160]	; (80147f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014758:	e030      	b.n	80147bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475c:	695a      	ldr	r2, [r3, #20]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	429a      	cmp	r2, r3
 8014764:	d10c      	bne.n	8014780 <ip_reass_remove_oldest_datagram+0x4c>
 8014766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014768:	699a      	ldr	r2, [r3, #24]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	429a      	cmp	r2, r3
 8014770:	d106      	bne.n	8014780 <ip_reass_remove_oldest_datagram+0x4c>
 8014772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014774:	899a      	ldrh	r2, [r3, #12]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	889b      	ldrh	r3, [r3, #4]
 801477a:	b29b      	uxth	r3, r3
 801477c:	429a      	cmp	r2, r3
 801477e:	d014      	beq.n	80147aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	3301      	adds	r3, #1
 8014784:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014786:	6a3b      	ldr	r3, [r7, #32]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d104      	bne.n	8014796 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	61bb      	str	r3, [r7, #24]
 8014794:	e009      	b.n	80147aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014798:	7fda      	ldrb	r2, [r3, #31]
 801479a:	6a3b      	ldr	r3, [r7, #32]
 801479c:	7fdb      	ldrb	r3, [r3, #31]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d803      	bhi.n	80147aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80147a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80147aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80147b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d1cb      	bne.n	801475a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80147c2:	6a3b      	ldr	r3, [r7, #32]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d008      	beq.n	80147da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80147c8:	69b9      	ldr	r1, [r7, #24]
 80147ca:	6a38      	ldr	r0, [r7, #32]
 80147cc:	f7ff ff0e 	bl	80145ec <ip_reass_free_complete_datagram>
 80147d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80147d2:	697a      	ldr	r2, [r7, #20]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	4413      	add	r3, r2
 80147d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80147da:	697a      	ldr	r2, [r7, #20]
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	429a      	cmp	r2, r3
 80147e0:	da02      	bge.n	80147e8 <ip_reass_remove_oldest_datagram+0xb4>
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	dcac      	bgt.n	8014742 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80147e8:	697b      	ldr	r3, [r7, #20]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3728      	adds	r7, #40	; 0x28
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	240051f4 	.word	0x240051f4

080147f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014802:	2004      	movs	r0, #4
 8014804:	f001 f92e 	bl	8015a64 <memp_malloc>
 8014808:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d110      	bne.n	8014832 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014810:	6839      	ldr	r1, [r7, #0]
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff ff8e 	bl	8014734 <ip_reass_remove_oldest_datagram>
 8014818:	4602      	mov	r2, r0
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	4293      	cmp	r3, r2
 801481e:	dc03      	bgt.n	8014828 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014820:	2004      	movs	r0, #4
 8014822:	f001 f91f 	bl	8015a64 <memp_malloc>
 8014826:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d101      	bne.n	8014832 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801482e:	2300      	movs	r3, #0
 8014830:	e016      	b.n	8014860 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014832:	2220      	movs	r2, #32
 8014834:	2100      	movs	r1, #0
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f00a fa44 	bl	801ecc4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	220f      	movs	r2, #15
 8014840:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014842:	4b09      	ldr	r3, [pc, #36]	; (8014868 <ip_reass_enqueue_new_datagram+0x70>)
 8014844:	681a      	ldr	r2, [r3, #0]
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801484a:	4a07      	ldr	r2, [pc, #28]	; (8014868 <ip_reass_enqueue_new_datagram+0x70>)
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	3308      	adds	r3, #8
 8014854:	2214      	movs	r2, #20
 8014856:	6879      	ldr	r1, [r7, #4]
 8014858:	4618      	mov	r0, r3
 801485a:	f00a fa0b 	bl	801ec74 <memcpy>
  return ipr;
 801485e:	68fb      	ldr	r3, [r7, #12]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	240051f4 	.word	0x240051f4

0801486c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014876:	4b10      	ldr	r3, [pc, #64]	; (80148b8 <ip_reass_dequeue_datagram+0x4c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	687a      	ldr	r2, [r7, #4]
 801487c:	429a      	cmp	r2, r3
 801487e:	d104      	bne.n	801488a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	4a0c      	ldr	r2, [pc, #48]	; (80148b8 <ip_reass_dequeue_datagram+0x4c>)
 8014886:	6013      	str	r3, [r2, #0]
 8014888:	e00d      	b.n	80148a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d106      	bne.n	801489e <ip_reass_dequeue_datagram+0x32>
 8014890:	4b0a      	ldr	r3, [pc, #40]	; (80148bc <ip_reass_dequeue_datagram+0x50>)
 8014892:	f240 1245 	movw	r2, #325	; 0x145
 8014896:	490a      	ldr	r1, [pc, #40]	; (80148c0 <ip_reass_dequeue_datagram+0x54>)
 8014898:	480a      	ldr	r0, [pc, #40]	; (80148c4 <ip_reass_dequeue_datagram+0x58>)
 801489a:	f00b f90b 	bl	801fab4 <iprintf>
    prev->next = ipr->next;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	2004      	movs	r0, #4
 80148aa:	f001 f94b 	bl	8015b44 <memp_free>
}
 80148ae:	bf00      	nop
 80148b0:	3708      	adds	r7, #8
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	240051f4 	.word	0x240051f4
 80148bc:	08024fcc 	.word	0x08024fcc
 80148c0:	080250bc 	.word	0x080250bc
 80148c4:	0802503c 	.word	0x0802503c

080148c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b08c      	sub	sp, #48	; 0x30
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80148d4:	2300      	movs	r3, #0
 80148d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80148d8:	2301      	movs	r3, #1
 80148da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	885b      	ldrh	r3, [r3, #2]
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7fe f8a5 	bl	8012a38 <lwip_htons>
 80148ee:	4603      	mov	r3, r0
 80148f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	f003 030f 	and.w	r3, r3, #15
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014900:	7e7b      	ldrb	r3, [r7, #25]
 8014902:	b29b      	uxth	r3, r3
 8014904:	8b7a      	ldrh	r2, [r7, #26]
 8014906:	429a      	cmp	r2, r3
 8014908:	d202      	bcs.n	8014910 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801490e:	e135      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014910:	7e7b      	ldrb	r3, [r7, #25]
 8014912:	b29b      	uxth	r3, r3
 8014914:	8b7a      	ldrh	r2, [r7, #26]
 8014916:	1ad3      	subs	r3, r2, r3
 8014918:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	88db      	ldrh	r3, [r3, #6]
 801491e:	b29b      	uxth	r3, r3
 8014920:	4618      	mov	r0, r3
 8014922:	f7fe f889 	bl	8012a38 <lwip_htons>
 8014926:	4603      	mov	r3, r0
 8014928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801492c:	b29b      	uxth	r3, r3
 801492e:	00db      	lsls	r3, r3, #3
 8014930:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493a:	2200      	movs	r2, #0
 801493c:	701a      	strb	r2, [r3, #0]
 801493e:	2200      	movs	r2, #0
 8014940:	705a      	strb	r2, [r3, #1]
 8014942:	2200      	movs	r2, #0
 8014944:	709a      	strb	r2, [r3, #2]
 8014946:	2200      	movs	r2, #0
 8014948:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494c:	8afa      	ldrh	r2, [r7, #22]
 801494e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014950:	8afa      	ldrh	r2, [r7, #22]
 8014952:	8b7b      	ldrh	r3, [r7, #26]
 8014954:	4413      	add	r3, r2
 8014956:	b29a      	uxth	r2, r3
 8014958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495e:	88db      	ldrh	r3, [r3, #6]
 8014960:	b29b      	uxth	r3, r3
 8014962:	8afa      	ldrh	r2, [r7, #22]
 8014964:	429a      	cmp	r2, r3
 8014966:	d902      	bls.n	801496e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801496c:	e106      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	627b      	str	r3, [r7, #36]	; 0x24
 8014974:	e068      	b.n	8014a48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801497e:	889b      	ldrh	r3, [r3, #4]
 8014980:	b29a      	uxth	r2, r3
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	889b      	ldrh	r3, [r3, #4]
 8014986:	b29b      	uxth	r3, r3
 8014988:	429a      	cmp	r2, r3
 801498a:	d235      	bcs.n	80149f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014990:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014994:	2b00      	cmp	r3, #0
 8014996:	d020      	beq.n	80149da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499a:	889b      	ldrh	r3, [r3, #4]
 801499c:	b29a      	uxth	r2, r3
 801499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a0:	88db      	ldrh	r3, [r3, #6]
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d307      	bcc.n	80149b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	88db      	ldrh	r3, [r3, #6]
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	889b      	ldrh	r3, [r3, #4]
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d902      	bls.n	80149be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149bc:	e0de      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80149be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80149c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c6:	88db      	ldrh	r3, [r3, #6]
 80149c8:	b29a      	uxth	r2, r3
 80149ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149cc:	889b      	ldrh	r3, [r3, #4]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d03d      	beq.n	8014a50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80149d4:	2300      	movs	r3, #0
 80149d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80149d8:	e03a      	b.n	8014a50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80149da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149dc:	88db      	ldrh	r3, [r3, #6]
 80149de:	b29a      	uxth	r2, r3
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	889b      	ldrh	r3, [r3, #4]
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d902      	bls.n	80149f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149ee:	e0c5      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	605a      	str	r2, [r3, #4]
      break;
 80149f6:	e02b      	b.n	8014a50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80149f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fa:	889b      	ldrh	r3, [r3, #4]
 80149fc:	b29a      	uxth	r2, r3
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	889b      	ldrh	r3, [r3, #4]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d102      	bne.n	8014a0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a0c:	e0b6      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a10:	889b      	ldrh	r3, [r3, #4]
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	88db      	ldrh	r3, [r3, #6]
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d202      	bcs.n	8014a24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a22:	e0ab      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d009      	beq.n	8014a3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2c:	88db      	ldrh	r3, [r3, #6]
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	889b      	ldrh	r3, [r3, #4]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d001      	beq.n	8014a3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d193      	bne.n	8014976 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014a4e:	e000      	b.n	8014a52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014a50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d12d      	bne.n	8014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d01c      	beq.n	8014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a60:	88db      	ldrh	r3, [r3, #6]
 8014a62:	b29a      	uxth	r2, r3
 8014a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a66:	889b      	ldrh	r3, [r3, #4]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d906      	bls.n	8014a7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014a6e:	4b45      	ldr	r3, [pc, #276]	; (8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014a74:	4944      	ldr	r1, [pc, #272]	; (8014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014a76:	4845      	ldr	r0, [pc, #276]	; (8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a78:	f00b f81c 	bl	801fab4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a84:	88db      	ldrh	r3, [r3, #6]
 8014a86:	b29a      	uxth	r2, r3
 8014a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8a:	889b      	ldrh	r3, [r3, #4]
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d010      	beq.n	8014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	623b      	str	r3, [r7, #32]
 8014a96:	e00d      	b.n	8014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d006      	beq.n	8014aae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014aa0:	4b38      	ldr	r3, [pc, #224]	; (8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014aa2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014aa6:	493a      	ldr	r1, [pc, #232]	; (8014b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014aa8:	4838      	ldr	r0, [pc, #224]	; (8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014aaa:	f00b f803 	bl	801fab4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	68ba      	ldr	r2, [r7, #8]
 8014ab2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d105      	bne.n	8014ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	7f9b      	ldrb	r3, [r3, #30]
 8014abe:	f003 0301 	and.w	r3, r3, #1
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d059      	beq.n	8014b7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014ac6:	6a3b      	ldr	r3, [r7, #32]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d04f      	beq.n	8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d006      	beq.n	8014ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	889b      	ldrh	r3, [r3, #4]
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d002      	beq.n	8014ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	623b      	str	r3, [r7, #32]
 8014ae6:	e041      	b.n	8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014af2:	e012      	b.n	8014b1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014afc:	88db      	ldrh	r3, [r3, #6]
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b02:	889b      	ldrh	r3, [r3, #4]
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d002      	beq.n	8014b10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	623b      	str	r3, [r7, #32]
            break;
 8014b0e:	e007      	b.n	8014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d1e9      	bne.n	8014af4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014b20:	6a3b      	ldr	r3, [r7, #32]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d022      	beq.n	8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d106      	bne.n	8014b3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014b2e:	4b15      	ldr	r3, [pc, #84]	; (8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b30:	f240 12df 	movw	r2, #479	; 0x1df
 8014b34:	4917      	ldr	r1, [pc, #92]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b36:	4815      	ldr	r0, [pc, #84]	; (8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b38:	f00a ffbc 	bl	801fab4 <iprintf>
          LWIP_ASSERT("sanity check",
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d106      	bne.n	8014b56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014b48:	4b0e      	ldr	r3, [pc, #56]	; (8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014b4e:	4911      	ldr	r1, [pc, #68]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b50:	480e      	ldr	r0, [pc, #56]	; (8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b52:	f00a ffaf 	bl	801fab4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d006      	beq.n	8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014b5e:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014b64:	490c      	ldr	r1, [pc, #48]	; (8014b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014b66:	4809      	ldr	r0, [pc, #36]	; (8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b68:	f00a ffa4 	bl	801fab4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014b6c:	6a3b      	ldr	r3, [r7, #32]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	bf14      	ite	ne
 8014b72:	2301      	movne	r3, #1
 8014b74:	2300      	moveq	r3, #0
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	e000      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014b7a:	2300      	movs	r3, #0
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3730      	adds	r7, #48	; 0x30
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	08024fcc 	.word	0x08024fcc
 8014b88:	080250d8 	.word	0x080250d8
 8014b8c:	0802503c 	.word	0x0802503c
 8014b90:	080250f8 	.word	0x080250f8
 8014b94:	08025130 	.word	0x08025130
 8014b98:	08025140 	.word	0x08025140

08014b9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b08e      	sub	sp, #56	; 0x38
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	f003 030f 	and.w	r3, r3, #15
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	2b14      	cmp	r3, #20
 8014bba:	f040 8167 	bne.w	8014e8c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc0:	88db      	ldrh	r3, [r3, #6]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fd ff37 	bl	8012a38 <lwip_htons>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	00db      	lsls	r3, r3, #3
 8014bd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd8:	885b      	ldrh	r3, [r3, #2]
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fd ff2b 	bl	8012a38 <lwip_htons>
 8014be2:	4603      	mov	r3, r0
 8014be4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	f003 030f 	and.w	r3, r3, #15
 8014bee:	b2db      	uxtb	r3, r3
 8014bf0:	009b      	lsls	r3, r3, #2
 8014bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	f0c0 8146 	bcc.w	8014e90 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f001 fe95 	bl	8016940 <pbuf_clen>
 8014c16:	4603      	mov	r3, r0
 8014c18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014c1a:	4b9f      	ldr	r3, [pc, #636]	; (8014e98 <ip4_reass+0x2fc>)
 8014c1c:	881b      	ldrh	r3, [r3, #0]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	8c3b      	ldrh	r3, [r7, #32]
 8014c22:	4413      	add	r3, r2
 8014c24:	2b0a      	cmp	r3, #10
 8014c26:	dd10      	ble.n	8014c4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c28:	8c3b      	ldrh	r3, [r7, #32]
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c2e:	f7ff fd81 	bl	8014734 <ip_reass_remove_oldest_datagram>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 812d 	beq.w	8014e94 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014c3a:	4b97      	ldr	r3, [pc, #604]	; (8014e98 <ip4_reass+0x2fc>)
 8014c3c:	881b      	ldrh	r3, [r3, #0]
 8014c3e:	461a      	mov	r2, r3
 8014c40:	8c3b      	ldrh	r3, [r7, #32]
 8014c42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c44:	2b0a      	cmp	r3, #10
 8014c46:	f300 8125 	bgt.w	8014e94 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c4a:	4b94      	ldr	r3, [pc, #592]	; (8014e9c <ip4_reass+0x300>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8014c50:	e015      	b.n	8014c7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c54:	695a      	ldr	r2, [r3, #20]
 8014c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d10c      	bne.n	8014c78 <ip4_reass+0xdc>
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	699a      	ldr	r2, [r3, #24]
 8014c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c64:	691b      	ldr	r3, [r3, #16]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d106      	bne.n	8014c78 <ip4_reass+0xdc>
 8014c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6c:	899a      	ldrh	r2, [r3, #12]
 8014c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c70:	889b      	ldrh	r3, [r3, #4]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d006      	beq.n	8014c86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d1e6      	bne.n	8014c52 <ip4_reass+0xb6>
 8014c84:	e000      	b.n	8014c88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014c86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d109      	bne.n	8014ca2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014c8e:	8c3b      	ldrh	r3, [r7, #32]
 8014c90:	4619      	mov	r1, r3
 8014c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c94:	f7ff fdb0 	bl	80147f8 <ip_reass_enqueue_new_datagram>
 8014c98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d11c      	bne.n	8014cda <ip4_reass+0x13e>
      goto nullreturn;
 8014ca0:	e109      	b.n	8014eb6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ca4:	88db      	ldrh	r3, [r3, #6]
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7fd fec5 	bl	8012a38 <lwip_htons>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d110      	bne.n	8014cda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cba:	89db      	ldrh	r3, [r3, #14]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7fd febb 	bl	8012a38 <lwip_htons>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d006      	beq.n	8014cda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cce:	3308      	adds	r3, #8
 8014cd0:	2214      	movs	r2, #20
 8014cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f009 ffcd 	bl	801ec74 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cdc:	88db      	ldrh	r3, [r3, #6]
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	f003 0320 	and.w	r3, r3, #32
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	bf0c      	ite	eq
 8014ce8:	2301      	moveq	r3, #1
 8014cea:	2300      	movne	r3, #0
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d00e      	beq.n	8014d14 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014cf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014cfa:	4413      	add	r3, r2
 8014cfc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014cfe:	8b7a      	ldrh	r2, [r7, #26]
 8014d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d02:	429a      	cmp	r2, r3
 8014d04:	f0c0 80a0 	bcc.w	8014e48 <ip4_reass+0x2ac>
 8014d08:	8b7b      	ldrh	r3, [r7, #26]
 8014d0a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	f200 809a 	bhi.w	8014e48 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014d14:	69fa      	ldr	r2, [r7, #28]
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d1a:	f7ff fdd5 	bl	80148c8 <ip_reass_chain_frag_into_datagram_and_validate>
 8014d1e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d26:	f000 8091 	beq.w	8014e4c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014d2a:	4b5b      	ldr	r3, [pc, #364]	; (8014e98 <ip4_reass+0x2fc>)
 8014d2c:	881a      	ldrh	r2, [r3, #0]
 8014d2e:	8c3b      	ldrh	r3, [r7, #32]
 8014d30:	4413      	add	r3, r2
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	4b58      	ldr	r3, [pc, #352]	; (8014e98 <ip4_reass+0x2fc>)
 8014d36:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d00d      	beq.n	8014d5a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d42:	4413      	add	r3, r2
 8014d44:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d48:	8a7a      	ldrh	r2, [r7, #18]
 8014d4a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4e:	7f9b      	ldrb	r3, [r3, #30]
 8014d50:	f043 0301 	orr.w	r3, r3, #1
 8014d54:	b2da      	uxtb	r2, r3
 8014d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d58:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d171      	bne.n	8014e44 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d62:	8b9b      	ldrh	r3, [r3, #28]
 8014d64:	3314      	adds	r3, #20
 8014d66:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7c:	3308      	adds	r3, #8
 8014d7e:	2214      	movs	r2, #20
 8014d80:	4619      	mov	r1, r3
 8014d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d84:	f009 ff76 	bl	801ec74 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014d88:	8a3b      	ldrh	r3, [r7, #16]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fd fe54 	bl	8012a38 <lwip_htons>
 8014d90:	4603      	mov	r3, r0
 8014d92:	461a      	mov	r2, r3
 8014d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d96:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	719a      	strb	r2, [r3, #6]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da4:	2200      	movs	r2, #0
 8014da6:	729a      	strb	r2, [r3, #10]
 8014da8:	2200      	movs	r2, #0
 8014daa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014db2:	e00d      	b.n	8014dd0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014dba:	2114      	movs	r1, #20
 8014dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014dbe:	f001 fcb1 	bl	8016724 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014dc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f001 fdf5 	bl	80169b4 <pbuf_cat>
      r = iprh->next_pbuf;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d1ee      	bne.n	8014db4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014dd6:	4b31      	ldr	r3, [pc, #196]	; (8014e9c <ip4_reass+0x300>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d102      	bne.n	8014de6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014de0:	2300      	movs	r3, #0
 8014de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014de4:	e010      	b.n	8014e08 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014de6:	4b2d      	ldr	r3, [pc, #180]	; (8014e9c <ip4_reass+0x300>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dec:	e007      	b.n	8014dfe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d006      	beq.n	8014e06 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d1f4      	bne.n	8014dee <ip4_reass+0x252>
 8014e04:	e000      	b.n	8014e08 <ip4_reass+0x26c>
          break;
 8014e06:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e0c:	f7ff fd2e 	bl	801486c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f001 fd95 	bl	8016940 <pbuf_clen>
 8014e16:	4603      	mov	r3, r0
 8014e18:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014e1a:	4b1f      	ldr	r3, [pc, #124]	; (8014e98 <ip4_reass+0x2fc>)
 8014e1c:	881b      	ldrh	r3, [r3, #0]
 8014e1e:	8c3a      	ldrh	r2, [r7, #32]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d906      	bls.n	8014e32 <ip4_reass+0x296>
 8014e24:	4b1e      	ldr	r3, [pc, #120]	; (8014ea0 <ip4_reass+0x304>)
 8014e26:	f240 229b 	movw	r2, #667	; 0x29b
 8014e2a:	491e      	ldr	r1, [pc, #120]	; (8014ea4 <ip4_reass+0x308>)
 8014e2c:	481e      	ldr	r0, [pc, #120]	; (8014ea8 <ip4_reass+0x30c>)
 8014e2e:	f00a fe41 	bl	801fab4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014e32:	4b19      	ldr	r3, [pc, #100]	; (8014e98 <ip4_reass+0x2fc>)
 8014e34:	881a      	ldrh	r2, [r3, #0]
 8014e36:	8c3b      	ldrh	r3, [r7, #32]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	4b16      	ldr	r3, [pc, #88]	; (8014e98 <ip4_reass+0x2fc>)
 8014e3e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	e03c      	b.n	8014ebe <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014e44:	2300      	movs	r3, #0
 8014e46:	e03a      	b.n	8014ebe <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014e48:	bf00      	nop
 8014e4a:	e000      	b.n	8014e4e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014e4c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d106      	bne.n	8014e62 <ip4_reass+0x2c6>
 8014e54:	4b12      	ldr	r3, [pc, #72]	; (8014ea0 <ip4_reass+0x304>)
 8014e56:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014e5a:	4914      	ldr	r1, [pc, #80]	; (8014eac <ip4_reass+0x310>)
 8014e5c:	4812      	ldr	r0, [pc, #72]	; (8014ea8 <ip4_reass+0x30c>)
 8014e5e:	f00a fe29 	bl	801fab4 <iprintf>
  if (ipr->p == NULL) {
 8014e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d124      	bne.n	8014eb4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014e6a:	4b0c      	ldr	r3, [pc, #48]	; (8014e9c <ip4_reass+0x300>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d006      	beq.n	8014e82 <ip4_reass+0x2e6>
 8014e74:	4b0a      	ldr	r3, [pc, #40]	; (8014ea0 <ip4_reass+0x304>)
 8014e76:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e7a:	490d      	ldr	r1, [pc, #52]	; (8014eb0 <ip4_reass+0x314>)
 8014e7c:	480a      	ldr	r0, [pc, #40]	; (8014ea8 <ip4_reass+0x30c>)
 8014e7e:	f00a fe19 	bl	801fab4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014e82:	2100      	movs	r1, #0
 8014e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e86:	f7ff fcf1 	bl	801486c <ip_reass_dequeue_datagram>
 8014e8a:	e014      	b.n	8014eb6 <ip4_reass+0x31a>
    goto nullreturn;
 8014e8c:	bf00      	nop
 8014e8e:	e012      	b.n	8014eb6 <ip4_reass+0x31a>
    goto nullreturn;
 8014e90:	bf00      	nop
 8014e92:	e010      	b.n	8014eb6 <ip4_reass+0x31a>
      goto nullreturn;
 8014e94:	bf00      	nop
 8014e96:	e00e      	b.n	8014eb6 <ip4_reass+0x31a>
 8014e98:	240051f8 	.word	0x240051f8
 8014e9c:	240051f4 	.word	0x240051f4
 8014ea0:	08024fcc 	.word	0x08024fcc
 8014ea4:	08025164 	.word	0x08025164
 8014ea8:	0802503c 	.word	0x0802503c
 8014eac:	08025180 	.word	0x08025180
 8014eb0:	0802518c 	.word	0x0802518c
  }

nullreturn:
 8014eb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f001 fcba 	bl	8016830 <pbuf_free>
  return NULL;
 8014ebc:	2300      	movs	r3, #0
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3738      	adds	r7, #56	; 0x38
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop

08014ec8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014ecc:	2005      	movs	r0, #5
 8014ece:	f000 fdc9 	bl	8015a64 <memp_malloc>
 8014ed2:	4603      	mov	r3, r0
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d106      	bne.n	8014ef4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014ee6:	4b07      	ldr	r3, [pc, #28]	; (8014f04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014ee8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014eec:	4906      	ldr	r1, [pc, #24]	; (8014f08 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014eee:	4807      	ldr	r0, [pc, #28]	; (8014f0c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014ef0:	f00a fde0 	bl	801fab4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014ef4:	6879      	ldr	r1, [r7, #4]
 8014ef6:	2005      	movs	r0, #5
 8014ef8:	f000 fe24 	bl	8015b44 <memp_free>
}
 8014efc:	bf00      	nop
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	08024fcc 	.word	0x08024fcc
 8014f08:	080251ac 	.word	0x080251ac
 8014f0c:	0802503c 	.word	0x0802503c

08014f10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d106      	bne.n	8014f30 <ipfrag_free_pbuf_custom+0x20>
 8014f22:	4b11      	ldr	r3, [pc, #68]	; (8014f68 <ipfrag_free_pbuf_custom+0x58>)
 8014f24:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014f28:	4910      	ldr	r1, [pc, #64]	; (8014f6c <ipfrag_free_pbuf_custom+0x5c>)
 8014f2a:	4811      	ldr	r0, [pc, #68]	; (8014f70 <ipfrag_free_pbuf_custom+0x60>)
 8014f2c:	f00a fdc2 	bl	801fab4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014f30:	68fa      	ldr	r2, [r7, #12]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d006      	beq.n	8014f46 <ipfrag_free_pbuf_custom+0x36>
 8014f38:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <ipfrag_free_pbuf_custom+0x58>)
 8014f3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014f3e:	490d      	ldr	r1, [pc, #52]	; (8014f74 <ipfrag_free_pbuf_custom+0x64>)
 8014f40:	480b      	ldr	r0, [pc, #44]	; (8014f70 <ipfrag_free_pbuf_custom+0x60>)
 8014f42:	f00a fdb7 	bl	801fab4 <iprintf>
  if (pcr->original != NULL) {
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	695b      	ldr	r3, [r3, #20]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	695b      	ldr	r3, [r3, #20]
 8014f52:	4618      	mov	r0, r3
 8014f54:	f001 fc6c 	bl	8016830 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014f58:	68f8      	ldr	r0, [r7, #12]
 8014f5a:	f7ff ffbd 	bl	8014ed8 <ip_frag_free_pbuf_custom_ref>
}
 8014f5e:	bf00      	nop
 8014f60:	3710      	adds	r7, #16
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	08024fcc 	.word	0x08024fcc
 8014f6c:	080251b8 	.word	0x080251b8
 8014f70:	0802503c 	.word	0x0802503c
 8014f74:	080251c4 	.word	0x080251c4

08014f78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b094      	sub	sp, #80	; 0x50
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014f84:	2300      	movs	r3, #0
 8014f86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f8e:	3b14      	subs	r3, #20
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	da00      	bge.n	8014f96 <ip4_frag+0x1e>
 8014f94:	3307      	adds	r3, #7
 8014f96:	10db      	asrs	r3, r3, #3
 8014f98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014f9a:	2314      	movs	r3, #20
 8014f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	f003 030f 	and.w	r3, r3, #15
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	2b14      	cmp	r3, #20
 8014fb8:	d002      	beq.n	8014fc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014fba:	f06f 0305 	mvn.w	r3, #5
 8014fbe:	e110      	b.n	80151e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	895b      	ldrh	r3, [r3, #10]
 8014fc4:	2b13      	cmp	r3, #19
 8014fc6:	d809      	bhi.n	8014fdc <ip4_frag+0x64>
 8014fc8:	4b88      	ldr	r3, [pc, #544]	; (80151ec <ip4_frag+0x274>)
 8014fca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014fce:	4988      	ldr	r1, [pc, #544]	; (80151f0 <ip4_frag+0x278>)
 8014fd0:	4888      	ldr	r0, [pc, #544]	; (80151f4 <ip4_frag+0x27c>)
 8014fd2:	f00a fd6f 	bl	801fab4 <iprintf>
 8014fd6:	f06f 0305 	mvn.w	r3, #5
 8014fda:	e102      	b.n	80151e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fde:	88db      	ldrh	r3, [r3, #6]
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fd fd28 	bl	8012a38 <lwip_htons>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014fec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014ff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	891b      	ldrh	r3, [r3, #8]
 8015002:	3b14      	subs	r3, #20
 8015004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015008:	e0e1      	b.n	80151ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801500a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	b29b      	uxth	r3, r3
 8015010:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015014:	4293      	cmp	r3, r2
 8015016:	bf28      	it	cs
 8015018:	4613      	movcs	r3, r2
 801501a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801501c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015020:	2114      	movs	r1, #20
 8015022:	200e      	movs	r0, #14
 8015024:	f001 f920 	bl	8016268 <pbuf_alloc>
 8015028:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502c:	2b00      	cmp	r3, #0
 801502e:	f000 80d5 	beq.w	80151dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015034:	895b      	ldrh	r3, [r3, #10]
 8015036:	2b13      	cmp	r3, #19
 8015038:	d806      	bhi.n	8015048 <ip4_frag+0xd0>
 801503a:	4b6c      	ldr	r3, [pc, #432]	; (80151ec <ip4_frag+0x274>)
 801503c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015040:	496d      	ldr	r1, [pc, #436]	; (80151f8 <ip4_frag+0x280>)
 8015042:	486c      	ldr	r0, [pc, #432]	; (80151f4 <ip4_frag+0x27c>)
 8015044:	f00a fd36 	bl	801fab4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	2214      	movs	r2, #20
 801504e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015050:	4618      	mov	r0, r3
 8015052:	f009 fe0f 	bl	801ec74 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801505c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801505e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015062:	e064      	b.n	801512e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	895a      	ldrh	r2, [r3, #10]
 8015068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801506a:	1ad3      	subs	r3, r2, r3
 801506c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	895b      	ldrh	r3, [r3, #10]
 8015072:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015074:	429a      	cmp	r2, r3
 8015076:	d906      	bls.n	8015086 <ip4_frag+0x10e>
 8015078:	4b5c      	ldr	r3, [pc, #368]	; (80151ec <ip4_frag+0x274>)
 801507a:	f240 322d 	movw	r2, #813	; 0x32d
 801507e:	495f      	ldr	r1, [pc, #380]	; (80151fc <ip4_frag+0x284>)
 8015080:	485c      	ldr	r0, [pc, #368]	; (80151f4 <ip4_frag+0x27c>)
 8015082:	f00a fd17 	bl	801fab4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015086:	8bfa      	ldrh	r2, [r7, #30]
 8015088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801508c:	4293      	cmp	r3, r2
 801508e:	bf28      	it	cs
 8015090:	4613      	movcs	r3, r2
 8015092:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <ip4_frag+0x132>
        poff = 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	60fb      	str	r3, [r7, #12]
        continue;
 80150a8:	e041      	b.n	801512e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80150aa:	f7ff ff0d 	bl	8014ec8 <ip_frag_alloc_pbuf_custom_ref>
 80150ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d103      	bne.n	80150be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80150b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150b8:	f001 fbba 	bl	8016830 <pbuf_free>
        goto memerr;
 80150bc:	e08f      	b.n	80151de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150c6:	4413      	add	r3, r2
 80150c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80150cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80150d0:	9201      	str	r2, [sp, #4]
 80150d2:	9300      	str	r3, [sp, #0]
 80150d4:	4603      	mov	r3, r0
 80150d6:	2241      	movs	r2, #65	; 0x41
 80150d8:	2000      	movs	r0, #0
 80150da:	f001 f9ef 	bl	80164bc <pbuf_alloced_custom>
 80150de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80150e6:	69b8      	ldr	r0, [r7, #24]
 80150e8:	f7ff fef6 	bl	8014ed8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80150ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150ee:	f001 fb9f 	bl	8016830 <pbuf_free>
        goto memerr;
 80150f2:	e074      	b.n	80151de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f001 fc3b 	bl	8016970 <pbuf_ref>
      pcr->original = p;
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	4a3f      	ldr	r2, [pc, #252]	; (8015200 <ip4_frag+0x288>)
 8015104:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015106:	6979      	ldr	r1, [r7, #20]
 8015108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801510a:	f001 fc53 	bl	80169b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801510e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801511c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015120:	2b00      	cmp	r3, #0
 8015122:	d004      	beq.n	801512e <ip4_frag+0x1b6>
        poff = 0;
 8015124:	2300      	movs	r3, #0
 8015126:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801512e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015132:	2b00      	cmp	r3, #0
 8015134:	d196      	bne.n	8015064 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015136:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801513c:	4413      	add	r3, r2
 801513e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015144:	f1a3 0213 	sub.w	r2, r3, #19
 8015148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801514c:	429a      	cmp	r2, r3
 801514e:	bfcc      	ite	gt
 8015150:	2301      	movgt	r3, #1
 8015152:	2300      	movle	r3, #0
 8015154:	b2db      	uxtb	r3, r3
 8015156:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015158:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801515c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015160:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015162:	6a3b      	ldr	r3, [r7, #32]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d002      	beq.n	801516e <ip4_frag+0x1f6>
 8015168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516a:	2b00      	cmp	r3, #0
 801516c:	d003      	beq.n	8015176 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801516e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015174:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015176:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015178:	4618      	mov	r0, r3
 801517a:	f7fd fc5d 	bl	8012a38 <lwip_htons>
 801517e:	4603      	mov	r3, r0
 8015180:	461a      	mov	r2, r3
 8015182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015184:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015188:	3314      	adds	r3, #20
 801518a:	b29b      	uxth	r3, r3
 801518c:	4618      	mov	r0, r3
 801518e:	f7fd fc53 	bl	8012a38 <lwip_htons>
 8015192:	4603      	mov	r3, r0
 8015194:	461a      	mov	r2, r3
 8015196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015198:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519c:	2200      	movs	r2, #0
 801519e:	729a      	strb	r2, [r3, #10]
 80151a0:	2200      	movs	r2, #0
 80151a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	695b      	ldr	r3, [r3, #20]
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151ac:	68b8      	ldr	r0, [r7, #8]
 80151ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80151b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151b2:	f001 fb3d 	bl	8016830 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80151b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80151c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80151c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151c8:	4413      	add	r3, r2
 80151ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80151ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f47f af19 	bne.w	801500a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80151d8:	2300      	movs	r3, #0
 80151da:	e002      	b.n	80151e2 <ip4_frag+0x26a>
      goto memerr;
 80151dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80151de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3748      	adds	r7, #72	; 0x48
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	08024fcc 	.word	0x08024fcc
 80151f0:	080251d0 	.word	0x080251d0
 80151f4:	0802503c 	.word	0x0802503c
 80151f8:	080251ec 	.word	0x080251ec
 80151fc:	0802520c 	.word	0x0802520c
 8015200:	08014f11 	.word	0x08014f11

08015204 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	4603      	mov	r3, r0
 801520c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801520e:	4b05      	ldr	r3, [pc, #20]	; (8015224 <ptr_to_mem+0x20>)
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	88fb      	ldrh	r3, [r7, #6]
 8015214:	4413      	add	r3, r2
}
 8015216:	4618      	mov	r0, r3
 8015218:	370c      	adds	r7, #12
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	240051fc 	.word	0x240051fc

08015228 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015230:	4b05      	ldr	r3, [pc, #20]	; (8015248 <mem_to_ptr+0x20>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	687a      	ldr	r2, [r7, #4]
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	b29b      	uxth	r3, r3
}
 801523a:	4618      	mov	r0, r3
 801523c:	370c      	adds	r7, #12
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr
 8015246:	bf00      	nop
 8015248:	240051fc 	.word	0x240051fc

0801524c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801524c:	b590      	push	{r4, r7, lr}
 801524e:	b085      	sub	sp, #20
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015254:	4b45      	ldr	r3, [pc, #276]	; (801536c <plug_holes+0x120>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	429a      	cmp	r2, r3
 801525c:	d206      	bcs.n	801526c <plug_holes+0x20>
 801525e:	4b44      	ldr	r3, [pc, #272]	; (8015370 <plug_holes+0x124>)
 8015260:	f240 12df 	movw	r2, #479	; 0x1df
 8015264:	4943      	ldr	r1, [pc, #268]	; (8015374 <plug_holes+0x128>)
 8015266:	4844      	ldr	r0, [pc, #272]	; (8015378 <plug_holes+0x12c>)
 8015268:	f00a fc24 	bl	801fab4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801526c:	4b43      	ldr	r3, [pc, #268]	; (801537c <plug_holes+0x130>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	429a      	cmp	r2, r3
 8015274:	d306      	bcc.n	8015284 <plug_holes+0x38>
 8015276:	4b3e      	ldr	r3, [pc, #248]	; (8015370 <plug_holes+0x124>)
 8015278:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801527c:	4940      	ldr	r1, [pc, #256]	; (8015380 <plug_holes+0x134>)
 801527e:	483e      	ldr	r0, [pc, #248]	; (8015378 <plug_holes+0x12c>)
 8015280:	f00a fc18 	bl	801fab4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	791b      	ldrb	r3, [r3, #4]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d006      	beq.n	801529a <plug_holes+0x4e>
 801528c:	4b38      	ldr	r3, [pc, #224]	; (8015370 <plug_holes+0x124>)
 801528e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015292:	493c      	ldr	r1, [pc, #240]	; (8015384 <plug_holes+0x138>)
 8015294:	4838      	ldr	r0, [pc, #224]	; (8015378 <plug_holes+0x12c>)
 8015296:	f00a fc0d 	bl	801fab4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	881b      	ldrh	r3, [r3, #0]
 801529e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80152a2:	d906      	bls.n	80152b2 <plug_holes+0x66>
 80152a4:	4b32      	ldr	r3, [pc, #200]	; (8015370 <plug_holes+0x124>)
 80152a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80152aa:	4937      	ldr	r1, [pc, #220]	; (8015388 <plug_holes+0x13c>)
 80152ac:	4832      	ldr	r0, [pc, #200]	; (8015378 <plug_holes+0x12c>)
 80152ae:	f00a fc01 	bl	801fab4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	881b      	ldrh	r3, [r3, #0]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ff ffa4 	bl	8015204 <ptr_to_mem>
 80152bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d024      	beq.n	8015310 <plug_holes+0xc4>
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	791b      	ldrb	r3, [r3, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d120      	bne.n	8015310 <plug_holes+0xc4>
 80152ce:	4b2b      	ldr	r3, [pc, #172]	; (801537c <plug_holes+0x130>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d01b      	beq.n	8015310 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80152d8:	4b2c      	ldr	r3, [pc, #176]	; (801538c <plug_holes+0x140>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	429a      	cmp	r2, r3
 80152e0:	d102      	bne.n	80152e8 <plug_holes+0x9c>
      lfree = mem;
 80152e2:	4a2a      	ldr	r2, [pc, #168]	; (801538c <plug_holes+0x140>)
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	881a      	ldrh	r2, [r3, #0]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	881b      	ldrh	r3, [r3, #0]
 80152f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80152f8:	d00a      	beq.n	8015310 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	4618      	mov	r0, r3
 8015300:	f7ff ff80 	bl	8015204 <ptr_to_mem>
 8015304:	4604      	mov	r4, r0
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7ff ff8e 	bl	8015228 <mem_to_ptr>
 801530c:	4603      	mov	r3, r0
 801530e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	885b      	ldrh	r3, [r3, #2]
 8015314:	4618      	mov	r0, r3
 8015316:	f7ff ff75 	bl	8015204 <ptr_to_mem>
 801531a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	429a      	cmp	r2, r3
 8015322:	d01f      	beq.n	8015364 <plug_holes+0x118>
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	791b      	ldrb	r3, [r3, #4]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d11b      	bne.n	8015364 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801532c:	4b17      	ldr	r3, [pc, #92]	; (801538c <plug_holes+0x140>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	429a      	cmp	r2, r3
 8015334:	d102      	bne.n	801533c <plug_holes+0xf0>
      lfree = pmem;
 8015336:	4a15      	ldr	r2, [pc, #84]	; (801538c <plug_holes+0x140>)
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	881a      	ldrh	r2, [r3, #0]
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	881b      	ldrh	r3, [r3, #0]
 8015348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801534c:	d00a      	beq.n	8015364 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	4618      	mov	r0, r3
 8015354:	f7ff ff56 	bl	8015204 <ptr_to_mem>
 8015358:	4604      	mov	r4, r0
 801535a:	68b8      	ldr	r0, [r7, #8]
 801535c:	f7ff ff64 	bl	8015228 <mem_to_ptr>
 8015360:	4603      	mov	r3, r0
 8015362:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015364:	bf00      	nop
 8015366:	3714      	adds	r7, #20
 8015368:	46bd      	mov	sp, r7
 801536a:	bd90      	pop	{r4, r7, pc}
 801536c:	240051fc 	.word	0x240051fc
 8015370:	0802521c 	.word	0x0802521c
 8015374:	08025278 	.word	0x08025278
 8015378:	08025290 	.word	0x08025290
 801537c:	24005200 	.word	0x24005200
 8015380:	080252b8 	.word	0x080252b8
 8015384:	080252d4 	.word	0x080252d4
 8015388:	080252f0 	.word	0x080252f0
 801538c:	24005204 	.word	0x24005204

08015390 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015396:	4b16      	ldr	r3, [pc, #88]	; (80153f0 <mem_init+0x60>)
 8015398:	4a16      	ldr	r2, [pc, #88]	; (80153f4 <mem_init+0x64>)
 801539a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801539c:	4b14      	ldr	r3, [pc, #80]	; (80153f0 <mem_init+0x60>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80153a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80153b6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80153ba:	f7ff ff23 	bl	8015204 <ptr_to_mem>
 80153be:	4603      	mov	r3, r0
 80153c0:	4a0d      	ldr	r2, [pc, #52]	; (80153f8 <mem_init+0x68>)
 80153c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80153c4:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <mem_init+0x68>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2201      	movs	r2, #1
 80153ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80153cc:	4b0a      	ldr	r3, [pc, #40]	; (80153f8 <mem_init+0x68>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80153d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80153d6:	4b08      	ldr	r3, [pc, #32]	; (80153f8 <mem_init+0x68>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80153de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80153e0:	4b03      	ldr	r3, [pc, #12]	; (80153f0 <mem_init+0x60>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4a05      	ldr	r2, [pc, #20]	; (80153fc <mem_init+0x6c>)
 80153e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80153e8:	bf00      	nop
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	240051fc 	.word	0x240051fc
 80153f4:	30044000 	.word	0x30044000
 80153f8:	24005200 	.word	0x24005200
 80153fc:	24005204 	.word	0x24005204

08015400 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b086      	sub	sp, #24
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff ff0d 	bl	8015228 <mem_to_ptr>
 801540e:	4603      	mov	r3, r0
 8015410:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	881b      	ldrh	r3, [r3, #0]
 8015416:	4618      	mov	r0, r3
 8015418:	f7ff fef4 	bl	8015204 <ptr_to_mem>
 801541c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	885b      	ldrh	r3, [r3, #2]
 8015422:	4618      	mov	r0, r3
 8015424:	f7ff feee 	bl	8015204 <ptr_to_mem>
 8015428:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015432:	d818      	bhi.n	8015466 <mem_link_valid+0x66>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	885b      	ldrh	r3, [r3, #2]
 8015438:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801543c:	d813      	bhi.n	8015466 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015442:	8afa      	ldrh	r2, [r7, #22]
 8015444:	429a      	cmp	r2, r3
 8015446:	d004      	beq.n	8015452 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	8afa      	ldrh	r2, [r7, #22]
 801544e:	429a      	cmp	r2, r3
 8015450:	d109      	bne.n	8015466 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015452:	4b08      	ldr	r3, [pc, #32]	; (8015474 <mem_link_valid+0x74>)
 8015454:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015456:	693a      	ldr	r2, [r7, #16]
 8015458:	429a      	cmp	r2, r3
 801545a:	d006      	beq.n	801546a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	885b      	ldrh	r3, [r3, #2]
 8015460:	8afa      	ldrh	r2, [r7, #22]
 8015462:	429a      	cmp	r2, r3
 8015464:	d001      	beq.n	801546a <mem_link_valid+0x6a>
    return 0;
 8015466:	2300      	movs	r3, #0
 8015468:	e000      	b.n	801546c <mem_link_valid+0x6c>
  }
  return 1;
 801546a:	2301      	movs	r3, #1
}
 801546c:	4618      	mov	r0, r3
 801546e:	3718      	adds	r7, #24
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	24005200 	.word	0x24005200

08015478 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d04c      	beq.n	8015520 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f003 0303 	and.w	r3, r3, #3
 801548c:	2b00      	cmp	r3, #0
 801548e:	d007      	beq.n	80154a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015490:	4b25      	ldr	r3, [pc, #148]	; (8015528 <mem_free+0xb0>)
 8015492:	f240 2273 	movw	r2, #627	; 0x273
 8015496:	4925      	ldr	r1, [pc, #148]	; (801552c <mem_free+0xb4>)
 8015498:	4825      	ldr	r0, [pc, #148]	; (8015530 <mem_free+0xb8>)
 801549a:	f00a fb0b 	bl	801fab4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801549e:	e040      	b.n	8015522 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3b08      	subs	r3, #8
 80154a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80154a6:	4b23      	ldr	r3, [pc, #140]	; (8015534 <mem_free+0xbc>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d306      	bcc.n	80154be <mem_free+0x46>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f103 020c 	add.w	r2, r3, #12
 80154b6:	4b20      	ldr	r3, [pc, #128]	; (8015538 <mem_free+0xc0>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d907      	bls.n	80154ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80154be:	4b1a      	ldr	r3, [pc, #104]	; (8015528 <mem_free+0xb0>)
 80154c0:	f240 227f 	movw	r2, #639	; 0x27f
 80154c4:	491d      	ldr	r1, [pc, #116]	; (801553c <mem_free+0xc4>)
 80154c6:	481a      	ldr	r0, [pc, #104]	; (8015530 <mem_free+0xb8>)
 80154c8:	f00a faf4 	bl	801fab4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80154cc:	e029      	b.n	8015522 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	791b      	ldrb	r3, [r3, #4]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d107      	bne.n	80154e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80154d6:	4b14      	ldr	r3, [pc, #80]	; (8015528 <mem_free+0xb0>)
 80154d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80154dc:	4918      	ldr	r1, [pc, #96]	; (8015540 <mem_free+0xc8>)
 80154de:	4814      	ldr	r0, [pc, #80]	; (8015530 <mem_free+0xb8>)
 80154e0:	f00a fae8 	bl	801fab4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80154e4:	e01d      	b.n	8015522 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	f7ff ff8a 	bl	8015400 <mem_link_valid>
 80154ec:	4603      	mov	r3, r0
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d107      	bne.n	8015502 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80154f2:	4b0d      	ldr	r3, [pc, #52]	; (8015528 <mem_free+0xb0>)
 80154f4:	f240 2295 	movw	r2, #661	; 0x295
 80154f8:	4912      	ldr	r1, [pc, #72]	; (8015544 <mem_free+0xcc>)
 80154fa:	480d      	ldr	r0, [pc, #52]	; (8015530 <mem_free+0xb8>)
 80154fc:	f00a fada 	bl	801fab4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015500:	e00f      	b.n	8015522 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2200      	movs	r2, #0
 8015506:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015508:	4b0f      	ldr	r3, [pc, #60]	; (8015548 <mem_free+0xd0>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	429a      	cmp	r2, r3
 8015510:	d202      	bcs.n	8015518 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015512:	4a0d      	ldr	r2, [pc, #52]	; (8015548 <mem_free+0xd0>)
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f7ff fe97 	bl	801524c <plug_holes>
 801551e:	e000      	b.n	8015522 <mem_free+0xaa>
    return;
 8015520:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015522:	3710      	adds	r7, #16
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	0802521c 	.word	0x0802521c
 801552c:	0802531c 	.word	0x0802531c
 8015530:	08025290 	.word	0x08025290
 8015534:	240051fc 	.word	0x240051fc
 8015538:	24005200 	.word	0x24005200
 801553c:	08025340 	.word	0x08025340
 8015540:	0802535c 	.word	0x0802535c
 8015544:	08025384 	.word	0x08025384
 8015548:	24005204 	.word	0x24005204

0801554c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b088      	sub	sp, #32
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	460b      	mov	r3, r1
 8015556:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015558:	887b      	ldrh	r3, [r7, #2]
 801555a:	3303      	adds	r3, #3
 801555c:	b29b      	uxth	r3, r3
 801555e:	f023 0303 	bic.w	r3, r3, #3
 8015562:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015564:	8bfb      	ldrh	r3, [r7, #30]
 8015566:	2b0b      	cmp	r3, #11
 8015568:	d801      	bhi.n	801556e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801556a:	230c      	movs	r3, #12
 801556c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801556e:	8bfb      	ldrh	r3, [r7, #30]
 8015570:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015574:	d803      	bhi.n	801557e <mem_trim+0x32>
 8015576:	8bfa      	ldrh	r2, [r7, #30]
 8015578:	887b      	ldrh	r3, [r7, #2]
 801557a:	429a      	cmp	r2, r3
 801557c:	d201      	bcs.n	8015582 <mem_trim+0x36>
    return NULL;
 801557e:	2300      	movs	r3, #0
 8015580:	e0cc      	b.n	801571c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015582:	4b68      	ldr	r3, [pc, #416]	; (8015724 <mem_trim+0x1d8>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	429a      	cmp	r2, r3
 801558a:	d304      	bcc.n	8015596 <mem_trim+0x4a>
 801558c:	4b66      	ldr	r3, [pc, #408]	; (8015728 <mem_trim+0x1dc>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	429a      	cmp	r2, r3
 8015594:	d306      	bcc.n	80155a4 <mem_trim+0x58>
 8015596:	4b65      	ldr	r3, [pc, #404]	; (801572c <mem_trim+0x1e0>)
 8015598:	f240 22d1 	movw	r2, #721	; 0x2d1
 801559c:	4964      	ldr	r1, [pc, #400]	; (8015730 <mem_trim+0x1e4>)
 801559e:	4865      	ldr	r0, [pc, #404]	; (8015734 <mem_trim+0x1e8>)
 80155a0:	f00a fa88 	bl	801fab4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80155a4:	4b5f      	ldr	r3, [pc, #380]	; (8015724 <mem_trim+0x1d8>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d304      	bcc.n	80155b8 <mem_trim+0x6c>
 80155ae:	4b5e      	ldr	r3, [pc, #376]	; (8015728 <mem_trim+0x1dc>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d301      	bcc.n	80155bc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	e0af      	b.n	801571c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	3b08      	subs	r3, #8
 80155c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80155c2:	69b8      	ldr	r0, [r7, #24]
 80155c4:	f7ff fe30 	bl	8015228 <mem_to_ptr>
 80155c8:	4603      	mov	r3, r0
 80155ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80155cc:	69bb      	ldr	r3, [r7, #24]
 80155ce:	881a      	ldrh	r2, [r3, #0]
 80155d0:	8afb      	ldrh	r3, [r7, #22]
 80155d2:	1ad3      	subs	r3, r2, r3
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	3b08      	subs	r3, #8
 80155d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80155da:	8bfa      	ldrh	r2, [r7, #30]
 80155dc:	8abb      	ldrh	r3, [r7, #20]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d906      	bls.n	80155f0 <mem_trim+0xa4>
 80155e2:	4b52      	ldr	r3, [pc, #328]	; (801572c <mem_trim+0x1e0>)
 80155e4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80155e8:	4953      	ldr	r1, [pc, #332]	; (8015738 <mem_trim+0x1ec>)
 80155ea:	4852      	ldr	r0, [pc, #328]	; (8015734 <mem_trim+0x1e8>)
 80155ec:	f00a fa62 	bl	801fab4 <iprintf>
  if (newsize > size) {
 80155f0:	8bfa      	ldrh	r2, [r7, #30]
 80155f2:	8abb      	ldrh	r3, [r7, #20]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d901      	bls.n	80155fc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80155f8:	2300      	movs	r3, #0
 80155fa:	e08f      	b.n	801571c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80155fc:	8bfa      	ldrh	r2, [r7, #30]
 80155fe:	8abb      	ldrh	r3, [r7, #20]
 8015600:	429a      	cmp	r2, r3
 8015602:	d101      	bne.n	8015608 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	e089      	b.n	801571c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	881b      	ldrh	r3, [r3, #0]
 801560c:	4618      	mov	r0, r3
 801560e:	f7ff fdf9 	bl	8015204 <ptr_to_mem>
 8015612:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	791b      	ldrb	r3, [r3, #4]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d13f      	bne.n	801569c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	881b      	ldrh	r3, [r3, #0]
 8015620:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015624:	d106      	bne.n	8015634 <mem_trim+0xe8>
 8015626:	4b41      	ldr	r3, [pc, #260]	; (801572c <mem_trim+0x1e0>)
 8015628:	f240 22f5 	movw	r2, #757	; 0x2f5
 801562c:	4943      	ldr	r1, [pc, #268]	; (801573c <mem_trim+0x1f0>)
 801562e:	4841      	ldr	r0, [pc, #260]	; (8015734 <mem_trim+0x1e8>)
 8015630:	f00a fa40 	bl	801fab4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	881b      	ldrh	r3, [r3, #0]
 8015638:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801563a:	8afa      	ldrh	r2, [r7, #22]
 801563c:	8bfb      	ldrh	r3, [r7, #30]
 801563e:	4413      	add	r3, r2
 8015640:	b29b      	uxth	r3, r3
 8015642:	3308      	adds	r3, #8
 8015644:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015646:	4b3e      	ldr	r3, [pc, #248]	; (8015740 <mem_trim+0x1f4>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	693a      	ldr	r2, [r7, #16]
 801564c:	429a      	cmp	r2, r3
 801564e:	d106      	bne.n	801565e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8015650:	89fb      	ldrh	r3, [r7, #14]
 8015652:	4618      	mov	r0, r3
 8015654:	f7ff fdd6 	bl	8015204 <ptr_to_mem>
 8015658:	4603      	mov	r3, r0
 801565a:	4a39      	ldr	r2, [pc, #228]	; (8015740 <mem_trim+0x1f4>)
 801565c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801565e:	89fb      	ldrh	r3, [r7, #14]
 8015660:	4618      	mov	r0, r3
 8015662:	f7ff fdcf 	bl	8015204 <ptr_to_mem>
 8015666:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	2200      	movs	r2, #0
 801566c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	89ba      	ldrh	r2, [r7, #12]
 8015672:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	8afa      	ldrh	r2, [r7, #22]
 8015678:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	89fa      	ldrh	r2, [r7, #14]
 801567e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	881b      	ldrh	r3, [r3, #0]
 8015684:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015688:	d047      	beq.n	801571a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	4618      	mov	r0, r3
 8015690:	f7ff fdb8 	bl	8015204 <ptr_to_mem>
 8015694:	4602      	mov	r2, r0
 8015696:	89fb      	ldrh	r3, [r7, #14]
 8015698:	8053      	strh	r3, [r2, #2]
 801569a:	e03e      	b.n	801571a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801569c:	8bfb      	ldrh	r3, [r7, #30]
 801569e:	f103 0214 	add.w	r2, r3, #20
 80156a2:	8abb      	ldrh	r3, [r7, #20]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d838      	bhi.n	801571a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80156a8:	8afa      	ldrh	r2, [r7, #22]
 80156aa:	8bfb      	ldrh	r3, [r7, #30]
 80156ac:	4413      	add	r3, r2
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	3308      	adds	r3, #8
 80156b2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	881b      	ldrh	r3, [r3, #0]
 80156b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80156bc:	d106      	bne.n	80156cc <mem_trim+0x180>
 80156be:	4b1b      	ldr	r3, [pc, #108]	; (801572c <mem_trim+0x1e0>)
 80156c0:	f240 3216 	movw	r2, #790	; 0x316
 80156c4:	491d      	ldr	r1, [pc, #116]	; (801573c <mem_trim+0x1f0>)
 80156c6:	481b      	ldr	r0, [pc, #108]	; (8015734 <mem_trim+0x1e8>)
 80156c8:	f00a f9f4 	bl	801fab4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80156cc:	89fb      	ldrh	r3, [r7, #14]
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7ff fd98 	bl	8015204 <ptr_to_mem>
 80156d4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80156d6:	4b1a      	ldr	r3, [pc, #104]	; (8015740 <mem_trim+0x1f4>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	693a      	ldr	r2, [r7, #16]
 80156dc:	429a      	cmp	r2, r3
 80156de:	d202      	bcs.n	80156e6 <mem_trim+0x19a>
      lfree = mem2;
 80156e0:	4a17      	ldr	r2, [pc, #92]	; (8015740 <mem_trim+0x1f4>)
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	2200      	movs	r2, #0
 80156ea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	881a      	ldrh	r2, [r3, #0]
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	8afa      	ldrh	r2, [r7, #22]
 80156f8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	89fa      	ldrh	r2, [r7, #14]
 80156fe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	881b      	ldrh	r3, [r3, #0]
 8015704:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015708:	d007      	beq.n	801571a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	881b      	ldrh	r3, [r3, #0]
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff fd78 	bl	8015204 <ptr_to_mem>
 8015714:	4602      	mov	r2, r0
 8015716:	89fb      	ldrh	r3, [r7, #14]
 8015718:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801571a:	687b      	ldr	r3, [r7, #4]
}
 801571c:	4618      	mov	r0, r3
 801571e:	3720      	adds	r7, #32
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	240051fc 	.word	0x240051fc
 8015728:	24005200 	.word	0x24005200
 801572c:	0802521c 	.word	0x0802521c
 8015730:	080253b8 	.word	0x080253b8
 8015734:	08025290 	.word	0x08025290
 8015738:	080253d0 	.word	0x080253d0
 801573c:	080253f0 	.word	0x080253f0
 8015740:	24005204 	.word	0x24005204

08015744 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b088      	sub	sp, #32
 8015748:	af00      	add	r7, sp, #0
 801574a:	4603      	mov	r3, r0
 801574c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801574e:	88fb      	ldrh	r3, [r7, #6]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <mem_malloc+0x14>
    return NULL;
 8015754:	2300      	movs	r3, #0
 8015756:	e0d9      	b.n	801590c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015758:	88fb      	ldrh	r3, [r7, #6]
 801575a:	3303      	adds	r3, #3
 801575c:	b29b      	uxth	r3, r3
 801575e:	f023 0303 	bic.w	r3, r3, #3
 8015762:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015764:	8bbb      	ldrh	r3, [r7, #28]
 8015766:	2b0b      	cmp	r3, #11
 8015768:	d801      	bhi.n	801576e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801576a:	230c      	movs	r3, #12
 801576c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801576e:	8bbb      	ldrh	r3, [r7, #28]
 8015770:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015774:	d803      	bhi.n	801577e <mem_malloc+0x3a>
 8015776:	8bba      	ldrh	r2, [r7, #28]
 8015778:	88fb      	ldrh	r3, [r7, #6]
 801577a:	429a      	cmp	r2, r3
 801577c:	d201      	bcs.n	8015782 <mem_malloc+0x3e>
    return NULL;
 801577e:	2300      	movs	r3, #0
 8015780:	e0c4      	b.n	801590c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015782:	4b64      	ldr	r3, [pc, #400]	; (8015914 <mem_malloc+0x1d0>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4618      	mov	r0, r3
 8015788:	f7ff fd4e 	bl	8015228 <mem_to_ptr>
 801578c:	4603      	mov	r3, r0
 801578e:	83fb      	strh	r3, [r7, #30]
 8015790:	e0b4      	b.n	80158fc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015792:	8bfb      	ldrh	r3, [r7, #30]
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff fd35 	bl	8015204 <ptr_to_mem>
 801579a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	791b      	ldrb	r3, [r3, #4]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f040 80a4 	bne.w	80158ee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	881b      	ldrh	r3, [r3, #0]
 80157aa:	461a      	mov	r2, r3
 80157ac:	8bfb      	ldrh	r3, [r7, #30]
 80157ae:	1ad3      	subs	r3, r2, r3
 80157b0:	f1a3 0208 	sub.w	r2, r3, #8
 80157b4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80157b6:	429a      	cmp	r2, r3
 80157b8:	f0c0 8099 	bcc.w	80158ee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	881b      	ldrh	r3, [r3, #0]
 80157c0:	461a      	mov	r2, r3
 80157c2:	8bfb      	ldrh	r3, [r7, #30]
 80157c4:	1ad3      	subs	r3, r2, r3
 80157c6:	f1a3 0208 	sub.w	r2, r3, #8
 80157ca:	8bbb      	ldrh	r3, [r7, #28]
 80157cc:	3314      	adds	r3, #20
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d333      	bcc.n	801583a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80157d2:	8bfa      	ldrh	r2, [r7, #30]
 80157d4:	8bbb      	ldrh	r3, [r7, #28]
 80157d6:	4413      	add	r3, r2
 80157d8:	b29b      	uxth	r3, r3
 80157da:	3308      	adds	r3, #8
 80157dc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80157de:	8a7b      	ldrh	r3, [r7, #18]
 80157e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80157e4:	d106      	bne.n	80157f4 <mem_malloc+0xb0>
 80157e6:	4b4c      	ldr	r3, [pc, #304]	; (8015918 <mem_malloc+0x1d4>)
 80157e8:	f240 3287 	movw	r2, #903	; 0x387
 80157ec:	494b      	ldr	r1, [pc, #300]	; (801591c <mem_malloc+0x1d8>)
 80157ee:	484c      	ldr	r0, [pc, #304]	; (8015920 <mem_malloc+0x1dc>)
 80157f0:	f00a f960 	bl	801fab4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80157f4:	8a7b      	ldrh	r3, [r7, #18]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7ff fd04 	bl	8015204 <ptr_to_mem>
 80157fc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	2200      	movs	r2, #0
 8015802:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	881a      	ldrh	r2, [r3, #0]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	8bfa      	ldrh	r2, [r7, #30]
 8015810:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	8a7a      	ldrh	r2, [r7, #18]
 8015816:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	2201      	movs	r2, #1
 801581c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015826:	d00b      	beq.n	8015840 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	881b      	ldrh	r3, [r3, #0]
 801582c:	4618      	mov	r0, r3
 801582e:	f7ff fce9 	bl	8015204 <ptr_to_mem>
 8015832:	4602      	mov	r2, r0
 8015834:	8a7b      	ldrh	r3, [r7, #18]
 8015836:	8053      	strh	r3, [r2, #2]
 8015838:	e002      	b.n	8015840 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	2201      	movs	r2, #1
 801583e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8015840:	4b34      	ldr	r3, [pc, #208]	; (8015914 <mem_malloc+0x1d0>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	697a      	ldr	r2, [r7, #20]
 8015846:	429a      	cmp	r2, r3
 8015848:	d127      	bne.n	801589a <mem_malloc+0x156>
          struct mem *cur = lfree;
 801584a:	4b32      	ldr	r3, [pc, #200]	; (8015914 <mem_malloc+0x1d0>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8015850:	e005      	b.n	801585e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015852:	69bb      	ldr	r3, [r7, #24]
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff fcd4 	bl	8015204 <ptr_to_mem>
 801585c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801585e:	69bb      	ldr	r3, [r7, #24]
 8015860:	791b      	ldrb	r3, [r3, #4]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d004      	beq.n	8015870 <mem_malloc+0x12c>
 8015866:	4b2f      	ldr	r3, [pc, #188]	; (8015924 <mem_malloc+0x1e0>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	69ba      	ldr	r2, [r7, #24]
 801586c:	429a      	cmp	r2, r3
 801586e:	d1f0      	bne.n	8015852 <mem_malloc+0x10e>
          }
          lfree = cur;
 8015870:	4a28      	ldr	r2, [pc, #160]	; (8015914 <mem_malloc+0x1d0>)
 8015872:	69bb      	ldr	r3, [r7, #24]
 8015874:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015876:	4b27      	ldr	r3, [pc, #156]	; (8015914 <mem_malloc+0x1d0>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	4b2a      	ldr	r3, [pc, #168]	; (8015924 <mem_malloc+0x1e0>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	429a      	cmp	r2, r3
 8015880:	d00b      	beq.n	801589a <mem_malloc+0x156>
 8015882:	4b24      	ldr	r3, [pc, #144]	; (8015914 <mem_malloc+0x1d0>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	791b      	ldrb	r3, [r3, #4]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d006      	beq.n	801589a <mem_malloc+0x156>
 801588c:	4b22      	ldr	r3, [pc, #136]	; (8015918 <mem_malloc+0x1d4>)
 801588e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015892:	4925      	ldr	r1, [pc, #148]	; (8015928 <mem_malloc+0x1e4>)
 8015894:	4822      	ldr	r0, [pc, #136]	; (8015920 <mem_malloc+0x1dc>)
 8015896:	f00a f90d 	bl	801fab4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801589a:	8bba      	ldrh	r2, [r7, #28]
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	4413      	add	r3, r2
 80158a0:	3308      	adds	r3, #8
 80158a2:	4a20      	ldr	r2, [pc, #128]	; (8015924 <mem_malloc+0x1e0>)
 80158a4:	6812      	ldr	r2, [r2, #0]
 80158a6:	4293      	cmp	r3, r2
 80158a8:	d906      	bls.n	80158b8 <mem_malloc+0x174>
 80158aa:	4b1b      	ldr	r3, [pc, #108]	; (8015918 <mem_malloc+0x1d4>)
 80158ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 80158b0:	491e      	ldr	r1, [pc, #120]	; (801592c <mem_malloc+0x1e8>)
 80158b2:	481b      	ldr	r0, [pc, #108]	; (8015920 <mem_malloc+0x1dc>)
 80158b4:	f00a f8fe 	bl	801fab4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	f003 0303 	and.w	r3, r3, #3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d006      	beq.n	80158d0 <mem_malloc+0x18c>
 80158c2:	4b15      	ldr	r3, [pc, #84]	; (8015918 <mem_malloc+0x1d4>)
 80158c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80158c8:	4919      	ldr	r1, [pc, #100]	; (8015930 <mem_malloc+0x1ec>)
 80158ca:	4815      	ldr	r0, [pc, #84]	; (8015920 <mem_malloc+0x1dc>)
 80158cc:	f00a f8f2 	bl	801fab4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	f003 0303 	and.w	r3, r3, #3
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d006      	beq.n	80158e8 <mem_malloc+0x1a4>
 80158da:	4b0f      	ldr	r3, [pc, #60]	; (8015918 <mem_malloc+0x1d4>)
 80158dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80158e0:	4914      	ldr	r1, [pc, #80]	; (8015934 <mem_malloc+0x1f0>)
 80158e2:	480f      	ldr	r0, [pc, #60]	; (8015920 <mem_malloc+0x1dc>)
 80158e4:	f00a f8e6 	bl	801fab4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	3308      	adds	r3, #8
 80158ec:	e00e      	b.n	801590c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80158ee:	8bfb      	ldrh	r3, [r7, #30]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff fc87 	bl	8015204 <ptr_to_mem>
 80158f6:	4603      	mov	r3, r0
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80158fc:	8bfa      	ldrh	r2, [r7, #30]
 80158fe:	8bbb      	ldrh	r3, [r7, #28]
 8015900:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8015904:	429a      	cmp	r2, r3
 8015906:	f4ff af44 	bcc.w	8015792 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801590a:	2300      	movs	r3, #0
}
 801590c:	4618      	mov	r0, r3
 801590e:	3720      	adds	r7, #32
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	24005204 	.word	0x24005204
 8015918:	0802521c 	.word	0x0802521c
 801591c:	080253f0 	.word	0x080253f0
 8015920:	08025290 	.word	0x08025290
 8015924:	24005200 	.word	0x24005200
 8015928:	08025404 	.word	0x08025404
 801592c:	08025420 	.word	0x08025420
 8015930:	08025450 	.word	0x08025450
 8015934:	08025480 	.word	0x08025480

08015938 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015938:	b480      	push	{r7}
 801593a:	b085      	sub	sp, #20
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	689b      	ldr	r3, [r3, #8]
 8015944:	2200      	movs	r2, #0
 8015946:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	3303      	adds	r3, #3
 801594e:	f023 0303 	bic.w	r3, r3, #3
 8015952:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015954:	2300      	movs	r3, #0
 8015956:	60fb      	str	r3, [r7, #12]
 8015958:	e011      	b.n	801597e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	689b      	ldr	r3, [r3, #8]
 8015968:	68ba      	ldr	r2, [r7, #8]
 801596a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	461a      	mov	r2, r3
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	4413      	add	r3, r2
 8015976:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	3301      	adds	r3, #1
 801597c:	60fb      	str	r3, [r7, #12]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	885b      	ldrh	r3, [r3, #2]
 8015982:	461a      	mov	r2, r3
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	4293      	cmp	r3, r2
 8015988:	dbe7      	blt.n	801595a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801598a:	bf00      	nop
 801598c:	bf00      	nop
 801598e:	3714      	adds	r7, #20
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr

08015998 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801599e:	2300      	movs	r3, #0
 80159a0:	80fb      	strh	r3, [r7, #6]
 80159a2:	e009      	b.n	80159b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80159a4:	88fb      	ldrh	r3, [r7, #6]
 80159a6:	4a08      	ldr	r2, [pc, #32]	; (80159c8 <memp_init+0x30>)
 80159a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7ff ffc3 	bl	8015938 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80159b2:	88fb      	ldrh	r3, [r7, #6]
 80159b4:	3301      	adds	r3, #1
 80159b6:	80fb      	strh	r3, [r7, #6]
 80159b8:	88fb      	ldrh	r3, [r7, #6]
 80159ba:	2b08      	cmp	r3, #8
 80159bc:	d9f2      	bls.n	80159a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80159be:	bf00      	nop
 80159c0:	bf00      	nop
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	08027d78 	.word	0x08027d78

080159cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b084      	sub	sp, #16
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	689b      	ldr	r3, [r3, #8]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d012      	beq.n	8015a08 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	689b      	ldr	r3, [r3, #8]
 80159e6:	68fa      	ldr	r2, [r7, #12]
 80159e8:	6812      	ldr	r2, [r2, #0]
 80159ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f003 0303 	and.w	r3, r3, #3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d006      	beq.n	8015a04 <do_memp_malloc_pool+0x38>
 80159f6:	4b07      	ldr	r3, [pc, #28]	; (8015a14 <do_memp_malloc_pool+0x48>)
 80159f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80159fc:	4906      	ldr	r1, [pc, #24]	; (8015a18 <do_memp_malloc_pool+0x4c>)
 80159fe:	4807      	ldr	r0, [pc, #28]	; (8015a1c <do_memp_malloc_pool+0x50>)
 8015a00:	f00a f858 	bl	801fab4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	e000      	b.n	8015a0a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3710      	adds	r7, #16
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	080254a4 	.word	0x080254a4
 8015a18:	08025500 	.word	0x08025500
 8015a1c:	08025524 	.word	0x08025524

08015a20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d106      	bne.n	8015a3c <memp_malloc_pool+0x1c>
 8015a2e:	4b0a      	ldr	r3, [pc, #40]	; (8015a58 <memp_malloc_pool+0x38>)
 8015a30:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015a34:	4909      	ldr	r1, [pc, #36]	; (8015a5c <memp_malloc_pool+0x3c>)
 8015a36:	480a      	ldr	r0, [pc, #40]	; (8015a60 <memp_malloc_pool+0x40>)
 8015a38:	f00a f83c 	bl	801fab4 <iprintf>
  if (desc == NULL) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d101      	bne.n	8015a46 <memp_malloc_pool+0x26>
    return NULL;
 8015a42:	2300      	movs	r3, #0
 8015a44:	e003      	b.n	8015a4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f7ff ffc0 	bl	80159cc <do_memp_malloc_pool>
 8015a4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	080254a4 	.word	0x080254a4
 8015a5c:	0802554c 	.word	0x0802554c
 8015a60:	08025524 	.word	0x08025524

08015a64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015a6e:	79fb      	ldrb	r3, [r7, #7]
 8015a70:	2b08      	cmp	r3, #8
 8015a72:	d908      	bls.n	8015a86 <memp_malloc+0x22>
 8015a74:	4b0a      	ldr	r3, [pc, #40]	; (8015aa0 <memp_malloc+0x3c>)
 8015a76:	f240 1257 	movw	r2, #343	; 0x157
 8015a7a:	490a      	ldr	r1, [pc, #40]	; (8015aa4 <memp_malloc+0x40>)
 8015a7c:	480a      	ldr	r0, [pc, #40]	; (8015aa8 <memp_malloc+0x44>)
 8015a7e:	f00a f819 	bl	801fab4 <iprintf>
 8015a82:	2300      	movs	r3, #0
 8015a84:	e008      	b.n	8015a98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015a86:	79fb      	ldrb	r3, [r7, #7]
 8015a88:	4a08      	ldr	r2, [pc, #32]	; (8015aac <memp_malloc+0x48>)
 8015a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7ff ff9c 	bl	80159cc <do_memp_malloc_pool>
 8015a94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015a96:	68fb      	ldr	r3, [r7, #12]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3710      	adds	r7, #16
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	080254a4 	.word	0x080254a4
 8015aa4:	08025560 	.word	0x08025560
 8015aa8:	08025524 	.word	0x08025524
 8015aac:	08027d78 	.word	0x08027d78

08015ab0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	f003 0303 	and.w	r3, r3, #3
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d006      	beq.n	8015ad2 <do_memp_free_pool+0x22>
 8015ac4:	4b0a      	ldr	r3, [pc, #40]	; (8015af0 <do_memp_free_pool+0x40>)
 8015ac6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015aca:	490a      	ldr	r1, [pc, #40]	; (8015af4 <do_memp_free_pool+0x44>)
 8015acc:	480a      	ldr	r0, [pc, #40]	; (8015af8 <do_memp_free_pool+0x48>)
 8015ace:	f009 fff1 	bl	801fab4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	68fa      	ldr	r2, [r7, #12]
 8015ae6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8015ae8:	bf00      	nop
 8015aea:	3710      	adds	r7, #16
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	080254a4 	.word	0x080254a4
 8015af4:	08025580 	.word	0x08025580
 8015af8:	08025524 	.word	0x08025524

08015afc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d106      	bne.n	8015b1a <memp_free_pool+0x1e>
 8015b0c:	4b0a      	ldr	r3, [pc, #40]	; (8015b38 <memp_free_pool+0x3c>)
 8015b0e:	f240 1295 	movw	r2, #405	; 0x195
 8015b12:	490a      	ldr	r1, [pc, #40]	; (8015b3c <memp_free_pool+0x40>)
 8015b14:	480a      	ldr	r0, [pc, #40]	; (8015b40 <memp_free_pool+0x44>)
 8015b16:	f009 ffcd 	bl	801fab4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d007      	beq.n	8015b30 <memp_free_pool+0x34>
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d004      	beq.n	8015b30 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8015b26:	6839      	ldr	r1, [r7, #0]
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f7ff ffc1 	bl	8015ab0 <do_memp_free_pool>
 8015b2e:	e000      	b.n	8015b32 <memp_free_pool+0x36>
    return;
 8015b30:	bf00      	nop
}
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	080254a4 	.word	0x080254a4
 8015b3c:	0802554c 	.word	0x0802554c
 8015b40:	08025524 	.word	0x08025524

08015b44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	6039      	str	r1, [r7, #0]
 8015b4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015b50:	79fb      	ldrb	r3, [r7, #7]
 8015b52:	2b08      	cmp	r3, #8
 8015b54:	d907      	bls.n	8015b66 <memp_free+0x22>
 8015b56:	4b0c      	ldr	r3, [pc, #48]	; (8015b88 <memp_free+0x44>)
 8015b58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015b5c:	490b      	ldr	r1, [pc, #44]	; (8015b8c <memp_free+0x48>)
 8015b5e:	480c      	ldr	r0, [pc, #48]	; (8015b90 <memp_free+0x4c>)
 8015b60:	f009 ffa8 	bl	801fab4 <iprintf>
 8015b64:	e00c      	b.n	8015b80 <memp_free+0x3c>

  if (mem == NULL) {
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d008      	beq.n	8015b7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015b6c:	79fb      	ldrb	r3, [r7, #7]
 8015b6e:	4a09      	ldr	r2, [pc, #36]	; (8015b94 <memp_free+0x50>)
 8015b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b74:	6839      	ldr	r1, [r7, #0]
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7ff ff9a 	bl	8015ab0 <do_memp_free_pool>
 8015b7c:	e000      	b.n	8015b80 <memp_free+0x3c>
    return;
 8015b7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015b80:	3708      	adds	r7, #8
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	080254a4 	.word	0x080254a4
 8015b8c:	080255a0 	.word	0x080255a0
 8015b90:	08025524 	.word	0x08025524
 8015b94:	08027d78 	.word	0x08027d78

08015b98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015b98:	b480      	push	{r7}
 8015b9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015b9c:	bf00      	nop
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr
	...

08015ba8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b086      	sub	sp, #24
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	60f8      	str	r0, [r7, #12]
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	607a      	str	r2, [r7, #4]
 8015bb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d108      	bne.n	8015bce <netif_add+0x26>
 8015bbc:	4b57      	ldr	r3, [pc, #348]	; (8015d1c <netif_add+0x174>)
 8015bbe:	f240 1227 	movw	r2, #295	; 0x127
 8015bc2:	4957      	ldr	r1, [pc, #348]	; (8015d20 <netif_add+0x178>)
 8015bc4:	4857      	ldr	r0, [pc, #348]	; (8015d24 <netif_add+0x17c>)
 8015bc6:	f009 ff75 	bl	801fab4 <iprintf>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	e0a2      	b.n	8015d14 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d108      	bne.n	8015be6 <netif_add+0x3e>
 8015bd4:	4b51      	ldr	r3, [pc, #324]	; (8015d1c <netif_add+0x174>)
 8015bd6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015bda:	4953      	ldr	r1, [pc, #332]	; (8015d28 <netif_add+0x180>)
 8015bdc:	4851      	ldr	r0, [pc, #324]	; (8015d24 <netif_add+0x17c>)
 8015bde:	f009 ff69 	bl	801fab4 <iprintf>
 8015be2:	2300      	movs	r3, #0
 8015be4:	e096      	b.n	8015d14 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d101      	bne.n	8015bf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015bec:	4b4f      	ldr	r3, [pc, #316]	; (8015d2c <netif_add+0x184>)
 8015bee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d101      	bne.n	8015bfa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015bf6:	4b4d      	ldr	r3, [pc, #308]	; (8015d2c <netif_add+0x184>)
 8015bf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d101      	bne.n	8015c04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015c00:	4b4a      	ldr	r3, [pc, #296]	; (8015d2c <netif_add+0x184>)
 8015c02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	2200      	movs	r2, #0
 8015c08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2200      	movs	r2, #0
 8015c14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	4a45      	ldr	r2, [pc, #276]	; (8015d30 <netif_add+0x188>)
 8015c1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2200      	movs	r2, #0
 8015c26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	6a3a      	ldr	r2, [r7, #32]
 8015c34:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015c36:	4b3f      	ldr	r3, [pc, #252]	; (8015d34 <netif_add+0x18c>)
 8015c38:	781a      	ldrb	r2, [r3, #0]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	68b9      	ldr	r1, [r7, #8]
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f000 f913 	bl	8015e78 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	4798      	blx	r3
 8015c58:	4603      	mov	r3, r0
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d001      	beq.n	8015c62 <netif_add+0xba>
    return NULL;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	e058      	b.n	8015d14 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c68:	2bff      	cmp	r3, #255	; 0xff
 8015c6a:	d103      	bne.n	8015c74 <netif_add+0xcc>
        netif->num = 0;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8015c74:	2300      	movs	r3, #0
 8015c76:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015c78:	4b2f      	ldr	r3, [pc, #188]	; (8015d38 <netif_add+0x190>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	617b      	str	r3, [r7, #20]
 8015c7e:	e02b      	b.n	8015cd8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d106      	bne.n	8015c96 <netif_add+0xee>
 8015c88:	4b24      	ldr	r3, [pc, #144]	; (8015d1c <netif_add+0x174>)
 8015c8a:	f240 128b 	movw	r2, #395	; 0x18b
 8015c8e:	492b      	ldr	r1, [pc, #172]	; (8015d3c <netif_add+0x194>)
 8015c90:	4824      	ldr	r0, [pc, #144]	; (8015d24 <netif_add+0x17c>)
 8015c92:	f009 ff0f 	bl	801fab4 <iprintf>
        num_netifs++;
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	2bff      	cmp	r3, #255	; 0xff
 8015ca0:	dd06      	ble.n	8015cb0 <netif_add+0x108>
 8015ca2:	4b1e      	ldr	r3, [pc, #120]	; (8015d1c <netif_add+0x174>)
 8015ca4:	f240 128d 	movw	r2, #397	; 0x18d
 8015ca8:	4925      	ldr	r1, [pc, #148]	; (8015d40 <netif_add+0x198>)
 8015caa:	481e      	ldr	r0, [pc, #120]	; (8015d24 <netif_add+0x17c>)
 8015cac:	f009 ff02 	bl	801fab4 <iprintf>
        if (netif2->num == netif->num) {
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d108      	bne.n	8015cd2 <netif_add+0x12a>
          netif->num++;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	b2da      	uxtb	r2, r3
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8015cd0:	e005      	b.n	8015cde <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	617b      	str	r3, [r7, #20]
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d1d0      	bne.n	8015c80 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d1be      	bne.n	8015c62 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cea:	2bfe      	cmp	r3, #254	; 0xfe
 8015cec:	d103      	bne.n	8015cf6 <netif_add+0x14e>
    netif_num = 0;
 8015cee:	4b11      	ldr	r3, [pc, #68]	; (8015d34 <netif_add+0x18c>)
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	701a      	strb	r2, [r3, #0]
 8015cf4:	e006      	b.n	8015d04 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	b2da      	uxtb	r2, r3
 8015d00:	4b0c      	ldr	r3, [pc, #48]	; (8015d34 <netif_add+0x18c>)
 8015d02:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015d04:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <netif_add+0x190>)
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015d0c:	4a0a      	ldr	r2, [pc, #40]	; (8015d38 <netif_add+0x190>)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015d12:	68fb      	ldr	r3, [r7, #12]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3718      	adds	r7, #24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	080255bc 	.word	0x080255bc
 8015d20:	08025678 	.word	0x08025678
 8015d24:	08025634 	.word	0x08025634
 8015d28:	08025694 	.word	0x08025694
 8015d2c:	08027d08 	.word	0x08027d08
 8015d30:	08016153 	.word	0x08016153
 8015d34:	2400522c 	.word	0x2400522c
 8015d38:	24008a18 	.word	0x24008a18
 8015d3c:	080256b8 	.word	0x080256b8
 8015d40:	080256cc 	.word	0x080256cc

08015d44 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f002 ff9b 	bl	8018c8c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015d56:	6839      	ldr	r1, [r7, #0]
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f007 fe19 	bl	801d990 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015d5e:	bf00      	nop
 8015d60:	3708      	adds	r7, #8
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
	...

08015d68 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b086      	sub	sp, #24
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	60f8      	str	r0, [r7, #12]
 8015d70:	60b9      	str	r1, [r7, #8]
 8015d72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d106      	bne.n	8015d88 <netif_do_set_ipaddr+0x20>
 8015d7a:	4b1d      	ldr	r3, [pc, #116]	; (8015df0 <netif_do_set_ipaddr+0x88>)
 8015d7c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015d80:	491c      	ldr	r1, [pc, #112]	; (8015df4 <netif_do_set_ipaddr+0x8c>)
 8015d82:	481d      	ldr	r0, [pc, #116]	; (8015df8 <netif_do_set_ipaddr+0x90>)
 8015d84:	f009 fe96 	bl	801fab4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d106      	bne.n	8015d9c <netif_do_set_ipaddr+0x34>
 8015d8e:	4b18      	ldr	r3, [pc, #96]	; (8015df0 <netif_do_set_ipaddr+0x88>)
 8015d90:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015d94:	4917      	ldr	r1, [pc, #92]	; (8015df4 <netif_do_set_ipaddr+0x8c>)
 8015d96:	4818      	ldr	r0, [pc, #96]	; (8015df8 <netif_do_set_ipaddr+0x90>)
 8015d98:	f009 fe8c 	bl	801fab4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	3304      	adds	r3, #4
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d01c      	beq.n	8015de4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	3304      	adds	r3, #4
 8015db4:	681a      	ldr	r2, [r3, #0]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015dba:	f107 0314 	add.w	r3, r7, #20
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f7ff ffbf 	bl	8015d44 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d002      	beq.n	8015dd2 <netif_do_set_ipaddr+0x6a>
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	e000      	b.n	8015dd4 <netif_do_set_ipaddr+0x6c>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	68fa      	ldr	r2, [r7, #12]
 8015dd6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015dd8:	2101      	movs	r1, #1
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	f000 f8d2 	bl	8015f84 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015de0:	2301      	movs	r3, #1
 8015de2:	e000      	b.n	8015de6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015de4:	2300      	movs	r3, #0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3718      	adds	r7, #24
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	080255bc 	.word	0x080255bc
 8015df4:	080256fc 	.word	0x080256fc
 8015df8:	08025634 	.word	0x08025634

08015dfc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b085      	sub	sp, #20
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	3308      	adds	r3, #8
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d00a      	beq.n	8015e2c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <netif_do_set_netmask+0x26>
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	e000      	b.n	8015e24 <netif_do_set_netmask+0x28>
 8015e22:	2300      	movs	r3, #0
 8015e24:	68fa      	ldr	r2, [r7, #12]
 8015e26:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e000      	b.n	8015e2e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015e2c:	2300      	movs	r3, #0
}
 8015e2e:	4618      	mov	r0, r3
 8015e30:	3714      	adds	r7, #20
 8015e32:	46bd      	mov	sp, r7
 8015e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e38:	4770      	bx	lr

08015e3a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015e3a:	b480      	push	{r7}
 8015e3c:	b085      	sub	sp, #20
 8015e3e:	af00      	add	r7, sp, #0
 8015e40:	60f8      	str	r0, [r7, #12]
 8015e42:	60b9      	str	r1, [r7, #8]
 8015e44:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	330c      	adds	r3, #12
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d00a      	beq.n	8015e6a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d002      	beq.n	8015e60 <netif_do_set_gw+0x26>
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	e000      	b.n	8015e62 <netif_do_set_gw+0x28>
 8015e60:	2300      	movs	r3, #0
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015e66:	2301      	movs	r3, #1
 8015e68:	e000      	b.n	8015e6c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3714      	adds	r7, #20
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b088      	sub	sp, #32
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015e86:	2300      	movs	r3, #0
 8015e88:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d101      	bne.n	8015e98 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015e94:	4b1c      	ldr	r3, [pc, #112]	; (8015f08 <netif_set_addr+0x90>)
 8015e96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d101      	bne.n	8015ea2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015e9e:	4b1a      	ldr	r3, [pc, #104]	; (8015f08 <netif_set_addr+0x90>)
 8015ea0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d101      	bne.n	8015eac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015ea8:	4b17      	ldr	r3, [pc, #92]	; (8015f08 <netif_set_addr+0x90>)
 8015eaa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d003      	beq.n	8015eba <netif_set_addr+0x42>
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d101      	bne.n	8015ebe <netif_set_addr+0x46>
 8015eba:	2301      	movs	r3, #1
 8015ebc:	e000      	b.n	8015ec0 <netif_set_addr+0x48>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d006      	beq.n	8015ed6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015ec8:	f107 0310 	add.w	r3, r7, #16
 8015ecc:	461a      	mov	r2, r3
 8015ece:	68b9      	ldr	r1, [r7, #8]
 8015ed0:	68f8      	ldr	r0, [r7, #12]
 8015ed2:	f7ff ff49 	bl	8015d68 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015ed6:	69fa      	ldr	r2, [r7, #28]
 8015ed8:	6879      	ldr	r1, [r7, #4]
 8015eda:	68f8      	ldr	r0, [r7, #12]
 8015edc:	f7ff ff8e 	bl	8015dfc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015ee0:	69ba      	ldr	r2, [r7, #24]
 8015ee2:	6839      	ldr	r1, [r7, #0]
 8015ee4:	68f8      	ldr	r0, [r7, #12]
 8015ee6:	f7ff ffa8 	bl	8015e3a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d106      	bne.n	8015efe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015ef0:	f107 0310 	add.w	r3, r7, #16
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	68b9      	ldr	r1, [r7, #8]
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	f7ff ff35 	bl	8015d68 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015efe:	bf00      	nop
 8015f00:	3720      	adds	r7, #32
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
 8015f06:	bf00      	nop
 8015f08:	08027d08 	.word	0x08027d08

08015f0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b083      	sub	sp, #12
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015f14:	4a04      	ldr	r2, [pc, #16]	; (8015f28 <netif_set_default+0x1c>)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015f1a:	bf00      	nop
 8015f1c:	370c      	adds	r7, #12
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop
 8015f28:	24008a1c 	.word	0x24008a1c

08015f2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d107      	bne.n	8015f4a <netif_set_up+0x1e>
 8015f3a:	4b0f      	ldr	r3, [pc, #60]	; (8015f78 <netif_set_up+0x4c>)
 8015f3c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015f40:	490e      	ldr	r1, [pc, #56]	; (8015f7c <netif_set_up+0x50>)
 8015f42:	480f      	ldr	r0, [pc, #60]	; (8015f80 <netif_set_up+0x54>)
 8015f44:	f009 fdb6 	bl	801fab4 <iprintf>
 8015f48:	e013      	b.n	8015f72 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f50:	f003 0301 	and.w	r3, r3, #1
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d10c      	bne.n	8015f72 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f5e:	f043 0301 	orr.w	r3, r3, #1
 8015f62:	b2da      	uxtb	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015f6a:	2103      	movs	r1, #3
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f000 f809 	bl	8015f84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015f72:	3708      	adds	r7, #8
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	080255bc 	.word	0x080255bc
 8015f7c:	0802576c 	.word	0x0802576c
 8015f80:	08025634 	.word	0x08025634

08015f84 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	460b      	mov	r3, r1
 8015f8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d106      	bne.n	8015fa4 <netif_issue_reports+0x20>
 8015f96:	4b18      	ldr	r3, [pc, #96]	; (8015ff8 <netif_issue_reports+0x74>)
 8015f98:	f240 326d 	movw	r2, #877	; 0x36d
 8015f9c:	4917      	ldr	r1, [pc, #92]	; (8015ffc <netif_issue_reports+0x78>)
 8015f9e:	4818      	ldr	r0, [pc, #96]	; (8016000 <netif_issue_reports+0x7c>)
 8015fa0:	f009 fd88 	bl	801fab4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015faa:	f003 0304 	and.w	r3, r3, #4
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d01e      	beq.n	8015ff0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fb8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d017      	beq.n	8015ff0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015fc0:	78fb      	ldrb	r3, [r7, #3]
 8015fc2:	f003 0301 	and.w	r3, r3, #1
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d013      	beq.n	8015ff2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	3304      	adds	r3, #4
 8015fce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00e      	beq.n	8015ff2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fda:	f003 0308 	and.w	r3, r3, #8
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d007      	beq.n	8015ff2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f7fd fc8d 	bl	8013908 <etharp_request>
 8015fee:	e000      	b.n	8015ff2 <netif_issue_reports+0x6e>
    return;
 8015ff0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	080255bc 	.word	0x080255bc
 8015ffc:	08025788 	.word	0x08025788
 8016000:	08025634 	.word	0x08025634

08016004 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d107      	bne.n	8016022 <netif_set_down+0x1e>
 8016012:	4b12      	ldr	r3, [pc, #72]	; (801605c <netif_set_down+0x58>)
 8016014:	f240 329b 	movw	r2, #923	; 0x39b
 8016018:	4911      	ldr	r1, [pc, #68]	; (8016060 <netif_set_down+0x5c>)
 801601a:	4812      	ldr	r0, [pc, #72]	; (8016064 <netif_set_down+0x60>)
 801601c:	f009 fd4a 	bl	801fab4 <iprintf>
 8016020:	e019      	b.n	8016056 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016028:	f003 0301 	and.w	r3, r3, #1
 801602c:	2b00      	cmp	r3, #0
 801602e:	d012      	beq.n	8016056 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016036:	f023 0301 	bic.w	r3, r3, #1
 801603a:	b2da      	uxtb	r2, r3
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016048:	f003 0308 	and.w	r3, r3, #8
 801604c:	2b00      	cmp	r3, #0
 801604e:	d002      	beq.n	8016056 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7fd f817 	bl	8013084 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016056:	3708      	adds	r7, #8
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	080255bc 	.word	0x080255bc
 8016060:	080257ac 	.word	0x080257ac
 8016064:	08025634 	.word	0x08025634

08016068 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d107      	bne.n	8016086 <netif_set_link_up+0x1e>
 8016076:	4b13      	ldr	r3, [pc, #76]	; (80160c4 <netif_set_link_up+0x5c>)
 8016078:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801607c:	4912      	ldr	r1, [pc, #72]	; (80160c8 <netif_set_link_up+0x60>)
 801607e:	4813      	ldr	r0, [pc, #76]	; (80160cc <netif_set_link_up+0x64>)
 8016080:	f009 fd18 	bl	801fab4 <iprintf>
 8016084:	e01b      	b.n	80160be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801608c:	f003 0304 	and.w	r3, r3, #4
 8016090:	2b00      	cmp	r3, #0
 8016092:	d114      	bne.n	80160be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801609a:	f043 0304 	orr.w	r3, r3, #4
 801609e:	b2da      	uxtb	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80160a6:	2103      	movs	r1, #3
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7ff ff6b 	bl	8015f84 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	69db      	ldr	r3, [r3, #28]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d003      	beq.n	80160be <netif_set_link_up+0x56>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	69db      	ldr	r3, [r3, #28]
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	080255bc 	.word	0x080255bc
 80160c8:	080257cc 	.word	0x080257cc
 80160cc:	08025634 	.word	0x08025634

080160d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d107      	bne.n	80160ee <netif_set_link_down+0x1e>
 80160de:	4b11      	ldr	r3, [pc, #68]	; (8016124 <netif_set_link_down+0x54>)
 80160e0:	f240 4206 	movw	r2, #1030	; 0x406
 80160e4:	4910      	ldr	r1, [pc, #64]	; (8016128 <netif_set_link_down+0x58>)
 80160e6:	4811      	ldr	r0, [pc, #68]	; (801612c <netif_set_link_down+0x5c>)
 80160e8:	f009 fce4 	bl	801fab4 <iprintf>
 80160ec:	e017      	b.n	801611e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160f4:	f003 0304 	and.w	r3, r3, #4
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d010      	beq.n	801611e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016102:	f023 0304 	bic.w	r3, r3, #4
 8016106:	b2da      	uxtb	r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	69db      	ldr	r3, [r3, #28]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <netif_set_link_down+0x4e>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	69db      	ldr	r3, [r3, #28]
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	080255bc 	.word	0x080255bc
 8016128:	080257f0 	.word	0x080257f0
 801612c:	08025634 	.word	0x08025634

08016130 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d002      	beq.n	8016146 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	61da      	str	r2, [r3, #28]
  }
}
 8016146:	bf00      	nop
 8016148:	370c      	adds	r7, #12
 801614a:	46bd      	mov	sp, r7
 801614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016150:	4770      	bx	lr

08016152 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016152:	b480      	push	{r7}
 8016154:	b085      	sub	sp, #20
 8016156:	af00      	add	r7, sp, #0
 8016158:	60f8      	str	r0, [r7, #12]
 801615a:	60b9      	str	r1, [r7, #8]
 801615c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801615e:	f06f 030b 	mvn.w	r3, #11
}
 8016162:	4618      	mov	r0, r3
 8016164:	3714      	adds	r7, #20
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr
	...

08016170 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016170:	b480      	push	{r7}
 8016172:	b085      	sub	sp, #20
 8016174:	af00      	add	r7, sp, #0
 8016176:	4603      	mov	r3, r0
 8016178:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801617a:	79fb      	ldrb	r3, [r7, #7]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d013      	beq.n	80161a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016180:	4b0d      	ldr	r3, [pc, #52]	; (80161b8 <netif_get_by_index+0x48>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	60fb      	str	r3, [r7, #12]
 8016186:	e00c      	b.n	80161a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801618e:	3301      	adds	r3, #1
 8016190:	b2db      	uxtb	r3, r3
 8016192:	79fa      	ldrb	r2, [r7, #7]
 8016194:	429a      	cmp	r2, r3
 8016196:	d101      	bne.n	801619c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	e006      	b.n	80161aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	60fb      	str	r3, [r7, #12]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d1ef      	bne.n	8016188 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80161a8:	2300      	movs	r3, #0
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3714      	adds	r7, #20
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr
 80161b6:	bf00      	nop
 80161b8:	24008a18 	.word	0x24008a18

080161bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80161c2:	4b0c      	ldr	r3, [pc, #48]	; (80161f4 <pbuf_free_ooseq+0x38>)
 80161c4:	2200      	movs	r2, #0
 80161c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80161c8:	4b0b      	ldr	r3, [pc, #44]	; (80161f8 <pbuf_free_ooseq+0x3c>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	607b      	str	r3, [r7, #4]
 80161ce:	e00a      	b.n	80161e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d003      	beq.n	80161e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f002 fd95 	bl	8018d08 <tcp_free_ooseq>
      return;
 80161de:	e005      	b.n	80161ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	607b      	str	r3, [r7, #4]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d1f1      	bne.n	80161d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80161ec:	3708      	adds	r7, #8
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	24008a20 	.word	0x24008a20
 80161f8:	24008a28 	.word	0x24008a28

080161fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80161fc:	b480      	push	{r7}
 80161fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8016200:	4b03      	ldr	r3, [pc, #12]	; (8016210 <pbuf_pool_is_empty+0x14>)
 8016202:	2201      	movs	r2, #1
 8016204:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016206:	bf00      	nop
 8016208:	46bd      	mov	sp, r7
 801620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620e:	4770      	bx	lr
 8016210:	24008a20 	.word	0x24008a20

08016214 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016214:	b480      	push	{r7}
 8016216:	b085      	sub	sp, #20
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	4611      	mov	r1, r2
 8016220:	461a      	mov	r2, r3
 8016222:	460b      	mov	r3, r1
 8016224:	80fb      	strh	r3, [r7, #6]
 8016226:	4613      	mov	r3, r2
 8016228:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2200      	movs	r2, #0
 801622e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	68ba      	ldr	r2, [r7, #8]
 8016234:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	88fa      	ldrh	r2, [r7, #6]
 801623a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	88ba      	ldrh	r2, [r7, #4]
 8016240:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8016242:	8b3b      	ldrh	r3, [r7, #24]
 8016244:	b2da      	uxtb	r2, r3
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	7f3a      	ldrb	r2, [r7, #28]
 801624e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2201      	movs	r2, #1
 8016254:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2200      	movs	r2, #0
 801625a:	73da      	strb	r2, [r3, #15]
}
 801625c:	bf00      	nop
 801625e:	3714      	adds	r7, #20
 8016260:	46bd      	mov	sp, r7
 8016262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016266:	4770      	bx	lr

08016268 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b08c      	sub	sp, #48	; 0x30
 801626c:	af02      	add	r7, sp, #8
 801626e:	4603      	mov	r3, r0
 8016270:	71fb      	strb	r3, [r7, #7]
 8016272:	460b      	mov	r3, r1
 8016274:	80bb      	strh	r3, [r7, #4]
 8016276:	4613      	mov	r3, r2
 8016278:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801627a:	79fb      	ldrb	r3, [r7, #7]
 801627c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801627e:	887b      	ldrh	r3, [r7, #2]
 8016280:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016284:	d07f      	beq.n	8016386 <pbuf_alloc+0x11e>
 8016286:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801628a:	f300 80c8 	bgt.w	801641e <pbuf_alloc+0x1b6>
 801628e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016292:	d010      	beq.n	80162b6 <pbuf_alloc+0x4e>
 8016294:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016298:	f300 80c1 	bgt.w	801641e <pbuf_alloc+0x1b6>
 801629c:	2b01      	cmp	r3, #1
 801629e:	d002      	beq.n	80162a6 <pbuf_alloc+0x3e>
 80162a0:	2b41      	cmp	r3, #65	; 0x41
 80162a2:	f040 80bc 	bne.w	801641e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80162a6:	887a      	ldrh	r2, [r7, #2]
 80162a8:	88bb      	ldrh	r3, [r7, #4]
 80162aa:	4619      	mov	r1, r3
 80162ac:	2000      	movs	r0, #0
 80162ae:	f000 f8d1 	bl	8016454 <pbuf_alloc_reference>
 80162b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80162b4:	e0bd      	b.n	8016432 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80162b6:	2300      	movs	r3, #0
 80162b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80162ba:	2300      	movs	r3, #0
 80162bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80162be:	88bb      	ldrh	r3, [r7, #4]
 80162c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80162c2:	2008      	movs	r0, #8
 80162c4:	f7ff fbce 	bl	8015a64 <memp_malloc>
 80162c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d109      	bne.n	80162e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80162d0:	f7ff ff94 	bl	80161fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d002      	beq.n	80162e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80162da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162dc:	f000 faa8 	bl	8016830 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80162e0:	2300      	movs	r3, #0
 80162e2:	e0a7      	b.n	8016434 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80162e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162e6:	3303      	adds	r3, #3
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	f023 0303 	bic.w	r3, r3, #3
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	8b7a      	ldrh	r2, [r7, #26]
 80162f8:	4293      	cmp	r3, r2
 80162fa:	bf28      	it	cs
 80162fc:	4613      	movcs	r3, r2
 80162fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016302:	3310      	adds	r3, #16
 8016304:	693a      	ldr	r2, [r7, #16]
 8016306:	4413      	add	r3, r2
 8016308:	3303      	adds	r3, #3
 801630a:	f023 0303 	bic.w	r3, r3, #3
 801630e:	4618      	mov	r0, r3
 8016310:	89f9      	ldrh	r1, [r7, #14]
 8016312:	8b7a      	ldrh	r2, [r7, #26]
 8016314:	2300      	movs	r3, #0
 8016316:	9301      	str	r3, [sp, #4]
 8016318:	887b      	ldrh	r3, [r7, #2]
 801631a:	9300      	str	r3, [sp, #0]
 801631c:	460b      	mov	r3, r1
 801631e:	4601      	mov	r1, r0
 8016320:	6938      	ldr	r0, [r7, #16]
 8016322:	f7ff ff77 	bl	8016214 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	685b      	ldr	r3, [r3, #4]
 801632a:	f003 0303 	and.w	r3, r3, #3
 801632e:	2b00      	cmp	r3, #0
 8016330:	d006      	beq.n	8016340 <pbuf_alloc+0xd8>
 8016332:	4b42      	ldr	r3, [pc, #264]	; (801643c <pbuf_alloc+0x1d4>)
 8016334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016338:	4941      	ldr	r1, [pc, #260]	; (8016440 <pbuf_alloc+0x1d8>)
 801633a:	4842      	ldr	r0, [pc, #264]	; (8016444 <pbuf_alloc+0x1dc>)
 801633c:	f009 fbba 	bl	801fab4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8016340:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016342:	3303      	adds	r3, #3
 8016344:	f023 0303 	bic.w	r3, r3, #3
 8016348:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801634c:	d106      	bne.n	801635c <pbuf_alloc+0xf4>
 801634e:	4b3b      	ldr	r3, [pc, #236]	; (801643c <pbuf_alloc+0x1d4>)
 8016350:	f44f 7281 	mov.w	r2, #258	; 0x102
 8016354:	493c      	ldr	r1, [pc, #240]	; (8016448 <pbuf_alloc+0x1e0>)
 8016356:	483b      	ldr	r0, [pc, #236]	; (8016444 <pbuf_alloc+0x1dc>)
 8016358:	f009 fbac 	bl	801fab4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635e:	2b00      	cmp	r3, #0
 8016360:	d102      	bne.n	8016368 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	627b      	str	r3, [r7, #36]	; 0x24
 8016366:	e002      	b.n	801636e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	693a      	ldr	r2, [r7, #16]
 801636c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016372:	8b7a      	ldrh	r2, [r7, #26]
 8016374:	89fb      	ldrh	r3, [r7, #14]
 8016376:	1ad3      	subs	r3, r2, r3
 8016378:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801637a:	2300      	movs	r3, #0
 801637c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801637e:	8b7b      	ldrh	r3, [r7, #26]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d19e      	bne.n	80162c2 <pbuf_alloc+0x5a>
      break;
 8016384:	e055      	b.n	8016432 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016388:	3303      	adds	r3, #3
 801638a:	b29b      	uxth	r3, r3
 801638c:	f023 0303 	bic.w	r3, r3, #3
 8016390:	b29a      	uxth	r2, r3
 8016392:	88bb      	ldrh	r3, [r7, #4]
 8016394:	3303      	adds	r3, #3
 8016396:	b29b      	uxth	r3, r3
 8016398:	f023 0303 	bic.w	r3, r3, #3
 801639c:	b29b      	uxth	r3, r3
 801639e:	4413      	add	r3, r2
 80163a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80163a2:	8b3b      	ldrh	r3, [r7, #24]
 80163a4:	3310      	adds	r3, #16
 80163a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80163a8:	8b3a      	ldrh	r2, [r7, #24]
 80163aa:	88bb      	ldrh	r3, [r7, #4]
 80163ac:	3303      	adds	r3, #3
 80163ae:	f023 0303 	bic.w	r3, r3, #3
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d306      	bcc.n	80163c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80163b6:	8afa      	ldrh	r2, [r7, #22]
 80163b8:	88bb      	ldrh	r3, [r7, #4]
 80163ba:	3303      	adds	r3, #3
 80163bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d201      	bcs.n	80163c8 <pbuf_alloc+0x160>
        return NULL;
 80163c4:	2300      	movs	r3, #0
 80163c6:	e035      	b.n	8016434 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80163c8:	8afb      	ldrh	r3, [r7, #22]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7ff f9ba 	bl	8015744 <mem_malloc>
 80163d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80163d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d101      	bne.n	80163dc <pbuf_alloc+0x174>
        return NULL;
 80163d8:	2300      	movs	r3, #0
 80163da:	e02b      	b.n	8016434 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80163dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163de:	3310      	adds	r3, #16
 80163e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163e2:	4413      	add	r3, r2
 80163e4:	3303      	adds	r3, #3
 80163e6:	f023 0303 	bic.w	r3, r3, #3
 80163ea:	4618      	mov	r0, r3
 80163ec:	88b9      	ldrh	r1, [r7, #4]
 80163ee:	88ba      	ldrh	r2, [r7, #4]
 80163f0:	2300      	movs	r3, #0
 80163f2:	9301      	str	r3, [sp, #4]
 80163f4:	887b      	ldrh	r3, [r7, #2]
 80163f6:	9300      	str	r3, [sp, #0]
 80163f8:	460b      	mov	r3, r1
 80163fa:	4601      	mov	r1, r0
 80163fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163fe:	f7ff ff09 	bl	8016214 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	f003 0303 	and.w	r3, r3, #3
 801640a:	2b00      	cmp	r3, #0
 801640c:	d010      	beq.n	8016430 <pbuf_alloc+0x1c8>
 801640e:	4b0b      	ldr	r3, [pc, #44]	; (801643c <pbuf_alloc+0x1d4>)
 8016410:	f44f 7291 	mov.w	r2, #290	; 0x122
 8016414:	490d      	ldr	r1, [pc, #52]	; (801644c <pbuf_alloc+0x1e4>)
 8016416:	480b      	ldr	r0, [pc, #44]	; (8016444 <pbuf_alloc+0x1dc>)
 8016418:	f009 fb4c 	bl	801fab4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801641c:	e008      	b.n	8016430 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801641e:	4b07      	ldr	r3, [pc, #28]	; (801643c <pbuf_alloc+0x1d4>)
 8016420:	f240 1227 	movw	r2, #295	; 0x127
 8016424:	490a      	ldr	r1, [pc, #40]	; (8016450 <pbuf_alloc+0x1e8>)
 8016426:	4807      	ldr	r0, [pc, #28]	; (8016444 <pbuf_alloc+0x1dc>)
 8016428:	f009 fb44 	bl	801fab4 <iprintf>
      return NULL;
 801642c:	2300      	movs	r3, #0
 801642e:	e001      	b.n	8016434 <pbuf_alloc+0x1cc>
      break;
 8016430:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016434:	4618      	mov	r0, r3
 8016436:	3728      	adds	r7, #40	; 0x28
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}
 801643c:	08025814 	.word	0x08025814
 8016440:	08025870 	.word	0x08025870
 8016444:	080258a0 	.word	0x080258a0
 8016448:	080258c8 	.word	0x080258c8
 801644c:	080258fc 	.word	0x080258fc
 8016450:	08025928 	.word	0x08025928

08016454 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af02      	add	r7, sp, #8
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	460b      	mov	r3, r1
 801645e:	807b      	strh	r3, [r7, #2]
 8016460:	4613      	mov	r3, r2
 8016462:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016464:	883b      	ldrh	r3, [r7, #0]
 8016466:	2b41      	cmp	r3, #65	; 0x41
 8016468:	d009      	beq.n	801647e <pbuf_alloc_reference+0x2a>
 801646a:	883b      	ldrh	r3, [r7, #0]
 801646c:	2b01      	cmp	r3, #1
 801646e:	d006      	beq.n	801647e <pbuf_alloc_reference+0x2a>
 8016470:	4b0f      	ldr	r3, [pc, #60]	; (80164b0 <pbuf_alloc_reference+0x5c>)
 8016472:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016476:	490f      	ldr	r1, [pc, #60]	; (80164b4 <pbuf_alloc_reference+0x60>)
 8016478:	480f      	ldr	r0, [pc, #60]	; (80164b8 <pbuf_alloc_reference+0x64>)
 801647a:	f009 fb1b 	bl	801fab4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801647e:	2007      	movs	r0, #7
 8016480:	f7ff faf0 	bl	8015a64 <memp_malloc>
 8016484:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d101      	bne.n	8016490 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801648c:	2300      	movs	r3, #0
 801648e:	e00b      	b.n	80164a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016490:	8879      	ldrh	r1, [r7, #2]
 8016492:	887a      	ldrh	r2, [r7, #2]
 8016494:	2300      	movs	r3, #0
 8016496:	9301      	str	r3, [sp, #4]
 8016498:	883b      	ldrh	r3, [r7, #0]
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	460b      	mov	r3, r1
 801649e:	6879      	ldr	r1, [r7, #4]
 80164a0:	68f8      	ldr	r0, [r7, #12]
 80164a2:	f7ff feb7 	bl	8016214 <pbuf_init_alloced_pbuf>
  return p;
 80164a6:	68fb      	ldr	r3, [r7, #12]
}
 80164a8:	4618      	mov	r0, r3
 80164aa:	3710      	adds	r7, #16
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bd80      	pop	{r7, pc}
 80164b0:	08025814 	.word	0x08025814
 80164b4:	08025944 	.word	0x08025944
 80164b8:	080258a0 	.word	0x080258a0

080164bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b088      	sub	sp, #32
 80164c0:	af02      	add	r7, sp, #8
 80164c2:	607b      	str	r3, [r7, #4]
 80164c4:	4603      	mov	r3, r0
 80164c6:	73fb      	strb	r3, [r7, #15]
 80164c8:	460b      	mov	r3, r1
 80164ca:	81bb      	strh	r3, [r7, #12]
 80164cc:	4613      	mov	r3, r2
 80164ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80164d0:	7bfb      	ldrb	r3, [r7, #15]
 80164d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80164d4:	8a7b      	ldrh	r3, [r7, #18]
 80164d6:	3303      	adds	r3, #3
 80164d8:	f023 0203 	bic.w	r2, r3, #3
 80164dc:	89bb      	ldrh	r3, [r7, #12]
 80164de:	441a      	add	r2, r3
 80164e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d901      	bls.n	80164ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80164e6:	2300      	movs	r3, #0
 80164e8:	e018      	b.n	801651c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80164ea:	6a3b      	ldr	r3, [r7, #32]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d007      	beq.n	8016500 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80164f0:	8a7b      	ldrh	r3, [r7, #18]
 80164f2:	3303      	adds	r3, #3
 80164f4:	f023 0303 	bic.w	r3, r3, #3
 80164f8:	6a3a      	ldr	r2, [r7, #32]
 80164fa:	4413      	add	r3, r2
 80164fc:	617b      	str	r3, [r7, #20]
 80164fe:	e001      	b.n	8016504 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016500:	2300      	movs	r3, #0
 8016502:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	89b9      	ldrh	r1, [r7, #12]
 8016508:	89ba      	ldrh	r2, [r7, #12]
 801650a:	2302      	movs	r3, #2
 801650c:	9301      	str	r3, [sp, #4]
 801650e:	897b      	ldrh	r3, [r7, #10]
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	460b      	mov	r3, r1
 8016514:	6979      	ldr	r1, [r7, #20]
 8016516:	f7ff fe7d 	bl	8016214 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801651a:	687b      	ldr	r3, [r7, #4]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3718      	adds	r7, #24
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	460b      	mov	r3, r1
 801652e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <pbuf_realloc+0x20>
 8016536:	4b3a      	ldr	r3, [pc, #232]	; (8016620 <pbuf_realloc+0xfc>)
 8016538:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801653c:	4939      	ldr	r1, [pc, #228]	; (8016624 <pbuf_realloc+0x100>)
 801653e:	483a      	ldr	r0, [pc, #232]	; (8016628 <pbuf_realloc+0x104>)
 8016540:	f009 fab8 	bl	801fab4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	891b      	ldrh	r3, [r3, #8]
 8016548:	887a      	ldrh	r2, [r7, #2]
 801654a:	429a      	cmp	r2, r3
 801654c:	d263      	bcs.n	8016616 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	891a      	ldrh	r2, [r3, #8]
 8016552:	887b      	ldrh	r3, [r7, #2]
 8016554:	1ad3      	subs	r3, r2, r3
 8016556:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016558:	887b      	ldrh	r3, [r7, #2]
 801655a:	817b      	strh	r3, [r7, #10]
  q = p;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8016560:	e018      	b.n	8016594 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	895b      	ldrh	r3, [r3, #10]
 8016566:	897a      	ldrh	r2, [r7, #10]
 8016568:	1ad3      	subs	r3, r2, r3
 801656a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	891a      	ldrh	r2, [r3, #8]
 8016570:	893b      	ldrh	r3, [r7, #8]
 8016572:	1ad3      	subs	r3, r2, r3
 8016574:	b29a      	uxth	r2, r3
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d106      	bne.n	8016594 <pbuf_realloc+0x70>
 8016586:	4b26      	ldr	r3, [pc, #152]	; (8016620 <pbuf_realloc+0xfc>)
 8016588:	f240 12af 	movw	r2, #431	; 0x1af
 801658c:	4927      	ldr	r1, [pc, #156]	; (801662c <pbuf_realloc+0x108>)
 801658e:	4826      	ldr	r0, [pc, #152]	; (8016628 <pbuf_realloc+0x104>)
 8016590:	f009 fa90 	bl	801fab4 <iprintf>
  while (rem_len > q->len) {
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	895b      	ldrh	r3, [r3, #10]
 8016598:	897a      	ldrh	r2, [r7, #10]
 801659a:	429a      	cmp	r2, r3
 801659c:	d8e1      	bhi.n	8016562 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	7b1b      	ldrb	r3, [r3, #12]
 80165a2:	f003 030f 	and.w	r3, r3, #15
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d121      	bne.n	80165ee <pbuf_realloc+0xca>
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	895b      	ldrh	r3, [r3, #10]
 80165ae:	897a      	ldrh	r2, [r7, #10]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d01c      	beq.n	80165ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	7b5b      	ldrb	r3, [r3, #13]
 80165b8:	f003 0302 	and.w	r3, r3, #2
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d116      	bne.n	80165ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	685a      	ldr	r2, [r3, #4]
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	1ad3      	subs	r3, r2, r3
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	897b      	ldrh	r3, [r7, #10]
 80165cc:	4413      	add	r3, r2
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	4619      	mov	r1, r3
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7fe ffba 	bl	801554c <mem_trim>
 80165d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d106      	bne.n	80165ee <pbuf_realloc+0xca>
 80165e0:	4b0f      	ldr	r3, [pc, #60]	; (8016620 <pbuf_realloc+0xfc>)
 80165e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80165e6:	4912      	ldr	r1, [pc, #72]	; (8016630 <pbuf_realloc+0x10c>)
 80165e8:	480f      	ldr	r0, [pc, #60]	; (8016628 <pbuf_realloc+0x104>)
 80165ea:	f009 fa63 	bl	801fab4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	897a      	ldrh	r2, [r7, #10]
 80165f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	895a      	ldrh	r2, [r3, #10]
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d004      	beq.n	801660e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	4618      	mov	r0, r3
 801660a:	f000 f911 	bl	8016830 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	2200      	movs	r2, #0
 8016612:	601a      	str	r2, [r3, #0]
 8016614:	e000      	b.n	8016618 <pbuf_realloc+0xf4>
    return;
 8016616:	bf00      	nop

}
 8016618:	3710      	adds	r7, #16
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	08025814 	.word	0x08025814
 8016624:	08025958 	.word	0x08025958
 8016628:	080258a0 	.word	0x080258a0
 801662c:	08025970 	.word	0x08025970
 8016630:	08025988 	.word	0x08025988

08016634 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	4613      	mov	r3, r2
 8016640:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d106      	bne.n	8016656 <pbuf_add_header_impl+0x22>
 8016648:	4b2b      	ldr	r3, [pc, #172]	; (80166f8 <pbuf_add_header_impl+0xc4>)
 801664a:	f240 12df 	movw	r2, #479	; 0x1df
 801664e:	492b      	ldr	r1, [pc, #172]	; (80166fc <pbuf_add_header_impl+0xc8>)
 8016650:	482b      	ldr	r0, [pc, #172]	; (8016700 <pbuf_add_header_impl+0xcc>)
 8016652:	f009 fa2f 	bl	801fab4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d003      	beq.n	8016664 <pbuf_add_header_impl+0x30>
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016662:	d301      	bcc.n	8016668 <pbuf_add_header_impl+0x34>
    return 1;
 8016664:	2301      	movs	r3, #1
 8016666:	e043      	b.n	80166f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d101      	bne.n	8016672 <pbuf_add_header_impl+0x3e>
    return 0;
 801666e:	2300      	movs	r3, #0
 8016670:	e03e      	b.n	80166f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	891a      	ldrh	r2, [r3, #8]
 801667a:	8a7b      	ldrh	r3, [r7, #18]
 801667c:	4413      	add	r3, r2
 801667e:	b29b      	uxth	r3, r3
 8016680:	8a7a      	ldrh	r2, [r7, #18]
 8016682:	429a      	cmp	r2, r3
 8016684:	d901      	bls.n	801668a <pbuf_add_header_impl+0x56>
    return 1;
 8016686:	2301      	movs	r3, #1
 8016688:	e032      	b.n	80166f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	7b1b      	ldrb	r3, [r3, #12]
 801668e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016690:	8a3b      	ldrh	r3, [r7, #16]
 8016692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00c      	beq.n	80166b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	685a      	ldr	r2, [r3, #4]
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	425b      	negs	r3, r3
 80166a2:	4413      	add	r3, r2
 80166a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	3310      	adds	r3, #16
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d20d      	bcs.n	80166cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80166b0:	2301      	movs	r3, #1
 80166b2:	e01d      	b.n	80166f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80166b4:	79fb      	ldrb	r3, [r7, #7]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d006      	beq.n	80166c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	685a      	ldr	r2, [r3, #4]
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	425b      	negs	r3, r3
 80166c2:	4413      	add	r3, r2
 80166c4:	617b      	str	r3, [r7, #20]
 80166c6:	e001      	b.n	80166cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80166c8:	2301      	movs	r3, #1
 80166ca:	e011      	b.n	80166f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	697a      	ldr	r2, [r7, #20]
 80166d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	895a      	ldrh	r2, [r3, #10]
 80166d6:	8a7b      	ldrh	r3, [r7, #18]
 80166d8:	4413      	add	r3, r2
 80166da:	b29a      	uxth	r2, r3
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	891a      	ldrh	r2, [r3, #8]
 80166e4:	8a7b      	ldrh	r3, [r7, #18]
 80166e6:	4413      	add	r3, r2
 80166e8:	b29a      	uxth	r2, r3
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3718      	adds	r7, #24
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	08025814 	.word	0x08025814
 80166fc:	080259a4 	.word	0x080259a4
 8016700:	080258a0 	.word	0x080258a0

08016704 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801670e:	2200      	movs	r2, #0
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f7ff ff8e 	bl	8016634 <pbuf_add_header_impl>
 8016718:	4603      	mov	r3, r0
}
 801671a:	4618      	mov	r0, r3
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
	...

08016724 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d106      	bne.n	8016742 <pbuf_remove_header+0x1e>
 8016734:	4b20      	ldr	r3, [pc, #128]	; (80167b8 <pbuf_remove_header+0x94>)
 8016736:	f240 224b 	movw	r2, #587	; 0x24b
 801673a:	4920      	ldr	r1, [pc, #128]	; (80167bc <pbuf_remove_header+0x98>)
 801673c:	4820      	ldr	r0, [pc, #128]	; (80167c0 <pbuf_remove_header+0x9c>)
 801673e:	f009 f9b9 	bl	801fab4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d003      	beq.n	8016750 <pbuf_remove_header+0x2c>
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801674e:	d301      	bcc.n	8016754 <pbuf_remove_header+0x30>
    return 1;
 8016750:	2301      	movs	r3, #1
 8016752:	e02c      	b.n	80167ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d101      	bne.n	801675e <pbuf_remove_header+0x3a>
    return 0;
 801675a:	2300      	movs	r3, #0
 801675c:	e027      	b.n	80167ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	895b      	ldrh	r3, [r3, #10]
 8016766:	89fa      	ldrh	r2, [r7, #14]
 8016768:	429a      	cmp	r2, r3
 801676a:	d908      	bls.n	801677e <pbuf_remove_header+0x5a>
 801676c:	4b12      	ldr	r3, [pc, #72]	; (80167b8 <pbuf_remove_header+0x94>)
 801676e:	f240 2255 	movw	r2, #597	; 0x255
 8016772:	4914      	ldr	r1, [pc, #80]	; (80167c4 <pbuf_remove_header+0xa0>)
 8016774:	4812      	ldr	r0, [pc, #72]	; (80167c0 <pbuf_remove_header+0x9c>)
 8016776:	f009 f99d 	bl	801fab4 <iprintf>
 801677a:	2301      	movs	r3, #1
 801677c:	e017      	b.n	80167ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685a      	ldr	r2, [r3, #4]
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	441a      	add	r2, r3
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	895a      	ldrh	r2, [r3, #10]
 8016794:	89fb      	ldrh	r3, [r7, #14]
 8016796:	1ad3      	subs	r3, r2, r3
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	891a      	ldrh	r2, [r3, #8]
 80167a2:	89fb      	ldrh	r3, [r7, #14]
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	b29a      	uxth	r2, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80167ac:	2300      	movs	r3, #0
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	08025814 	.word	0x08025814
 80167bc:	080259a4 	.word	0x080259a4
 80167c0:	080258a0 	.word	0x080258a0
 80167c4:	080259b0 	.word	0x080259b0

080167c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	460b      	mov	r3, r1
 80167d2:	807b      	strh	r3, [r7, #2]
 80167d4:	4613      	mov	r3, r2
 80167d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80167d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	da08      	bge.n	80167f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80167e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80167e4:	425b      	negs	r3, r3
 80167e6:	4619      	mov	r1, r3
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7ff ff9b 	bl	8016724 <pbuf_remove_header>
 80167ee:	4603      	mov	r3, r0
 80167f0:	e007      	b.n	8016802 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80167f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80167f6:	787a      	ldrb	r2, [r7, #1]
 80167f8:	4619      	mov	r1, r3
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7ff ff1a 	bl	8016634 <pbuf_add_header_impl>
 8016800:	4603      	mov	r3, r0
  }
}
 8016802:	4618      	mov	r0, r3
 8016804:	3708      	adds	r7, #8
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}

0801680a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801680a:	b580      	push	{r7, lr}
 801680c:	b082      	sub	sp, #8
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	460b      	mov	r3, r1
 8016814:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8016816:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801681a:	2201      	movs	r2, #1
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7ff ffd2 	bl	80167c8 <pbuf_header_impl>
 8016824:	4603      	mov	r3, r0
}
 8016826:	4618      	mov	r0, r3
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
	...

08016830 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b086      	sub	sp, #24
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d10b      	bne.n	8016856 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d106      	bne.n	8016852 <pbuf_free+0x22>
 8016844:	4b38      	ldr	r3, [pc, #224]	; (8016928 <pbuf_free+0xf8>)
 8016846:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801684a:	4938      	ldr	r1, [pc, #224]	; (801692c <pbuf_free+0xfc>)
 801684c:	4838      	ldr	r0, [pc, #224]	; (8016930 <pbuf_free+0x100>)
 801684e:	f009 f931 	bl	801fab4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016852:	2300      	movs	r3, #0
 8016854:	e063      	b.n	801691e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016856:	2300      	movs	r3, #0
 8016858:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801685a:	e05c      	b.n	8016916 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	7b9b      	ldrb	r3, [r3, #14]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d106      	bne.n	8016872 <pbuf_free+0x42>
 8016864:	4b30      	ldr	r3, [pc, #192]	; (8016928 <pbuf_free+0xf8>)
 8016866:	f240 22f1 	movw	r2, #753	; 0x2f1
 801686a:	4932      	ldr	r1, [pc, #200]	; (8016934 <pbuf_free+0x104>)
 801686c:	4830      	ldr	r0, [pc, #192]	; (8016930 <pbuf_free+0x100>)
 801686e:	f009 f921 	bl	801fab4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	7b9b      	ldrb	r3, [r3, #14]
 8016876:	3b01      	subs	r3, #1
 8016878:	b2da      	uxtb	r2, r3
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	739a      	strb	r2, [r3, #14]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	7b9b      	ldrb	r3, [r3, #14]
 8016882:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016884:	7dbb      	ldrb	r3, [r7, #22]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d143      	bne.n	8016912 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	7b1b      	ldrb	r3, [r3, #12]
 8016894:	f003 030f 	and.w	r3, r3, #15
 8016898:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	7b5b      	ldrb	r3, [r3, #13]
 801689e:	f003 0302 	and.w	r3, r3, #2
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d011      	beq.n	80168ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	691b      	ldr	r3, [r3, #16]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d106      	bne.n	80168c0 <pbuf_free+0x90>
 80168b2:	4b1d      	ldr	r3, [pc, #116]	; (8016928 <pbuf_free+0xf8>)
 80168b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80168b8:	491f      	ldr	r1, [pc, #124]	; (8016938 <pbuf_free+0x108>)
 80168ba:	481d      	ldr	r0, [pc, #116]	; (8016930 <pbuf_free+0x100>)
 80168bc:	f009 f8fa 	bl	801fab4 <iprintf>
        pc->custom_free_function(p);
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	691b      	ldr	r3, [r3, #16]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	4798      	blx	r3
 80168c8:	e01d      	b.n	8016906 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80168ca:	7bfb      	ldrb	r3, [r7, #15]
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d104      	bne.n	80168da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80168d0:	6879      	ldr	r1, [r7, #4]
 80168d2:	2008      	movs	r0, #8
 80168d4:	f7ff f936 	bl	8015b44 <memp_free>
 80168d8:	e015      	b.n	8016906 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80168da:	7bfb      	ldrb	r3, [r7, #15]
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d104      	bne.n	80168ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80168e0:	6879      	ldr	r1, [r7, #4]
 80168e2:	2007      	movs	r0, #7
 80168e4:	f7ff f92e 	bl	8015b44 <memp_free>
 80168e8:	e00d      	b.n	8016906 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80168ea:	7bfb      	ldrb	r3, [r7, #15]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d103      	bne.n	80168f8 <pbuf_free+0xc8>
          mem_free(p);
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f7fe fdc1 	bl	8015478 <mem_free>
 80168f6:	e006      	b.n	8016906 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80168f8:	4b0b      	ldr	r3, [pc, #44]	; (8016928 <pbuf_free+0xf8>)
 80168fa:	f240 320f 	movw	r2, #783	; 0x30f
 80168fe:	490f      	ldr	r1, [pc, #60]	; (801693c <pbuf_free+0x10c>)
 8016900:	480b      	ldr	r0, [pc, #44]	; (8016930 <pbuf_free+0x100>)
 8016902:	f009 f8d7 	bl	801fab4 <iprintf>
        }
      }
      count++;
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	3301      	adds	r3, #1
 801690a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	607b      	str	r3, [r7, #4]
 8016910:	e001      	b.n	8016916 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016912:	2300      	movs	r3, #0
 8016914:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d19f      	bne.n	801685c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801691c:	7dfb      	ldrb	r3, [r7, #23]
}
 801691e:	4618      	mov	r0, r3
 8016920:	3718      	adds	r7, #24
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	08025814 	.word	0x08025814
 801692c:	080259a4 	.word	0x080259a4
 8016930:	080258a0 	.word	0x080258a0
 8016934:	080259d0 	.word	0x080259d0
 8016938:	080259e8 	.word	0x080259e8
 801693c:	08025a0c 	.word	0x08025a0c

08016940 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016940:	b480      	push	{r7}
 8016942:	b085      	sub	sp, #20
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016948:	2300      	movs	r3, #0
 801694a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801694c:	e005      	b.n	801695a <pbuf_clen+0x1a>
    ++len;
 801694e:	89fb      	ldrh	r3, [r7, #14]
 8016950:	3301      	adds	r3, #1
 8016952:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d1f6      	bne.n	801694e <pbuf_clen+0xe>
  }
  return len;
 8016960:	89fb      	ldrh	r3, [r7, #14]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3714      	adds	r7, #20
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr
	...

08016970 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d010      	beq.n	80169a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	7b9b      	ldrb	r3, [r3, #14]
 8016982:	3301      	adds	r3, #1
 8016984:	b2da      	uxtb	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	7b9b      	ldrb	r3, [r3, #14]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d106      	bne.n	80169a0 <pbuf_ref+0x30>
 8016992:	4b05      	ldr	r3, [pc, #20]	; (80169a8 <pbuf_ref+0x38>)
 8016994:	f240 3242 	movw	r2, #834	; 0x342
 8016998:	4904      	ldr	r1, [pc, #16]	; (80169ac <pbuf_ref+0x3c>)
 801699a:	4805      	ldr	r0, [pc, #20]	; (80169b0 <pbuf_ref+0x40>)
 801699c:	f009 f88a 	bl	801fab4 <iprintf>
  }
}
 80169a0:	bf00      	nop
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	08025814 	.word	0x08025814
 80169ac:	08025a20 	.word	0x08025a20
 80169b0:	080258a0 	.word	0x080258a0

080169b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <pbuf_cat+0x16>
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d107      	bne.n	80169da <pbuf_cat+0x26>
 80169ca:	4b20      	ldr	r3, [pc, #128]	; (8016a4c <pbuf_cat+0x98>)
 80169cc:	f240 3259 	movw	r2, #857	; 0x359
 80169d0:	491f      	ldr	r1, [pc, #124]	; (8016a50 <pbuf_cat+0x9c>)
 80169d2:	4820      	ldr	r0, [pc, #128]	; (8016a54 <pbuf_cat+0xa0>)
 80169d4:	f009 f86e 	bl	801fab4 <iprintf>
 80169d8:	e034      	b.n	8016a44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	60fb      	str	r3, [r7, #12]
 80169de:	e00a      	b.n	80169f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	891a      	ldrh	r2, [r3, #8]
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	891b      	ldrh	r3, [r3, #8]
 80169e8:	4413      	add	r3, r2
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	60fb      	str	r3, [r7, #12]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d1f0      	bne.n	80169e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	891a      	ldrh	r2, [r3, #8]
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	895b      	ldrh	r3, [r3, #10]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d006      	beq.n	8016a18 <pbuf_cat+0x64>
 8016a0a:	4b10      	ldr	r3, [pc, #64]	; (8016a4c <pbuf_cat+0x98>)
 8016a0c:	f240 3262 	movw	r2, #866	; 0x362
 8016a10:	4911      	ldr	r1, [pc, #68]	; (8016a58 <pbuf_cat+0xa4>)
 8016a12:	4810      	ldr	r0, [pc, #64]	; (8016a54 <pbuf_cat+0xa0>)
 8016a14:	f009 f84e 	bl	801fab4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d006      	beq.n	8016a2e <pbuf_cat+0x7a>
 8016a20:	4b0a      	ldr	r3, [pc, #40]	; (8016a4c <pbuf_cat+0x98>)
 8016a22:	f240 3263 	movw	r2, #867	; 0x363
 8016a26:	490d      	ldr	r1, [pc, #52]	; (8016a5c <pbuf_cat+0xa8>)
 8016a28:	480a      	ldr	r0, [pc, #40]	; (8016a54 <pbuf_cat+0xa0>)
 8016a2a:	f009 f843 	bl	801fab4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	891a      	ldrh	r2, [r3, #8]
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	891b      	ldrh	r3, [r3, #8]
 8016a36:	4413      	add	r3, r2
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	683a      	ldr	r2, [r7, #0]
 8016a42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	08025814 	.word	0x08025814
 8016a50:	08025a34 	.word	0x08025a34
 8016a54:	080258a0 	.word	0x080258a0
 8016a58:	08025a6c 	.word	0x08025a6c
 8016a5c:	08025a9c 	.word	0x08025a9c

08016a60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b086      	sub	sp, #24
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	617b      	str	r3, [r7, #20]
 8016a6e:	2300      	movs	r3, #0
 8016a70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d008      	beq.n	8016a8a <pbuf_copy+0x2a>
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d005      	beq.n	8016a8a <pbuf_copy+0x2a>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	891a      	ldrh	r2, [r3, #8]
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	891b      	ldrh	r3, [r3, #8]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d209      	bcs.n	8016a9e <pbuf_copy+0x3e>
 8016a8a:	4b57      	ldr	r3, [pc, #348]	; (8016be8 <pbuf_copy+0x188>)
 8016a8c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016a90:	4956      	ldr	r1, [pc, #344]	; (8016bec <pbuf_copy+0x18c>)
 8016a92:	4857      	ldr	r0, [pc, #348]	; (8016bf0 <pbuf_copy+0x190>)
 8016a94:	f009 f80e 	bl	801fab4 <iprintf>
 8016a98:	f06f 030f 	mvn.w	r3, #15
 8016a9c:	e09f      	b.n	8016bde <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	895b      	ldrh	r3, [r3, #10]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	1ad2      	subs	r2, r2, r3
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	895b      	ldrh	r3, [r3, #10]
 8016aac:	4619      	mov	r1, r3
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	1acb      	subs	r3, r1, r3
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d306      	bcc.n	8016ac4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	895b      	ldrh	r3, [r3, #10]
 8016aba:	461a      	mov	r2, r3
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	1ad3      	subs	r3, r2, r3
 8016ac0:	60fb      	str	r3, [r7, #12]
 8016ac2:	e005      	b.n	8016ad0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	895b      	ldrh	r3, [r3, #10]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	1ad3      	subs	r3, r2, r3
 8016ace:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	685a      	ldr	r2, [r3, #4]
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	18d0      	adds	r0, r2, r3
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	685a      	ldr	r2, [r3, #4]
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	4413      	add	r3, r2
 8016ae0:	68fa      	ldr	r2, [r7, #12]
 8016ae2:	4619      	mov	r1, r3
 8016ae4:	f008 f8c6 	bl	801ec74 <memcpy>
    offset_to += len;
 8016ae8:	697a      	ldr	r2, [r7, #20]
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	4413      	add	r3, r2
 8016aee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016af0:	693a      	ldr	r2, [r7, #16]
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	4413      	add	r3, r2
 8016af6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	895b      	ldrh	r3, [r3, #10]
 8016afc:	461a      	mov	r2, r3
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d906      	bls.n	8016b12 <pbuf_copy+0xb2>
 8016b04:	4b38      	ldr	r3, [pc, #224]	; (8016be8 <pbuf_copy+0x188>)
 8016b06:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016b0a:	493a      	ldr	r1, [pc, #232]	; (8016bf4 <pbuf_copy+0x194>)
 8016b0c:	4838      	ldr	r0, [pc, #224]	; (8016bf0 <pbuf_copy+0x190>)
 8016b0e:	f008 ffd1 	bl	801fab4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	895b      	ldrh	r3, [r3, #10]
 8016b16:	461a      	mov	r2, r3
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	4293      	cmp	r3, r2
 8016b1c:	d906      	bls.n	8016b2c <pbuf_copy+0xcc>
 8016b1e:	4b32      	ldr	r3, [pc, #200]	; (8016be8 <pbuf_copy+0x188>)
 8016b20:	f240 32da 	movw	r2, #986	; 0x3da
 8016b24:	4934      	ldr	r1, [pc, #208]	; (8016bf8 <pbuf_copy+0x198>)
 8016b26:	4832      	ldr	r0, [pc, #200]	; (8016bf0 <pbuf_copy+0x190>)
 8016b28:	f008 ffc4 	bl	801fab4 <iprintf>
    if (offset_from >= p_from->len) {
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	895b      	ldrh	r3, [r3, #10]
 8016b30:	461a      	mov	r2, r3
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	4293      	cmp	r3, r2
 8016b36:	d304      	bcc.n	8016b42 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	895b      	ldrh	r3, [r3, #10]
 8016b46:	461a      	mov	r2, r3
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	d114      	bne.n	8016b78 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d10c      	bne.n	8016b78 <pbuf_copy+0x118>
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d009      	beq.n	8016b78 <pbuf_copy+0x118>
 8016b64:	4b20      	ldr	r3, [pc, #128]	; (8016be8 <pbuf_copy+0x188>)
 8016b66:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016b6a:	4924      	ldr	r1, [pc, #144]	; (8016bfc <pbuf_copy+0x19c>)
 8016b6c:	4820      	ldr	r0, [pc, #128]	; (8016bf0 <pbuf_copy+0x190>)
 8016b6e:	f008 ffa1 	bl	801fab4 <iprintf>
 8016b72:	f06f 030f 	mvn.w	r3, #15
 8016b76:	e032      	b.n	8016bde <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d013      	beq.n	8016ba6 <pbuf_copy+0x146>
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	895a      	ldrh	r2, [r3, #10]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	891b      	ldrh	r3, [r3, #8]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d10d      	bne.n	8016ba6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d009      	beq.n	8016ba6 <pbuf_copy+0x146>
 8016b92:	4b15      	ldr	r3, [pc, #84]	; (8016be8 <pbuf_copy+0x188>)
 8016b94:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016b98:	4919      	ldr	r1, [pc, #100]	; (8016c00 <pbuf_copy+0x1a0>)
 8016b9a:	4815      	ldr	r0, [pc, #84]	; (8016bf0 <pbuf_copy+0x190>)
 8016b9c:	f008 ff8a 	bl	801fab4 <iprintf>
 8016ba0:	f06f 0305 	mvn.w	r3, #5
 8016ba4:	e01b      	b.n	8016bde <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d013      	beq.n	8016bd4 <pbuf_copy+0x174>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	895a      	ldrh	r2, [r3, #10]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	891b      	ldrh	r3, [r3, #8]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d10d      	bne.n	8016bd4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d009      	beq.n	8016bd4 <pbuf_copy+0x174>
 8016bc0:	4b09      	ldr	r3, [pc, #36]	; (8016be8 <pbuf_copy+0x188>)
 8016bc2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8016bc6:	490e      	ldr	r1, [pc, #56]	; (8016c00 <pbuf_copy+0x1a0>)
 8016bc8:	4809      	ldr	r0, [pc, #36]	; (8016bf0 <pbuf_copy+0x190>)
 8016bca:	f008 ff73 	bl	801fab4 <iprintf>
 8016bce:	f06f 0305 	mvn.w	r3, #5
 8016bd2:	e004      	b.n	8016bde <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f47f af61 	bne.w	8016a9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016bdc:	2300      	movs	r3, #0
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3718      	adds	r7, #24
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	08025814 	.word	0x08025814
 8016bec:	08025ae8 	.word	0x08025ae8
 8016bf0:	080258a0 	.word	0x080258a0
 8016bf4:	08025b18 	.word	0x08025b18
 8016bf8:	08025b30 	.word	0x08025b30
 8016bfc:	08025b4c 	.word	0x08025b4c
 8016c00:	08025b5c 	.word	0x08025b5c

08016c04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b088      	sub	sp, #32
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	60f8      	str	r0, [r7, #12]
 8016c0c:	60b9      	str	r1, [r7, #8]
 8016c0e:	4611      	mov	r1, r2
 8016c10:	461a      	mov	r2, r3
 8016c12:	460b      	mov	r3, r1
 8016c14:	80fb      	strh	r3, [r7, #6]
 8016c16:	4613      	mov	r3, r2
 8016c18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d108      	bne.n	8016c3a <pbuf_copy_partial+0x36>
 8016c28:	4b2b      	ldr	r3, [pc, #172]	; (8016cd8 <pbuf_copy_partial+0xd4>)
 8016c2a:	f240 420a 	movw	r2, #1034	; 0x40a
 8016c2e:	492b      	ldr	r1, [pc, #172]	; (8016cdc <pbuf_copy_partial+0xd8>)
 8016c30:	482b      	ldr	r0, [pc, #172]	; (8016ce0 <pbuf_copy_partial+0xdc>)
 8016c32:	f008 ff3f 	bl	801fab4 <iprintf>
 8016c36:	2300      	movs	r3, #0
 8016c38:	e04a      	b.n	8016cd0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d108      	bne.n	8016c52 <pbuf_copy_partial+0x4e>
 8016c40:	4b25      	ldr	r3, [pc, #148]	; (8016cd8 <pbuf_copy_partial+0xd4>)
 8016c42:	f240 420b 	movw	r2, #1035	; 0x40b
 8016c46:	4927      	ldr	r1, [pc, #156]	; (8016ce4 <pbuf_copy_partial+0xe0>)
 8016c48:	4825      	ldr	r0, [pc, #148]	; (8016ce0 <pbuf_copy_partial+0xdc>)
 8016c4a:	f008 ff33 	bl	801fab4 <iprintf>
 8016c4e:	2300      	movs	r3, #0
 8016c50:	e03e      	b.n	8016cd0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	61fb      	str	r3, [r7, #28]
 8016c56:	e034      	b.n	8016cc2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016c58:	88bb      	ldrh	r3, [r7, #4]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00a      	beq.n	8016c74 <pbuf_copy_partial+0x70>
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	895b      	ldrh	r3, [r3, #10]
 8016c62:	88ba      	ldrh	r2, [r7, #4]
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d305      	bcc.n	8016c74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	895b      	ldrh	r3, [r3, #10]
 8016c6c:	88ba      	ldrh	r2, [r7, #4]
 8016c6e:	1ad3      	subs	r3, r2, r3
 8016c70:	80bb      	strh	r3, [r7, #4]
 8016c72:	e023      	b.n	8016cbc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016c74:	69fb      	ldr	r3, [r7, #28]
 8016c76:	895a      	ldrh	r2, [r3, #10]
 8016c78:	88bb      	ldrh	r3, [r7, #4]
 8016c7a:	1ad3      	subs	r3, r2, r3
 8016c7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016c7e:	8b3a      	ldrh	r2, [r7, #24]
 8016c80:	88fb      	ldrh	r3, [r7, #6]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d901      	bls.n	8016c8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016c86:	88fb      	ldrh	r3, [r7, #6]
 8016c88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016c8a:	8b7b      	ldrh	r3, [r7, #26]
 8016c8c:	68ba      	ldr	r2, [r7, #8]
 8016c8e:	18d0      	adds	r0, r2, r3
 8016c90:	69fb      	ldr	r3, [r7, #28]
 8016c92:	685a      	ldr	r2, [r3, #4]
 8016c94:	88bb      	ldrh	r3, [r7, #4]
 8016c96:	4413      	add	r3, r2
 8016c98:	8b3a      	ldrh	r2, [r7, #24]
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	f007 ffea 	bl	801ec74 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016ca0:	8afa      	ldrh	r2, [r7, #22]
 8016ca2:	8b3b      	ldrh	r3, [r7, #24]
 8016ca4:	4413      	add	r3, r2
 8016ca6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016ca8:	8b7a      	ldrh	r2, [r7, #26]
 8016caa:	8b3b      	ldrh	r3, [r7, #24]
 8016cac:	4413      	add	r3, r2
 8016cae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016cb0:	88fa      	ldrh	r2, [r7, #6]
 8016cb2:	8b3b      	ldrh	r3, [r7, #24]
 8016cb4:	1ad3      	subs	r3, r2, r3
 8016cb6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016cbc:	69fb      	ldr	r3, [r7, #28]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	61fb      	str	r3, [r7, #28]
 8016cc2:	88fb      	ldrh	r3, [r7, #6]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d002      	beq.n	8016cce <pbuf_copy_partial+0xca>
 8016cc8:	69fb      	ldr	r3, [r7, #28]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d1c4      	bne.n	8016c58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016cce:	8afb      	ldrh	r3, [r7, #22]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3720      	adds	r7, #32
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	08025814 	.word	0x08025814
 8016cdc:	08025b88 	.word	0x08025b88
 8016ce0:	080258a0 	.word	0x080258a0
 8016ce4:	08025ba8 	.word	0x08025ba8

08016ce8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b087      	sub	sp, #28
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	460b      	mov	r3, r1
 8016cf2:	607a      	str	r2, [r7, #4]
 8016cf4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8016cf6:	897b      	ldrh	r3, [r7, #10]
 8016cf8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8016cfe:	e007      	b.n	8016d10 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	895b      	ldrh	r3, [r3, #10]
 8016d04:	8afa      	ldrh	r2, [r7, #22]
 8016d06:	1ad3      	subs	r3, r2, r3
 8016d08:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d004      	beq.n	8016d20 <pbuf_skip_const+0x38>
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	895b      	ldrh	r3, [r3, #10]
 8016d1a:	8afa      	ldrh	r2, [r7, #22]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d2ef      	bcs.n	8016d00 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d002      	beq.n	8016d2c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	8afa      	ldrh	r2, [r7, #22]
 8016d2a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8016d2c:	693b      	ldr	r3, [r7, #16]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	371c      	adds	r7, #28
 8016d32:	46bd      	mov	sp, r7
 8016d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d38:	4770      	bx	lr
	...

08016d3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b084      	sub	sp, #16
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	4603      	mov	r3, r0
 8016d44:	603a      	str	r2, [r7, #0]
 8016d46:	71fb      	strb	r3, [r7, #7]
 8016d48:	460b      	mov	r3, r1
 8016d4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	8919      	ldrh	r1, [r3, #8]
 8016d50:	88ba      	ldrh	r2, [r7, #4]
 8016d52:	79fb      	ldrb	r3, [r7, #7]
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7ff fa87 	bl	8016268 <pbuf_alloc>
 8016d5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d101      	bne.n	8016d66 <pbuf_clone+0x2a>
    return NULL;
 8016d62:	2300      	movs	r3, #0
 8016d64:	e011      	b.n	8016d8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016d66:	6839      	ldr	r1, [r7, #0]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f7ff fe79 	bl	8016a60 <pbuf_copy>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016d72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d006      	beq.n	8016d88 <pbuf_clone+0x4c>
 8016d7a:	4b06      	ldr	r3, [pc, #24]	; (8016d94 <pbuf_clone+0x58>)
 8016d7c:	f240 5224 	movw	r2, #1316	; 0x524
 8016d80:	4905      	ldr	r1, [pc, #20]	; (8016d98 <pbuf_clone+0x5c>)
 8016d82:	4806      	ldr	r0, [pc, #24]	; (8016d9c <pbuf_clone+0x60>)
 8016d84:	f008 fe96 	bl	801fab4 <iprintf>
  return q;
 8016d88:	68fb      	ldr	r3, [r7, #12]
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3710      	adds	r7, #16
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	08025814 	.word	0x08025814
 8016d98:	08025cb4 	.word	0x08025cb4
 8016d9c:	080258a0 	.word	0x080258a0

08016da0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b084      	sub	sp, #16
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	460b      	mov	r3, r1
 8016daa:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8016dac:	887b      	ldrh	r3, [r7, #2]
 8016dae:	4619      	mov	r1, r3
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f000 f80c 	bl	8016dce <pbuf_try_get_at>
 8016db6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	db02      	blt.n	8016dc4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	e000      	b.n	8016dc6 <pbuf_get_at+0x26>
  }
  return 0;
 8016dc4:	2300      	movs	r3, #0
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3710      	adds	r7, #16
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b084      	sub	sp, #16
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	6078      	str	r0, [r7, #4]
 8016dd6:	460b      	mov	r3, r1
 8016dd8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8016dda:	f107 020a 	add.w	r2, r7, #10
 8016dde:	887b      	ldrh	r3, [r7, #2]
 8016de0:	4619      	mov	r1, r3
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f7ff ff80 	bl	8016ce8 <pbuf_skip_const>
 8016de8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d00a      	beq.n	8016e06 <pbuf_try_get_at+0x38>
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	895a      	ldrh	r2, [r3, #10]
 8016df4:	897b      	ldrh	r3, [r7, #10]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d905      	bls.n	8016e06 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	897a      	ldrh	r2, [r7, #10]
 8016e00:	4413      	add	r3, r2
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	e001      	b.n	8016e0a <pbuf_try_get_at+0x3c>
  }
  return -1;
 8016e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}

08016e12 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8016e12:	b580      	push	{r7, lr}
 8016e14:	b088      	sub	sp, #32
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	60f8      	str	r0, [r7, #12]
 8016e1a:	607a      	str	r2, [r7, #4]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	460b      	mov	r3, r1
 8016e20:	817b      	strh	r3, [r7, #10]
 8016e22:	4613      	mov	r3, r2
 8016e24:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 8016e26:	897b      	ldrh	r3, [r7, #10]
 8016e28:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	891b      	ldrh	r3, [r3, #8]
 8016e32:	4619      	mov	r1, r3
 8016e34:	897a      	ldrh	r2, [r7, #10]
 8016e36:	893b      	ldrh	r3, [r7, #8]
 8016e38:	4413      	add	r3, r2
 8016e3a:	4299      	cmp	r1, r3
 8016e3c:	da0a      	bge.n	8016e54 <pbuf_memcmp+0x42>
    return 0xffff;
 8016e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e42:	e037      	b.n	8016eb4 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 8016e44:	69bb      	ldr	r3, [r7, #24]
 8016e46:	895b      	ldrh	r3, [r3, #10]
 8016e48:	8bfa      	ldrh	r2, [r7, #30]
 8016e4a:	1ad3      	subs	r3, r2, r3
 8016e4c:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8016e4e:	69bb      	ldr	r3, [r7, #24]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d004      	beq.n	8016e64 <pbuf_memcmp+0x52>
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	895b      	ldrh	r3, [r3, #10]
 8016e5e:	8bfa      	ldrh	r2, [r7, #30]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d2ef      	bcs.n	8016e44 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8016e64:	2300      	movs	r3, #0
 8016e66:	82fb      	strh	r3, [r7, #22]
 8016e68:	e01f      	b.n	8016eaa <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8016e6a:	8bfa      	ldrh	r2, [r7, #30]
 8016e6c:	8afb      	ldrh	r3, [r7, #22]
 8016e6e:	4413      	add	r3, r2
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	4619      	mov	r1, r3
 8016e74:	69b8      	ldr	r0, [r7, #24]
 8016e76:	f7ff ff93 	bl	8016da0 <pbuf_get_at>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8016e7e:	8afb      	ldrh	r3, [r7, #22]
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	4413      	add	r3, r2
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8016e88:	7d7a      	ldrb	r2, [r7, #21]
 8016e8a:	7d3b      	ldrb	r3, [r7, #20]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d009      	beq.n	8016ea4 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8016e90:	8afb      	ldrh	r3, [r7, #22]
 8016e92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016e96:	4293      	cmp	r3, r2
 8016e98:	bf28      	it	cs
 8016e9a:	4613      	movcs	r3, r2
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	e007      	b.n	8016eb4 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8016ea4:	8afb      	ldrh	r3, [r7, #22]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	82fb      	strh	r3, [r7, #22]
 8016eaa:	8afa      	ldrh	r2, [r7, #22]
 8016eac:	893b      	ldrh	r3, [r7, #8]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d3db      	bcc.n	8016e6a <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8016eb2:	2300      	movs	r3, #0
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3720      	adds	r7, #32
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016ec0:	f008 fe86 	bl	801fbd0 <rand>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	4b01      	ldr	r3, [pc, #4]	; (8016edc <tcp_init+0x20>)
 8016ed6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016ed8:	bf00      	nop
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	24000024 	.word	0x24000024

08016ee0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	7d1b      	ldrb	r3, [r3, #20]
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d105      	bne.n	8016efc <tcp_free+0x1c>
 8016ef0:	4b06      	ldr	r3, [pc, #24]	; (8016f0c <tcp_free+0x2c>)
 8016ef2:	22d4      	movs	r2, #212	; 0xd4
 8016ef4:	4906      	ldr	r1, [pc, #24]	; (8016f10 <tcp_free+0x30>)
 8016ef6:	4807      	ldr	r0, [pc, #28]	; (8016f14 <tcp_free+0x34>)
 8016ef8:	f008 fddc 	bl	801fab4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016efc:	6879      	ldr	r1, [r7, #4]
 8016efe:	2001      	movs	r0, #1
 8016f00:	f7fe fe20 	bl	8015b44 <memp_free>
}
 8016f04:	bf00      	nop
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	08025d40 	.word	0x08025d40
 8016f10:	08025d9c 	.word	0x08025d9c
 8016f14:	08025db0 	.word	0x08025db0

08016f18 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	7d1b      	ldrb	r3, [r3, #20]
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d105      	bne.n	8016f34 <tcp_free_listen+0x1c>
 8016f28:	4b06      	ldr	r3, [pc, #24]	; (8016f44 <tcp_free_listen+0x2c>)
 8016f2a:	22df      	movs	r2, #223	; 0xdf
 8016f2c:	4906      	ldr	r1, [pc, #24]	; (8016f48 <tcp_free_listen+0x30>)
 8016f2e:	4807      	ldr	r0, [pc, #28]	; (8016f4c <tcp_free_listen+0x34>)
 8016f30:	f008 fdc0 	bl	801fab4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016f34:	6879      	ldr	r1, [r7, #4]
 8016f36:	2002      	movs	r0, #2
 8016f38:	f7fe fe04 	bl	8015b44 <memp_free>
}
 8016f3c:	bf00      	nop
 8016f3e:	3708      	adds	r7, #8
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}
 8016f44:	08025d40 	.word	0x08025d40
 8016f48:	08025dd8 	.word	0x08025dd8
 8016f4c:	08025db0 	.word	0x08025db0

08016f50 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016f54:	f001 f974 	bl	8018240 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016f58:	4b07      	ldr	r3, [pc, #28]	; (8016f78 <tcp_tmr+0x28>)
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	b2da      	uxtb	r2, r3
 8016f60:	4b05      	ldr	r3, [pc, #20]	; (8016f78 <tcp_tmr+0x28>)
 8016f62:	701a      	strb	r2, [r3, #0]
 8016f64:	4b04      	ldr	r3, [pc, #16]	; (8016f78 <tcp_tmr+0x28>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	f003 0301 	and.w	r3, r3, #1
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d001      	beq.n	8016f74 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016f70:	f000 fe26 	bl	8017bc0 <tcp_slowtmr>
  }
}
 8016f74:	bf00      	nop
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	2400522d 	.word	0x2400522d

08016f7c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d105      	bne.n	8016f98 <tcp_remove_listener+0x1c>
 8016f8c:	4b0d      	ldr	r3, [pc, #52]	; (8016fc4 <tcp_remove_listener+0x48>)
 8016f8e:	22ff      	movs	r2, #255	; 0xff
 8016f90:	490d      	ldr	r1, [pc, #52]	; (8016fc8 <tcp_remove_listener+0x4c>)
 8016f92:	480e      	ldr	r0, [pc, #56]	; (8016fcc <tcp_remove_listener+0x50>)
 8016f94:	f008 fd8e 	bl	801fab4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	60fb      	str	r3, [r7, #12]
 8016f9c:	e00a      	b.n	8016fb4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016fa2:	683a      	ldr	r2, [r7, #0]
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d102      	bne.n	8016fae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2200      	movs	r2, #0
 8016fac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	60fb      	str	r3, [r7, #12]
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1f1      	bne.n	8016f9e <tcp_remove_listener+0x22>
    }
  }
}
 8016fba:	bf00      	nop
 8016fbc:	bf00      	nop
 8016fbe:	3710      	adds	r7, #16
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	08025d40 	.word	0x08025d40
 8016fc8:	08025df4 	.word	0x08025df4
 8016fcc:	08025db0 	.word	0x08025db0

08016fd0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d106      	bne.n	8016fec <tcp_listen_closed+0x1c>
 8016fde:	4b14      	ldr	r3, [pc, #80]	; (8017030 <tcp_listen_closed+0x60>)
 8016fe0:	f240 1211 	movw	r2, #273	; 0x111
 8016fe4:	4913      	ldr	r1, [pc, #76]	; (8017034 <tcp_listen_closed+0x64>)
 8016fe6:	4814      	ldr	r0, [pc, #80]	; (8017038 <tcp_listen_closed+0x68>)
 8016fe8:	f008 fd64 	bl	801fab4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	7d1b      	ldrb	r3, [r3, #20]
 8016ff0:	2b01      	cmp	r3, #1
 8016ff2:	d006      	beq.n	8017002 <tcp_listen_closed+0x32>
 8016ff4:	4b0e      	ldr	r3, [pc, #56]	; (8017030 <tcp_listen_closed+0x60>)
 8016ff6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016ffa:	4910      	ldr	r1, [pc, #64]	; (801703c <tcp_listen_closed+0x6c>)
 8016ffc:	480e      	ldr	r0, [pc, #56]	; (8017038 <tcp_listen_closed+0x68>)
 8016ffe:	f008 fd59 	bl	801fab4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017002:	2301      	movs	r3, #1
 8017004:	60fb      	str	r3, [r7, #12]
 8017006:	e00b      	b.n	8017020 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017008:	4a0d      	ldr	r2, [pc, #52]	; (8017040 <tcp_listen_closed+0x70>)
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	6879      	ldr	r1, [r7, #4]
 8017014:	4618      	mov	r0, r3
 8017016:	f7ff ffb1 	bl	8016f7c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	3301      	adds	r3, #1
 801701e:	60fb      	str	r3, [r7, #12]
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2b03      	cmp	r3, #3
 8017024:	d9f0      	bls.n	8017008 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8017026:	bf00      	nop
 8017028:	bf00      	nop
 801702a:	3710      	adds	r7, #16
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}
 8017030:	08025d40 	.word	0x08025d40
 8017034:	08025e1c 	.word	0x08025e1c
 8017038:	08025db0 	.word	0x08025db0
 801703c:	08025e28 	.word	0x08025e28
 8017040:	08027db4 	.word	0x08027db4

08017044 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017044:	b5b0      	push	{r4, r5, r7, lr}
 8017046:	b088      	sub	sp, #32
 8017048:	af04      	add	r7, sp, #16
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	460b      	mov	r3, r1
 801704e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d106      	bne.n	8017064 <tcp_close_shutdown+0x20>
 8017056:	4b63      	ldr	r3, [pc, #396]	; (80171e4 <tcp_close_shutdown+0x1a0>)
 8017058:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801705c:	4962      	ldr	r1, [pc, #392]	; (80171e8 <tcp_close_shutdown+0x1a4>)
 801705e:	4863      	ldr	r0, [pc, #396]	; (80171ec <tcp_close_shutdown+0x1a8>)
 8017060:	f008 fd28 	bl	801fab4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017064:	78fb      	ldrb	r3, [r7, #3]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d066      	beq.n	8017138 <tcp_close_shutdown+0xf4>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	7d1b      	ldrb	r3, [r3, #20]
 801706e:	2b04      	cmp	r3, #4
 8017070:	d003      	beq.n	801707a <tcp_close_shutdown+0x36>
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	7d1b      	ldrb	r3, [r3, #20]
 8017076:	2b07      	cmp	r3, #7
 8017078:	d15e      	bne.n	8017138 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801707e:	2b00      	cmp	r3, #0
 8017080:	d104      	bne.n	801708c <tcp_close_shutdown+0x48>
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017086:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801708a:	d055      	beq.n	8017138 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	8b5b      	ldrh	r3, [r3, #26]
 8017090:	f003 0310 	and.w	r3, r3, #16
 8017094:	2b00      	cmp	r3, #0
 8017096:	d106      	bne.n	80170a6 <tcp_close_shutdown+0x62>
 8017098:	4b52      	ldr	r3, [pc, #328]	; (80171e4 <tcp_close_shutdown+0x1a0>)
 801709a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801709e:	4954      	ldr	r1, [pc, #336]	; (80171f0 <tcp_close_shutdown+0x1ac>)
 80170a0:	4852      	ldr	r0, [pc, #328]	; (80171ec <tcp_close_shutdown+0x1a8>)
 80170a2:	f008 fd07 	bl	801fab4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80170ae:	687d      	ldr	r5, [r7, #4]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	3304      	adds	r3, #4
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	8ad2      	ldrh	r2, [r2, #22]
 80170b8:	6879      	ldr	r1, [r7, #4]
 80170ba:	8b09      	ldrh	r1, [r1, #24]
 80170bc:	9102      	str	r1, [sp, #8]
 80170be:	9201      	str	r2, [sp, #4]
 80170c0:	9300      	str	r3, [sp, #0]
 80170c2:	462b      	mov	r3, r5
 80170c4:	4622      	mov	r2, r4
 80170c6:	4601      	mov	r1, r0
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f005 fe85 	bl	801cdd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f001 fc66 	bl	80189a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80170d4:	4b47      	ldr	r3, [pc, #284]	; (80171f4 <tcp_close_shutdown+0x1b0>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	687a      	ldr	r2, [r7, #4]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d105      	bne.n	80170ea <tcp_close_shutdown+0xa6>
 80170de:	4b45      	ldr	r3, [pc, #276]	; (80171f4 <tcp_close_shutdown+0x1b0>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	68db      	ldr	r3, [r3, #12]
 80170e4:	4a43      	ldr	r2, [pc, #268]	; (80171f4 <tcp_close_shutdown+0x1b0>)
 80170e6:	6013      	str	r3, [r2, #0]
 80170e8:	e013      	b.n	8017112 <tcp_close_shutdown+0xce>
 80170ea:	4b42      	ldr	r3, [pc, #264]	; (80171f4 <tcp_close_shutdown+0x1b0>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	e00c      	b.n	801710c <tcp_close_shutdown+0xc8>
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	68db      	ldr	r3, [r3, #12]
 80170f6:	687a      	ldr	r2, [r7, #4]
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d104      	bne.n	8017106 <tcp_close_shutdown+0xc2>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	68da      	ldr	r2, [r3, #12]
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	60da      	str	r2, [r3, #12]
 8017104:	e005      	b.n	8017112 <tcp_close_shutdown+0xce>
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	60fb      	str	r3, [r7, #12]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d1ef      	bne.n	80170f2 <tcp_close_shutdown+0xae>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	2200      	movs	r2, #0
 8017116:	60da      	str	r2, [r3, #12]
 8017118:	4b37      	ldr	r3, [pc, #220]	; (80171f8 <tcp_close_shutdown+0x1b4>)
 801711a:	2201      	movs	r2, #1
 801711c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801711e:	4b37      	ldr	r3, [pc, #220]	; (80171fc <tcp_close_shutdown+0x1b8>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	687a      	ldr	r2, [r7, #4]
 8017124:	429a      	cmp	r2, r3
 8017126:	d102      	bne.n	801712e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017128:	f004 f8fa 	bl	801b320 <tcp_trigger_input_pcb_close>
 801712c:	e002      	b.n	8017134 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f7ff fed6 	bl	8016ee0 <tcp_free>
      }
      return ERR_OK;
 8017134:	2300      	movs	r3, #0
 8017136:	e050      	b.n	80171da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	7d1b      	ldrb	r3, [r3, #20]
 801713c:	2b02      	cmp	r3, #2
 801713e:	d03b      	beq.n	80171b8 <tcp_close_shutdown+0x174>
 8017140:	2b02      	cmp	r3, #2
 8017142:	dc44      	bgt.n	80171ce <tcp_close_shutdown+0x18a>
 8017144:	2b00      	cmp	r3, #0
 8017146:	d002      	beq.n	801714e <tcp_close_shutdown+0x10a>
 8017148:	2b01      	cmp	r3, #1
 801714a:	d02a      	beq.n	80171a2 <tcp_close_shutdown+0x15e>
 801714c:	e03f      	b.n	80171ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	8adb      	ldrh	r3, [r3, #22]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d021      	beq.n	801719a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017156:	4b2a      	ldr	r3, [pc, #168]	; (8017200 <tcp_close_shutdown+0x1bc>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	687a      	ldr	r2, [r7, #4]
 801715c:	429a      	cmp	r2, r3
 801715e:	d105      	bne.n	801716c <tcp_close_shutdown+0x128>
 8017160:	4b27      	ldr	r3, [pc, #156]	; (8017200 <tcp_close_shutdown+0x1bc>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	68db      	ldr	r3, [r3, #12]
 8017166:	4a26      	ldr	r2, [pc, #152]	; (8017200 <tcp_close_shutdown+0x1bc>)
 8017168:	6013      	str	r3, [r2, #0]
 801716a:	e013      	b.n	8017194 <tcp_close_shutdown+0x150>
 801716c:	4b24      	ldr	r3, [pc, #144]	; (8017200 <tcp_close_shutdown+0x1bc>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	60bb      	str	r3, [r7, #8]
 8017172:	e00c      	b.n	801718e <tcp_close_shutdown+0x14a>
 8017174:	68bb      	ldr	r3, [r7, #8]
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	687a      	ldr	r2, [r7, #4]
 801717a:	429a      	cmp	r2, r3
 801717c:	d104      	bne.n	8017188 <tcp_close_shutdown+0x144>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	68da      	ldr	r2, [r3, #12]
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	60da      	str	r2, [r3, #12]
 8017186:	e005      	b.n	8017194 <tcp_close_shutdown+0x150>
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	60bb      	str	r3, [r7, #8]
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d1ef      	bne.n	8017174 <tcp_close_shutdown+0x130>
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2200      	movs	r2, #0
 8017198:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f7ff fea0 	bl	8016ee0 <tcp_free>
      break;
 80171a0:	e01a      	b.n	80171d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f7ff ff14 	bl	8016fd0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80171a8:	6879      	ldr	r1, [r7, #4]
 80171aa:	4816      	ldr	r0, [pc, #88]	; (8017204 <tcp_close_shutdown+0x1c0>)
 80171ac:	f001 fc48 	bl	8018a40 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7ff feb1 	bl	8016f18 <tcp_free_listen>
      break;
 80171b6:	e00f      	b.n	80171d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80171b8:	6879      	ldr	r1, [r7, #4]
 80171ba:	480e      	ldr	r0, [pc, #56]	; (80171f4 <tcp_close_shutdown+0x1b0>)
 80171bc:	f001 fc40 	bl	8018a40 <tcp_pcb_remove>
 80171c0:	4b0d      	ldr	r3, [pc, #52]	; (80171f8 <tcp_close_shutdown+0x1b4>)
 80171c2:	2201      	movs	r2, #1
 80171c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f7ff fe8a 	bl	8016ee0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80171cc:	e004      	b.n	80171d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f000 f81a 	bl	8017208 <tcp_close_shutdown_fin>
 80171d4:	4603      	mov	r3, r0
 80171d6:	e000      	b.n	80171da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80171d8:	2300      	movs	r3, #0
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3710      	adds	r7, #16
 80171de:	46bd      	mov	sp, r7
 80171e0:	bdb0      	pop	{r4, r5, r7, pc}
 80171e2:	bf00      	nop
 80171e4:	08025d40 	.word	0x08025d40
 80171e8:	08025e40 	.word	0x08025e40
 80171ec:	08025db0 	.word	0x08025db0
 80171f0:	08025e60 	.word	0x08025e60
 80171f4:	24008a28 	.word	0x24008a28
 80171f8:	24008a24 	.word	0x24008a24
 80171fc:	24008a3c 	.word	0x24008a3c
 8017200:	24008a34 	.word	0x24008a34
 8017204:	24008a30 	.word	0x24008a30

08017208 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b084      	sub	sp, #16
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d106      	bne.n	8017224 <tcp_close_shutdown_fin+0x1c>
 8017216:	4b2e      	ldr	r3, [pc, #184]	; (80172d0 <tcp_close_shutdown_fin+0xc8>)
 8017218:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801721c:	492d      	ldr	r1, [pc, #180]	; (80172d4 <tcp_close_shutdown_fin+0xcc>)
 801721e:	482e      	ldr	r0, [pc, #184]	; (80172d8 <tcp_close_shutdown_fin+0xd0>)
 8017220:	f008 fc48 	bl	801fab4 <iprintf>

  switch (pcb->state) {
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	7d1b      	ldrb	r3, [r3, #20]
 8017228:	2b07      	cmp	r3, #7
 801722a:	d020      	beq.n	801726e <tcp_close_shutdown_fin+0x66>
 801722c:	2b07      	cmp	r3, #7
 801722e:	dc2b      	bgt.n	8017288 <tcp_close_shutdown_fin+0x80>
 8017230:	2b03      	cmp	r3, #3
 8017232:	d002      	beq.n	801723a <tcp_close_shutdown_fin+0x32>
 8017234:	2b04      	cmp	r3, #4
 8017236:	d00d      	beq.n	8017254 <tcp_close_shutdown_fin+0x4c>
 8017238:	e026      	b.n	8017288 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f004 feda 	bl	801bff4 <tcp_send_fin>
 8017240:	4603      	mov	r3, r0
 8017242:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d11f      	bne.n	801728c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2205      	movs	r2, #5
 8017250:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017252:	e01b      	b.n	801728c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f004 fecd 	bl	801bff4 <tcp_send_fin>
 801725a:	4603      	mov	r3, r0
 801725c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801725e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d114      	bne.n	8017290 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2205      	movs	r2, #5
 801726a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801726c:	e010      	b.n	8017290 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f004 fec0 	bl	801bff4 <tcp_send_fin>
 8017274:	4603      	mov	r3, r0
 8017276:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d109      	bne.n	8017294 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2209      	movs	r2, #9
 8017284:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017286:	e005      	b.n	8017294 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017288:	2300      	movs	r3, #0
 801728a:	e01c      	b.n	80172c6 <tcp_close_shutdown_fin+0xbe>
      break;
 801728c:	bf00      	nop
 801728e:	e002      	b.n	8017296 <tcp_close_shutdown_fin+0x8e>
      break;
 8017290:	bf00      	nop
 8017292:	e000      	b.n	8017296 <tcp_close_shutdown_fin+0x8e>
      break;
 8017294:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d103      	bne.n	80172a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f004 ffe6 	bl	801c270 <tcp_output>
 80172a4:	e00d      	b.n	80172c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80172a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172ae:	d108      	bne.n	80172c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	8b5b      	ldrh	r3, [r3, #26]
 80172b4:	f043 0308 	orr.w	r3, r3, #8
 80172b8:	b29a      	uxth	r2, r3
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80172be:	2300      	movs	r3, #0
 80172c0:	e001      	b.n	80172c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80172c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3710      	adds	r7, #16
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop
 80172d0:	08025d40 	.word	0x08025d40
 80172d4:	08025e1c 	.word	0x08025e1c
 80172d8:	08025db0 	.word	0x08025db0

080172dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d109      	bne.n	80172fe <tcp_close+0x22>
 80172ea:	4b0f      	ldr	r3, [pc, #60]	; (8017328 <tcp_close+0x4c>)
 80172ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80172f0:	490e      	ldr	r1, [pc, #56]	; (801732c <tcp_close+0x50>)
 80172f2:	480f      	ldr	r0, [pc, #60]	; (8017330 <tcp_close+0x54>)
 80172f4:	f008 fbde 	bl	801fab4 <iprintf>
 80172f8:	f06f 030f 	mvn.w	r3, #15
 80172fc:	e00f      	b.n	801731e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	7d1b      	ldrb	r3, [r3, #20]
 8017302:	2b01      	cmp	r3, #1
 8017304:	d006      	beq.n	8017314 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	8b5b      	ldrh	r3, [r3, #26]
 801730a:	f043 0310 	orr.w	r3, r3, #16
 801730e:	b29a      	uxth	r2, r3
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8017314:	2101      	movs	r1, #1
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f7ff fe94 	bl	8017044 <tcp_close_shutdown>
 801731c:	4603      	mov	r3, r0
}
 801731e:	4618      	mov	r0, r3
 8017320:	3708      	adds	r7, #8
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	08025d40 	.word	0x08025d40
 801732c:	08025e7c 	.word	0x08025e7c
 8017330:	08025db0 	.word	0x08025db0

08017334 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b08e      	sub	sp, #56	; 0x38
 8017338:	af04      	add	r7, sp, #16
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d107      	bne.n	8017354 <tcp_abandon+0x20>
 8017344:	4b52      	ldr	r3, [pc, #328]	; (8017490 <tcp_abandon+0x15c>)
 8017346:	f240 223d 	movw	r2, #573	; 0x23d
 801734a:	4952      	ldr	r1, [pc, #328]	; (8017494 <tcp_abandon+0x160>)
 801734c:	4852      	ldr	r0, [pc, #328]	; (8017498 <tcp_abandon+0x164>)
 801734e:	f008 fbb1 	bl	801fab4 <iprintf>
 8017352:	e099      	b.n	8017488 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	7d1b      	ldrb	r3, [r3, #20]
 8017358:	2b01      	cmp	r3, #1
 801735a:	d106      	bne.n	801736a <tcp_abandon+0x36>
 801735c:	4b4c      	ldr	r3, [pc, #304]	; (8017490 <tcp_abandon+0x15c>)
 801735e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017362:	494e      	ldr	r1, [pc, #312]	; (801749c <tcp_abandon+0x168>)
 8017364:	484c      	ldr	r0, [pc, #304]	; (8017498 <tcp_abandon+0x164>)
 8017366:	f008 fba5 	bl	801fab4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	7d1b      	ldrb	r3, [r3, #20]
 801736e:	2b0a      	cmp	r3, #10
 8017370:	d107      	bne.n	8017382 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017372:	6879      	ldr	r1, [r7, #4]
 8017374:	484a      	ldr	r0, [pc, #296]	; (80174a0 <tcp_abandon+0x16c>)
 8017376:	f001 fb63 	bl	8018a40 <tcp_pcb_remove>
    tcp_free(pcb);
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	f7ff fdb0 	bl	8016ee0 <tcp_free>
 8017380:	e082      	b.n	8017488 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017382:	2300      	movs	r3, #0
 8017384:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8017386:	2300      	movs	r3, #0
 8017388:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801738e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017394:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801739c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	691b      	ldr	r3, [r3, #16]
 80173a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	7d1b      	ldrb	r3, [r3, #20]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d126      	bne.n	80173fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	8adb      	ldrh	r3, [r3, #22]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d02e      	beq.n	8017412 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80173b4:	4b3b      	ldr	r3, [pc, #236]	; (80174a4 <tcp_abandon+0x170>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	687a      	ldr	r2, [r7, #4]
 80173ba:	429a      	cmp	r2, r3
 80173bc:	d105      	bne.n	80173ca <tcp_abandon+0x96>
 80173be:	4b39      	ldr	r3, [pc, #228]	; (80174a4 <tcp_abandon+0x170>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	68db      	ldr	r3, [r3, #12]
 80173c4:	4a37      	ldr	r2, [pc, #220]	; (80174a4 <tcp_abandon+0x170>)
 80173c6:	6013      	str	r3, [r2, #0]
 80173c8:	e013      	b.n	80173f2 <tcp_abandon+0xbe>
 80173ca:	4b36      	ldr	r3, [pc, #216]	; (80174a4 <tcp_abandon+0x170>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	61fb      	str	r3, [r7, #28]
 80173d0:	e00c      	b.n	80173ec <tcp_abandon+0xb8>
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	68db      	ldr	r3, [r3, #12]
 80173d6:	687a      	ldr	r2, [r7, #4]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d104      	bne.n	80173e6 <tcp_abandon+0xb2>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	68da      	ldr	r2, [r3, #12]
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	60da      	str	r2, [r3, #12]
 80173e4:	e005      	b.n	80173f2 <tcp_abandon+0xbe>
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	68db      	ldr	r3, [r3, #12]
 80173ea:	61fb      	str	r3, [r7, #28]
 80173ec:	69fb      	ldr	r3, [r7, #28]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d1ef      	bne.n	80173d2 <tcp_abandon+0x9e>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2200      	movs	r2, #0
 80173f6:	60da      	str	r2, [r3, #12]
 80173f8:	e00b      	b.n	8017412 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	8adb      	ldrh	r3, [r3, #22]
 8017402:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017404:	6879      	ldr	r1, [r7, #4]
 8017406:	4828      	ldr	r0, [pc, #160]	; (80174a8 <tcp_abandon+0x174>)
 8017408:	f001 fb1a 	bl	8018a40 <tcp_pcb_remove>
 801740c:	4b27      	ldr	r3, [pc, #156]	; (80174ac <tcp_abandon+0x178>)
 801740e:	2201      	movs	r2, #1
 8017410:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017416:	2b00      	cmp	r3, #0
 8017418:	d004      	beq.n	8017424 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801741e:	4618      	mov	r0, r3
 8017420:	f000 ffee 	bl	8018400 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017428:	2b00      	cmp	r3, #0
 801742a:	d004      	beq.n	8017436 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017430:	4618      	mov	r0, r3
 8017432:	f000 ffe5 	bl	8018400 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801743a:	2b00      	cmp	r3, #0
 801743c:	d004      	beq.n	8017448 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017442:	4618      	mov	r0, r3
 8017444:	f000 ffdc 	bl	8018400 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00e      	beq.n	801746c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801744e:	6879      	ldr	r1, [r7, #4]
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	3304      	adds	r3, #4
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	8b12      	ldrh	r2, [r2, #24]
 8017458:	9202      	str	r2, [sp, #8]
 801745a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801745c:	9201      	str	r2, [sp, #4]
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	460b      	mov	r3, r1
 8017462:	697a      	ldr	r2, [r7, #20]
 8017464:	69b9      	ldr	r1, [r7, #24]
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f005 fcb6 	bl	801cdd8 <tcp_rst>
    }
    last_state = pcb->state;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	7d1b      	ldrb	r3, [r3, #20]
 8017470:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f7ff fd34 	bl	8016ee0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d004      	beq.n	8017488 <tcp_abandon+0x154>
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	f06f 010c 	mvn.w	r1, #12
 8017484:	68f8      	ldr	r0, [r7, #12]
 8017486:	4798      	blx	r3
  }
}
 8017488:	3728      	adds	r7, #40	; 0x28
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	08025d40 	.word	0x08025d40
 8017494:	08025eb0 	.word	0x08025eb0
 8017498:	08025db0 	.word	0x08025db0
 801749c:	08025ecc 	.word	0x08025ecc
 80174a0:	24008a38 	.word	0x24008a38
 80174a4:	24008a34 	.word	0x24008a34
 80174a8:	24008a28 	.word	0x24008a28
 80174ac:	24008a24 	.word	0x24008a24

080174b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80174b8:	2101      	movs	r1, #1
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f7ff ff3a 	bl	8017334 <tcp_abandon>
}
 80174c0:	bf00      	nop
 80174c2:	3708      	adds	r7, #8
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}

080174c8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b088      	sub	sp, #32
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	60b9      	str	r1, [r7, #8]
 80174d2:	4613      	mov	r3, r2
 80174d4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80174d6:	2304      	movs	r3, #4
 80174d8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80174da:	68bb      	ldr	r3, [r7, #8]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d101      	bne.n	80174e4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80174e0:	4b3e      	ldr	r3, [pc, #248]	; (80175dc <tcp_bind+0x114>)
 80174e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d109      	bne.n	80174fe <tcp_bind+0x36>
 80174ea:	4b3d      	ldr	r3, [pc, #244]	; (80175e0 <tcp_bind+0x118>)
 80174ec:	f240 22a9 	movw	r2, #681	; 0x2a9
 80174f0:	493c      	ldr	r1, [pc, #240]	; (80175e4 <tcp_bind+0x11c>)
 80174f2:	483d      	ldr	r0, [pc, #244]	; (80175e8 <tcp_bind+0x120>)
 80174f4:	f008 fade 	bl	801fab4 <iprintf>
 80174f8:	f06f 030f 	mvn.w	r3, #15
 80174fc:	e06a      	b.n	80175d4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	7d1b      	ldrb	r3, [r3, #20]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d009      	beq.n	801751a <tcp_bind+0x52>
 8017506:	4b36      	ldr	r3, [pc, #216]	; (80175e0 <tcp_bind+0x118>)
 8017508:	f240 22ab 	movw	r2, #683	; 0x2ab
 801750c:	4937      	ldr	r1, [pc, #220]	; (80175ec <tcp_bind+0x124>)
 801750e:	4836      	ldr	r0, [pc, #216]	; (80175e8 <tcp_bind+0x120>)
 8017510:	f008 fad0 	bl	801fab4 <iprintf>
 8017514:	f06f 0305 	mvn.w	r3, #5
 8017518:	e05c      	b.n	80175d4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801751a:	88fb      	ldrh	r3, [r7, #6]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d109      	bne.n	8017534 <tcp_bind+0x6c>
    port = tcp_new_port();
 8017520:	f000 f9f0 	bl	8017904 <tcp_new_port>
 8017524:	4603      	mov	r3, r0
 8017526:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017528:	88fb      	ldrh	r3, [r7, #6]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d135      	bne.n	801759a <tcp_bind+0xd2>
      return ERR_BUF;
 801752e:	f06f 0301 	mvn.w	r3, #1
 8017532:	e04f      	b.n	80175d4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017534:	2300      	movs	r3, #0
 8017536:	61fb      	str	r3, [r7, #28]
 8017538:	e02b      	b.n	8017592 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801753a:	4a2d      	ldr	r2, [pc, #180]	; (80175f0 <tcp_bind+0x128>)
 801753c:	69fb      	ldr	r3, [r7, #28]
 801753e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	61bb      	str	r3, [r7, #24]
 8017546:	e01e      	b.n	8017586 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8017548:	69bb      	ldr	r3, [r7, #24]
 801754a:	8adb      	ldrh	r3, [r3, #22]
 801754c:	88fa      	ldrh	r2, [r7, #6]
 801754e:	429a      	cmp	r2, r3
 8017550:	d116      	bne.n	8017580 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017552:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017554:	2b00      	cmp	r3, #0
 8017556:	d010      	beq.n	801757a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d00c      	beq.n	801757a <tcp_bind+0xb2>
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d009      	beq.n	801757a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d005      	beq.n	801757a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801756e:	69bb      	ldr	r3, [r7, #24]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017576:	429a      	cmp	r2, r3
 8017578:	d102      	bne.n	8017580 <tcp_bind+0xb8>
              return ERR_USE;
 801757a:	f06f 0307 	mvn.w	r3, #7
 801757e:	e029      	b.n	80175d4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	61bb      	str	r3, [r7, #24]
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d1dd      	bne.n	8017548 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801758c:	69fb      	ldr	r3, [r7, #28]
 801758e:	3301      	adds	r3, #1
 8017590:	61fb      	str	r3, [r7, #28]
 8017592:	69fa      	ldr	r2, [r7, #28]
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	429a      	cmp	r2, r3
 8017598:	dbcf      	blt.n	801753a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d00c      	beq.n	80175ba <tcp_bind+0xf2>
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d008      	beq.n	80175ba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d002      	beq.n	80175b4 <tcp_bind+0xec>
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	e000      	b.n	80175b6 <tcp_bind+0xee>
 80175b4:	2300      	movs	r3, #0
 80175b6:	68fa      	ldr	r2, [r7, #12]
 80175b8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	88fa      	ldrh	r2, [r7, #6]
 80175be:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80175c0:	4b0c      	ldr	r3, [pc, #48]	; (80175f4 <tcp_bind+0x12c>)
 80175c2:	681a      	ldr	r2, [r3, #0]
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	60da      	str	r2, [r3, #12]
 80175c8:	4a0a      	ldr	r2, [pc, #40]	; (80175f4 <tcp_bind+0x12c>)
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	6013      	str	r3, [r2, #0]
 80175ce:	f005 fdc5 	bl	801d15c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3720      	adds	r7, #32
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	08027d08 	.word	0x08027d08
 80175e0:	08025d40 	.word	0x08025d40
 80175e4:	08025f00 	.word	0x08025f00
 80175e8:	08025db0 	.word	0x08025db0
 80175ec:	08025f18 	.word	0x08025f18
 80175f0:	08027db4 	.word	0x08027db4
 80175f4:	24008a34 	.word	0x24008a34

080175f8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b084      	sub	sp, #16
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	60f8      	str	r0, [r7, #12]
 8017600:	60b9      	str	r1, [r7, #8]
 8017602:	4613      	mov	r3, r2
 8017604:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d106      	bne.n	801761a <tcp_accept_null+0x22>
 801760c:	4b07      	ldr	r3, [pc, #28]	; (801762c <tcp_accept_null+0x34>)
 801760e:	f240 320f 	movw	r2, #783	; 0x30f
 8017612:	4907      	ldr	r1, [pc, #28]	; (8017630 <tcp_accept_null+0x38>)
 8017614:	4807      	ldr	r0, [pc, #28]	; (8017634 <tcp_accept_null+0x3c>)
 8017616:	f008 fa4d 	bl	801fab4 <iprintf>

  tcp_abort(pcb);
 801761a:	68b8      	ldr	r0, [r7, #8]
 801761c:	f7ff ff48 	bl	80174b0 <tcp_abort>

  return ERR_ABRT;
 8017620:	f06f 030c 	mvn.w	r3, #12
}
 8017624:	4618      	mov	r0, r3
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}
 801762c:	08025d40 	.word	0x08025d40
 8017630:	08025f40 	.word	0x08025f40
 8017634:	08025db0 	.word	0x08025db0

08017638 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b082      	sub	sp, #8
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	460b      	mov	r3, r1
 8017642:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017644:	78fb      	ldrb	r3, [r7, #3]
 8017646:	2200      	movs	r2, #0
 8017648:	4619      	mov	r1, r3
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f000 f806 	bl	801765c <tcp_listen_with_backlog_and_err>
 8017650:	4603      	mov	r3, r0
}
 8017652:	4618      	mov	r0, r3
 8017654:	3708      	adds	r7, #8
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
	...

0801765c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b088      	sub	sp, #32
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	460b      	mov	r3, r1
 8017666:	607a      	str	r2, [r7, #4]
 8017668:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801766a:	2300      	movs	r3, #0
 801766c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d109      	bne.n	8017688 <tcp_listen_with_backlog_and_err+0x2c>
 8017674:	4b47      	ldr	r3, [pc, #284]	; (8017794 <tcp_listen_with_backlog_and_err+0x138>)
 8017676:	f240 3259 	movw	r2, #857	; 0x359
 801767a:	4947      	ldr	r1, [pc, #284]	; (8017798 <tcp_listen_with_backlog_and_err+0x13c>)
 801767c:	4847      	ldr	r0, [pc, #284]	; (801779c <tcp_listen_with_backlog_and_err+0x140>)
 801767e:	f008 fa19 	bl	801fab4 <iprintf>
 8017682:	23f0      	movs	r3, #240	; 0xf0
 8017684:	76fb      	strb	r3, [r7, #27]
 8017686:	e079      	b.n	801777c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	7d1b      	ldrb	r3, [r3, #20]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d009      	beq.n	80176a4 <tcp_listen_with_backlog_and_err+0x48>
 8017690:	4b40      	ldr	r3, [pc, #256]	; (8017794 <tcp_listen_with_backlog_and_err+0x138>)
 8017692:	f240 325a 	movw	r2, #858	; 0x35a
 8017696:	4942      	ldr	r1, [pc, #264]	; (80177a0 <tcp_listen_with_backlog_and_err+0x144>)
 8017698:	4840      	ldr	r0, [pc, #256]	; (801779c <tcp_listen_with_backlog_and_err+0x140>)
 801769a:	f008 fa0b 	bl	801fab4 <iprintf>
 801769e:	23f1      	movs	r3, #241	; 0xf1
 80176a0:	76fb      	strb	r3, [r7, #27]
 80176a2:	e06b      	b.n	801777c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	7d1b      	ldrb	r3, [r3, #20]
 80176a8:	2b01      	cmp	r3, #1
 80176aa:	d104      	bne.n	80176b6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80176b0:	23f7      	movs	r3, #247	; 0xf7
 80176b2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80176b4:	e062      	b.n	801777c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80176b6:	2002      	movs	r0, #2
 80176b8:	f7fe f9d4 	bl	8015a64 <memp_malloc>
 80176bc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80176be:	69fb      	ldr	r3, [r7, #28]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d102      	bne.n	80176ca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80176c4:	23ff      	movs	r3, #255	; 0xff
 80176c6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80176c8:	e058      	b.n	801777c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	691a      	ldr	r2, [r3, #16]
 80176ce:	69fb      	ldr	r3, [r7, #28]
 80176d0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	8ada      	ldrh	r2, [r3, #22]
 80176d6:	69fb      	ldr	r3, [r7, #28]
 80176d8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	2201      	movs	r2, #1
 80176de:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	7d5a      	ldrb	r2, [r3, #21]
 80176e4:	69fb      	ldr	r3, [r7, #28]
 80176e6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	7a5a      	ldrb	r2, [r3, #9]
 80176ec:	69fb      	ldr	r3, [r7, #28]
 80176ee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80176f0:	69fb      	ldr	r3, [r7, #28]
 80176f2:	2200      	movs	r2, #0
 80176f4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	7ada      	ldrb	r2, [r3, #11]
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	7a9a      	ldrb	r2, [r3, #10]
 8017702:	69fb      	ldr	r3, [r7, #28]
 8017704:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	69fb      	ldr	r3, [r7, #28]
 801770c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	8adb      	ldrh	r3, [r3, #22]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d021      	beq.n	801775a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017716:	4b23      	ldr	r3, [pc, #140]	; (80177a4 <tcp_listen_with_backlog_and_err+0x148>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	68fa      	ldr	r2, [r7, #12]
 801771c:	429a      	cmp	r2, r3
 801771e:	d105      	bne.n	801772c <tcp_listen_with_backlog_and_err+0xd0>
 8017720:	4b20      	ldr	r3, [pc, #128]	; (80177a4 <tcp_listen_with_backlog_and_err+0x148>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	68db      	ldr	r3, [r3, #12]
 8017726:	4a1f      	ldr	r2, [pc, #124]	; (80177a4 <tcp_listen_with_backlog_and_err+0x148>)
 8017728:	6013      	str	r3, [r2, #0]
 801772a:	e013      	b.n	8017754 <tcp_listen_with_backlog_and_err+0xf8>
 801772c:	4b1d      	ldr	r3, [pc, #116]	; (80177a4 <tcp_listen_with_backlog_and_err+0x148>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	617b      	str	r3, [r7, #20]
 8017732:	e00c      	b.n	801774e <tcp_listen_with_backlog_and_err+0xf2>
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	68db      	ldr	r3, [r3, #12]
 8017738:	68fa      	ldr	r2, [r7, #12]
 801773a:	429a      	cmp	r2, r3
 801773c:	d104      	bne.n	8017748 <tcp_listen_with_backlog_and_err+0xec>
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	68da      	ldr	r2, [r3, #12]
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	60da      	str	r2, [r3, #12]
 8017746:	e005      	b.n	8017754 <tcp_listen_with_backlog_and_err+0xf8>
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	68db      	ldr	r3, [r3, #12]
 801774c:	617b      	str	r3, [r7, #20]
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d1ef      	bne.n	8017734 <tcp_listen_with_backlog_and_err+0xd8>
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2200      	movs	r2, #0
 8017758:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f7ff fbc0 	bl	8016ee0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	4a11      	ldr	r2, [pc, #68]	; (80177a8 <tcp_listen_with_backlog_and_err+0x14c>)
 8017764:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017766:	4b11      	ldr	r3, [pc, #68]	; (80177ac <tcp_listen_with_backlog_and_err+0x150>)
 8017768:	681a      	ldr	r2, [r3, #0]
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	60da      	str	r2, [r3, #12]
 801776e:	4a0f      	ldr	r2, [pc, #60]	; (80177ac <tcp_listen_with_backlog_and_err+0x150>)
 8017770:	69fb      	ldr	r3, [r7, #28]
 8017772:	6013      	str	r3, [r2, #0]
 8017774:	f005 fcf2 	bl	801d15c <tcp_timer_needed>
  res = ERR_OK;
 8017778:	2300      	movs	r3, #0
 801777a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d002      	beq.n	8017788 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	7efa      	ldrb	r2, [r7, #27]
 8017786:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017788:	69fb      	ldr	r3, [r7, #28]
}
 801778a:	4618      	mov	r0, r3
 801778c:	3720      	adds	r7, #32
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	08025d40 	.word	0x08025d40
 8017798:	08025f60 	.word	0x08025f60
 801779c:	08025db0 	.word	0x08025db0
 80177a0:	08025f90 	.word	0x08025f90
 80177a4:	24008a34 	.word	0x24008a34
 80177a8:	080175f9 	.word	0x080175f9
 80177ac:	24008a30 	.word	0x24008a30

080177b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d106      	bne.n	80177cc <tcp_update_rcv_ann_wnd+0x1c>
 80177be:	4b25      	ldr	r3, [pc, #148]	; (8017854 <tcp_update_rcv_ann_wnd+0xa4>)
 80177c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80177c4:	4924      	ldr	r1, [pc, #144]	; (8017858 <tcp_update_rcv_ann_wnd+0xa8>)
 80177c6:	4825      	ldr	r0, [pc, #148]	; (801785c <tcp_update_rcv_ann_wnd+0xac>)
 80177c8:	f008 f974 	bl	801fab4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80177d4:	4413      	add	r3, r2
 80177d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80177e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80177e4:	bf28      	it	cs
 80177e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80177ea:	b292      	uxth	r2, r2
 80177ec:	4413      	add	r3, r2
 80177ee:	68fa      	ldr	r2, [r7, #12]
 80177f0:	1ad3      	subs	r3, r2, r3
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	db08      	blt.n	8017808 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017802:	68fa      	ldr	r2, [r7, #12]
 8017804:	1ad3      	subs	r3, r2, r3
 8017806:	e020      	b.n	801784a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	2b00      	cmp	r3, #0
 8017814:	dd03      	ble.n	801781e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	2200      	movs	r2, #0
 801781a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801781c:	e014      	b.n	8017848 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017826:	1ad3      	subs	r3, r2, r3
 8017828:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017830:	d306      	bcc.n	8017840 <tcp_update_rcv_ann_wnd+0x90>
 8017832:	4b08      	ldr	r3, [pc, #32]	; (8017854 <tcp_update_rcv_ann_wnd+0xa4>)
 8017834:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017838:	4909      	ldr	r1, [pc, #36]	; (8017860 <tcp_update_rcv_ann_wnd+0xb0>)
 801783a:	4808      	ldr	r0, [pc, #32]	; (801785c <tcp_update_rcv_ann_wnd+0xac>)
 801783c:	f008 f93a 	bl	801fab4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	b29a      	uxth	r2, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017848:	2300      	movs	r3, #0
  }
}
 801784a:	4618      	mov	r0, r3
 801784c:	3710      	adds	r7, #16
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	08025d40 	.word	0x08025d40
 8017858:	08025fc8 	.word	0x08025fc8
 801785c:	08025db0 	.word	0x08025db0
 8017860:	08025fec 	.word	0x08025fec

08017864 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b084      	sub	sp, #16
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	460b      	mov	r3, r1
 801786e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d107      	bne.n	8017886 <tcp_recved+0x22>
 8017876:	4b1f      	ldr	r3, [pc, #124]	; (80178f4 <tcp_recved+0x90>)
 8017878:	f240 32cf 	movw	r2, #975	; 0x3cf
 801787c:	491e      	ldr	r1, [pc, #120]	; (80178f8 <tcp_recved+0x94>)
 801787e:	481f      	ldr	r0, [pc, #124]	; (80178fc <tcp_recved+0x98>)
 8017880:	f008 f918 	bl	801fab4 <iprintf>
 8017884:	e032      	b.n	80178ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	7d1b      	ldrb	r3, [r3, #20]
 801788a:	2b01      	cmp	r3, #1
 801788c:	d106      	bne.n	801789c <tcp_recved+0x38>
 801788e:	4b19      	ldr	r3, [pc, #100]	; (80178f4 <tcp_recved+0x90>)
 8017890:	f240 32d2 	movw	r2, #978	; 0x3d2
 8017894:	491a      	ldr	r1, [pc, #104]	; (8017900 <tcp_recved+0x9c>)
 8017896:	4819      	ldr	r0, [pc, #100]	; (80178fc <tcp_recved+0x98>)
 8017898:	f008 f90c 	bl	801fab4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80178a0:	887b      	ldrh	r3, [r7, #2]
 80178a2:	4413      	add	r3, r2
 80178a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80178a6:	89fb      	ldrh	r3, [r7, #14]
 80178a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80178ac:	d804      	bhi.n	80178b8 <tcp_recved+0x54>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178b2:	89fa      	ldrh	r2, [r7, #14]
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d204      	bcs.n	80178c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80178be:	851a      	strh	r2, [r3, #40]	; 0x28
 80178c0:	e002      	b.n	80178c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	89fa      	ldrh	r2, [r7, #14]
 80178c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f7ff ff71 	bl	80177b0 <tcp_update_rcv_ann_wnd>
 80178ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80178d6:	d309      	bcc.n	80178ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	8b5b      	ldrh	r3, [r3, #26]
 80178dc:	f043 0302 	orr.w	r3, r3, #2
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f004 fcc2 	bl	801c270 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80178ec:	3710      	adds	r7, #16
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}
 80178f2:	bf00      	nop
 80178f4:	08025d40 	.word	0x08025d40
 80178f8:	08026008 	.word	0x08026008
 80178fc:	08025db0 	.word	0x08025db0
 8017900:	08026020 	.word	0x08026020

08017904 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017904:	b480      	push	{r7}
 8017906:	b083      	sub	sp, #12
 8017908:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801790a:	2300      	movs	r3, #0
 801790c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801790e:	4b1e      	ldr	r3, [pc, #120]	; (8017988 <tcp_new_port+0x84>)
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	3301      	adds	r3, #1
 8017914:	b29a      	uxth	r2, r3
 8017916:	4b1c      	ldr	r3, [pc, #112]	; (8017988 <tcp_new_port+0x84>)
 8017918:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801791a:	4b1b      	ldr	r3, [pc, #108]	; (8017988 <tcp_new_port+0x84>)
 801791c:	881b      	ldrh	r3, [r3, #0]
 801791e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017922:	4293      	cmp	r3, r2
 8017924:	d103      	bne.n	801792e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017926:	4b18      	ldr	r3, [pc, #96]	; (8017988 <tcp_new_port+0x84>)
 8017928:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801792c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801792e:	2300      	movs	r3, #0
 8017930:	71fb      	strb	r3, [r7, #7]
 8017932:	e01e      	b.n	8017972 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017934:	79fb      	ldrb	r3, [r7, #7]
 8017936:	4a15      	ldr	r2, [pc, #84]	; (801798c <tcp_new_port+0x88>)
 8017938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	603b      	str	r3, [r7, #0]
 8017940:	e011      	b.n	8017966 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	8ada      	ldrh	r2, [r3, #22]
 8017946:	4b10      	ldr	r3, [pc, #64]	; (8017988 <tcp_new_port+0x84>)
 8017948:	881b      	ldrh	r3, [r3, #0]
 801794a:	429a      	cmp	r2, r3
 801794c:	d108      	bne.n	8017960 <tcp_new_port+0x5c>
        n++;
 801794e:	88bb      	ldrh	r3, [r7, #4]
 8017950:	3301      	adds	r3, #1
 8017952:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017954:	88bb      	ldrh	r3, [r7, #4]
 8017956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801795a:	d3d8      	bcc.n	801790e <tcp_new_port+0xa>
          return 0;
 801795c:	2300      	movs	r3, #0
 801795e:	e00d      	b.n	801797c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	68db      	ldr	r3, [r3, #12]
 8017964:	603b      	str	r3, [r7, #0]
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d1ea      	bne.n	8017942 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801796c:	79fb      	ldrb	r3, [r7, #7]
 801796e:	3301      	adds	r3, #1
 8017970:	71fb      	strb	r3, [r7, #7]
 8017972:	79fb      	ldrb	r3, [r7, #7]
 8017974:	2b03      	cmp	r3, #3
 8017976:	d9dd      	bls.n	8017934 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017978:	4b03      	ldr	r3, [pc, #12]	; (8017988 <tcp_new_port+0x84>)
 801797a:	881b      	ldrh	r3, [r3, #0]
}
 801797c:	4618      	mov	r0, r3
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr
 8017988:	24000024 	.word	0x24000024
 801798c:	08027db4 	.word	0x08027db4

08017990 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b08a      	sub	sp, #40	; 0x28
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	603b      	str	r3, [r7, #0]
 801799c:	4613      	mov	r3, r2
 801799e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80179a0:	2300      	movs	r3, #0
 80179a2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d109      	bne.n	80179be <tcp_connect+0x2e>
 80179aa:	4b7d      	ldr	r3, [pc, #500]	; (8017ba0 <tcp_connect+0x210>)
 80179ac:	f240 4235 	movw	r2, #1077	; 0x435
 80179b0:	497c      	ldr	r1, [pc, #496]	; (8017ba4 <tcp_connect+0x214>)
 80179b2:	487d      	ldr	r0, [pc, #500]	; (8017ba8 <tcp_connect+0x218>)
 80179b4:	f008 f87e 	bl	801fab4 <iprintf>
 80179b8:	f06f 030f 	mvn.w	r3, #15
 80179bc:	e0ec      	b.n	8017b98 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d109      	bne.n	80179d8 <tcp_connect+0x48>
 80179c4:	4b76      	ldr	r3, [pc, #472]	; (8017ba0 <tcp_connect+0x210>)
 80179c6:	f240 4236 	movw	r2, #1078	; 0x436
 80179ca:	4978      	ldr	r1, [pc, #480]	; (8017bac <tcp_connect+0x21c>)
 80179cc:	4876      	ldr	r0, [pc, #472]	; (8017ba8 <tcp_connect+0x218>)
 80179ce:	f008 f871 	bl	801fab4 <iprintf>
 80179d2:	f06f 030f 	mvn.w	r3, #15
 80179d6:	e0df      	b.n	8017b98 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	7d1b      	ldrb	r3, [r3, #20]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d009      	beq.n	80179f4 <tcp_connect+0x64>
 80179e0:	4b6f      	ldr	r3, [pc, #444]	; (8017ba0 <tcp_connect+0x210>)
 80179e2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80179e6:	4972      	ldr	r1, [pc, #456]	; (8017bb0 <tcp_connect+0x220>)
 80179e8:	486f      	ldr	r0, [pc, #444]	; (8017ba8 <tcp_connect+0x218>)
 80179ea:	f008 f863 	bl	801fab4 <iprintf>
 80179ee:	f06f 0309 	mvn.w	r3, #9
 80179f2:	e0d1      	b.n	8017b98 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d002      	beq.n	8017a00 <tcp_connect+0x70>
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	e000      	b.n	8017a02 <tcp_connect+0x72>
 8017a00:	2300      	movs	r3, #0
 8017a02:	68fa      	ldr	r2, [r7, #12]
 8017a04:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	88fa      	ldrh	r2, [r7, #6]
 8017a0a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	7a1b      	ldrb	r3, [r3, #8]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d006      	beq.n	8017a22 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	7a1b      	ldrb	r3, [r3, #8]
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f7fe fba9 	bl	8016170 <netif_get_by_index>
 8017a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8017a20:	e005      	b.n	8017a2e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	3304      	adds	r3, #4
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7fc fadc 	bl	8013fe4 <ip4_route>
 8017a2c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8017a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d102      	bne.n	8017a3a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8017a34:	f06f 0303 	mvn.w	r3, #3
 8017a38:	e0ae      	b.n	8017b98 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d003      	beq.n	8017a48 <tcp_connect+0xb8>
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d111      	bne.n	8017a6c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8017a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d002      	beq.n	8017a54 <tcp_connect+0xc4>
 8017a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a50:	3304      	adds	r3, #4
 8017a52:	e000      	b.n	8017a56 <tcp_connect+0xc6>
 8017a54:	2300      	movs	r3, #0
 8017a56:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8017a58:	69fb      	ldr	r3, [r7, #28]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d102      	bne.n	8017a64 <tcp_connect+0xd4>
      return ERR_RTE;
 8017a5e:	f06f 0303 	mvn.w	r3, #3
 8017a62:	e099      	b.n	8017b98 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	681a      	ldr	r2, [r3, #0]
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	8adb      	ldrh	r3, [r3, #22]
 8017a70:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	8adb      	ldrh	r3, [r3, #22]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d10c      	bne.n	8017a94 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8017a7a:	f7ff ff43 	bl	8017904 <tcp_new_port>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	461a      	mov	r2, r3
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	8adb      	ldrh	r3, [r3, #22]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d102      	bne.n	8017a94 <tcp_connect+0x104>
      return ERR_BUF;
 8017a8e:	f06f 0301 	mvn.w	r3, #1
 8017a92:	e081      	b.n	8017b98 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8017a94:	68f8      	ldr	r0, [r7, #12]
 8017a96:	f001 f867 	bl	8018b68 <tcp_next_iss>
 8017a9a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	697a      	ldr	r2, [r7, #20]
 8017aa6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	1e5a      	subs	r2, r3, #1
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	1e5a      	subs	r2, r3, #1
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	1e5a      	subs	r2, r3, #1
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017ade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ae8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	3304      	adds	r3, #4
 8017af2:	461a      	mov	r2, r3
 8017af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017af6:	f001 f85d 	bl	8018bb4 <tcp_eff_send_mss_netif>
 8017afa:	4603      	mov	r3, r0
 8017afc:	461a      	mov	r2, r3
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2201      	movs	r2, #1
 8017b06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	683a      	ldr	r2, [r7, #0]
 8017b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017b12:	2102      	movs	r1, #2
 8017b14:	68f8      	ldr	r0, [r7, #12]
 8017b16:	f004 fabd 	bl	801c094 <tcp_enqueue_flags>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8017b1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d136      	bne.n	8017b94 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2202      	movs	r2, #2
 8017b2a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8017b2c:	8b7b      	ldrh	r3, [r7, #26]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d021      	beq.n	8017b76 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017b32:	4b20      	ldr	r3, [pc, #128]	; (8017bb4 <tcp_connect+0x224>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	68fa      	ldr	r2, [r7, #12]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d105      	bne.n	8017b48 <tcp_connect+0x1b8>
 8017b3c:	4b1d      	ldr	r3, [pc, #116]	; (8017bb4 <tcp_connect+0x224>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	68db      	ldr	r3, [r3, #12]
 8017b42:	4a1c      	ldr	r2, [pc, #112]	; (8017bb4 <tcp_connect+0x224>)
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	e013      	b.n	8017b70 <tcp_connect+0x1e0>
 8017b48:	4b1a      	ldr	r3, [pc, #104]	; (8017bb4 <tcp_connect+0x224>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	623b      	str	r3, [r7, #32]
 8017b4e:	e00c      	b.n	8017b6a <tcp_connect+0x1da>
 8017b50:	6a3b      	ldr	r3, [r7, #32]
 8017b52:	68db      	ldr	r3, [r3, #12]
 8017b54:	68fa      	ldr	r2, [r7, #12]
 8017b56:	429a      	cmp	r2, r3
 8017b58:	d104      	bne.n	8017b64 <tcp_connect+0x1d4>
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	68da      	ldr	r2, [r3, #12]
 8017b5e:	6a3b      	ldr	r3, [r7, #32]
 8017b60:	60da      	str	r2, [r3, #12]
 8017b62:	e005      	b.n	8017b70 <tcp_connect+0x1e0>
 8017b64:	6a3b      	ldr	r3, [r7, #32]
 8017b66:	68db      	ldr	r3, [r3, #12]
 8017b68:	623b      	str	r3, [r7, #32]
 8017b6a:	6a3b      	ldr	r3, [r7, #32]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d1ef      	bne.n	8017b50 <tcp_connect+0x1c0>
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2200      	movs	r2, #0
 8017b74:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8017b76:	4b10      	ldr	r3, [pc, #64]	; (8017bb8 <tcp_connect+0x228>)
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	60da      	str	r2, [r3, #12]
 8017b7e:	4a0e      	ldr	r2, [pc, #56]	; (8017bb8 <tcp_connect+0x228>)
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	6013      	str	r3, [r2, #0]
 8017b84:	f005 faea 	bl	801d15c <tcp_timer_needed>
 8017b88:	4b0c      	ldr	r3, [pc, #48]	; (8017bbc <tcp_connect+0x22c>)
 8017b8a:	2201      	movs	r2, #1
 8017b8c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017b8e:	68f8      	ldr	r0, [r7, #12]
 8017b90:	f004 fb6e 	bl	801c270 <tcp_output>
  }
  return ret;
 8017b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3728      	adds	r7, #40	; 0x28
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	08025d40 	.word	0x08025d40
 8017ba4:	08026048 	.word	0x08026048
 8017ba8:	08025db0 	.word	0x08025db0
 8017bac:	08026064 	.word	0x08026064
 8017bb0:	08026080 	.word	0x08026080
 8017bb4:	24008a34 	.word	0x24008a34
 8017bb8:	24008a28 	.word	0x24008a28
 8017bbc:	24008a24 	.word	0x24008a24

08017bc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017bc0:	b5b0      	push	{r4, r5, r7, lr}
 8017bc2:	b090      	sub	sp, #64	; 0x40
 8017bc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017bcc:	4b94      	ldr	r3, [pc, #592]	; (8017e20 <tcp_slowtmr+0x260>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	4a93      	ldr	r2, [pc, #588]	; (8017e20 <tcp_slowtmr+0x260>)
 8017bd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017bd6:	4b93      	ldr	r3, [pc, #588]	; (8017e24 <tcp_slowtmr+0x264>)
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	b2da      	uxtb	r2, r3
 8017bde:	4b91      	ldr	r3, [pc, #580]	; (8017e24 <tcp_slowtmr+0x264>)
 8017be0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8017be2:	2300      	movs	r3, #0
 8017be4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8017be6:	4b90      	ldr	r3, [pc, #576]	; (8017e28 <tcp_slowtmr+0x268>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8017bec:	e29d      	b.n	801812a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf0:	7d1b      	ldrb	r3, [r3, #20]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <tcp_slowtmr+0x44>
 8017bf6:	4b8d      	ldr	r3, [pc, #564]	; (8017e2c <tcp_slowtmr+0x26c>)
 8017bf8:	f240 42be 	movw	r2, #1214	; 0x4be
 8017bfc:	498c      	ldr	r1, [pc, #560]	; (8017e30 <tcp_slowtmr+0x270>)
 8017bfe:	488d      	ldr	r0, [pc, #564]	; (8017e34 <tcp_slowtmr+0x274>)
 8017c00:	f007 ff58 	bl	801fab4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c06:	7d1b      	ldrb	r3, [r3, #20]
 8017c08:	2b01      	cmp	r3, #1
 8017c0a:	d106      	bne.n	8017c1a <tcp_slowtmr+0x5a>
 8017c0c:	4b87      	ldr	r3, [pc, #540]	; (8017e2c <tcp_slowtmr+0x26c>)
 8017c0e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8017c12:	4989      	ldr	r1, [pc, #548]	; (8017e38 <tcp_slowtmr+0x278>)
 8017c14:	4887      	ldr	r0, [pc, #540]	; (8017e34 <tcp_slowtmr+0x274>)
 8017c16:	f007 ff4d 	bl	801fab4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	7d1b      	ldrb	r3, [r3, #20]
 8017c1e:	2b0a      	cmp	r3, #10
 8017c20:	d106      	bne.n	8017c30 <tcp_slowtmr+0x70>
 8017c22:	4b82      	ldr	r3, [pc, #520]	; (8017e2c <tcp_slowtmr+0x26c>)
 8017c24:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017c28:	4984      	ldr	r1, [pc, #528]	; (8017e3c <tcp_slowtmr+0x27c>)
 8017c2a:	4882      	ldr	r0, [pc, #520]	; (8017e34 <tcp_slowtmr+0x274>)
 8017c2c:	f007 ff42 	bl	801fab4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c32:	7f9a      	ldrb	r2, [r3, #30]
 8017c34:	4b7b      	ldr	r3, [pc, #492]	; (8017e24 <tcp_slowtmr+0x264>)
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d105      	bne.n	8017c48 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8017c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c42:	68db      	ldr	r3, [r3, #12]
 8017c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8017c46:	e270      	b.n	801812a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017c48:	4b76      	ldr	r3, [pc, #472]	; (8017e24 <tcp_slowtmr+0x264>)
 8017c4a:	781a      	ldrb	r2, [r3, #0]
 8017c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c4e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017c50:	2300      	movs	r3, #0
 8017c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8017c56:	2300      	movs	r3, #0
 8017c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5e:	7d1b      	ldrb	r3, [r3, #20]
 8017c60:	2b02      	cmp	r3, #2
 8017c62:	d10a      	bne.n	8017c7a <tcp_slowtmr+0xba>
 8017c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c6a:	2b05      	cmp	r3, #5
 8017c6c:	d905      	bls.n	8017c7a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c72:	3301      	adds	r3, #1
 8017c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c78:	e11e      	b.n	8017eb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c80:	2b0b      	cmp	r3, #11
 8017c82:	d905      	bls.n	8017c90 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c88:	3301      	adds	r3, #1
 8017c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c8e:	e113      	b.n	8017eb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d075      	beq.n	8017d86 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d006      	beq.n	8017cb0 <tcp_slowtmr+0xf0>
 8017ca2:	4b62      	ldr	r3, [pc, #392]	; (8017e2c <tcp_slowtmr+0x26c>)
 8017ca4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017ca8:	4965      	ldr	r1, [pc, #404]	; (8017e40 <tcp_slowtmr+0x280>)
 8017caa:	4862      	ldr	r0, [pc, #392]	; (8017e34 <tcp_slowtmr+0x274>)
 8017cac:	f007 ff02 	bl	801fab4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d106      	bne.n	8017cc6 <tcp_slowtmr+0x106>
 8017cb8:	4b5c      	ldr	r3, [pc, #368]	; (8017e2c <tcp_slowtmr+0x26c>)
 8017cba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017cbe:	4961      	ldr	r1, [pc, #388]	; (8017e44 <tcp_slowtmr+0x284>)
 8017cc0:	485c      	ldr	r0, [pc, #368]	; (8017e34 <tcp_slowtmr+0x274>)
 8017cc2:	f007 fef7 	bl	801fab4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8017cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017ccc:	2b0b      	cmp	r3, #11
 8017cce:	d905      	bls.n	8017cdc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017cd4:	3301      	adds	r3, #1
 8017cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017cda:	e0ed      	b.n	8017eb8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017ce2:	3b01      	subs	r3, #1
 8017ce4:	4a58      	ldr	r2, [pc, #352]	; (8017e48 <tcp_slowtmr+0x288>)
 8017ce6:	5cd3      	ldrb	r3, [r2, r3]
 8017ce8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8017cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017cf0:	7c7a      	ldrb	r2, [r7, #17]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d907      	bls.n	8017d06 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8017cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	b2da      	uxtb	r2, r3
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8017d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017d0c:	7c7a      	ldrb	r2, [r7, #17]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	f200 80d2 	bhi.w	8017eb8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017d14:	2301      	movs	r3, #1
 8017d16:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d108      	bne.n	8017d34 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d24:	f005 f94c 	bl	801cfc0 <tcp_zero_window_probe>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d014      	beq.n	8017d58 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017d2e:	2300      	movs	r3, #0
 8017d30:	623b      	str	r3, [r7, #32]
 8017d32:	e011      	b.n	8017d58 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d3e:	f004 f811 	bl	801bd64 <tcp_split_unsent_seg>
 8017d42:	4603      	mov	r3, r0
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d107      	bne.n	8017d58 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d4a:	f004 fa91 	bl	801c270 <tcp_output>
 8017d4e:	4603      	mov	r3, r0
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d101      	bne.n	8017d58 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017d54:	2300      	movs	r3, #0
 8017d56:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017d58:	6a3b      	ldr	r3, [r7, #32]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 80ac 	beq.w	8017eb8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	2200      	movs	r2, #0
 8017d64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017d6e:	2b06      	cmp	r3, #6
 8017d70:	f200 80a2 	bhi.w	8017eb8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017d84:	e098      	b.n	8017eb8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	db0f      	blt.n	8017db0 <tcp_slowtmr+0x1f0>
 8017d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017d96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	d008      	beq.n	8017db0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	3301      	adds	r3, #1
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	b21a      	sxth	r2, r3
 8017dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	db7b      	blt.n	8017eb8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dc2:	f004 fd47 	bl	801c854 <tcp_rexmit_rto_prepare>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d007      	beq.n	8017ddc <tcp_slowtmr+0x21c>
 8017dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d171      	bne.n	8017eb8 <tcp_slowtmr+0x2f8>
 8017dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d06d      	beq.n	8017eb8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dde:	7d1b      	ldrb	r3, [r3, #20]
 8017de0:	2b02      	cmp	r3, #2
 8017de2:	d03a      	beq.n	8017e5a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017dea:	2b0c      	cmp	r3, #12
 8017dec:	bf28      	it	cs
 8017dee:	230c      	movcs	r3, #12
 8017df0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017df8:	10db      	asrs	r3, r3, #3
 8017dfa:	b21b      	sxth	r3, r3
 8017dfc:	461a      	mov	r2, r3
 8017dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e00:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e04:	4413      	add	r3, r2
 8017e06:	7efa      	ldrb	r2, [r7, #27]
 8017e08:	4910      	ldr	r1, [pc, #64]	; (8017e4c <tcp_slowtmr+0x28c>)
 8017e0a:	5c8a      	ldrb	r2, [r1, r2]
 8017e0c:	4093      	lsls	r3, r2
 8017e0e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017e16:	4293      	cmp	r3, r2
 8017e18:	dc1a      	bgt.n	8017e50 <tcp_slowtmr+0x290>
 8017e1a:	697b      	ldr	r3, [r7, #20]
 8017e1c:	b21a      	sxth	r2, r3
 8017e1e:	e019      	b.n	8017e54 <tcp_slowtmr+0x294>
 8017e20:	24008a2c 	.word	0x24008a2c
 8017e24:	2400522e 	.word	0x2400522e
 8017e28:	24008a28 	.word	0x24008a28
 8017e2c:	08025d40 	.word	0x08025d40
 8017e30:	080260b0 	.word	0x080260b0
 8017e34:	08025db0 	.word	0x08025db0
 8017e38:	080260dc 	.word	0x080260dc
 8017e3c:	08026108 	.word	0x08026108
 8017e40:	08026138 	.word	0x08026138
 8017e44:	0802616c 	.word	0x0802616c
 8017e48:	08027dac 	.word	0x08027dac
 8017e4c:	08027d9c 	.word	0x08027d9c
 8017e50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	bf28      	it	cs
 8017e70:	4613      	movcs	r3, r2
 8017e72:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017e74:	8a7b      	ldrh	r3, [r7, #18]
 8017e76:	085b      	lsrs	r3, r3, #1
 8017e78:	b29a      	uxth	r2, r3
 8017e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e8a:	005b      	lsls	r3, r3, #1
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d206      	bcs.n	8017ea0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e96:	005b      	lsls	r3, r3, #1
 8017e98:	b29a      	uxth	r2, r3
 8017e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eac:	2200      	movs	r2, #0
 8017eae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017eb4:	f004 fd3e 	bl	801c934 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	7d1b      	ldrb	r3, [r3, #20]
 8017ebc:	2b06      	cmp	r3, #6
 8017ebe:	d111      	bne.n	8017ee4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec2:	8b5b      	ldrh	r3, [r3, #26]
 8017ec4:	f003 0310 	and.w	r3, r3, #16
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d00b      	beq.n	8017ee4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017ecc:	4b9c      	ldr	r3, [pc, #624]	; (8018140 <tcp_slowtmr+0x580>)
 8017ece:	681a      	ldr	r2, [r3, #0]
 8017ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed2:	6a1b      	ldr	r3, [r3, #32]
 8017ed4:	1ad3      	subs	r3, r2, r3
 8017ed6:	2b28      	cmp	r3, #40	; 0x28
 8017ed8:	d904      	bls.n	8017ee4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ede:	3301      	adds	r3, #1
 8017ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee6:	7a5b      	ldrb	r3, [r3, #9]
 8017ee8:	f003 0308 	and.w	r3, r3, #8
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d04a      	beq.n	8017f86 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017ef4:	2b04      	cmp	r3, #4
 8017ef6:	d003      	beq.n	8017f00 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017efa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017efc:	2b07      	cmp	r3, #7
 8017efe:	d142      	bne.n	8017f86 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017f00:	4b8f      	ldr	r3, [pc, #572]	; (8018140 <tcp_slowtmr+0x580>)
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f06:	6a1b      	ldr	r3, [r3, #32]
 8017f08:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017f10:	4b8c      	ldr	r3, [pc, #560]	; (8018144 <tcp_slowtmr+0x584>)
 8017f12:	440b      	add	r3, r1
 8017f14:	498c      	ldr	r1, [pc, #560]	; (8018148 <tcp_slowtmr+0x588>)
 8017f16:	fba1 1303 	umull	r1, r3, r1, r3
 8017f1a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d90a      	bls.n	8017f36 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f24:	3301      	adds	r3, #1
 8017f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f2e:	3301      	adds	r3, #1
 8017f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f34:	e027      	b.n	8017f86 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017f36:	4b82      	ldr	r3, [pc, #520]	; (8018140 <tcp_slowtmr+0x580>)
 8017f38:	681a      	ldr	r2, [r3, #0]
 8017f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3c:	6a1b      	ldr	r3, [r3, #32]
 8017f3e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f42:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	4b7f      	ldr	r3, [pc, #508]	; (801814c <tcp_slowtmr+0x58c>)
 8017f50:	fb03 f300 	mul.w	r3, r3, r0
 8017f54:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017f56:	497c      	ldr	r1, [pc, #496]	; (8018148 <tcp_slowtmr+0x588>)
 8017f58:	fba1 1303 	umull	r1, r3, r1, r3
 8017f5c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d911      	bls.n	8017f86 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8017f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017f64:	f004 ffec 	bl	801cf40 <tcp_keepalive>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017f6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d107      	bne.n	8017f86 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8017f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	b2da      	uxtb	r2, r3
 8017f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f82:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d011      	beq.n	8017fb2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017f8e:	4b6c      	ldr	r3, [pc, #432]	; (8018140 <tcp_slowtmr+0x580>)
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f94:	6a1b      	ldr	r3, [r3, #32]
 8017f96:	1ad2      	subs	r2, r2, r3
 8017f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	460b      	mov	r3, r1
 8017fa2:	005b      	lsls	r3, r3, #1
 8017fa4:	440b      	add	r3, r1
 8017fa6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d302      	bcc.n	8017fb2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017fae:	f000 feab 	bl	8018d08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb4:	7d1b      	ldrb	r3, [r3, #20]
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d10b      	bne.n	8017fd2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017fba:	4b61      	ldr	r3, [pc, #388]	; (8018140 <tcp_slowtmr+0x580>)
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc0:	6a1b      	ldr	r3, [r3, #32]
 8017fc2:	1ad3      	subs	r3, r2, r3
 8017fc4:	2b28      	cmp	r3, #40	; 0x28
 8017fc6:	d904      	bls.n	8017fd2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fcc:	3301      	adds	r3, #1
 8017fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd4:	7d1b      	ldrb	r3, [r3, #20]
 8017fd6:	2b09      	cmp	r3, #9
 8017fd8:	d10b      	bne.n	8017ff2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017fda:	4b59      	ldr	r3, [pc, #356]	; (8018140 <tcp_slowtmr+0x580>)
 8017fdc:	681a      	ldr	r2, [r3, #0]
 8017fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe0:	6a1b      	ldr	r3, [r3, #32]
 8017fe2:	1ad3      	subs	r3, r2, r3
 8017fe4:	2bf0      	cmp	r3, #240	; 0xf0
 8017fe6:	d904      	bls.n	8017ff2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fec:	3301      	adds	r3, #1
 8017fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d060      	beq.n	80180bc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018000:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8018002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018004:	f000 fccc 	bl	80189a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8018008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800a:	2b00      	cmp	r3, #0
 801800c:	d010      	beq.n	8018030 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801800e:	4b50      	ldr	r3, [pc, #320]	; (8018150 <tcp_slowtmr+0x590>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018014:	429a      	cmp	r2, r3
 8018016:	d106      	bne.n	8018026 <tcp_slowtmr+0x466>
 8018018:	4b4e      	ldr	r3, [pc, #312]	; (8018154 <tcp_slowtmr+0x594>)
 801801a:	f240 526d 	movw	r2, #1389	; 0x56d
 801801e:	494e      	ldr	r1, [pc, #312]	; (8018158 <tcp_slowtmr+0x598>)
 8018020:	484e      	ldr	r0, [pc, #312]	; (801815c <tcp_slowtmr+0x59c>)
 8018022:	f007 fd47 	bl	801fab4 <iprintf>
        prev->next = pcb->next;
 8018026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018028:	68da      	ldr	r2, [r3, #12]
 801802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802c:	60da      	str	r2, [r3, #12]
 801802e:	e00f      	b.n	8018050 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8018030:	4b47      	ldr	r3, [pc, #284]	; (8018150 <tcp_slowtmr+0x590>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018036:	429a      	cmp	r2, r3
 8018038:	d006      	beq.n	8018048 <tcp_slowtmr+0x488>
 801803a:	4b46      	ldr	r3, [pc, #280]	; (8018154 <tcp_slowtmr+0x594>)
 801803c:	f240 5271 	movw	r2, #1393	; 0x571
 8018040:	4947      	ldr	r1, [pc, #284]	; (8018160 <tcp_slowtmr+0x5a0>)
 8018042:	4846      	ldr	r0, [pc, #280]	; (801815c <tcp_slowtmr+0x59c>)
 8018044:	f007 fd36 	bl	801fab4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8018048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804a:	68db      	ldr	r3, [r3, #12]
 801804c:	4a40      	ldr	r2, [pc, #256]	; (8018150 <tcp_slowtmr+0x590>)
 801804e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018054:	2b00      	cmp	r3, #0
 8018056:	d013      	beq.n	8018080 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018060:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018064:	3304      	adds	r3, #4
 8018066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018068:	8ad2      	ldrh	r2, [r2, #22]
 801806a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801806c:	8b09      	ldrh	r1, [r1, #24]
 801806e:	9102      	str	r1, [sp, #8]
 8018070:	9201      	str	r2, [sp, #4]
 8018072:	9300      	str	r3, [sp, #0]
 8018074:	462b      	mov	r3, r5
 8018076:	4622      	mov	r2, r4
 8018078:	4601      	mov	r1, r0
 801807a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801807c:	f004 feac 	bl	801cdd8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018082:	691b      	ldr	r3, [r3, #16]
 8018084:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018088:	7d1b      	ldrb	r3, [r3, #20]
 801808a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018092:	68db      	ldr	r3, [r3, #12]
 8018094:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018096:	6838      	ldr	r0, [r7, #0]
 8018098:	f7fe ff22 	bl	8016ee0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801809c:	4b31      	ldr	r3, [pc, #196]	; (8018164 <tcp_slowtmr+0x5a4>)
 801809e:	2200      	movs	r2, #0
 80180a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d004      	beq.n	80180b2 <tcp_slowtmr+0x4f2>
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	f06f 010c 	mvn.w	r1, #12
 80180ae:	68b8      	ldr	r0, [r7, #8]
 80180b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80180b2:	4b2c      	ldr	r3, [pc, #176]	; (8018164 <tcp_slowtmr+0x5a4>)
 80180b4:	781b      	ldrb	r3, [r3, #0]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d037      	beq.n	801812a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80180ba:	e592      	b.n	8017be2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80180bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80180c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80180c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c8:	7f1b      	ldrb	r3, [r3, #28]
 80180ca:	3301      	adds	r3, #1
 80180cc:	b2da      	uxtb	r2, r3
 80180ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80180d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d4:	7f1a      	ldrb	r2, [r3, #28]
 80180d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d8:	7f5b      	ldrb	r3, [r3, #29]
 80180da:	429a      	cmp	r2, r3
 80180dc:	d325      	bcc.n	801812a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80180de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e0:	2200      	movs	r2, #0
 80180e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80180e4:	4b1f      	ldr	r3, [pc, #124]	; (8018164 <tcp_slowtmr+0x5a4>)
 80180e6:	2200      	movs	r2, #0
 80180e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80180ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d00b      	beq.n	801810c <tcp_slowtmr+0x54c>
 80180f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80180fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80180fc:	6912      	ldr	r2, [r2, #16]
 80180fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018100:	4610      	mov	r0, r2
 8018102:	4798      	blx	r3
 8018104:	4603      	mov	r3, r0
 8018106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801810a:	e002      	b.n	8018112 <tcp_slowtmr+0x552>
 801810c:	2300      	movs	r3, #0
 801810e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8018112:	4b14      	ldr	r3, [pc, #80]	; (8018164 <tcp_slowtmr+0x5a4>)
 8018114:	781b      	ldrb	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d000      	beq.n	801811c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801811a:	e562      	b.n	8017be2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801811c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018120:	2b00      	cmp	r3, #0
 8018122:	d102      	bne.n	801812a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8018124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018126:	f004 f8a3 	bl	801c270 <tcp_output>
  while (pcb != NULL) {
 801812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812c:	2b00      	cmp	r3, #0
 801812e:	f47f ad5e 	bne.w	8017bee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8018132:	2300      	movs	r3, #0
 8018134:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8018136:	4b0c      	ldr	r3, [pc, #48]	; (8018168 <tcp_slowtmr+0x5a8>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801813c:	e069      	b.n	8018212 <tcp_slowtmr+0x652>
 801813e:	bf00      	nop
 8018140:	24008a2c 	.word	0x24008a2c
 8018144:	000a4cb8 	.word	0x000a4cb8
 8018148:	10624dd3 	.word	0x10624dd3
 801814c:	000124f8 	.word	0x000124f8
 8018150:	24008a28 	.word	0x24008a28
 8018154:	08025d40 	.word	0x08025d40
 8018158:	080261a4 	.word	0x080261a4
 801815c:	08025db0 	.word	0x08025db0
 8018160:	080261d0 	.word	0x080261d0
 8018164:	24008a24 	.word	0x24008a24
 8018168:	24008a38 	.word	0x24008a38
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816e:	7d1b      	ldrb	r3, [r3, #20]
 8018170:	2b0a      	cmp	r3, #10
 8018172:	d006      	beq.n	8018182 <tcp_slowtmr+0x5c2>
 8018174:	4b2b      	ldr	r3, [pc, #172]	; (8018224 <tcp_slowtmr+0x664>)
 8018176:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801817a:	492b      	ldr	r1, [pc, #172]	; (8018228 <tcp_slowtmr+0x668>)
 801817c:	482b      	ldr	r0, [pc, #172]	; (801822c <tcp_slowtmr+0x66c>)
 801817e:	f007 fc99 	bl	801fab4 <iprintf>
    pcb_remove = 0;
 8018182:	2300      	movs	r3, #0
 8018184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018188:	4b29      	ldr	r3, [pc, #164]	; (8018230 <tcp_slowtmr+0x670>)
 801818a:	681a      	ldr	r2, [r3, #0]
 801818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818e:	6a1b      	ldr	r3, [r3, #32]
 8018190:	1ad3      	subs	r3, r2, r3
 8018192:	2bf0      	cmp	r3, #240	; 0xf0
 8018194:	d904      	bls.n	80181a0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801819a:	3301      	adds	r3, #1
 801819c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80181a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d02f      	beq.n	8018208 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80181a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80181aa:	f000 fbf9 	bl	80189a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80181ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d010      	beq.n	80181d6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80181b4:	4b1f      	ldr	r3, [pc, #124]	; (8018234 <tcp_slowtmr+0x674>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d106      	bne.n	80181cc <tcp_slowtmr+0x60c>
 80181be:	4b19      	ldr	r3, [pc, #100]	; (8018224 <tcp_slowtmr+0x664>)
 80181c0:	f240 52af 	movw	r2, #1455	; 0x5af
 80181c4:	491c      	ldr	r1, [pc, #112]	; (8018238 <tcp_slowtmr+0x678>)
 80181c6:	4819      	ldr	r0, [pc, #100]	; (801822c <tcp_slowtmr+0x66c>)
 80181c8:	f007 fc74 	bl	801fab4 <iprintf>
        prev->next = pcb->next;
 80181cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ce:	68da      	ldr	r2, [r3, #12]
 80181d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d2:	60da      	str	r2, [r3, #12]
 80181d4:	e00f      	b.n	80181f6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80181d6:	4b17      	ldr	r3, [pc, #92]	; (8018234 <tcp_slowtmr+0x674>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181dc:	429a      	cmp	r2, r3
 80181de:	d006      	beq.n	80181ee <tcp_slowtmr+0x62e>
 80181e0:	4b10      	ldr	r3, [pc, #64]	; (8018224 <tcp_slowtmr+0x664>)
 80181e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80181e6:	4915      	ldr	r1, [pc, #84]	; (801823c <tcp_slowtmr+0x67c>)
 80181e8:	4810      	ldr	r0, [pc, #64]	; (801822c <tcp_slowtmr+0x66c>)
 80181ea:	f007 fc63 	bl	801fab4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80181ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f0:	68db      	ldr	r3, [r3, #12]
 80181f2:	4a10      	ldr	r2, [pc, #64]	; (8018234 <tcp_slowtmr+0x674>)
 80181f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80181f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80181fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fc:	68db      	ldr	r3, [r3, #12]
 80181fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018200:	69f8      	ldr	r0, [r7, #28]
 8018202:	f7fe fe6d 	bl	8016ee0 <tcp_free>
 8018206:	e004      	b.n	8018212 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8018208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820e:	68db      	ldr	r3, [r3, #12]
 8018210:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018214:	2b00      	cmp	r3, #0
 8018216:	d1a9      	bne.n	801816c <tcp_slowtmr+0x5ac>
    }
  }
}
 8018218:	bf00      	nop
 801821a:	bf00      	nop
 801821c:	3730      	adds	r7, #48	; 0x30
 801821e:	46bd      	mov	sp, r7
 8018220:	bdb0      	pop	{r4, r5, r7, pc}
 8018222:	bf00      	nop
 8018224:	08025d40 	.word	0x08025d40
 8018228:	080261fc 	.word	0x080261fc
 801822c:	08025db0 	.word	0x08025db0
 8018230:	24008a2c 	.word	0x24008a2c
 8018234:	24008a38 	.word	0x24008a38
 8018238:	0802622c 	.word	0x0802622c
 801823c:	08026254 	.word	0x08026254

08018240 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018246:	4b2d      	ldr	r3, [pc, #180]	; (80182fc <tcp_fasttmr+0xbc>)
 8018248:	781b      	ldrb	r3, [r3, #0]
 801824a:	3301      	adds	r3, #1
 801824c:	b2da      	uxtb	r2, r3
 801824e:	4b2b      	ldr	r3, [pc, #172]	; (80182fc <tcp_fasttmr+0xbc>)
 8018250:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018252:	4b2b      	ldr	r3, [pc, #172]	; (8018300 <tcp_fasttmr+0xc0>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018258:	e048      	b.n	80182ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	7f9a      	ldrb	r2, [r3, #30]
 801825e:	4b27      	ldr	r3, [pc, #156]	; (80182fc <tcp_fasttmr+0xbc>)
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	429a      	cmp	r2, r3
 8018264:	d03f      	beq.n	80182e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018266:	4b25      	ldr	r3, [pc, #148]	; (80182fc <tcp_fasttmr+0xbc>)
 8018268:	781a      	ldrb	r2, [r3, #0]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	8b5b      	ldrh	r3, [r3, #26]
 8018272:	f003 0301 	and.w	r3, r3, #1
 8018276:	2b00      	cmp	r3, #0
 8018278:	d010      	beq.n	801829c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	8b5b      	ldrh	r3, [r3, #26]
 801827e:	f043 0302 	orr.w	r3, r3, #2
 8018282:	b29a      	uxth	r2, r3
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f003 fff1 	bl	801c270 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	8b5b      	ldrh	r3, [r3, #26]
 8018292:	f023 0303 	bic.w	r3, r3, #3
 8018296:	b29a      	uxth	r2, r3
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	8b5b      	ldrh	r3, [r3, #26]
 80182a0:	f003 0308 	and.w	r3, r3, #8
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d009      	beq.n	80182bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	8b5b      	ldrh	r3, [r3, #26]
 80182ac:	f023 0308 	bic.w	r3, r3, #8
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f7fe ffa6 	bl	8017208 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	68db      	ldr	r3, [r3, #12]
 80182c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d00a      	beq.n	80182e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80182ca:	4b0e      	ldr	r3, [pc, #56]	; (8018304 <tcp_fasttmr+0xc4>)
 80182cc:	2200      	movs	r2, #0
 80182ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f000 f819 	bl	8018308 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80182d6:	4b0b      	ldr	r3, [pc, #44]	; (8018304 <tcp_fasttmr+0xc4>)
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d000      	beq.n	80182e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80182de:	e7b8      	b.n	8018252 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	607b      	str	r3, [r7, #4]
 80182e4:	e002      	b.n	80182ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	68db      	ldr	r3, [r3, #12]
 80182ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1b3      	bne.n	801825a <tcp_fasttmr+0x1a>
    }
  }
}
 80182f2:	bf00      	nop
 80182f4:	bf00      	nop
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	2400522e 	.word	0x2400522e
 8018300:	24008a28 	.word	0x24008a28
 8018304:	24008a24 	.word	0x24008a24

08018308 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8018308:	b590      	push	{r4, r7, lr}
 801830a:	b085      	sub	sp, #20
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d109      	bne.n	801832a <tcp_process_refused_data+0x22>
 8018316:	4b37      	ldr	r3, [pc, #220]	; (80183f4 <tcp_process_refused_data+0xec>)
 8018318:	f240 6209 	movw	r2, #1545	; 0x609
 801831c:	4936      	ldr	r1, [pc, #216]	; (80183f8 <tcp_process_refused_data+0xf0>)
 801831e:	4837      	ldr	r0, [pc, #220]	; (80183fc <tcp_process_refused_data+0xf4>)
 8018320:	f007 fbc8 	bl	801fab4 <iprintf>
 8018324:	f06f 030f 	mvn.w	r3, #15
 8018328:	e060      	b.n	80183ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801832e:	7b5b      	ldrb	r3, [r3, #13]
 8018330:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018336:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	2200      	movs	r2, #0
 801833c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018344:	2b00      	cmp	r3, #0
 8018346:	d00b      	beq.n	8018360 <tcp_process_refused_data+0x58>
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6918      	ldr	r0, [r3, #16]
 8018352:	2300      	movs	r3, #0
 8018354:	68ba      	ldr	r2, [r7, #8]
 8018356:	6879      	ldr	r1, [r7, #4]
 8018358:	47a0      	blx	r4
 801835a:	4603      	mov	r3, r0
 801835c:	73fb      	strb	r3, [r7, #15]
 801835e:	e007      	b.n	8018370 <tcp_process_refused_data+0x68>
 8018360:	2300      	movs	r3, #0
 8018362:	68ba      	ldr	r2, [r7, #8]
 8018364:	6879      	ldr	r1, [r7, #4]
 8018366:	2000      	movs	r0, #0
 8018368:	f000 f8a4 	bl	80184b4 <tcp_recv_null>
 801836c:	4603      	mov	r3, r0
 801836e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d12a      	bne.n	80183ce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018378:	7bbb      	ldrb	r3, [r7, #14]
 801837a:	f003 0320 	and.w	r3, r3, #32
 801837e:	2b00      	cmp	r3, #0
 8018380:	d033      	beq.n	80183ea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018386:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801838a:	d005      	beq.n	8018398 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018390:	3301      	adds	r3, #1
 8018392:	b29a      	uxth	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d00b      	beq.n	80183ba <tcp_process_refused_data+0xb2>
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	6918      	ldr	r0, [r3, #16]
 80183ac:	2300      	movs	r3, #0
 80183ae:	2200      	movs	r2, #0
 80183b0:	6879      	ldr	r1, [r7, #4]
 80183b2:	47a0      	blx	r4
 80183b4:	4603      	mov	r3, r0
 80183b6:	73fb      	strb	r3, [r7, #15]
 80183b8:	e001      	b.n	80183be <tcp_process_refused_data+0xb6>
 80183ba:	2300      	movs	r3, #0
 80183bc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80183be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183c2:	f113 0f0d 	cmn.w	r3, #13
 80183c6:	d110      	bne.n	80183ea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80183c8:	f06f 030c 	mvn.w	r3, #12
 80183cc:	e00e      	b.n	80183ec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80183ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183d2:	f113 0f0d 	cmn.w	r3, #13
 80183d6:	d102      	bne.n	80183de <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80183d8:	f06f 030c 	mvn.w	r3, #12
 80183dc:	e006      	b.n	80183ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	68ba      	ldr	r2, [r7, #8]
 80183e2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80183e4:	f06f 0304 	mvn.w	r3, #4
 80183e8:	e000      	b.n	80183ec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80183ea:	2300      	movs	r3, #0
}
 80183ec:	4618      	mov	r0, r3
 80183ee:	3714      	adds	r7, #20
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bd90      	pop	{r4, r7, pc}
 80183f4:	08025d40 	.word	0x08025d40
 80183f8:	0802627c 	.word	0x0802627c
 80183fc:	08025db0 	.word	0x08025db0

08018400 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b084      	sub	sp, #16
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8018408:	e007      	b.n	801841a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8018410:	6878      	ldr	r0, [r7, #4]
 8018412:	f000 f80a 	bl	801842a <tcp_seg_free>
    seg = next;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d1f4      	bne.n	801840a <tcp_segs_free+0xa>
  }
}
 8018420:	bf00      	nop
 8018422:	bf00      	nop
 8018424:	3710      	adds	r7, #16
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}

0801842a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801842a:	b580      	push	{r7, lr}
 801842c:	b082      	sub	sp, #8
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d00c      	beq.n	8018452 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d004      	beq.n	801844a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	4618      	mov	r0, r3
 8018446:	f7fe f9f3 	bl	8016830 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801844a:	6879      	ldr	r1, [r7, #4]
 801844c:	2003      	movs	r0, #3
 801844e:	f7fd fb79 	bl	8015b44 <memp_free>
  }
}
 8018452:	bf00      	nop
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
	...

0801845c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b084      	sub	sp, #16
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d106      	bne.n	8018478 <tcp_seg_copy+0x1c>
 801846a:	4b0f      	ldr	r3, [pc, #60]	; (80184a8 <tcp_seg_copy+0x4c>)
 801846c:	f240 6282 	movw	r2, #1666	; 0x682
 8018470:	490e      	ldr	r1, [pc, #56]	; (80184ac <tcp_seg_copy+0x50>)
 8018472:	480f      	ldr	r0, [pc, #60]	; (80184b0 <tcp_seg_copy+0x54>)
 8018474:	f007 fb1e 	bl	801fab4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018478:	2003      	movs	r0, #3
 801847a:	f7fd faf3 	bl	8015a64 <memp_malloc>
 801847e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d101      	bne.n	801848a <tcp_seg_copy+0x2e>
    return NULL;
 8018486:	2300      	movs	r3, #0
 8018488:	e00a      	b.n	80184a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801848a:	2210      	movs	r2, #16
 801848c:	6879      	ldr	r1, [r7, #4]
 801848e:	68f8      	ldr	r0, [r7, #12]
 8018490:	f006 fbf0 	bl	801ec74 <memcpy>
  pbuf_ref(cseg->p);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	685b      	ldr	r3, [r3, #4]
 8018498:	4618      	mov	r0, r3
 801849a:	f7fe fa69 	bl	8016970 <pbuf_ref>
  return cseg;
 801849e:	68fb      	ldr	r3, [r7, #12]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3710      	adds	r7, #16
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	08025d40 	.word	0x08025d40
 80184ac:	080262c0 	.word	0x080262c0
 80184b0:	08025db0 	.word	0x08025db0

080184b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
 80184c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d109      	bne.n	80184dc <tcp_recv_null+0x28>
 80184c8:	4b12      	ldr	r3, [pc, #72]	; (8018514 <tcp_recv_null+0x60>)
 80184ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80184ce:	4912      	ldr	r1, [pc, #72]	; (8018518 <tcp_recv_null+0x64>)
 80184d0:	4812      	ldr	r0, [pc, #72]	; (801851c <tcp_recv_null+0x68>)
 80184d2:	f007 faef 	bl	801fab4 <iprintf>
 80184d6:	f06f 030f 	mvn.w	r3, #15
 80184da:	e016      	b.n	801850a <tcp_recv_null+0x56>

  if (p != NULL) {
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d009      	beq.n	80184f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	891b      	ldrh	r3, [r3, #8]
 80184e6:	4619      	mov	r1, r3
 80184e8:	68b8      	ldr	r0, [r7, #8]
 80184ea:	f7ff f9bb 	bl	8017864 <tcp_recved>
    pbuf_free(p);
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f7fe f99e 	bl	8016830 <pbuf_free>
 80184f4:	e008      	b.n	8018508 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80184f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d104      	bne.n	8018508 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80184fe:	68b8      	ldr	r0, [r7, #8]
 8018500:	f7fe feec 	bl	80172dc <tcp_close>
 8018504:	4603      	mov	r3, r0
 8018506:	e000      	b.n	801850a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8018508:	2300      	movs	r3, #0
}
 801850a:	4618      	mov	r0, r3
 801850c:	3710      	adds	r7, #16
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	08025d40 	.word	0x08025d40
 8018518:	080262dc 	.word	0x080262dc
 801851c:	08025db0 	.word	0x08025db0

08018520 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b086      	sub	sp, #24
 8018524:	af00      	add	r7, sp, #0
 8018526:	4603      	mov	r3, r0
 8018528:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801852a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801852e:	2b00      	cmp	r3, #0
 8018530:	db01      	blt.n	8018536 <tcp_kill_prio+0x16>
 8018532:	79fb      	ldrb	r3, [r7, #7]
 8018534:	e000      	b.n	8018538 <tcp_kill_prio+0x18>
 8018536:	237f      	movs	r3, #127	; 0x7f
 8018538:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801853a:	7afb      	ldrb	r3, [r7, #11]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d034      	beq.n	80185aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8018540:	7afb      	ldrb	r3, [r7, #11]
 8018542:	3b01      	subs	r3, #1
 8018544:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8018546:	2300      	movs	r3, #0
 8018548:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801854a:	2300      	movs	r3, #0
 801854c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801854e:	4b19      	ldr	r3, [pc, #100]	; (80185b4 <tcp_kill_prio+0x94>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	617b      	str	r3, [r7, #20]
 8018554:	e01f      	b.n	8018596 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	7d5b      	ldrb	r3, [r3, #21]
 801855a:	7afa      	ldrb	r2, [r7, #11]
 801855c:	429a      	cmp	r2, r3
 801855e:	d80c      	bhi.n	801857a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018564:	7afa      	ldrb	r2, [r7, #11]
 8018566:	429a      	cmp	r2, r3
 8018568:	d112      	bne.n	8018590 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801856a:	4b13      	ldr	r3, [pc, #76]	; (80185b8 <tcp_kill_prio+0x98>)
 801856c:	681a      	ldr	r2, [r3, #0]
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	6a1b      	ldr	r3, [r3, #32]
 8018572:	1ad3      	subs	r3, r2, r3
 8018574:	68fa      	ldr	r2, [r7, #12]
 8018576:	429a      	cmp	r2, r3
 8018578:	d80a      	bhi.n	8018590 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801857a:	4b0f      	ldr	r3, [pc, #60]	; (80185b8 <tcp_kill_prio+0x98>)
 801857c:	681a      	ldr	r2, [r3, #0]
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	6a1b      	ldr	r3, [r3, #32]
 8018582:	1ad3      	subs	r3, r2, r3
 8018584:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	7d5b      	ldrb	r3, [r3, #21]
 801858e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	68db      	ldr	r3, [r3, #12]
 8018594:	617b      	str	r3, [r7, #20]
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d1dc      	bne.n	8018556 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d004      	beq.n	80185ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80185a2:	6938      	ldr	r0, [r7, #16]
 80185a4:	f7fe ff84 	bl	80174b0 <tcp_abort>
 80185a8:	e000      	b.n	80185ac <tcp_kill_prio+0x8c>
    return;
 80185aa:	bf00      	nop
  }
}
 80185ac:	3718      	adds	r7, #24
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	24008a28 	.word	0x24008a28
 80185b8:	24008a2c 	.word	0x24008a2c

080185bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	4603      	mov	r3, r0
 80185c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80185c6:	79fb      	ldrb	r3, [r7, #7]
 80185c8:	2b08      	cmp	r3, #8
 80185ca:	d009      	beq.n	80185e0 <tcp_kill_state+0x24>
 80185cc:	79fb      	ldrb	r3, [r7, #7]
 80185ce:	2b09      	cmp	r3, #9
 80185d0:	d006      	beq.n	80185e0 <tcp_kill_state+0x24>
 80185d2:	4b1a      	ldr	r3, [pc, #104]	; (801863c <tcp_kill_state+0x80>)
 80185d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80185d8:	4919      	ldr	r1, [pc, #100]	; (8018640 <tcp_kill_state+0x84>)
 80185da:	481a      	ldr	r0, [pc, #104]	; (8018644 <tcp_kill_state+0x88>)
 80185dc:	f007 fa6a 	bl	801fab4 <iprintf>

  inactivity = 0;
 80185e0:	2300      	movs	r3, #0
 80185e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80185e4:	2300      	movs	r3, #0
 80185e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80185e8:	4b17      	ldr	r3, [pc, #92]	; (8018648 <tcp_kill_state+0x8c>)
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	617b      	str	r3, [r7, #20]
 80185ee:	e017      	b.n	8018620 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	7d1b      	ldrb	r3, [r3, #20]
 80185f4:	79fa      	ldrb	r2, [r7, #7]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d10f      	bne.n	801861a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80185fa:	4b14      	ldr	r3, [pc, #80]	; (801864c <tcp_kill_state+0x90>)
 80185fc:	681a      	ldr	r2, [r3, #0]
 80185fe:	697b      	ldr	r3, [r7, #20]
 8018600:	6a1b      	ldr	r3, [r3, #32]
 8018602:	1ad3      	subs	r3, r2, r3
 8018604:	68fa      	ldr	r2, [r7, #12]
 8018606:	429a      	cmp	r2, r3
 8018608:	d807      	bhi.n	801861a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801860a:	4b10      	ldr	r3, [pc, #64]	; (801864c <tcp_kill_state+0x90>)
 801860c:	681a      	ldr	r2, [r3, #0]
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	6a1b      	ldr	r3, [r3, #32]
 8018612:	1ad3      	subs	r3, r2, r3
 8018614:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801861a:	697b      	ldr	r3, [r7, #20]
 801861c:	68db      	ldr	r3, [r3, #12]
 801861e:	617b      	str	r3, [r7, #20]
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d1e4      	bne.n	80185f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d003      	beq.n	8018634 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801862c:	2100      	movs	r1, #0
 801862e:	6938      	ldr	r0, [r7, #16]
 8018630:	f7fe fe80 	bl	8017334 <tcp_abandon>
  }
}
 8018634:	bf00      	nop
 8018636:	3718      	adds	r7, #24
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	08025d40 	.word	0x08025d40
 8018640:	080262f8 	.word	0x080262f8
 8018644:	08025db0 	.word	0x08025db0
 8018648:	24008a28 	.word	0x24008a28
 801864c:	24008a2c 	.word	0x24008a2c

08018650 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b084      	sub	sp, #16
 8018654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8018656:	2300      	movs	r3, #0
 8018658:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801865a:	2300      	movs	r3, #0
 801865c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801865e:	4b12      	ldr	r3, [pc, #72]	; (80186a8 <tcp_kill_timewait+0x58>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	60fb      	str	r3, [r7, #12]
 8018664:	e012      	b.n	801868c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018666:	4b11      	ldr	r3, [pc, #68]	; (80186ac <tcp_kill_timewait+0x5c>)
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	6a1b      	ldr	r3, [r3, #32]
 801866e:	1ad3      	subs	r3, r2, r3
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	429a      	cmp	r2, r3
 8018674:	d807      	bhi.n	8018686 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8018676:	4b0d      	ldr	r3, [pc, #52]	; (80186ac <tcp_kill_timewait+0x5c>)
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	6a1b      	ldr	r3, [r3, #32]
 801867e:	1ad3      	subs	r3, r2, r3
 8018680:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	68db      	ldr	r3, [r3, #12]
 801868a:	60fb      	str	r3, [r7, #12]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d1e9      	bne.n	8018666 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d002      	beq.n	801869e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018698:	68b8      	ldr	r0, [r7, #8]
 801869a:	f7fe ff09 	bl	80174b0 <tcp_abort>
  }
}
 801869e:	bf00      	nop
 80186a0:	3710      	adds	r7, #16
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	24008a38 	.word	0x24008a38
 80186ac:	24008a2c 	.word	0x24008a2c

080186b0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80186b6:	4b10      	ldr	r3, [pc, #64]	; (80186f8 <tcp_handle_closepend+0x48>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80186bc:	e014      	b.n	80186e8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	68db      	ldr	r3, [r3, #12]
 80186c2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	8b5b      	ldrh	r3, [r3, #26]
 80186c8:	f003 0308 	and.w	r3, r3, #8
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d009      	beq.n	80186e4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	8b5b      	ldrh	r3, [r3, #26]
 80186d4:	f023 0308 	bic.w	r3, r3, #8
 80186d8:	b29a      	uxth	r2, r3
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f7fe fd92 	bl	8017208 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d1e7      	bne.n	80186be <tcp_handle_closepend+0xe>
  }
}
 80186ee:	bf00      	nop
 80186f0:	bf00      	nop
 80186f2:	3708      	adds	r7, #8
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}
 80186f8:	24008a28 	.word	0x24008a28

080186fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	4603      	mov	r3, r0
 8018704:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018706:	2001      	movs	r0, #1
 8018708:	f7fd f9ac 	bl	8015a64 <memp_malloc>
 801870c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d126      	bne.n	8018762 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8018714:	f7ff ffcc 	bl	80186b0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8018718:	f7ff ff9a 	bl	8018650 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801871c:	2001      	movs	r0, #1
 801871e:	f7fd f9a1 	bl	8015a64 <memp_malloc>
 8018722:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d11b      	bne.n	8018762 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801872a:	2009      	movs	r0, #9
 801872c:	f7ff ff46 	bl	80185bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018730:	2001      	movs	r0, #1
 8018732:	f7fd f997 	bl	8015a64 <memp_malloc>
 8018736:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d111      	bne.n	8018762 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801873e:	2008      	movs	r0, #8
 8018740:	f7ff ff3c 	bl	80185bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018744:	2001      	movs	r0, #1
 8018746:	f7fd f98d 	bl	8015a64 <memp_malloc>
 801874a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d107      	bne.n	8018762 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8018752:	79fb      	ldrb	r3, [r7, #7]
 8018754:	4618      	mov	r0, r3
 8018756:	f7ff fee3 	bl	8018520 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801875a:	2001      	movs	r0, #1
 801875c:	f7fd f982 	bl	8015a64 <memp_malloc>
 8018760:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d03f      	beq.n	80187e8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018768:	229c      	movs	r2, #156	; 0x9c
 801876a:	2100      	movs	r1, #0
 801876c:	68f8      	ldr	r0, [r7, #12]
 801876e:	f006 faa9 	bl	801ecc4 <memset>
    pcb->prio = prio;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	79fa      	ldrb	r2, [r7, #7]
 8018776:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801877e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8018788:	855a      	strh	r2, [r3, #42]	; 0x2a
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	22ff      	movs	r2, #255	; 0xff
 8018796:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801879e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	2206      	movs	r2, #6
 80187a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	2206      	movs	r2, #6
 80187ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187b4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	2201      	movs	r2, #1
 80187ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80187be:	4b0d      	ldr	r3, [pc, #52]	; (80187f4 <tcp_alloc+0xf8>)
 80187c0:	681a      	ldr	r2, [r3, #0]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80187c6:	4b0c      	ldr	r3, [pc, #48]	; (80187f8 <tcp_alloc+0xfc>)
 80187c8:	781a      	ldrb	r2, [r3, #0]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80187d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	4a08      	ldr	r2, [pc, #32]	; (80187fc <tcp_alloc+0x100>)
 80187dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	4a07      	ldr	r2, [pc, #28]	; (8018800 <tcp_alloc+0x104>)
 80187e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80187e8:	68fb      	ldr	r3, [r7, #12]
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	3710      	adds	r7, #16
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	24008a2c 	.word	0x24008a2c
 80187f8:	2400522e 	.word	0x2400522e
 80187fc:	080184b5 	.word	0x080184b5
 8018800:	006ddd00 	.word	0x006ddd00

08018804 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	4603      	mov	r3, r0
 801880c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801880e:	2040      	movs	r0, #64	; 0x40
 8018810:	f7ff ff74 	bl	80186fc <tcp_alloc>
 8018814:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018816:	68fb      	ldr	r3, [r7, #12]
}
 8018818:	4618      	mov	r0, r3
 801881a:	3710      	adds	r7, #16
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}

08018820 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8018820:	b480      	push	{r7}
 8018822:	b083      	sub	sp, #12
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d002      	beq.n	8018836 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	683a      	ldr	r2, [r7, #0]
 8018834:	611a      	str	r2, [r3, #16]
  }
}
 8018836:	bf00      	nop
 8018838:	370c      	adds	r7, #12
 801883a:	46bd      	mov	sp, r7
 801883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018840:	4770      	bx	lr
	...

08018844 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b082      	sub	sp, #8
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d00e      	beq.n	8018872 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	7d1b      	ldrb	r3, [r3, #20]
 8018858:	2b01      	cmp	r3, #1
 801885a:	d106      	bne.n	801886a <tcp_recv+0x26>
 801885c:	4b07      	ldr	r3, [pc, #28]	; (801887c <tcp_recv+0x38>)
 801885e:	f240 72df 	movw	r2, #2015	; 0x7df
 8018862:	4907      	ldr	r1, [pc, #28]	; (8018880 <tcp_recv+0x3c>)
 8018864:	4807      	ldr	r0, [pc, #28]	; (8018884 <tcp_recv+0x40>)
 8018866:	f007 f925 	bl	801fab4 <iprintf>
    pcb->recv = recv;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	683a      	ldr	r2, [r7, #0]
 801886e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8018872:	bf00      	nop
 8018874:	3708      	adds	r7, #8
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	08025d40 	.word	0x08025d40
 8018880:	08026308 	.word	0x08026308
 8018884:	08025db0 	.word	0x08025db0

08018888 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d00e      	beq.n	80188b6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	7d1b      	ldrb	r3, [r3, #20]
 801889c:	2b01      	cmp	r3, #1
 801889e:	d106      	bne.n	80188ae <tcp_sent+0x26>
 80188a0:	4b07      	ldr	r3, [pc, #28]	; (80188c0 <tcp_sent+0x38>)
 80188a2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80188a6:	4907      	ldr	r1, [pc, #28]	; (80188c4 <tcp_sent+0x3c>)
 80188a8:	4807      	ldr	r0, [pc, #28]	; (80188c8 <tcp_sent+0x40>)
 80188aa:	f007 f903 	bl	801fab4 <iprintf>
    pcb->sent = sent;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	683a      	ldr	r2, [r7, #0]
 80188b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80188b6:	bf00      	nop
 80188b8:	3708      	adds	r7, #8
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	08025d40 	.word	0x08025d40
 80188c4:	08026330 	.word	0x08026330
 80188c8:	08025db0 	.word	0x08025db0

080188cc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b082      	sub	sp, #8
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d00e      	beq.n	80188fa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	7d1b      	ldrb	r3, [r3, #20]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d106      	bne.n	80188f2 <tcp_err+0x26>
 80188e4:	4b07      	ldr	r3, [pc, #28]	; (8018904 <tcp_err+0x38>)
 80188e6:	f640 020d 	movw	r2, #2061	; 0x80d
 80188ea:	4907      	ldr	r1, [pc, #28]	; (8018908 <tcp_err+0x3c>)
 80188ec:	4807      	ldr	r0, [pc, #28]	; (801890c <tcp_err+0x40>)
 80188ee:	f007 f8e1 	bl	801fab4 <iprintf>
    pcb->errf = err;
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	683a      	ldr	r2, [r7, #0]
 80188f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80188fa:	bf00      	nop
 80188fc:	3708      	adds	r7, #8
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}
 8018902:	bf00      	nop
 8018904:	08025d40 	.word	0x08025d40
 8018908:	08026358 	.word	0x08026358
 801890c:	08025db0 	.word	0x08025db0

08018910 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8018910:	b480      	push	{r7}
 8018912:	b085      	sub	sp, #20
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d008      	beq.n	8018932 <tcp_accept+0x22>
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	7d1b      	ldrb	r3, [r3, #20]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d104      	bne.n	8018932 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	683a      	ldr	r2, [r7, #0]
 8018930:	619a      	str	r2, [r3, #24]
  }
}
 8018932:	bf00      	nop
 8018934:	3714      	adds	r7, #20
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr
	...

08018940 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
 8018946:	60f8      	str	r0, [r7, #12]
 8018948:	60b9      	str	r1, [r7, #8]
 801894a:	4613      	mov	r3, r2
 801894c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d107      	bne.n	8018964 <tcp_poll+0x24>
 8018954:	4b0e      	ldr	r3, [pc, #56]	; (8018990 <tcp_poll+0x50>)
 8018956:	f640 023d 	movw	r2, #2109	; 0x83d
 801895a:	490e      	ldr	r1, [pc, #56]	; (8018994 <tcp_poll+0x54>)
 801895c:	480e      	ldr	r0, [pc, #56]	; (8018998 <tcp_poll+0x58>)
 801895e:	f007 f8a9 	bl	801fab4 <iprintf>
 8018962:	e011      	b.n	8018988 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	7d1b      	ldrb	r3, [r3, #20]
 8018968:	2b01      	cmp	r3, #1
 801896a:	d106      	bne.n	801897a <tcp_poll+0x3a>
 801896c:	4b08      	ldr	r3, [pc, #32]	; (8018990 <tcp_poll+0x50>)
 801896e:	f640 023e 	movw	r2, #2110	; 0x83e
 8018972:	490a      	ldr	r1, [pc, #40]	; (801899c <tcp_poll+0x5c>)
 8018974:	4808      	ldr	r0, [pc, #32]	; (8018998 <tcp_poll+0x58>)
 8018976:	f007 f89d 	bl	801fab4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	68ba      	ldr	r2, [r7, #8]
 801897e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	79fa      	ldrb	r2, [r7, #7]
 8018986:	775a      	strb	r2, [r3, #29]
}
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	08025d40 	.word	0x08025d40
 8018994:	08026380 	.word	0x08026380
 8018998:	08025db0 	.word	0x08025db0
 801899c:	08026398 	.word	0x08026398

080189a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d107      	bne.n	80189be <tcp_pcb_purge+0x1e>
 80189ae:	4b21      	ldr	r3, [pc, #132]	; (8018a34 <tcp_pcb_purge+0x94>)
 80189b0:	f640 0251 	movw	r2, #2129	; 0x851
 80189b4:	4920      	ldr	r1, [pc, #128]	; (8018a38 <tcp_pcb_purge+0x98>)
 80189b6:	4821      	ldr	r0, [pc, #132]	; (8018a3c <tcp_pcb_purge+0x9c>)
 80189b8:	f007 f87c 	bl	801fab4 <iprintf>
 80189bc:	e037      	b.n	8018a2e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	7d1b      	ldrb	r3, [r3, #20]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d033      	beq.n	8018a2e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80189ca:	2b0a      	cmp	r3, #10
 80189cc:	d02f      	beq.n	8018a2e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80189d2:	2b01      	cmp	r3, #1
 80189d4:	d02b      	beq.n	8018a2e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d007      	beq.n	80189ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7fd ff24 	bl	8016830 <pbuf_free>
      pcb->refused_data = NULL;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2200      	movs	r2, #0
 80189ec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d002      	beq.n	80189fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80189f6:	6878      	ldr	r0, [r7, #4]
 80189f8:	f000 f986 	bl	8018d08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a02:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7ff fcf9 	bl	8018400 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7ff fcf4 	bl	8018400 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	2200      	movs	r2, #0
 8018a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018a2e:	3708      	adds	r7, #8
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	08025d40 	.word	0x08025d40
 8018a38:	080263b8 	.word	0x080263b8
 8018a3c:	08025db0 	.word	0x08025db0

08018a40 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d106      	bne.n	8018a5e <tcp_pcb_remove+0x1e>
 8018a50:	4b3e      	ldr	r3, [pc, #248]	; (8018b4c <tcp_pcb_remove+0x10c>)
 8018a52:	f640 0283 	movw	r2, #2179	; 0x883
 8018a56:	493e      	ldr	r1, [pc, #248]	; (8018b50 <tcp_pcb_remove+0x110>)
 8018a58:	483e      	ldr	r0, [pc, #248]	; (8018b54 <tcp_pcb_remove+0x114>)
 8018a5a:	f007 f82b 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d106      	bne.n	8018a72 <tcp_pcb_remove+0x32>
 8018a64:	4b39      	ldr	r3, [pc, #228]	; (8018b4c <tcp_pcb_remove+0x10c>)
 8018a66:	f640 0284 	movw	r2, #2180	; 0x884
 8018a6a:	493b      	ldr	r1, [pc, #236]	; (8018b58 <tcp_pcb_remove+0x118>)
 8018a6c:	4839      	ldr	r0, [pc, #228]	; (8018b54 <tcp_pcb_remove+0x114>)
 8018a6e:	f007 f821 	bl	801fab4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	683a      	ldr	r2, [r7, #0]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d105      	bne.n	8018a88 <tcp_pcb_remove+0x48>
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	68da      	ldr	r2, [r3, #12]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	601a      	str	r2, [r3, #0]
 8018a86:	e013      	b.n	8018ab0 <tcp_pcb_remove+0x70>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	60fb      	str	r3, [r7, #12]
 8018a8e:	e00c      	b.n	8018aaa <tcp_pcb_remove+0x6a>
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	683a      	ldr	r2, [r7, #0]
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d104      	bne.n	8018aa4 <tcp_pcb_remove+0x64>
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	68da      	ldr	r2, [r3, #12]
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	60da      	str	r2, [r3, #12]
 8018aa2:	e005      	b.n	8018ab0 <tcp_pcb_remove+0x70>
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	60fb      	str	r3, [r7, #12]
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d1ef      	bne.n	8018a90 <tcp_pcb_remove+0x50>
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8018ab6:	6838      	ldr	r0, [r7, #0]
 8018ab8:	f7ff ff72 	bl	80189a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	7d1b      	ldrb	r3, [r3, #20]
 8018ac0:	2b0a      	cmp	r3, #10
 8018ac2:	d013      	beq.n	8018aec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8018ac4:	683b      	ldr	r3, [r7, #0]
 8018ac6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8018ac8:	2b01      	cmp	r3, #1
 8018aca:	d00f      	beq.n	8018aec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8018acc:	683b      	ldr	r3, [r7, #0]
 8018ace:	8b5b      	ldrh	r3, [r3, #26]
 8018ad0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d009      	beq.n	8018aec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	8b5b      	ldrh	r3, [r3, #26]
 8018adc:	f043 0302 	orr.w	r3, r3, #2
 8018ae0:	b29a      	uxth	r2, r3
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018ae6:	6838      	ldr	r0, [r7, #0]
 8018ae8:	f003 fbc2 	bl	801c270 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	7d1b      	ldrb	r3, [r3, #20]
 8018af0:	2b01      	cmp	r3, #1
 8018af2:	d020      	beq.n	8018b36 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d006      	beq.n	8018b0a <tcp_pcb_remove+0xca>
 8018afc:	4b13      	ldr	r3, [pc, #76]	; (8018b4c <tcp_pcb_remove+0x10c>)
 8018afe:	f640 0293 	movw	r2, #2195	; 0x893
 8018b02:	4916      	ldr	r1, [pc, #88]	; (8018b5c <tcp_pcb_remove+0x11c>)
 8018b04:	4813      	ldr	r0, [pc, #76]	; (8018b54 <tcp_pcb_remove+0x114>)
 8018b06:	f006 ffd5 	bl	801fab4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d006      	beq.n	8018b20 <tcp_pcb_remove+0xe0>
 8018b12:	4b0e      	ldr	r3, [pc, #56]	; (8018b4c <tcp_pcb_remove+0x10c>)
 8018b14:	f640 0294 	movw	r2, #2196	; 0x894
 8018b18:	4911      	ldr	r1, [pc, #68]	; (8018b60 <tcp_pcb_remove+0x120>)
 8018b1a:	480e      	ldr	r0, [pc, #56]	; (8018b54 <tcp_pcb_remove+0x114>)
 8018b1c:	f006 ffca 	bl	801fab4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018b20:	683b      	ldr	r3, [r7, #0]
 8018b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d006      	beq.n	8018b36 <tcp_pcb_remove+0xf6>
 8018b28:	4b08      	ldr	r3, [pc, #32]	; (8018b4c <tcp_pcb_remove+0x10c>)
 8018b2a:	f640 0296 	movw	r2, #2198	; 0x896
 8018b2e:	490d      	ldr	r1, [pc, #52]	; (8018b64 <tcp_pcb_remove+0x124>)
 8018b30:	4808      	ldr	r0, [pc, #32]	; (8018b54 <tcp_pcb_remove+0x114>)
 8018b32:	f006 ffbf 	bl	801fab4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8018b36:	683b      	ldr	r3, [r7, #0]
 8018b38:	2200      	movs	r2, #0
 8018b3a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	2200      	movs	r2, #0
 8018b40:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8018b42:	bf00      	nop
 8018b44:	3710      	adds	r7, #16
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	08025d40 	.word	0x08025d40
 8018b50:	080263d4 	.word	0x080263d4
 8018b54:	08025db0 	.word	0x08025db0
 8018b58:	080263f0 	.word	0x080263f0
 8018b5c:	08026410 	.word	0x08026410
 8018b60:	08026428 	.word	0x08026428
 8018b64:	08026444 	.word	0x08026444

08018b68 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d106      	bne.n	8018b84 <tcp_next_iss+0x1c>
 8018b76:	4b0a      	ldr	r3, [pc, #40]	; (8018ba0 <tcp_next_iss+0x38>)
 8018b78:	f640 02af 	movw	r2, #2223	; 0x8af
 8018b7c:	4909      	ldr	r1, [pc, #36]	; (8018ba4 <tcp_next_iss+0x3c>)
 8018b7e:	480a      	ldr	r0, [pc, #40]	; (8018ba8 <tcp_next_iss+0x40>)
 8018b80:	f006 ff98 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018b84:	4b09      	ldr	r3, [pc, #36]	; (8018bac <tcp_next_iss+0x44>)
 8018b86:	681a      	ldr	r2, [r3, #0]
 8018b88:	4b09      	ldr	r3, [pc, #36]	; (8018bb0 <tcp_next_iss+0x48>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	4413      	add	r3, r2
 8018b8e:	4a07      	ldr	r2, [pc, #28]	; (8018bac <tcp_next_iss+0x44>)
 8018b90:	6013      	str	r3, [r2, #0]
  return iss;
 8018b92:	4b06      	ldr	r3, [pc, #24]	; (8018bac <tcp_next_iss+0x44>)
 8018b94:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3708      	adds	r7, #8
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}
 8018b9e:	bf00      	nop
 8018ba0:	08025d40 	.word	0x08025d40
 8018ba4:	0802645c 	.word	0x0802645c
 8018ba8:	08025db0 	.word	0x08025db0
 8018bac:	24000028 	.word	0x24000028
 8018bb0:	24008a2c 	.word	0x24008a2c

08018bb4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	4603      	mov	r3, r0
 8018bbc:	60b9      	str	r1, [r7, #8]
 8018bbe:	607a      	str	r2, [r7, #4]
 8018bc0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d106      	bne.n	8018bd6 <tcp_eff_send_mss_netif+0x22>
 8018bc8:	4b14      	ldr	r3, [pc, #80]	; (8018c1c <tcp_eff_send_mss_netif+0x68>)
 8018bca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018bce:	4914      	ldr	r1, [pc, #80]	; (8018c20 <tcp_eff_send_mss_netif+0x6c>)
 8018bd0:	4814      	ldr	r0, [pc, #80]	; (8018c24 <tcp_eff_send_mss_netif+0x70>)
 8018bd2:	f006 ff6f 	bl	801fab4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d101      	bne.n	8018be0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8018bdc:	89fb      	ldrh	r3, [r7, #14]
 8018bde:	e019      	b.n	8018c14 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018be4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8018be6:	8afb      	ldrh	r3, [r7, #22]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d012      	beq.n	8018c12 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8018bec:	2328      	movs	r3, #40	; 0x28
 8018bee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8018bf0:	8afa      	ldrh	r2, [r7, #22]
 8018bf2:	8abb      	ldrh	r3, [r7, #20]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d904      	bls.n	8018c02 <tcp_eff_send_mss_netif+0x4e>
 8018bf8:	8afa      	ldrh	r2, [r7, #22]
 8018bfa:	8abb      	ldrh	r3, [r7, #20]
 8018bfc:	1ad3      	subs	r3, r2, r3
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	e000      	b.n	8018c04 <tcp_eff_send_mss_netif+0x50>
 8018c02:	2300      	movs	r3, #0
 8018c04:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018c06:	8a7a      	ldrh	r2, [r7, #18]
 8018c08:	89fb      	ldrh	r3, [r7, #14]
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	bf28      	it	cs
 8018c0e:	4613      	movcs	r3, r2
 8018c10:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8018c12:	89fb      	ldrh	r3, [r7, #14]
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3718      	adds	r7, #24
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	08025d40 	.word	0x08025d40
 8018c20:	08026478 	.word	0x08026478
 8018c24:	08025db0 	.word	0x08025db0

08018c28 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d119      	bne.n	8018c70 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018c3c:	4b10      	ldr	r3, [pc, #64]	; (8018c80 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018c3e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8018c42:	4910      	ldr	r1, [pc, #64]	; (8018c84 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8018c44:	4810      	ldr	r0, [pc, #64]	; (8018c88 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8018c46:	f006 ff35 	bl	801fab4 <iprintf>

  while (pcb != NULL) {
 8018c4a:	e011      	b.n	8018c70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	681a      	ldr	r2, [r3, #0]
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	429a      	cmp	r2, r3
 8018c56:	d108      	bne.n	8018c6a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	68db      	ldr	r3, [r3, #12]
 8018c5c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018c5e:	68f8      	ldr	r0, [r7, #12]
 8018c60:	f7fe fc26 	bl	80174b0 <tcp_abort>
      pcb = next;
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	60fb      	str	r3, [r7, #12]
 8018c68:	e002      	b.n	8018c70 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	68db      	ldr	r3, [r3, #12]
 8018c6e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d1ea      	bne.n	8018c4c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8018c76:	bf00      	nop
 8018c78:	bf00      	nop
 8018c7a:	3710      	adds	r7, #16
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	08025d40 	.word	0x08025d40
 8018c84:	080264a0 	.word	0x080264a0
 8018c88:	08025db0 	.word	0x08025db0

08018c8c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b084      	sub	sp, #16
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
 8018c94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d02a      	beq.n	8018cf2 <tcp_netif_ip_addr_changed+0x66>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d026      	beq.n	8018cf2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018ca4:	4b15      	ldr	r3, [pc, #84]	; (8018cfc <tcp_netif_ip_addr_changed+0x70>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4619      	mov	r1, r3
 8018caa:	6878      	ldr	r0, [r7, #4]
 8018cac:	f7ff ffbc 	bl	8018c28 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018cb0:	4b13      	ldr	r3, [pc, #76]	; (8018d00 <tcp_netif_ip_addr_changed+0x74>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	6878      	ldr	r0, [r7, #4]
 8018cb8:	f7ff ffb6 	bl	8018c28 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d017      	beq.n	8018cf2 <tcp_netif_ip_addr_changed+0x66>
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d013      	beq.n	8018cf2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018cca:	4b0e      	ldr	r3, [pc, #56]	; (8018d04 <tcp_netif_ip_addr_changed+0x78>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	60fb      	str	r3, [r7, #12]
 8018cd0:	e00c      	b.n	8018cec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d103      	bne.n	8018ce6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	681a      	ldr	r2, [r3, #0]
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	60fb      	str	r3, [r7, #12]
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d1ef      	bne.n	8018cd2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018cf2:	bf00      	nop
 8018cf4:	3710      	adds	r7, #16
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	24008a28 	.word	0x24008a28
 8018d00:	24008a34 	.word	0x24008a34
 8018d04:	24008a30 	.word	0x24008a30

08018d08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d007      	beq.n	8018d28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7ff fb6f 	bl	8018400 <tcp_segs_free>
    pcb->ooseq = NULL;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	2200      	movs	r2, #0
 8018d26:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018d28:	bf00      	nop
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}

08018d30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018d30:	b590      	push	{r4, r7, lr}
 8018d32:	b08d      	sub	sp, #52	; 0x34
 8018d34:	af04      	add	r7, sp, #16
 8018d36:	6078      	str	r0, [r7, #4]
 8018d38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d105      	bne.n	8018d4c <tcp_input+0x1c>
 8018d40:	4b9b      	ldr	r3, [pc, #620]	; (8018fb0 <tcp_input+0x280>)
 8018d42:	2283      	movs	r2, #131	; 0x83
 8018d44:	499b      	ldr	r1, [pc, #620]	; (8018fb4 <tcp_input+0x284>)
 8018d46:	489c      	ldr	r0, [pc, #624]	; (8018fb8 <tcp_input+0x288>)
 8018d48:	f006 feb4 	bl	801fab4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	685b      	ldr	r3, [r3, #4]
 8018d50:	4a9a      	ldr	r2, [pc, #616]	; (8018fbc <tcp_input+0x28c>)
 8018d52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	895b      	ldrh	r3, [r3, #10]
 8018d58:	2b13      	cmp	r3, #19
 8018d5a:	f240 83c4 	bls.w	80194e6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d5e:	4b98      	ldr	r3, [pc, #608]	; (8018fc0 <tcp_input+0x290>)
 8018d60:	695b      	ldr	r3, [r3, #20]
 8018d62:	4a97      	ldr	r2, [pc, #604]	; (8018fc0 <tcp_input+0x290>)
 8018d64:	6812      	ldr	r2, [r2, #0]
 8018d66:	4611      	mov	r1, r2
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7fb fbd1 	bl	8014510 <ip4_addr_isbroadcast_u32>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	f040 83ba 	bne.w	80194ea <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018d76:	4b92      	ldr	r3, [pc, #584]	; (8018fc0 <tcp_input+0x290>)
 8018d78:	695b      	ldr	r3, [r3, #20]
 8018d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d7e:	2be0      	cmp	r3, #224	; 0xe0
 8018d80:	f000 83b3 	beq.w	80194ea <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018d84:	4b8d      	ldr	r3, [pc, #564]	; (8018fbc <tcp_input+0x28c>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	899b      	ldrh	r3, [r3, #12]
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f9 fe53 	bl	8012a38 <lwip_htons>
 8018d92:	4603      	mov	r3, r0
 8018d94:	0b1b      	lsrs	r3, r3, #12
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	b2db      	uxtb	r3, r3
 8018d9a:	009b      	lsls	r3, r3, #2
 8018d9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018d9e:	7cbb      	ldrb	r3, [r7, #18]
 8018da0:	2b13      	cmp	r3, #19
 8018da2:	f240 83a4 	bls.w	80194ee <tcp_input+0x7be>
 8018da6:	7cbb      	ldrb	r3, [r7, #18]
 8018da8:	b29a      	uxth	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	891b      	ldrh	r3, [r3, #8]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	f200 839d 	bhi.w	80194ee <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018db4:	7cbb      	ldrb	r3, [r7, #18]
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	3b14      	subs	r3, #20
 8018dba:	b29a      	uxth	r2, r3
 8018dbc:	4b81      	ldr	r3, [pc, #516]	; (8018fc4 <tcp_input+0x294>)
 8018dbe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018dc0:	4b81      	ldr	r3, [pc, #516]	; (8018fc8 <tcp_input+0x298>)
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	895a      	ldrh	r2, [r3, #10]
 8018dca:	7cbb      	ldrb	r3, [r7, #18]
 8018dcc:	b29b      	uxth	r3, r3
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d309      	bcc.n	8018de6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018dd2:	4b7c      	ldr	r3, [pc, #496]	; (8018fc4 <tcp_input+0x294>)
 8018dd4:	881a      	ldrh	r2, [r3, #0]
 8018dd6:	4b7d      	ldr	r3, [pc, #500]	; (8018fcc <tcp_input+0x29c>)
 8018dd8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8018dda:	7cbb      	ldrb	r3, [r7, #18]
 8018ddc:	4619      	mov	r1, r3
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f7fd fca0 	bl	8016724 <pbuf_remove_header>
 8018de4:	e04e      	b.n	8018e84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d105      	bne.n	8018dfa <tcp_input+0xca>
 8018dee:	4b70      	ldr	r3, [pc, #448]	; (8018fb0 <tcp_input+0x280>)
 8018df0:	22c2      	movs	r2, #194	; 0xc2
 8018df2:	4977      	ldr	r1, [pc, #476]	; (8018fd0 <tcp_input+0x2a0>)
 8018df4:	4870      	ldr	r0, [pc, #448]	; (8018fb8 <tcp_input+0x288>)
 8018df6:	f006 fe5d 	bl	801fab4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8018dfa:	2114      	movs	r1, #20
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f7fd fc91 	bl	8016724 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	895a      	ldrh	r2, [r3, #10]
 8018e06:	4b71      	ldr	r3, [pc, #452]	; (8018fcc <tcp_input+0x29c>)
 8018e08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018e0a:	4b6e      	ldr	r3, [pc, #440]	; (8018fc4 <tcp_input+0x294>)
 8018e0c:	881a      	ldrh	r2, [r3, #0]
 8018e0e:	4b6f      	ldr	r3, [pc, #444]	; (8018fcc <tcp_input+0x29c>)
 8018e10:	881b      	ldrh	r3, [r3, #0]
 8018e12:	1ad3      	subs	r3, r2, r3
 8018e14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8018e16:	4b6d      	ldr	r3, [pc, #436]	; (8018fcc <tcp_input+0x29c>)
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f7fd fc81 	bl	8016724 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	895b      	ldrh	r3, [r3, #10]
 8018e28:	8a3a      	ldrh	r2, [r7, #16]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	f200 8361 	bhi.w	80194f2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	685b      	ldr	r3, [r3, #4]
 8018e36:	4a64      	ldr	r2, [pc, #400]	; (8018fc8 <tcp_input+0x298>)
 8018e38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	8a3a      	ldrh	r2, [r7, #16]
 8018e40:	4611      	mov	r1, r2
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fd fc6e 	bl	8016724 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	891a      	ldrh	r2, [r3, #8]
 8018e4c:	8a3b      	ldrh	r3, [r7, #16]
 8018e4e:	1ad3      	subs	r3, r2, r3
 8018e50:	b29a      	uxth	r2, r3
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	895b      	ldrh	r3, [r3, #10]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d005      	beq.n	8018e6a <tcp_input+0x13a>
 8018e5e:	4b54      	ldr	r3, [pc, #336]	; (8018fb0 <tcp_input+0x280>)
 8018e60:	22df      	movs	r2, #223	; 0xdf
 8018e62:	495c      	ldr	r1, [pc, #368]	; (8018fd4 <tcp_input+0x2a4>)
 8018e64:	4854      	ldr	r0, [pc, #336]	; (8018fb8 <tcp_input+0x288>)
 8018e66:	f006 fe25 	bl	801fab4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	891a      	ldrh	r2, [r3, #8]
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	891b      	ldrh	r3, [r3, #8]
 8018e74:	429a      	cmp	r2, r3
 8018e76:	d005      	beq.n	8018e84 <tcp_input+0x154>
 8018e78:	4b4d      	ldr	r3, [pc, #308]	; (8018fb0 <tcp_input+0x280>)
 8018e7a:	22e0      	movs	r2, #224	; 0xe0
 8018e7c:	4956      	ldr	r1, [pc, #344]	; (8018fd8 <tcp_input+0x2a8>)
 8018e7e:	484e      	ldr	r0, [pc, #312]	; (8018fb8 <tcp_input+0x288>)
 8018e80:	f006 fe18 	bl	801fab4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018e84:	4b4d      	ldr	r3, [pc, #308]	; (8018fbc <tcp_input+0x28c>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	881b      	ldrh	r3, [r3, #0]
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	4a4b      	ldr	r2, [pc, #300]	; (8018fbc <tcp_input+0x28c>)
 8018e8e:	6814      	ldr	r4, [r2, #0]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7f9 fdd1 	bl	8012a38 <lwip_htons>
 8018e96:	4603      	mov	r3, r0
 8018e98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018e9a:	4b48      	ldr	r3, [pc, #288]	; (8018fbc <tcp_input+0x28c>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	885b      	ldrh	r3, [r3, #2]
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	4a46      	ldr	r2, [pc, #280]	; (8018fbc <tcp_input+0x28c>)
 8018ea4:	6814      	ldr	r4, [r2, #0]
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	f7f9 fdc6 	bl	8012a38 <lwip_htons>
 8018eac:	4603      	mov	r3, r0
 8018eae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018eb0:	4b42      	ldr	r3, [pc, #264]	; (8018fbc <tcp_input+0x28c>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	4a41      	ldr	r2, [pc, #260]	; (8018fbc <tcp_input+0x28c>)
 8018eb8:	6814      	ldr	r4, [r2, #0]
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7f9 fdd1 	bl	8012a62 <lwip_htonl>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	6063      	str	r3, [r4, #4]
 8018ec4:	6863      	ldr	r3, [r4, #4]
 8018ec6:	4a45      	ldr	r2, [pc, #276]	; (8018fdc <tcp_input+0x2ac>)
 8018ec8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018eca:	4b3c      	ldr	r3, [pc, #240]	; (8018fbc <tcp_input+0x28c>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	689b      	ldr	r3, [r3, #8]
 8018ed0:	4a3a      	ldr	r2, [pc, #232]	; (8018fbc <tcp_input+0x28c>)
 8018ed2:	6814      	ldr	r4, [r2, #0]
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7f9 fdc4 	bl	8012a62 <lwip_htonl>
 8018eda:	4603      	mov	r3, r0
 8018edc:	60a3      	str	r3, [r4, #8]
 8018ede:	68a3      	ldr	r3, [r4, #8]
 8018ee0:	4a3f      	ldr	r2, [pc, #252]	; (8018fe0 <tcp_input+0x2b0>)
 8018ee2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018ee4:	4b35      	ldr	r3, [pc, #212]	; (8018fbc <tcp_input+0x28c>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	89db      	ldrh	r3, [r3, #14]
 8018eea:	b29b      	uxth	r3, r3
 8018eec:	4a33      	ldr	r2, [pc, #204]	; (8018fbc <tcp_input+0x28c>)
 8018eee:	6814      	ldr	r4, [r2, #0]
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7f9 fda1 	bl	8012a38 <lwip_htons>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018efa:	4b30      	ldr	r3, [pc, #192]	; (8018fbc <tcp_input+0x28c>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	899b      	ldrh	r3, [r3, #12]
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7f9 fd98 	bl	8012a38 <lwip_htons>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f10:	b2da      	uxtb	r2, r3
 8018f12:	4b34      	ldr	r3, [pc, #208]	; (8018fe4 <tcp_input+0x2b4>)
 8018f14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	891a      	ldrh	r2, [r3, #8]
 8018f1a:	4b33      	ldr	r3, [pc, #204]	; (8018fe8 <tcp_input+0x2b8>)
 8018f1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018f1e:	4b31      	ldr	r3, [pc, #196]	; (8018fe4 <tcp_input+0x2b4>)
 8018f20:	781b      	ldrb	r3, [r3, #0]
 8018f22:	f003 0303 	and.w	r3, r3, #3
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d00c      	beq.n	8018f44 <tcp_input+0x214>
    tcplen++;
 8018f2a:	4b2f      	ldr	r3, [pc, #188]	; (8018fe8 <tcp_input+0x2b8>)
 8018f2c:	881b      	ldrh	r3, [r3, #0]
 8018f2e:	3301      	adds	r3, #1
 8018f30:	b29a      	uxth	r2, r3
 8018f32:	4b2d      	ldr	r3, [pc, #180]	; (8018fe8 <tcp_input+0x2b8>)
 8018f34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	891a      	ldrh	r2, [r3, #8]
 8018f3a:	4b2b      	ldr	r3, [pc, #172]	; (8018fe8 <tcp_input+0x2b8>)
 8018f3c:	881b      	ldrh	r3, [r3, #0]
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	f200 82d9 	bhi.w	80194f6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018f44:	2300      	movs	r3, #0
 8018f46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f48:	4b28      	ldr	r3, [pc, #160]	; (8018fec <tcp_input+0x2bc>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	61fb      	str	r3, [r7, #28]
 8018f4e:	e09d      	b.n	801908c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018f50:	69fb      	ldr	r3, [r7, #28]
 8018f52:	7d1b      	ldrb	r3, [r3, #20]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d105      	bne.n	8018f64 <tcp_input+0x234>
 8018f58:	4b15      	ldr	r3, [pc, #84]	; (8018fb0 <tcp_input+0x280>)
 8018f5a:	22fb      	movs	r2, #251	; 0xfb
 8018f5c:	4924      	ldr	r1, [pc, #144]	; (8018ff0 <tcp_input+0x2c0>)
 8018f5e:	4816      	ldr	r0, [pc, #88]	; (8018fb8 <tcp_input+0x288>)
 8018f60:	f006 fda8 	bl	801fab4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018f64:	69fb      	ldr	r3, [r7, #28]
 8018f66:	7d1b      	ldrb	r3, [r3, #20]
 8018f68:	2b0a      	cmp	r3, #10
 8018f6a:	d105      	bne.n	8018f78 <tcp_input+0x248>
 8018f6c:	4b10      	ldr	r3, [pc, #64]	; (8018fb0 <tcp_input+0x280>)
 8018f6e:	22fc      	movs	r2, #252	; 0xfc
 8018f70:	4920      	ldr	r1, [pc, #128]	; (8018ff4 <tcp_input+0x2c4>)
 8018f72:	4811      	ldr	r0, [pc, #68]	; (8018fb8 <tcp_input+0x288>)
 8018f74:	f006 fd9e 	bl	801fab4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018f78:	69fb      	ldr	r3, [r7, #28]
 8018f7a:	7d1b      	ldrb	r3, [r3, #20]
 8018f7c:	2b01      	cmp	r3, #1
 8018f7e:	d105      	bne.n	8018f8c <tcp_input+0x25c>
 8018f80:	4b0b      	ldr	r3, [pc, #44]	; (8018fb0 <tcp_input+0x280>)
 8018f82:	22fd      	movs	r2, #253	; 0xfd
 8018f84:	491c      	ldr	r1, [pc, #112]	; (8018ff8 <tcp_input+0x2c8>)
 8018f86:	480c      	ldr	r0, [pc, #48]	; (8018fb8 <tcp_input+0x288>)
 8018f88:	f006 fd94 	bl	801fab4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	7a1b      	ldrb	r3, [r3, #8]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d033      	beq.n	8018ffc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018f94:	69fb      	ldr	r3, [r7, #28]
 8018f96:	7a1a      	ldrb	r2, [r3, #8]
 8018f98:	4b09      	ldr	r3, [pc, #36]	; (8018fc0 <tcp_input+0x290>)
 8018f9a:	685b      	ldr	r3, [r3, #4]
 8018f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d029      	beq.n	8018ffc <tcp_input+0x2cc>
      prev = pcb;
 8018fa8:	69fb      	ldr	r3, [r7, #28]
 8018faa:	61bb      	str	r3, [r7, #24]
      continue;
 8018fac:	e06b      	b.n	8019086 <tcp_input+0x356>
 8018fae:	bf00      	nop
 8018fb0:	080264d4 	.word	0x080264d4
 8018fb4:	08026534 	.word	0x08026534
 8018fb8:	0802654c 	.word	0x0802654c
 8018fbc:	24005240 	.word	0x24005240
 8018fc0:	24005b38 	.word	0x24005b38
 8018fc4:	24005244 	.word	0x24005244
 8018fc8:	24005248 	.word	0x24005248
 8018fcc:	24005246 	.word	0x24005246
 8018fd0:	08026574 	.word	0x08026574
 8018fd4:	08026584 	.word	0x08026584
 8018fd8:	08026590 	.word	0x08026590
 8018fdc:	24005250 	.word	0x24005250
 8018fe0:	24005254 	.word	0x24005254
 8018fe4:	2400525c 	.word	0x2400525c
 8018fe8:	2400525a 	.word	0x2400525a
 8018fec:	24008a28 	.word	0x24008a28
 8018ff0:	080265b0 	.word	0x080265b0
 8018ff4:	080265d8 	.word	0x080265d8
 8018ff8:	08026604 	.word	0x08026604
    }

    if (pcb->remote_port == tcphdr->src &&
 8018ffc:	69fb      	ldr	r3, [r7, #28]
 8018ffe:	8b1a      	ldrh	r2, [r3, #24]
 8019000:	4b94      	ldr	r3, [pc, #592]	; (8019254 <tcp_input+0x524>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	881b      	ldrh	r3, [r3, #0]
 8019006:	b29b      	uxth	r3, r3
 8019008:	429a      	cmp	r2, r3
 801900a:	d13a      	bne.n	8019082 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801900c:	69fb      	ldr	r3, [r7, #28]
 801900e:	8ada      	ldrh	r2, [r3, #22]
 8019010:	4b90      	ldr	r3, [pc, #576]	; (8019254 <tcp_input+0x524>)
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	885b      	ldrh	r3, [r3, #2]
 8019016:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8019018:	429a      	cmp	r2, r3
 801901a:	d132      	bne.n	8019082 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	685a      	ldr	r2, [r3, #4]
 8019020:	4b8d      	ldr	r3, [pc, #564]	; (8019258 <tcp_input+0x528>)
 8019022:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019024:	429a      	cmp	r2, r3
 8019026:	d12c      	bne.n	8019082 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019028:	69fb      	ldr	r3, [r7, #28]
 801902a:	681a      	ldr	r2, [r3, #0]
 801902c:	4b8a      	ldr	r3, [pc, #552]	; (8019258 <tcp_input+0x528>)
 801902e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019030:	429a      	cmp	r2, r3
 8019032:	d126      	bne.n	8019082 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019034:	69fb      	ldr	r3, [r7, #28]
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	69fa      	ldr	r2, [r7, #28]
 801903a:	429a      	cmp	r2, r3
 801903c:	d106      	bne.n	801904c <tcp_input+0x31c>
 801903e:	4b87      	ldr	r3, [pc, #540]	; (801925c <tcp_input+0x52c>)
 8019040:	f240 120d 	movw	r2, #269	; 0x10d
 8019044:	4986      	ldr	r1, [pc, #536]	; (8019260 <tcp_input+0x530>)
 8019046:	4887      	ldr	r0, [pc, #540]	; (8019264 <tcp_input+0x534>)
 8019048:	f006 fd34 	bl	801fab4 <iprintf>
      if (prev != NULL) {
 801904c:	69bb      	ldr	r3, [r7, #24]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d00a      	beq.n	8019068 <tcp_input+0x338>
        prev->next = pcb->next;
 8019052:	69fb      	ldr	r3, [r7, #28]
 8019054:	68da      	ldr	r2, [r3, #12]
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801905a:	4b83      	ldr	r3, [pc, #524]	; (8019268 <tcp_input+0x538>)
 801905c:	681a      	ldr	r2, [r3, #0]
 801905e:	69fb      	ldr	r3, [r7, #28]
 8019060:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019062:	4a81      	ldr	r2, [pc, #516]	; (8019268 <tcp_input+0x538>)
 8019064:	69fb      	ldr	r3, [r7, #28]
 8019066:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019068:	69fb      	ldr	r3, [r7, #28]
 801906a:	68db      	ldr	r3, [r3, #12]
 801906c:	69fa      	ldr	r2, [r7, #28]
 801906e:	429a      	cmp	r2, r3
 8019070:	d111      	bne.n	8019096 <tcp_input+0x366>
 8019072:	4b7a      	ldr	r3, [pc, #488]	; (801925c <tcp_input+0x52c>)
 8019074:	f240 1215 	movw	r2, #277	; 0x115
 8019078:	497c      	ldr	r1, [pc, #496]	; (801926c <tcp_input+0x53c>)
 801907a:	487a      	ldr	r0, [pc, #488]	; (8019264 <tcp_input+0x534>)
 801907c:	f006 fd1a 	bl	801fab4 <iprintf>
      break;
 8019080:	e009      	b.n	8019096 <tcp_input+0x366>
    }
    prev = pcb;
 8019082:	69fb      	ldr	r3, [r7, #28]
 8019084:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019086:	69fb      	ldr	r3, [r7, #28]
 8019088:	68db      	ldr	r3, [r3, #12]
 801908a:	61fb      	str	r3, [r7, #28]
 801908c:	69fb      	ldr	r3, [r7, #28]
 801908e:	2b00      	cmp	r3, #0
 8019090:	f47f af5e 	bne.w	8018f50 <tcp_input+0x220>
 8019094:	e000      	b.n	8019098 <tcp_input+0x368>
      break;
 8019096:	bf00      	nop
  }

  if (pcb == NULL) {
 8019098:	69fb      	ldr	r3, [r7, #28]
 801909a:	2b00      	cmp	r3, #0
 801909c:	f040 8095 	bne.w	80191ca <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80190a0:	4b73      	ldr	r3, [pc, #460]	; (8019270 <tcp_input+0x540>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	61fb      	str	r3, [r7, #28]
 80190a6:	e03f      	b.n	8019128 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80190a8:	69fb      	ldr	r3, [r7, #28]
 80190aa:	7d1b      	ldrb	r3, [r3, #20]
 80190ac:	2b0a      	cmp	r3, #10
 80190ae:	d006      	beq.n	80190be <tcp_input+0x38e>
 80190b0:	4b6a      	ldr	r3, [pc, #424]	; (801925c <tcp_input+0x52c>)
 80190b2:	f240 121f 	movw	r2, #287	; 0x11f
 80190b6:	496f      	ldr	r1, [pc, #444]	; (8019274 <tcp_input+0x544>)
 80190b8:	486a      	ldr	r0, [pc, #424]	; (8019264 <tcp_input+0x534>)
 80190ba:	f006 fcfb 	bl	801fab4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	7a1b      	ldrb	r3, [r3, #8]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d009      	beq.n	80190da <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80190c6:	69fb      	ldr	r3, [r7, #28]
 80190c8:	7a1a      	ldrb	r2, [r3, #8]
 80190ca:	4b63      	ldr	r3, [pc, #396]	; (8019258 <tcp_input+0x528>)
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80190d2:	3301      	adds	r3, #1
 80190d4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d122      	bne.n	8019120 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80190da:	69fb      	ldr	r3, [r7, #28]
 80190dc:	8b1a      	ldrh	r2, [r3, #24]
 80190de:	4b5d      	ldr	r3, [pc, #372]	; (8019254 <tcp_input+0x524>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	881b      	ldrh	r3, [r3, #0]
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d11b      	bne.n	8019122 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80190ea:	69fb      	ldr	r3, [r7, #28]
 80190ec:	8ada      	ldrh	r2, [r3, #22]
 80190ee:	4b59      	ldr	r3, [pc, #356]	; (8019254 <tcp_input+0x524>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	885b      	ldrh	r3, [r3, #2]
 80190f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d113      	bne.n	8019122 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80190fa:	69fb      	ldr	r3, [r7, #28]
 80190fc:	685a      	ldr	r2, [r3, #4]
 80190fe:	4b56      	ldr	r3, [pc, #344]	; (8019258 <tcp_input+0x528>)
 8019100:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8019102:	429a      	cmp	r2, r3
 8019104:	d10d      	bne.n	8019122 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	4b53      	ldr	r3, [pc, #332]	; (8019258 <tcp_input+0x528>)
 801910c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801910e:	429a      	cmp	r2, r3
 8019110:	d107      	bne.n	8019122 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8019112:	69f8      	ldr	r0, [r7, #28]
 8019114:	f000 fb54 	bl	80197c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f7fd fb89 	bl	8016830 <pbuf_free>
        return;
 801911e:	e1f0      	b.n	8019502 <tcp_input+0x7d2>
        continue;
 8019120:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019122:	69fb      	ldr	r3, [r7, #28]
 8019124:	68db      	ldr	r3, [r3, #12]
 8019126:	61fb      	str	r3, [r7, #28]
 8019128:	69fb      	ldr	r3, [r7, #28]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d1bc      	bne.n	80190a8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801912e:	2300      	movs	r3, #0
 8019130:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019132:	4b51      	ldr	r3, [pc, #324]	; (8019278 <tcp_input+0x548>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	617b      	str	r3, [r7, #20]
 8019138:	e02a      	b.n	8019190 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	7a1b      	ldrb	r3, [r3, #8]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d00c      	beq.n	801915c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019142:	697b      	ldr	r3, [r7, #20]
 8019144:	7a1a      	ldrb	r2, [r3, #8]
 8019146:	4b44      	ldr	r3, [pc, #272]	; (8019258 <tcp_input+0x528>)
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801914e:	3301      	adds	r3, #1
 8019150:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019152:	429a      	cmp	r2, r3
 8019154:	d002      	beq.n	801915c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	61bb      	str	r3, [r7, #24]
        continue;
 801915a:	e016      	b.n	801918a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	8ada      	ldrh	r2, [r3, #22]
 8019160:	4b3c      	ldr	r3, [pc, #240]	; (8019254 <tcp_input+0x524>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	885b      	ldrh	r3, [r3, #2]
 8019166:	b29b      	uxth	r3, r3
 8019168:	429a      	cmp	r2, r3
 801916a:	d10c      	bne.n	8019186 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	681a      	ldr	r2, [r3, #0]
 8019170:	4b39      	ldr	r3, [pc, #228]	; (8019258 <tcp_input+0x528>)
 8019172:	695b      	ldr	r3, [r3, #20]
 8019174:	429a      	cmp	r2, r3
 8019176:	d00f      	beq.n	8019198 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d00d      	beq.n	801919a <tcp_input+0x46a>
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d009      	beq.n	801919a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801918a:	697b      	ldr	r3, [r7, #20]
 801918c:	68db      	ldr	r3, [r3, #12]
 801918e:	617b      	str	r3, [r7, #20]
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d1d1      	bne.n	801913a <tcp_input+0x40a>
 8019196:	e000      	b.n	801919a <tcp_input+0x46a>
            break;
 8019198:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d014      	beq.n	80191ca <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80191a0:	69bb      	ldr	r3, [r7, #24]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d00a      	beq.n	80191bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	68da      	ldr	r2, [r3, #12]
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80191ae:	4b32      	ldr	r3, [pc, #200]	; (8019278 <tcp_input+0x548>)
 80191b0:	681a      	ldr	r2, [r3, #0]
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80191b6:	4a30      	ldr	r2, [pc, #192]	; (8019278 <tcp_input+0x548>)
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80191bc:	6978      	ldr	r0, [r7, #20]
 80191be:	f000 fa01 	bl	80195c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f7fd fb34 	bl	8016830 <pbuf_free>
      return;
 80191c8:	e19b      	b.n	8019502 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80191ca:	69fb      	ldr	r3, [r7, #28]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	f000 8160 	beq.w	8019492 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80191d2:	4b2a      	ldr	r3, [pc, #168]	; (801927c <tcp_input+0x54c>)
 80191d4:	2200      	movs	r2, #0
 80191d6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	891a      	ldrh	r2, [r3, #8]
 80191dc:	4b27      	ldr	r3, [pc, #156]	; (801927c <tcp_input+0x54c>)
 80191de:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80191e0:	4a26      	ldr	r2, [pc, #152]	; (801927c <tcp_input+0x54c>)
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80191e6:	4b1b      	ldr	r3, [pc, #108]	; (8019254 <tcp_input+0x524>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	4a24      	ldr	r2, [pc, #144]	; (801927c <tcp_input+0x54c>)
 80191ec:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80191ee:	4b24      	ldr	r3, [pc, #144]	; (8019280 <tcp_input+0x550>)
 80191f0:	2200      	movs	r2, #0
 80191f2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80191f4:	4b23      	ldr	r3, [pc, #140]	; (8019284 <tcp_input+0x554>)
 80191f6:	2200      	movs	r2, #0
 80191f8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80191fa:	4b23      	ldr	r3, [pc, #140]	; (8019288 <tcp_input+0x558>)
 80191fc:	2200      	movs	r2, #0
 80191fe:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019200:	4b22      	ldr	r3, [pc, #136]	; (801928c <tcp_input+0x55c>)
 8019202:	781b      	ldrb	r3, [r3, #0]
 8019204:	f003 0308 	and.w	r3, r3, #8
 8019208:	2b00      	cmp	r3, #0
 801920a:	d006      	beq.n	801921a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	7b5b      	ldrb	r3, [r3, #13]
 8019210:	f043 0301 	orr.w	r3, r3, #1
 8019214:	b2da      	uxtb	r2, r3
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801921e:	2b00      	cmp	r3, #0
 8019220:	d038      	beq.n	8019294 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019222:	69f8      	ldr	r0, [r7, #28]
 8019224:	f7ff f870 	bl	8018308 <tcp_process_refused_data>
 8019228:	4603      	mov	r3, r0
 801922a:	f113 0f0d 	cmn.w	r3, #13
 801922e:	d007      	beq.n	8019240 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019234:	2b00      	cmp	r3, #0
 8019236:	d02d      	beq.n	8019294 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019238:	4b15      	ldr	r3, [pc, #84]	; (8019290 <tcp_input+0x560>)
 801923a:	881b      	ldrh	r3, [r3, #0]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d029      	beq.n	8019294 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019244:	2b00      	cmp	r3, #0
 8019246:	f040 8104 	bne.w	8019452 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801924a:	69f8      	ldr	r0, [r7, #28]
 801924c:	f003 fe16 	bl	801ce7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019250:	e0ff      	b.n	8019452 <tcp_input+0x722>
 8019252:	bf00      	nop
 8019254:	24005240 	.word	0x24005240
 8019258:	24005b38 	.word	0x24005b38
 801925c:	080264d4 	.word	0x080264d4
 8019260:	0802662c 	.word	0x0802662c
 8019264:	0802654c 	.word	0x0802654c
 8019268:	24008a28 	.word	0x24008a28
 801926c:	08026658 	.word	0x08026658
 8019270:	24008a38 	.word	0x24008a38
 8019274:	08026684 	.word	0x08026684
 8019278:	24008a30 	.word	0x24008a30
 801927c:	24005230 	.word	0x24005230
 8019280:	24005260 	.word	0x24005260
 8019284:	2400525d 	.word	0x2400525d
 8019288:	24005258 	.word	0x24005258
 801928c:	2400525c 	.word	0x2400525c
 8019290:	2400525a 	.word	0x2400525a
      }
    }
    tcp_input_pcb = pcb;
 8019294:	4a9c      	ldr	r2, [pc, #624]	; (8019508 <tcp_input+0x7d8>)
 8019296:	69fb      	ldr	r3, [r7, #28]
 8019298:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801929a:	69f8      	ldr	r0, [r7, #28]
 801929c:	f000 fb0a 	bl	80198b4 <tcp_process>
 80192a0:	4603      	mov	r3, r0
 80192a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80192a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80192a8:	f113 0f0d 	cmn.w	r3, #13
 80192ac:	f000 80d3 	beq.w	8019456 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80192b0:	4b96      	ldr	r3, [pc, #600]	; (801950c <tcp_input+0x7dc>)
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	f003 0308 	and.w	r3, r3, #8
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d015      	beq.n	80192e8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80192bc:	69fb      	ldr	r3, [r7, #28]
 80192be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d008      	beq.n	80192d8 <tcp_input+0x5a8>
 80192c6:	69fb      	ldr	r3, [r7, #28]
 80192c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80192cc:	69fa      	ldr	r2, [r7, #28]
 80192ce:	6912      	ldr	r2, [r2, #16]
 80192d0:	f06f 010d 	mvn.w	r1, #13
 80192d4:	4610      	mov	r0, r2
 80192d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80192d8:	69f9      	ldr	r1, [r7, #28]
 80192da:	488d      	ldr	r0, [pc, #564]	; (8019510 <tcp_input+0x7e0>)
 80192dc:	f7ff fbb0 	bl	8018a40 <tcp_pcb_remove>
        tcp_free(pcb);
 80192e0:	69f8      	ldr	r0, [r7, #28]
 80192e2:	f7fd fdfd 	bl	8016ee0 <tcp_free>
 80192e6:	e0c1      	b.n	801946c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80192e8:	2300      	movs	r3, #0
 80192ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80192ec:	4b89      	ldr	r3, [pc, #548]	; (8019514 <tcp_input+0x7e4>)
 80192ee:	881b      	ldrh	r3, [r3, #0]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d01d      	beq.n	8019330 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80192f4:	4b87      	ldr	r3, [pc, #540]	; (8019514 <tcp_input+0x7e4>)
 80192f6:	881b      	ldrh	r3, [r3, #0]
 80192f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80192fa:	69fb      	ldr	r3, [r7, #28]
 80192fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019300:	2b00      	cmp	r3, #0
 8019302:	d00a      	beq.n	801931a <tcp_input+0x5ea>
 8019304:	69fb      	ldr	r3, [r7, #28]
 8019306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801930a:	69fa      	ldr	r2, [r7, #28]
 801930c:	6910      	ldr	r0, [r2, #16]
 801930e:	89fa      	ldrh	r2, [r7, #14]
 8019310:	69f9      	ldr	r1, [r7, #28]
 8019312:	4798      	blx	r3
 8019314:	4603      	mov	r3, r0
 8019316:	74fb      	strb	r3, [r7, #19]
 8019318:	e001      	b.n	801931e <tcp_input+0x5ee>
 801931a:	2300      	movs	r3, #0
 801931c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801931e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019322:	f113 0f0d 	cmn.w	r3, #13
 8019326:	f000 8098 	beq.w	801945a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801932a:	4b7a      	ldr	r3, [pc, #488]	; (8019514 <tcp_input+0x7e4>)
 801932c:	2200      	movs	r2, #0
 801932e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019330:	69f8      	ldr	r0, [r7, #28]
 8019332:	f000 f907 	bl	8019544 <tcp_input_delayed_close>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	f040 8090 	bne.w	801945e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801933e:	4b76      	ldr	r3, [pc, #472]	; (8019518 <tcp_input+0x7e8>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d041      	beq.n	80193ca <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8019346:	69fb      	ldr	r3, [r7, #28]
 8019348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801934a:	2b00      	cmp	r3, #0
 801934c:	d006      	beq.n	801935c <tcp_input+0x62c>
 801934e:	4b73      	ldr	r3, [pc, #460]	; (801951c <tcp_input+0x7ec>)
 8019350:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019354:	4972      	ldr	r1, [pc, #456]	; (8019520 <tcp_input+0x7f0>)
 8019356:	4873      	ldr	r0, [pc, #460]	; (8019524 <tcp_input+0x7f4>)
 8019358:	f006 fbac 	bl	801fab4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801935c:	69fb      	ldr	r3, [r7, #28]
 801935e:	8b5b      	ldrh	r3, [r3, #26]
 8019360:	f003 0310 	and.w	r3, r3, #16
 8019364:	2b00      	cmp	r3, #0
 8019366:	d008      	beq.n	801937a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8019368:	4b6b      	ldr	r3, [pc, #428]	; (8019518 <tcp_input+0x7e8>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	4618      	mov	r0, r3
 801936e:	f7fd fa5f 	bl	8016830 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019372:	69f8      	ldr	r0, [r7, #28]
 8019374:	f7fe f89c 	bl	80174b0 <tcp_abort>
            goto aborted;
 8019378:	e078      	b.n	801946c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801937a:	69fb      	ldr	r3, [r7, #28]
 801937c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019380:	2b00      	cmp	r3, #0
 8019382:	d00c      	beq.n	801939e <tcp_input+0x66e>
 8019384:	69fb      	ldr	r3, [r7, #28]
 8019386:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801938a:	69fb      	ldr	r3, [r7, #28]
 801938c:	6918      	ldr	r0, [r3, #16]
 801938e:	4b62      	ldr	r3, [pc, #392]	; (8019518 <tcp_input+0x7e8>)
 8019390:	681a      	ldr	r2, [r3, #0]
 8019392:	2300      	movs	r3, #0
 8019394:	69f9      	ldr	r1, [r7, #28]
 8019396:	47a0      	blx	r4
 8019398:	4603      	mov	r3, r0
 801939a:	74fb      	strb	r3, [r7, #19]
 801939c:	e008      	b.n	80193b0 <tcp_input+0x680>
 801939e:	4b5e      	ldr	r3, [pc, #376]	; (8019518 <tcp_input+0x7e8>)
 80193a0:	681a      	ldr	r2, [r3, #0]
 80193a2:	2300      	movs	r3, #0
 80193a4:	69f9      	ldr	r1, [r7, #28]
 80193a6:	2000      	movs	r0, #0
 80193a8:	f7ff f884 	bl	80184b4 <tcp_recv_null>
 80193ac:	4603      	mov	r3, r0
 80193ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80193b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80193b4:	f113 0f0d 	cmn.w	r3, #13
 80193b8:	d053      	beq.n	8019462 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80193ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d003      	beq.n	80193ca <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80193c2:	4b55      	ldr	r3, [pc, #340]	; (8019518 <tcp_input+0x7e8>)
 80193c4:	681a      	ldr	r2, [r3, #0]
 80193c6:	69fb      	ldr	r3, [r7, #28]
 80193c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80193ca:	4b50      	ldr	r3, [pc, #320]	; (801950c <tcp_input+0x7dc>)
 80193cc:	781b      	ldrb	r3, [r3, #0]
 80193ce:	f003 0320 	and.w	r3, r3, #32
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d030      	beq.n	8019438 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80193d6:	69fb      	ldr	r3, [r7, #28]
 80193d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d009      	beq.n	80193f2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80193e2:	7b5a      	ldrb	r2, [r3, #13]
 80193e4:	69fb      	ldr	r3, [r7, #28]
 80193e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80193e8:	f042 0220 	orr.w	r2, r2, #32
 80193ec:	b2d2      	uxtb	r2, r2
 80193ee:	735a      	strb	r2, [r3, #13]
 80193f0:	e022      	b.n	8019438 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80193f2:	69fb      	ldr	r3, [r7, #28]
 80193f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80193fa:	d005      	beq.n	8019408 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019400:	3301      	adds	r3, #1
 8019402:	b29a      	uxth	r2, r3
 8019404:	69fb      	ldr	r3, [r7, #28]
 8019406:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8019408:	69fb      	ldr	r3, [r7, #28]
 801940a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801940e:	2b00      	cmp	r3, #0
 8019410:	d00b      	beq.n	801942a <tcp_input+0x6fa>
 8019412:	69fb      	ldr	r3, [r7, #28]
 8019414:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	6918      	ldr	r0, [r3, #16]
 801941c:	2300      	movs	r3, #0
 801941e:	2200      	movs	r2, #0
 8019420:	69f9      	ldr	r1, [r7, #28]
 8019422:	47a0      	blx	r4
 8019424:	4603      	mov	r3, r0
 8019426:	74fb      	strb	r3, [r7, #19]
 8019428:	e001      	b.n	801942e <tcp_input+0x6fe>
 801942a:	2300      	movs	r3, #0
 801942c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801942e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019432:	f113 0f0d 	cmn.w	r3, #13
 8019436:	d016      	beq.n	8019466 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8019438:	4b33      	ldr	r3, [pc, #204]	; (8019508 <tcp_input+0x7d8>)
 801943a:	2200      	movs	r2, #0
 801943c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801943e:	69f8      	ldr	r0, [r7, #28]
 8019440:	f000 f880 	bl	8019544 <tcp_input_delayed_close>
 8019444:	4603      	mov	r3, r0
 8019446:	2b00      	cmp	r3, #0
 8019448:	d10f      	bne.n	801946a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801944a:	69f8      	ldr	r0, [r7, #28]
 801944c:	f002 ff10 	bl	801c270 <tcp_output>
 8019450:	e00c      	b.n	801946c <tcp_input+0x73c>
        goto aborted;
 8019452:	bf00      	nop
 8019454:	e00a      	b.n	801946c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8019456:	bf00      	nop
 8019458:	e008      	b.n	801946c <tcp_input+0x73c>
              goto aborted;
 801945a:	bf00      	nop
 801945c:	e006      	b.n	801946c <tcp_input+0x73c>
          goto aborted;
 801945e:	bf00      	nop
 8019460:	e004      	b.n	801946c <tcp_input+0x73c>
            goto aborted;
 8019462:	bf00      	nop
 8019464:	e002      	b.n	801946c <tcp_input+0x73c>
              goto aborted;
 8019466:	bf00      	nop
 8019468:	e000      	b.n	801946c <tcp_input+0x73c>
          goto aborted;
 801946a:	bf00      	nop
    tcp_input_pcb = NULL;
 801946c:	4b26      	ldr	r3, [pc, #152]	; (8019508 <tcp_input+0x7d8>)
 801946e:	2200      	movs	r2, #0
 8019470:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019472:	4b29      	ldr	r3, [pc, #164]	; (8019518 <tcp_input+0x7e8>)
 8019474:	2200      	movs	r2, #0
 8019476:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8019478:	4b2b      	ldr	r3, [pc, #172]	; (8019528 <tcp_input+0x7f8>)
 801947a:	685b      	ldr	r3, [r3, #4]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d03f      	beq.n	8019500 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8019480:	4b29      	ldr	r3, [pc, #164]	; (8019528 <tcp_input+0x7f8>)
 8019482:	685b      	ldr	r3, [r3, #4]
 8019484:	4618      	mov	r0, r3
 8019486:	f7fd f9d3 	bl	8016830 <pbuf_free>
      inseg.p = NULL;
 801948a:	4b27      	ldr	r3, [pc, #156]	; (8019528 <tcp_input+0x7f8>)
 801948c:	2200      	movs	r2, #0
 801948e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019490:	e036      	b.n	8019500 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019492:	4b26      	ldr	r3, [pc, #152]	; (801952c <tcp_input+0x7fc>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	899b      	ldrh	r3, [r3, #12]
 8019498:	b29b      	uxth	r3, r3
 801949a:	4618      	mov	r0, r3
 801949c:	f7f9 facc 	bl	8012a38 <lwip_htons>
 80194a0:	4603      	mov	r3, r0
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	f003 0304 	and.w	r3, r3, #4
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d118      	bne.n	80194de <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80194ac:	4b20      	ldr	r3, [pc, #128]	; (8019530 <tcp_input+0x800>)
 80194ae:	6819      	ldr	r1, [r3, #0]
 80194b0:	4b20      	ldr	r3, [pc, #128]	; (8019534 <tcp_input+0x804>)
 80194b2:	881b      	ldrh	r3, [r3, #0]
 80194b4:	461a      	mov	r2, r3
 80194b6:	4b20      	ldr	r3, [pc, #128]	; (8019538 <tcp_input+0x808>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80194bc:	4b1b      	ldr	r3, [pc, #108]	; (801952c <tcp_input+0x7fc>)
 80194be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80194c0:	885b      	ldrh	r3, [r3, #2]
 80194c2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80194c4:	4a19      	ldr	r2, [pc, #100]	; (801952c <tcp_input+0x7fc>)
 80194c6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80194c8:	8812      	ldrh	r2, [r2, #0]
 80194ca:	b292      	uxth	r2, r2
 80194cc:	9202      	str	r2, [sp, #8]
 80194ce:	9301      	str	r3, [sp, #4]
 80194d0:	4b1a      	ldr	r3, [pc, #104]	; (801953c <tcp_input+0x80c>)
 80194d2:	9300      	str	r3, [sp, #0]
 80194d4:	4b1a      	ldr	r3, [pc, #104]	; (8019540 <tcp_input+0x810>)
 80194d6:	4602      	mov	r2, r0
 80194d8:	2000      	movs	r0, #0
 80194da:	f003 fc7d 	bl	801cdd8 <tcp_rst>
    pbuf_free(p);
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	f7fd f9a6 	bl	8016830 <pbuf_free>
  return;
 80194e4:	e00c      	b.n	8019500 <tcp_input+0x7d0>
    goto dropped;
 80194e6:	bf00      	nop
 80194e8:	e006      	b.n	80194f8 <tcp_input+0x7c8>
    goto dropped;
 80194ea:	bf00      	nop
 80194ec:	e004      	b.n	80194f8 <tcp_input+0x7c8>
    goto dropped;
 80194ee:	bf00      	nop
 80194f0:	e002      	b.n	80194f8 <tcp_input+0x7c8>
      goto dropped;
 80194f2:	bf00      	nop
 80194f4:	e000      	b.n	80194f8 <tcp_input+0x7c8>
      goto dropped;
 80194f6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80194f8:	6878      	ldr	r0, [r7, #4]
 80194fa:	f7fd f999 	bl	8016830 <pbuf_free>
 80194fe:	e000      	b.n	8019502 <tcp_input+0x7d2>
  return;
 8019500:	bf00      	nop
}
 8019502:	3724      	adds	r7, #36	; 0x24
 8019504:	46bd      	mov	sp, r7
 8019506:	bd90      	pop	{r4, r7, pc}
 8019508:	24008a3c 	.word	0x24008a3c
 801950c:	2400525d 	.word	0x2400525d
 8019510:	24008a28 	.word	0x24008a28
 8019514:	24005258 	.word	0x24005258
 8019518:	24005260 	.word	0x24005260
 801951c:	080264d4 	.word	0x080264d4
 8019520:	080266b4 	.word	0x080266b4
 8019524:	0802654c 	.word	0x0802654c
 8019528:	24005230 	.word	0x24005230
 801952c:	24005240 	.word	0x24005240
 8019530:	24005254 	.word	0x24005254
 8019534:	2400525a 	.word	0x2400525a
 8019538:	24005250 	.word	0x24005250
 801953c:	24005b48 	.word	0x24005b48
 8019540:	24005b4c 	.word	0x24005b4c

08019544 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d106      	bne.n	8019560 <tcp_input_delayed_close+0x1c>
 8019552:	4b17      	ldr	r3, [pc, #92]	; (80195b0 <tcp_input_delayed_close+0x6c>)
 8019554:	f240 225a 	movw	r2, #602	; 0x25a
 8019558:	4916      	ldr	r1, [pc, #88]	; (80195b4 <tcp_input_delayed_close+0x70>)
 801955a:	4817      	ldr	r0, [pc, #92]	; (80195b8 <tcp_input_delayed_close+0x74>)
 801955c:	f006 faaa 	bl	801fab4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019560:	4b16      	ldr	r3, [pc, #88]	; (80195bc <tcp_input_delayed_close+0x78>)
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	f003 0310 	and.w	r3, r3, #16
 8019568:	2b00      	cmp	r3, #0
 801956a:	d01c      	beq.n	80195a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	8b5b      	ldrh	r3, [r3, #26]
 8019570:	f003 0310 	and.w	r3, r3, #16
 8019574:	2b00      	cmp	r3, #0
 8019576:	d10d      	bne.n	8019594 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801957e:	2b00      	cmp	r3, #0
 8019580:	d008      	beq.n	8019594 <tcp_input_delayed_close+0x50>
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	6912      	ldr	r2, [r2, #16]
 801958c:	f06f 010e 	mvn.w	r1, #14
 8019590:	4610      	mov	r0, r2
 8019592:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019594:	6879      	ldr	r1, [r7, #4]
 8019596:	480a      	ldr	r0, [pc, #40]	; (80195c0 <tcp_input_delayed_close+0x7c>)
 8019598:	f7ff fa52 	bl	8018a40 <tcp_pcb_remove>
    tcp_free(pcb);
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f7fd fc9f 	bl	8016ee0 <tcp_free>
    return 1;
 80195a2:	2301      	movs	r3, #1
 80195a4:	e000      	b.n	80195a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80195a6:	2300      	movs	r3, #0
}
 80195a8:	4618      	mov	r0, r3
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}
 80195b0:	080264d4 	.word	0x080264d4
 80195b4:	080266d0 	.word	0x080266d0
 80195b8:	0802654c 	.word	0x0802654c
 80195bc:	2400525d 	.word	0x2400525d
 80195c0:	24008a28 	.word	0x24008a28

080195c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80195c4:	b590      	push	{r4, r7, lr}
 80195c6:	b08b      	sub	sp, #44	; 0x2c
 80195c8:	af04      	add	r7, sp, #16
 80195ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80195cc:	4b6f      	ldr	r3, [pc, #444]	; (801978c <tcp_listen_input+0x1c8>)
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	f003 0304 	and.w	r3, r3, #4
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	f040 80d2 	bne.w	801977e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d106      	bne.n	80195ee <tcp_listen_input+0x2a>
 80195e0:	4b6b      	ldr	r3, [pc, #428]	; (8019790 <tcp_listen_input+0x1cc>)
 80195e2:	f240 2281 	movw	r2, #641	; 0x281
 80195e6:	496b      	ldr	r1, [pc, #428]	; (8019794 <tcp_listen_input+0x1d0>)
 80195e8:	486b      	ldr	r0, [pc, #428]	; (8019798 <tcp_listen_input+0x1d4>)
 80195ea:	f006 fa63 	bl	801fab4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80195ee:	4b67      	ldr	r3, [pc, #412]	; (801978c <tcp_listen_input+0x1c8>)
 80195f0:	781b      	ldrb	r3, [r3, #0]
 80195f2:	f003 0310 	and.w	r3, r3, #16
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d019      	beq.n	801962e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80195fa:	4b68      	ldr	r3, [pc, #416]	; (801979c <tcp_listen_input+0x1d8>)
 80195fc:	6819      	ldr	r1, [r3, #0]
 80195fe:	4b68      	ldr	r3, [pc, #416]	; (80197a0 <tcp_listen_input+0x1dc>)
 8019600:	881b      	ldrh	r3, [r3, #0]
 8019602:	461a      	mov	r2, r3
 8019604:	4b67      	ldr	r3, [pc, #412]	; (80197a4 <tcp_listen_input+0x1e0>)
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801960a:	4b67      	ldr	r3, [pc, #412]	; (80197a8 <tcp_listen_input+0x1e4>)
 801960c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801960e:	885b      	ldrh	r3, [r3, #2]
 8019610:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019612:	4a65      	ldr	r2, [pc, #404]	; (80197a8 <tcp_listen_input+0x1e4>)
 8019614:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019616:	8812      	ldrh	r2, [r2, #0]
 8019618:	b292      	uxth	r2, r2
 801961a:	9202      	str	r2, [sp, #8]
 801961c:	9301      	str	r3, [sp, #4]
 801961e:	4b63      	ldr	r3, [pc, #396]	; (80197ac <tcp_listen_input+0x1e8>)
 8019620:	9300      	str	r3, [sp, #0]
 8019622:	4b63      	ldr	r3, [pc, #396]	; (80197b0 <tcp_listen_input+0x1ec>)
 8019624:	4602      	mov	r2, r0
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f003 fbd6 	bl	801cdd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801962c:	e0a9      	b.n	8019782 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801962e:	4b57      	ldr	r3, [pc, #348]	; (801978c <tcp_listen_input+0x1c8>)
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	f003 0302 	and.w	r3, r3, #2
 8019636:	2b00      	cmp	r3, #0
 8019638:	f000 80a3 	beq.w	8019782 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	7d5b      	ldrb	r3, [r3, #21]
 8019640:	4618      	mov	r0, r3
 8019642:	f7ff f85b 	bl	80186fc <tcp_alloc>
 8019646:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d111      	bne.n	8019672 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	699b      	ldr	r3, [r3, #24]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d00a      	beq.n	801966c <tcp_listen_input+0xa8>
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	699b      	ldr	r3, [r3, #24]
 801965a:	687a      	ldr	r2, [r7, #4]
 801965c:	6910      	ldr	r0, [r2, #16]
 801965e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019662:	2100      	movs	r1, #0
 8019664:	4798      	blx	r3
 8019666:	4603      	mov	r3, r0
 8019668:	73bb      	strb	r3, [r7, #14]
      return;
 801966a:	e08b      	b.n	8019784 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801966c:	23f0      	movs	r3, #240	; 0xf0
 801966e:	73bb      	strb	r3, [r7, #14]
      return;
 8019670:	e088      	b.n	8019784 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019672:	4b50      	ldr	r3, [pc, #320]	; (80197b4 <tcp_listen_input+0x1f0>)
 8019674:	695a      	ldr	r2, [r3, #20]
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801967a:	4b4e      	ldr	r3, [pc, #312]	; (80197b4 <tcp_listen_input+0x1f0>)
 801967c:	691a      	ldr	r2, [r3, #16]
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	8ada      	ldrh	r2, [r3, #22]
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801968a:	4b47      	ldr	r3, [pc, #284]	; (80197a8 <tcp_listen_input+0x1e4>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	881b      	ldrh	r3, [r3, #0]
 8019690:	b29a      	uxth	r2, r3
 8019692:	697b      	ldr	r3, [r7, #20]
 8019694:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	2203      	movs	r2, #3
 801969a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801969c:	4b41      	ldr	r3, [pc, #260]	; (80197a4 <tcp_listen_input+0x1e0>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	1c5a      	adds	r2, r3, #1
 80196a2:	697b      	ldr	r3, [r7, #20]
 80196a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196aa:	697b      	ldr	r3, [r7, #20]
 80196ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80196ae:	6978      	ldr	r0, [r7, #20]
 80196b0:	f7ff fa5a 	bl	8018b68 <tcp_next_iss>
 80196b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	693a      	ldr	r2, [r7, #16]
 80196ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	693a      	ldr	r2, [r7, #16]
 80196c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80196c2:	697b      	ldr	r3, [r7, #20]
 80196c4:	693a      	ldr	r2, [r7, #16]
 80196c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	693a      	ldr	r2, [r7, #16]
 80196cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80196ce:	4b35      	ldr	r3, [pc, #212]	; (80197a4 <tcp_listen_input+0x1e0>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	1e5a      	subs	r2, r3, #1
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	691a      	ldr	r2, [r3, #16]
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80196e0:	697b      	ldr	r3, [r7, #20]
 80196e2:	687a      	ldr	r2, [r7, #4]
 80196e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	7a5b      	ldrb	r3, [r3, #9]
 80196ea:	f003 030c 	and.w	r3, r3, #12
 80196ee:	b2da      	uxtb	r2, r3
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	7a1a      	ldrb	r2, [r3, #8]
 80196f8:	697b      	ldr	r3, [r7, #20]
 80196fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80196fc:	4b2e      	ldr	r3, [pc, #184]	; (80197b8 <tcp_listen_input+0x1f4>)
 80196fe:	681a      	ldr	r2, [r3, #0]
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	60da      	str	r2, [r3, #12]
 8019704:	4a2c      	ldr	r2, [pc, #176]	; (80197b8 <tcp_listen_input+0x1f4>)
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	6013      	str	r3, [r2, #0]
 801970a:	f003 fd27 	bl	801d15c <tcp_timer_needed>
 801970e:	4b2b      	ldr	r3, [pc, #172]	; (80197bc <tcp_listen_input+0x1f8>)
 8019710:	2201      	movs	r2, #1
 8019712:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019714:	6978      	ldr	r0, [r7, #20]
 8019716:	f001 fd8d 	bl	801b234 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801971a:	4b23      	ldr	r3, [pc, #140]	; (80197a8 <tcp_listen_input+0x1e4>)
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	89db      	ldrh	r3, [r3, #14]
 8019720:	b29a      	uxth	r2, r3
 8019722:	697b      	ldr	r3, [r7, #20]
 8019724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019728:	697b      	ldr	r3, [r7, #20]
 801972a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801972e:	697b      	ldr	r3, [r7, #20]
 8019730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	3304      	adds	r3, #4
 801973c:	4618      	mov	r0, r3
 801973e:	f7fa fc51 	bl	8013fe4 <ip4_route>
 8019742:	4601      	mov	r1, r0
 8019744:	697b      	ldr	r3, [r7, #20]
 8019746:	3304      	adds	r3, #4
 8019748:	461a      	mov	r2, r3
 801974a:	4620      	mov	r0, r4
 801974c:	f7ff fa32 	bl	8018bb4 <tcp_eff_send_mss_netif>
 8019750:	4603      	mov	r3, r0
 8019752:	461a      	mov	r2, r3
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019758:	2112      	movs	r1, #18
 801975a:	6978      	ldr	r0, [r7, #20]
 801975c:	f002 fc9a 	bl	801c094 <tcp_enqueue_flags>
 8019760:	4603      	mov	r3, r0
 8019762:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8019764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d004      	beq.n	8019776 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801976c:	2100      	movs	r1, #0
 801976e:	6978      	ldr	r0, [r7, #20]
 8019770:	f7fd fde0 	bl	8017334 <tcp_abandon>
      return;
 8019774:	e006      	b.n	8019784 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8019776:	6978      	ldr	r0, [r7, #20]
 8019778:	f002 fd7a 	bl	801c270 <tcp_output>
  return;
 801977c:	e001      	b.n	8019782 <tcp_listen_input+0x1be>
    return;
 801977e:	bf00      	nop
 8019780:	e000      	b.n	8019784 <tcp_listen_input+0x1c0>
  return;
 8019782:	bf00      	nop
}
 8019784:	371c      	adds	r7, #28
 8019786:	46bd      	mov	sp, r7
 8019788:	bd90      	pop	{r4, r7, pc}
 801978a:	bf00      	nop
 801978c:	2400525c 	.word	0x2400525c
 8019790:	080264d4 	.word	0x080264d4
 8019794:	080266f8 	.word	0x080266f8
 8019798:	0802654c 	.word	0x0802654c
 801979c:	24005254 	.word	0x24005254
 80197a0:	2400525a 	.word	0x2400525a
 80197a4:	24005250 	.word	0x24005250
 80197a8:	24005240 	.word	0x24005240
 80197ac:	24005b48 	.word	0x24005b48
 80197b0:	24005b4c 	.word	0x24005b4c
 80197b4:	24005b38 	.word	0x24005b38
 80197b8:	24008a28 	.word	0x24008a28
 80197bc:	24008a24 	.word	0x24008a24

080197c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b086      	sub	sp, #24
 80197c4:	af04      	add	r7, sp, #16
 80197c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80197c8:	4b2f      	ldr	r3, [pc, #188]	; (8019888 <tcp_timewait_input+0xc8>)
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	f003 0304 	and.w	r3, r3, #4
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d153      	bne.n	801987c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d106      	bne.n	80197e8 <tcp_timewait_input+0x28>
 80197da:	4b2c      	ldr	r3, [pc, #176]	; (801988c <tcp_timewait_input+0xcc>)
 80197dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80197e0:	492b      	ldr	r1, [pc, #172]	; (8019890 <tcp_timewait_input+0xd0>)
 80197e2:	482c      	ldr	r0, [pc, #176]	; (8019894 <tcp_timewait_input+0xd4>)
 80197e4:	f006 f966 	bl	801fab4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80197e8:	4b27      	ldr	r3, [pc, #156]	; (8019888 <tcp_timewait_input+0xc8>)
 80197ea:	781b      	ldrb	r3, [r3, #0]
 80197ec:	f003 0302 	and.w	r3, r3, #2
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d02a      	beq.n	801984a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80197f4:	4b28      	ldr	r3, [pc, #160]	; (8019898 <tcp_timewait_input+0xd8>)
 80197f6:	681a      	ldr	r2, [r3, #0]
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197fc:	1ad3      	subs	r3, r2, r3
 80197fe:	2b00      	cmp	r3, #0
 8019800:	db2d      	blt.n	801985e <tcp_timewait_input+0x9e>
 8019802:	4b25      	ldr	r3, [pc, #148]	; (8019898 <tcp_timewait_input+0xd8>)
 8019804:	681a      	ldr	r2, [r3, #0]
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801980a:	6879      	ldr	r1, [r7, #4]
 801980c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801980e:	440b      	add	r3, r1
 8019810:	1ad3      	subs	r3, r2, r3
 8019812:	2b00      	cmp	r3, #0
 8019814:	dc23      	bgt.n	801985e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019816:	4b21      	ldr	r3, [pc, #132]	; (801989c <tcp_timewait_input+0xdc>)
 8019818:	6819      	ldr	r1, [r3, #0]
 801981a:	4b21      	ldr	r3, [pc, #132]	; (80198a0 <tcp_timewait_input+0xe0>)
 801981c:	881b      	ldrh	r3, [r3, #0]
 801981e:	461a      	mov	r2, r3
 8019820:	4b1d      	ldr	r3, [pc, #116]	; (8019898 <tcp_timewait_input+0xd8>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019826:	4b1f      	ldr	r3, [pc, #124]	; (80198a4 <tcp_timewait_input+0xe4>)
 8019828:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801982a:	885b      	ldrh	r3, [r3, #2]
 801982c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801982e:	4a1d      	ldr	r2, [pc, #116]	; (80198a4 <tcp_timewait_input+0xe4>)
 8019830:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019832:	8812      	ldrh	r2, [r2, #0]
 8019834:	b292      	uxth	r2, r2
 8019836:	9202      	str	r2, [sp, #8]
 8019838:	9301      	str	r3, [sp, #4]
 801983a:	4b1b      	ldr	r3, [pc, #108]	; (80198a8 <tcp_timewait_input+0xe8>)
 801983c:	9300      	str	r3, [sp, #0]
 801983e:	4b1b      	ldr	r3, [pc, #108]	; (80198ac <tcp_timewait_input+0xec>)
 8019840:	4602      	mov	r2, r0
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f003 fac8 	bl	801cdd8 <tcp_rst>
      return;
 8019848:	e01b      	b.n	8019882 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801984a:	4b0f      	ldr	r3, [pc, #60]	; (8019888 <tcp_timewait_input+0xc8>)
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	f003 0301 	and.w	r3, r3, #1
 8019852:	2b00      	cmp	r3, #0
 8019854:	d003      	beq.n	801985e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8019856:	4b16      	ldr	r3, [pc, #88]	; (80198b0 <tcp_timewait_input+0xf0>)
 8019858:	681a      	ldr	r2, [r3, #0]
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801985e:	4b10      	ldr	r3, [pc, #64]	; (80198a0 <tcp_timewait_input+0xe0>)
 8019860:	881b      	ldrh	r3, [r3, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d00c      	beq.n	8019880 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	8b5b      	ldrh	r3, [r3, #26]
 801986a:	f043 0302 	orr.w	r3, r3, #2
 801986e:	b29a      	uxth	r2, r3
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	f002 fcfb 	bl	801c270 <tcp_output>
  }
  return;
 801987a:	e001      	b.n	8019880 <tcp_timewait_input+0xc0>
    return;
 801987c:	bf00      	nop
 801987e:	e000      	b.n	8019882 <tcp_timewait_input+0xc2>
  return;
 8019880:	bf00      	nop
}
 8019882:	3708      	adds	r7, #8
 8019884:	46bd      	mov	sp, r7
 8019886:	bd80      	pop	{r7, pc}
 8019888:	2400525c 	.word	0x2400525c
 801988c:	080264d4 	.word	0x080264d4
 8019890:	08026718 	.word	0x08026718
 8019894:	0802654c 	.word	0x0802654c
 8019898:	24005250 	.word	0x24005250
 801989c:	24005254 	.word	0x24005254
 80198a0:	2400525a 	.word	0x2400525a
 80198a4:	24005240 	.word	0x24005240
 80198a8:	24005b48 	.word	0x24005b48
 80198ac:	24005b4c 	.word	0x24005b4c
 80198b0:	24008a2c 	.word	0x24008a2c

080198b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80198b4:	b590      	push	{r4, r7, lr}
 80198b6:	b08d      	sub	sp, #52	; 0x34
 80198b8:	af04      	add	r7, sp, #16
 80198ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80198bc:	2300      	movs	r3, #0
 80198be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80198c0:	2300      	movs	r3, #0
 80198c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d106      	bne.n	80198d8 <tcp_process+0x24>
 80198ca:	4ba5      	ldr	r3, [pc, #660]	; (8019b60 <tcp_process+0x2ac>)
 80198cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80198d0:	49a4      	ldr	r1, [pc, #656]	; (8019b64 <tcp_process+0x2b0>)
 80198d2:	48a5      	ldr	r0, [pc, #660]	; (8019b68 <tcp_process+0x2b4>)
 80198d4:	f006 f8ee 	bl	801fab4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80198d8:	4ba4      	ldr	r3, [pc, #656]	; (8019b6c <tcp_process+0x2b8>)
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	f003 0304 	and.w	r3, r3, #4
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d04e      	beq.n	8019982 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	7d1b      	ldrb	r3, [r3, #20]
 80198e8:	2b02      	cmp	r3, #2
 80198ea:	d108      	bne.n	80198fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80198f0:	4b9f      	ldr	r3, [pc, #636]	; (8019b70 <tcp_process+0x2bc>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d123      	bne.n	8019940 <tcp_process+0x8c>
        acceptable = 1;
 80198f8:	2301      	movs	r3, #1
 80198fa:	76fb      	strb	r3, [r7, #27]
 80198fc:	e020      	b.n	8019940 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019902:	4b9c      	ldr	r3, [pc, #624]	; (8019b74 <tcp_process+0x2c0>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	429a      	cmp	r2, r3
 8019908:	d102      	bne.n	8019910 <tcp_process+0x5c>
        acceptable = 1;
 801990a:	2301      	movs	r3, #1
 801990c:	76fb      	strb	r3, [r7, #27]
 801990e:	e017      	b.n	8019940 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019910:	4b98      	ldr	r3, [pc, #608]	; (8019b74 <tcp_process+0x2c0>)
 8019912:	681a      	ldr	r2, [r3, #0]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019918:	1ad3      	subs	r3, r2, r3
 801991a:	2b00      	cmp	r3, #0
 801991c:	db10      	blt.n	8019940 <tcp_process+0x8c>
 801991e:	4b95      	ldr	r3, [pc, #596]	; (8019b74 <tcp_process+0x2c0>)
 8019920:	681a      	ldr	r2, [r3, #0]
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801992a:	440b      	add	r3, r1
 801992c:	1ad3      	subs	r3, r2, r3
 801992e:	2b00      	cmp	r3, #0
 8019930:	dc06      	bgt.n	8019940 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	8b5b      	ldrh	r3, [r3, #26]
 8019936:	f043 0302 	orr.w	r3, r3, #2
 801993a:	b29a      	uxth	r2, r3
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019940:	7efb      	ldrb	r3, [r7, #27]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d01b      	beq.n	801997e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	7d1b      	ldrb	r3, [r3, #20]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d106      	bne.n	801995c <tcp_process+0xa8>
 801994e:	4b84      	ldr	r3, [pc, #528]	; (8019b60 <tcp_process+0x2ac>)
 8019950:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019954:	4988      	ldr	r1, [pc, #544]	; (8019b78 <tcp_process+0x2c4>)
 8019956:	4884      	ldr	r0, [pc, #528]	; (8019b68 <tcp_process+0x2b4>)
 8019958:	f006 f8ac 	bl	801fab4 <iprintf>
      recv_flags |= TF_RESET;
 801995c:	4b87      	ldr	r3, [pc, #540]	; (8019b7c <tcp_process+0x2c8>)
 801995e:	781b      	ldrb	r3, [r3, #0]
 8019960:	f043 0308 	orr.w	r3, r3, #8
 8019964:	b2da      	uxtb	r2, r3
 8019966:	4b85      	ldr	r3, [pc, #532]	; (8019b7c <tcp_process+0x2c8>)
 8019968:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	8b5b      	ldrh	r3, [r3, #26]
 801996e:	f023 0301 	bic.w	r3, r3, #1
 8019972:	b29a      	uxth	r2, r3
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019978:	f06f 030d 	mvn.w	r3, #13
 801997c:	e37a      	b.n	801a074 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801997e:	2300      	movs	r3, #0
 8019980:	e378      	b.n	801a074 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019982:	4b7a      	ldr	r3, [pc, #488]	; (8019b6c <tcp_process+0x2b8>)
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	f003 0302 	and.w	r3, r3, #2
 801998a:	2b00      	cmp	r3, #0
 801998c:	d010      	beq.n	80199b0 <tcp_process+0xfc>
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	7d1b      	ldrb	r3, [r3, #20]
 8019992:	2b02      	cmp	r3, #2
 8019994:	d00c      	beq.n	80199b0 <tcp_process+0xfc>
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	7d1b      	ldrb	r3, [r3, #20]
 801999a:	2b03      	cmp	r3, #3
 801999c:	d008      	beq.n	80199b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	8b5b      	ldrh	r3, [r3, #26]
 80199a2:	f043 0302 	orr.w	r3, r3, #2
 80199a6:	b29a      	uxth	r2, r3
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80199ac:	2300      	movs	r3, #0
 80199ae:	e361      	b.n	801a074 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	8b5b      	ldrh	r3, [r3, #26]
 80199b4:	f003 0310 	and.w	r3, r3, #16
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d103      	bne.n	80199c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80199bc:	4b70      	ldr	r3, [pc, #448]	; (8019b80 <tcp_process+0x2cc>)
 80199be:	681a      	ldr	r2, [r3, #0]
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2200      	movs	r2, #0
 80199c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	2200      	movs	r2, #0
 80199d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80199d4:	6878      	ldr	r0, [r7, #4]
 80199d6:	f001 fc2d 	bl	801b234 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	7d1b      	ldrb	r3, [r3, #20]
 80199de:	3b02      	subs	r3, #2
 80199e0:	2b07      	cmp	r3, #7
 80199e2:	f200 8337 	bhi.w	801a054 <tcp_process+0x7a0>
 80199e6:	a201      	add	r2, pc, #4	; (adr r2, 80199ec <tcp_process+0x138>)
 80199e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ec:	08019a0d 	.word	0x08019a0d
 80199f0:	08019c3d 	.word	0x08019c3d
 80199f4:	08019db5 	.word	0x08019db5
 80199f8:	08019ddf 	.word	0x08019ddf
 80199fc:	08019f03 	.word	0x08019f03
 8019a00:	08019db5 	.word	0x08019db5
 8019a04:	08019f8f 	.word	0x08019f8f
 8019a08:	0801a01f 	.word	0x0801a01f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019a0c:	4b57      	ldr	r3, [pc, #348]	; (8019b6c <tcp_process+0x2b8>)
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	f003 0310 	and.w	r3, r3, #16
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	f000 80e4 	beq.w	8019be2 <tcp_process+0x32e>
 8019a1a:	4b54      	ldr	r3, [pc, #336]	; (8019b6c <tcp_process+0x2b8>)
 8019a1c:	781b      	ldrb	r3, [r3, #0]
 8019a1e:	f003 0302 	and.w	r3, r3, #2
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	f000 80dd 	beq.w	8019be2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a2c:	1c5a      	adds	r2, r3, #1
 8019a2e:	4b50      	ldr	r3, [pc, #320]	; (8019b70 <tcp_process+0x2bc>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	f040 80d5 	bne.w	8019be2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019a38:	4b4e      	ldr	r3, [pc, #312]	; (8019b74 <tcp_process+0x2c0>)
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	1c5a      	adds	r2, r3, #1
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019a4a:	4b49      	ldr	r3, [pc, #292]	; (8019b70 <tcp_process+0x2bc>)
 8019a4c:	681a      	ldr	r2, [r3, #0]
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8019a52:	4b4c      	ldr	r3, [pc, #304]	; (8019b84 <tcp_process+0x2d0>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	89db      	ldrh	r3, [r3, #14]
 8019a58:	b29a      	uxth	r2, r3
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019a6c:	4b41      	ldr	r3, [pc, #260]	; (8019b74 <tcp_process+0x2c0>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	1e5a      	subs	r2, r3, #1
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2204      	movs	r2, #4
 8019a7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	3304      	adds	r3, #4
 8019a84:	4618      	mov	r0, r3
 8019a86:	f7fa faad 	bl	8013fe4 <ip4_route>
 8019a8a:	4601      	mov	r1, r0
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	3304      	adds	r3, #4
 8019a90:	461a      	mov	r2, r3
 8019a92:	4620      	mov	r0, r4
 8019a94:	f7ff f88e 	bl	8018bb4 <tcp_eff_send_mss_netif>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019aa4:	009a      	lsls	r2, r3, #2
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019aaa:	005b      	lsls	r3, r3, #1
 8019aac:	f241 111c 	movw	r1, #4380	; 0x111c
 8019ab0:	428b      	cmp	r3, r1
 8019ab2:	bf38      	it	cc
 8019ab4:	460b      	movcc	r3, r1
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d204      	bcs.n	8019ac4 <tcp_process+0x210>
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019abe:	009b      	lsls	r3, r3, #2
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	e00d      	b.n	8019ae0 <tcp_process+0x22c>
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ac8:	005b      	lsls	r3, r3, #1
 8019aca:	f241 121c 	movw	r2, #4380	; 0x111c
 8019ace:	4293      	cmp	r3, r2
 8019ad0:	d904      	bls.n	8019adc <tcp_process+0x228>
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ad6:	005b      	lsls	r3, r3, #1
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	e001      	b.n	8019ae0 <tcp_process+0x22c>
 8019adc:	f241 131c 	movw	r3, #4380	; 0x111c
 8019ae0:	687a      	ldr	r2, [r7, #4]
 8019ae2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d106      	bne.n	8019afe <tcp_process+0x24a>
 8019af0:	4b1b      	ldr	r3, [pc, #108]	; (8019b60 <tcp_process+0x2ac>)
 8019af2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8019af6:	4924      	ldr	r1, [pc, #144]	; (8019b88 <tcp_process+0x2d4>)
 8019af8:	481b      	ldr	r0, [pc, #108]	; (8019b68 <tcp_process+0x2b4>)
 8019afa:	f005 ffdb 	bl	801fab4 <iprintf>
        --pcb->snd_queuelen;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b04:	3b01      	subs	r3, #1
 8019b06:	b29a      	uxth	r2, r3
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8019b14:	69fb      	ldr	r3, [r7, #28]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d111      	bne.n	8019b3e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d106      	bne.n	8019b34 <tcp_process+0x280>
 8019b26:	4b0e      	ldr	r3, [pc, #56]	; (8019b60 <tcp_process+0x2ac>)
 8019b28:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019b2c:	4917      	ldr	r1, [pc, #92]	; (8019b8c <tcp_process+0x2d8>)
 8019b2e:	480e      	ldr	r0, [pc, #56]	; (8019b68 <tcp_process+0x2b4>)
 8019b30:	f005 ffc0 	bl	801fab4 <iprintf>
          pcb->unsent = rseg->next;
 8019b34:	69fb      	ldr	r3, [r7, #28]
 8019b36:	681a      	ldr	r2, [r3, #0]
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8019b3c:	e003      	b.n	8019b46 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8019b3e:	69fb      	ldr	r3, [r7, #28]
 8019b40:	681a      	ldr	r2, [r3, #0]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8019b46:	69f8      	ldr	r0, [r7, #28]
 8019b48:	f7fe fc6f 	bl	801842a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d11d      	bne.n	8019b90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b5a:	861a      	strh	r2, [r3, #48]	; 0x30
 8019b5c:	e01f      	b.n	8019b9e <tcp_process+0x2ea>
 8019b5e:	bf00      	nop
 8019b60:	080264d4 	.word	0x080264d4
 8019b64:	08026738 	.word	0x08026738
 8019b68:	0802654c 	.word	0x0802654c
 8019b6c:	2400525c 	.word	0x2400525c
 8019b70:	24005254 	.word	0x24005254
 8019b74:	24005250 	.word	0x24005250
 8019b78:	08026754 	.word	0x08026754
 8019b7c:	2400525d 	.word	0x2400525d
 8019b80:	24008a2c 	.word	0x24008a2c
 8019b84:	24005240 	.word	0x24005240
 8019b88:	08026774 	.word	0x08026774
 8019b8c:	0802678c 	.word	0x0802678c
        } else {
          pcb->rtime = 0;
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2200      	movs	r2, #0
 8019b94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d00a      	beq.n	8019bbe <tcp_process+0x30a>
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019bae:	687a      	ldr	r2, [r7, #4]
 8019bb0:	6910      	ldr	r0, [r2, #16]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	6879      	ldr	r1, [r7, #4]
 8019bb6:	4798      	blx	r3
 8019bb8:	4603      	mov	r3, r0
 8019bba:	76bb      	strb	r3, [r7, #26]
 8019bbc:	e001      	b.n	8019bc2 <tcp_process+0x30e>
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8019bc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019bc6:	f113 0f0d 	cmn.w	r3, #13
 8019bca:	d102      	bne.n	8019bd2 <tcp_process+0x31e>
          return ERR_ABRT;
 8019bcc:	f06f 030c 	mvn.w	r3, #12
 8019bd0:	e250      	b.n	801a074 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	8b5b      	ldrh	r3, [r3, #26]
 8019bd6:	f043 0302 	orr.w	r3, r3, #2
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019be0:	e23a      	b.n	801a058 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8019be2:	4b9d      	ldr	r3, [pc, #628]	; (8019e58 <tcp_process+0x5a4>)
 8019be4:	781b      	ldrb	r3, [r3, #0]
 8019be6:	f003 0310 	and.w	r3, r3, #16
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	f000 8234 	beq.w	801a058 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019bf0:	4b9a      	ldr	r3, [pc, #616]	; (8019e5c <tcp_process+0x5a8>)
 8019bf2:	6819      	ldr	r1, [r3, #0]
 8019bf4:	4b9a      	ldr	r3, [pc, #616]	; (8019e60 <tcp_process+0x5ac>)
 8019bf6:	881b      	ldrh	r3, [r3, #0]
 8019bf8:	461a      	mov	r2, r3
 8019bfa:	4b9a      	ldr	r3, [pc, #616]	; (8019e64 <tcp_process+0x5b0>)
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c00:	4b99      	ldr	r3, [pc, #612]	; (8019e68 <tcp_process+0x5b4>)
 8019c02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c04:	885b      	ldrh	r3, [r3, #2]
 8019c06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c08:	4a97      	ldr	r2, [pc, #604]	; (8019e68 <tcp_process+0x5b4>)
 8019c0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c0c:	8812      	ldrh	r2, [r2, #0]
 8019c0e:	b292      	uxth	r2, r2
 8019c10:	9202      	str	r2, [sp, #8]
 8019c12:	9301      	str	r3, [sp, #4]
 8019c14:	4b95      	ldr	r3, [pc, #596]	; (8019e6c <tcp_process+0x5b8>)
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	4b95      	ldr	r3, [pc, #596]	; (8019e70 <tcp_process+0x5bc>)
 8019c1a:	4602      	mov	r2, r0
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f003 f8db 	bl	801cdd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019c28:	2b05      	cmp	r3, #5
 8019c2a:	f200 8215 	bhi.w	801a058 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2200      	movs	r2, #0
 8019c32:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019c34:	6878      	ldr	r0, [r7, #4]
 8019c36:	f002 fea5 	bl	801c984 <tcp_rexmit_rto>
      break;
 8019c3a:	e20d      	b.n	801a058 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019c3c:	4b86      	ldr	r3, [pc, #536]	; (8019e58 <tcp_process+0x5a4>)
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	f003 0310 	and.w	r3, r3, #16
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	f000 80a1 	beq.w	8019d8c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019c4a:	4b84      	ldr	r3, [pc, #528]	; (8019e5c <tcp_process+0x5a8>)
 8019c4c:	681a      	ldr	r2, [r3, #0]
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c52:	1ad3      	subs	r3, r2, r3
 8019c54:	3b01      	subs	r3, #1
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	db7e      	blt.n	8019d58 <tcp_process+0x4a4>
 8019c5a:	4b80      	ldr	r3, [pc, #512]	; (8019e5c <tcp_process+0x5a8>)
 8019c5c:	681a      	ldr	r2, [r3, #0]
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c62:	1ad3      	subs	r3, r2, r3
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	dc77      	bgt.n	8019d58 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2204      	movs	r2, #4
 8019c6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d102      	bne.n	8019c7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019c76:	23fa      	movs	r3, #250	; 0xfa
 8019c78:	76bb      	strb	r3, [r7, #26]
 8019c7a:	e01d      	b.n	8019cb8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c80:	699b      	ldr	r3, [r3, #24]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d106      	bne.n	8019c94 <tcp_process+0x3e0>
 8019c86:	4b7b      	ldr	r3, [pc, #492]	; (8019e74 <tcp_process+0x5c0>)
 8019c88:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019c8c:	497a      	ldr	r1, [pc, #488]	; (8019e78 <tcp_process+0x5c4>)
 8019c8e:	487b      	ldr	r0, [pc, #492]	; (8019e7c <tcp_process+0x5c8>)
 8019c90:	f005 ff10 	bl	801fab4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c98:	699b      	ldr	r3, [r3, #24]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d00a      	beq.n	8019cb4 <tcp_process+0x400>
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019ca2:	699b      	ldr	r3, [r3, #24]
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	6910      	ldr	r0, [r2, #16]
 8019ca8:	2200      	movs	r2, #0
 8019caa:	6879      	ldr	r1, [r7, #4]
 8019cac:	4798      	blx	r3
 8019cae:	4603      	mov	r3, r0
 8019cb0:	76bb      	strb	r3, [r7, #26]
 8019cb2:	e001      	b.n	8019cb8 <tcp_process+0x404>
 8019cb4:	23f0      	movs	r3, #240	; 0xf0
 8019cb6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019cb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d00a      	beq.n	8019cd6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019cc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019cc4:	f113 0f0d 	cmn.w	r3, #13
 8019cc8:	d002      	beq.n	8019cd0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019cca:	6878      	ldr	r0, [r7, #4]
 8019ccc:	f7fd fbf0 	bl	80174b0 <tcp_abort>
            }
            return ERR_ABRT;
 8019cd0:	f06f 030c 	mvn.w	r3, #12
 8019cd4:	e1ce      	b.n	801a074 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	f000 fae0 	bl	801a29c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019cdc:	4b68      	ldr	r3, [pc, #416]	; (8019e80 <tcp_process+0x5cc>)
 8019cde:	881b      	ldrh	r3, [r3, #0]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d005      	beq.n	8019cf0 <tcp_process+0x43c>
            recv_acked--;
 8019ce4:	4b66      	ldr	r3, [pc, #408]	; (8019e80 <tcp_process+0x5cc>)
 8019ce6:	881b      	ldrh	r3, [r3, #0]
 8019ce8:	3b01      	subs	r3, #1
 8019cea:	b29a      	uxth	r2, r3
 8019cec:	4b64      	ldr	r3, [pc, #400]	; (8019e80 <tcp_process+0x5cc>)
 8019cee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019cf4:	009a      	lsls	r2, r3, #2
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019cfa:	005b      	lsls	r3, r3, #1
 8019cfc:	f241 111c 	movw	r1, #4380	; 0x111c
 8019d00:	428b      	cmp	r3, r1
 8019d02:	bf38      	it	cc
 8019d04:	460b      	movcc	r3, r1
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d204      	bcs.n	8019d14 <tcp_process+0x460>
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	b29b      	uxth	r3, r3
 8019d12:	e00d      	b.n	8019d30 <tcp_process+0x47c>
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d18:	005b      	lsls	r3, r3, #1
 8019d1a:	f241 121c 	movw	r2, #4380	; 0x111c
 8019d1e:	4293      	cmp	r3, r2
 8019d20:	d904      	bls.n	8019d2c <tcp_process+0x478>
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d26:	005b      	lsls	r3, r3, #1
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	e001      	b.n	8019d30 <tcp_process+0x47c>
 8019d2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019d36:	4b53      	ldr	r3, [pc, #332]	; (8019e84 <tcp_process+0x5d0>)
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	f003 0320 	and.w	r3, r3, #32
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d037      	beq.n	8019db2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	8b5b      	ldrh	r3, [r3, #26]
 8019d46:	f043 0302 	orr.w	r3, r3, #2
 8019d4a:	b29a      	uxth	r2, r3
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2207      	movs	r2, #7
 8019d54:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019d56:	e02c      	b.n	8019db2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d58:	4b40      	ldr	r3, [pc, #256]	; (8019e5c <tcp_process+0x5a8>)
 8019d5a:	6819      	ldr	r1, [r3, #0]
 8019d5c:	4b40      	ldr	r3, [pc, #256]	; (8019e60 <tcp_process+0x5ac>)
 8019d5e:	881b      	ldrh	r3, [r3, #0]
 8019d60:	461a      	mov	r2, r3
 8019d62:	4b40      	ldr	r3, [pc, #256]	; (8019e64 <tcp_process+0x5b0>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019d68:	4b3f      	ldr	r3, [pc, #252]	; (8019e68 <tcp_process+0x5b4>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d6c:	885b      	ldrh	r3, [r3, #2]
 8019d6e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019d70:	4a3d      	ldr	r2, [pc, #244]	; (8019e68 <tcp_process+0x5b4>)
 8019d72:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d74:	8812      	ldrh	r2, [r2, #0]
 8019d76:	b292      	uxth	r2, r2
 8019d78:	9202      	str	r2, [sp, #8]
 8019d7a:	9301      	str	r3, [sp, #4]
 8019d7c:	4b3b      	ldr	r3, [pc, #236]	; (8019e6c <tcp_process+0x5b8>)
 8019d7e:	9300      	str	r3, [sp, #0]
 8019d80:	4b3b      	ldr	r3, [pc, #236]	; (8019e70 <tcp_process+0x5bc>)
 8019d82:	4602      	mov	r2, r0
 8019d84:	6878      	ldr	r0, [r7, #4]
 8019d86:	f003 f827 	bl	801cdd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019d8a:	e167      	b.n	801a05c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019d8c:	4b32      	ldr	r3, [pc, #200]	; (8019e58 <tcp_process+0x5a4>)
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	f003 0302 	and.w	r3, r3, #2
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	f000 8161 	beq.w	801a05c <tcp_process+0x7a8>
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d9e:	1e5a      	subs	r2, r3, #1
 8019da0:	4b30      	ldr	r3, [pc, #192]	; (8019e64 <tcp_process+0x5b0>)
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	f040 8159 	bne.w	801a05c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f002 fe0c 	bl	801c9c8 <tcp_rexmit>
      break;
 8019db0:	e154      	b.n	801a05c <tcp_process+0x7a8>
 8019db2:	e153      	b.n	801a05c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	f000 fa71 	bl	801a29c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019dba:	4b32      	ldr	r3, [pc, #200]	; (8019e84 <tcp_process+0x5d0>)
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	f003 0320 	and.w	r3, r3, #32
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	f000 814c 	beq.w	801a060 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	8b5b      	ldrh	r3, [r3, #26]
 8019dcc:	f043 0302 	orr.w	r3, r3, #2
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2207      	movs	r2, #7
 8019dda:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019ddc:	e140      	b.n	801a060 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019dde:	6878      	ldr	r0, [r7, #4]
 8019de0:	f000 fa5c 	bl	801a29c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019de4:	4b27      	ldr	r3, [pc, #156]	; (8019e84 <tcp_process+0x5d0>)
 8019de6:	781b      	ldrb	r3, [r3, #0]
 8019de8:	f003 0320 	and.w	r3, r3, #32
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d071      	beq.n	8019ed4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019df0:	4b19      	ldr	r3, [pc, #100]	; (8019e58 <tcp_process+0x5a4>)
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	f003 0310 	and.w	r3, r3, #16
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d060      	beq.n	8019ebe <tcp_process+0x60a>
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e00:	4b16      	ldr	r3, [pc, #88]	; (8019e5c <tcp_process+0x5a8>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d15a      	bne.n	8019ebe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d156      	bne.n	8019ebe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	8b5b      	ldrh	r3, [r3, #26]
 8019e14:	f043 0302 	orr.w	r3, r3, #2
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8019e1e:	6878      	ldr	r0, [r7, #4]
 8019e20:	f7fe fdbe 	bl	80189a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019e24:	4b18      	ldr	r3, [pc, #96]	; (8019e88 <tcp_process+0x5d4>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	687a      	ldr	r2, [r7, #4]
 8019e2a:	429a      	cmp	r2, r3
 8019e2c:	d105      	bne.n	8019e3a <tcp_process+0x586>
 8019e2e:	4b16      	ldr	r3, [pc, #88]	; (8019e88 <tcp_process+0x5d4>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	4a14      	ldr	r2, [pc, #80]	; (8019e88 <tcp_process+0x5d4>)
 8019e36:	6013      	str	r3, [r2, #0]
 8019e38:	e02e      	b.n	8019e98 <tcp_process+0x5e4>
 8019e3a:	4b13      	ldr	r3, [pc, #76]	; (8019e88 <tcp_process+0x5d4>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	617b      	str	r3, [r7, #20]
 8019e40:	e027      	b.n	8019e92 <tcp_process+0x5de>
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	68db      	ldr	r3, [r3, #12]
 8019e46:	687a      	ldr	r2, [r7, #4]
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d11f      	bne.n	8019e8c <tcp_process+0x5d8>
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	68da      	ldr	r2, [r3, #12]
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	60da      	str	r2, [r3, #12]
 8019e54:	e020      	b.n	8019e98 <tcp_process+0x5e4>
 8019e56:	bf00      	nop
 8019e58:	2400525c 	.word	0x2400525c
 8019e5c:	24005254 	.word	0x24005254
 8019e60:	2400525a 	.word	0x2400525a
 8019e64:	24005250 	.word	0x24005250
 8019e68:	24005240 	.word	0x24005240
 8019e6c:	24005b48 	.word	0x24005b48
 8019e70:	24005b4c 	.word	0x24005b4c
 8019e74:	080264d4 	.word	0x080264d4
 8019e78:	080267a0 	.word	0x080267a0
 8019e7c:	0802654c 	.word	0x0802654c
 8019e80:	24005258 	.word	0x24005258
 8019e84:	2400525d 	.word	0x2400525d
 8019e88:	24008a28 	.word	0x24008a28
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	617b      	str	r3, [r7, #20]
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d1d4      	bne.n	8019e42 <tcp_process+0x58e>
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	60da      	str	r2, [r3, #12]
 8019e9e:	4b77      	ldr	r3, [pc, #476]	; (801a07c <tcp_process+0x7c8>)
 8019ea0:	2201      	movs	r2, #1
 8019ea2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	220a      	movs	r2, #10
 8019ea8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019eaa:	4b75      	ldr	r3, [pc, #468]	; (801a080 <tcp_process+0x7cc>)
 8019eac:	681a      	ldr	r2, [r3, #0]
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	60da      	str	r2, [r3, #12]
 8019eb2:	4a73      	ldr	r2, [pc, #460]	; (801a080 <tcp_process+0x7cc>)
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	6013      	str	r3, [r2, #0]
 8019eb8:	f003 f950 	bl	801d15c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019ebc:	e0d2      	b.n	801a064 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	8b5b      	ldrh	r3, [r3, #26]
 8019ec2:	f043 0302 	orr.w	r3, r3, #2
 8019ec6:	b29a      	uxth	r2, r3
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2208      	movs	r2, #8
 8019ed0:	751a      	strb	r2, [r3, #20]
      break;
 8019ed2:	e0c7      	b.n	801a064 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019ed4:	4b6b      	ldr	r3, [pc, #428]	; (801a084 <tcp_process+0x7d0>)
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	f003 0310 	and.w	r3, r3, #16
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	f000 80c1 	beq.w	801a064 <tcp_process+0x7b0>
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019ee6:	4b68      	ldr	r3, [pc, #416]	; (801a088 <tcp_process+0x7d4>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	429a      	cmp	r2, r3
 8019eec:	f040 80ba 	bne.w	801a064 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	f040 80b5 	bne.w	801a064 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	2206      	movs	r2, #6
 8019efe:	751a      	strb	r2, [r3, #20]
      break;
 8019f00:	e0b0      	b.n	801a064 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	f000 f9ca 	bl	801a29c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019f08:	4b60      	ldr	r3, [pc, #384]	; (801a08c <tcp_process+0x7d8>)
 8019f0a:	781b      	ldrb	r3, [r3, #0]
 8019f0c:	f003 0320 	and.w	r3, r3, #32
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f000 80a9 	beq.w	801a068 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	8b5b      	ldrh	r3, [r3, #26]
 8019f1a:	f043 0302 	orr.w	r3, r3, #2
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019f24:	6878      	ldr	r0, [r7, #4]
 8019f26:	f7fe fd3b 	bl	80189a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019f2a:	4b59      	ldr	r3, [pc, #356]	; (801a090 <tcp_process+0x7dc>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	429a      	cmp	r2, r3
 8019f32:	d105      	bne.n	8019f40 <tcp_process+0x68c>
 8019f34:	4b56      	ldr	r3, [pc, #344]	; (801a090 <tcp_process+0x7dc>)
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	68db      	ldr	r3, [r3, #12]
 8019f3a:	4a55      	ldr	r2, [pc, #340]	; (801a090 <tcp_process+0x7dc>)
 8019f3c:	6013      	str	r3, [r2, #0]
 8019f3e:	e013      	b.n	8019f68 <tcp_process+0x6b4>
 8019f40:	4b53      	ldr	r3, [pc, #332]	; (801a090 <tcp_process+0x7dc>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	613b      	str	r3, [r7, #16]
 8019f46:	e00c      	b.n	8019f62 <tcp_process+0x6ae>
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	687a      	ldr	r2, [r7, #4]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d104      	bne.n	8019f5c <tcp_process+0x6a8>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	68da      	ldr	r2, [r3, #12]
 8019f56:	693b      	ldr	r3, [r7, #16]
 8019f58:	60da      	str	r2, [r3, #12]
 8019f5a:	e005      	b.n	8019f68 <tcp_process+0x6b4>
 8019f5c:	693b      	ldr	r3, [r7, #16]
 8019f5e:	68db      	ldr	r3, [r3, #12]
 8019f60:	613b      	str	r3, [r7, #16]
 8019f62:	693b      	ldr	r3, [r7, #16]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d1ef      	bne.n	8019f48 <tcp_process+0x694>
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	60da      	str	r2, [r3, #12]
 8019f6e:	4b43      	ldr	r3, [pc, #268]	; (801a07c <tcp_process+0x7c8>)
 8019f70:	2201      	movs	r2, #1
 8019f72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	220a      	movs	r2, #10
 8019f78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019f7a:	4b41      	ldr	r3, [pc, #260]	; (801a080 <tcp_process+0x7cc>)
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	60da      	str	r2, [r3, #12]
 8019f82:	4a3f      	ldr	r2, [pc, #252]	; (801a080 <tcp_process+0x7cc>)
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	6013      	str	r3, [r2, #0]
 8019f88:	f003 f8e8 	bl	801d15c <tcp_timer_needed>
      }
      break;
 8019f8c:	e06c      	b.n	801a068 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019f8e:	6878      	ldr	r0, [r7, #4]
 8019f90:	f000 f984 	bl	801a29c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019f94:	4b3b      	ldr	r3, [pc, #236]	; (801a084 <tcp_process+0x7d0>)
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	f003 0310 	and.w	r3, r3, #16
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d065      	beq.n	801a06c <tcp_process+0x7b8>
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019fa4:	4b38      	ldr	r3, [pc, #224]	; (801a088 <tcp_process+0x7d4>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	d15f      	bne.n	801a06c <tcp_process+0x7b8>
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d15b      	bne.n	801a06c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019fb4:	6878      	ldr	r0, [r7, #4]
 8019fb6:	f7fe fcf3 	bl	80189a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019fba:	4b35      	ldr	r3, [pc, #212]	; (801a090 <tcp_process+0x7dc>)
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d105      	bne.n	8019fd0 <tcp_process+0x71c>
 8019fc4:	4b32      	ldr	r3, [pc, #200]	; (801a090 <tcp_process+0x7dc>)
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	68db      	ldr	r3, [r3, #12]
 8019fca:	4a31      	ldr	r2, [pc, #196]	; (801a090 <tcp_process+0x7dc>)
 8019fcc:	6013      	str	r3, [r2, #0]
 8019fce:	e013      	b.n	8019ff8 <tcp_process+0x744>
 8019fd0:	4b2f      	ldr	r3, [pc, #188]	; (801a090 <tcp_process+0x7dc>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	60fb      	str	r3, [r7, #12]
 8019fd6:	e00c      	b.n	8019ff2 <tcp_process+0x73e>
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	68db      	ldr	r3, [r3, #12]
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	429a      	cmp	r2, r3
 8019fe0:	d104      	bne.n	8019fec <tcp_process+0x738>
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	68da      	ldr	r2, [r3, #12]
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	60da      	str	r2, [r3, #12]
 8019fea:	e005      	b.n	8019ff8 <tcp_process+0x744>
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	68db      	ldr	r3, [r3, #12]
 8019ff0:	60fb      	str	r3, [r7, #12]
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d1ef      	bne.n	8019fd8 <tcp_process+0x724>
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	60da      	str	r2, [r3, #12]
 8019ffe:	4b1f      	ldr	r3, [pc, #124]	; (801a07c <tcp_process+0x7c8>)
 801a000:	2201      	movs	r2, #1
 801a002:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	220a      	movs	r2, #10
 801a008:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a00a:	4b1d      	ldr	r3, [pc, #116]	; (801a080 <tcp_process+0x7cc>)
 801a00c:	681a      	ldr	r2, [r3, #0]
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	60da      	str	r2, [r3, #12]
 801a012:	4a1b      	ldr	r2, [pc, #108]	; (801a080 <tcp_process+0x7cc>)
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6013      	str	r3, [r2, #0]
 801a018:	f003 f8a0 	bl	801d15c <tcp_timer_needed>
      }
      break;
 801a01c:	e026      	b.n	801a06c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801a01e:	6878      	ldr	r0, [r7, #4]
 801a020:	f000 f93c 	bl	801a29c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a024:	4b17      	ldr	r3, [pc, #92]	; (801a084 <tcp_process+0x7d0>)
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	f003 0310 	and.w	r3, r3, #16
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d01f      	beq.n	801a070 <tcp_process+0x7bc>
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a034:	4b14      	ldr	r3, [pc, #80]	; (801a088 <tcp_process+0x7d4>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	429a      	cmp	r2, r3
 801a03a:	d119      	bne.n	801a070 <tcp_process+0x7bc>
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a040:	2b00      	cmp	r3, #0
 801a042:	d115      	bne.n	801a070 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801a044:	4b11      	ldr	r3, [pc, #68]	; (801a08c <tcp_process+0x7d8>)
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	f043 0310 	orr.w	r3, r3, #16
 801a04c:	b2da      	uxtb	r2, r3
 801a04e:	4b0f      	ldr	r3, [pc, #60]	; (801a08c <tcp_process+0x7d8>)
 801a050:	701a      	strb	r2, [r3, #0]
      }
      break;
 801a052:	e00d      	b.n	801a070 <tcp_process+0x7bc>
    default:
      break;
 801a054:	bf00      	nop
 801a056:	e00c      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a058:	bf00      	nop
 801a05a:	e00a      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a05c:	bf00      	nop
 801a05e:	e008      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a060:	bf00      	nop
 801a062:	e006      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a064:	bf00      	nop
 801a066:	e004      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a068:	bf00      	nop
 801a06a:	e002      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a06c:	bf00      	nop
 801a06e:	e000      	b.n	801a072 <tcp_process+0x7be>
      break;
 801a070:	bf00      	nop
  }
  return ERR_OK;
 801a072:	2300      	movs	r3, #0
}
 801a074:	4618      	mov	r0, r3
 801a076:	3724      	adds	r7, #36	; 0x24
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd90      	pop	{r4, r7, pc}
 801a07c:	24008a24 	.word	0x24008a24
 801a080:	24008a38 	.word	0x24008a38
 801a084:	2400525c 	.word	0x2400525c
 801a088:	24005254 	.word	0x24005254
 801a08c:	2400525d 	.word	0x2400525d
 801a090:	24008a28 	.word	0x24008a28

0801a094 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801a094:	b590      	push	{r4, r7, lr}
 801a096:	b085      	sub	sp, #20
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
 801a09c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d106      	bne.n	801a0b2 <tcp_oos_insert_segment+0x1e>
 801a0a4:	4b3b      	ldr	r3, [pc, #236]	; (801a194 <tcp_oos_insert_segment+0x100>)
 801a0a6:	f240 421f 	movw	r2, #1055	; 0x41f
 801a0aa:	493b      	ldr	r1, [pc, #236]	; (801a198 <tcp_oos_insert_segment+0x104>)
 801a0ac:	483b      	ldr	r0, [pc, #236]	; (801a19c <tcp_oos_insert_segment+0x108>)
 801a0ae:	f005 fd01 	bl	801fab4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	68db      	ldr	r3, [r3, #12]
 801a0b6:	899b      	ldrh	r3, [r3, #12]
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	f7f8 fcbc 	bl	8012a38 <lwip_htons>
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	b2db      	uxtb	r3, r3
 801a0c4:	f003 0301 	and.w	r3, r3, #1
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d028      	beq.n	801a11e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801a0cc:	6838      	ldr	r0, [r7, #0]
 801a0ce:	f7fe f997 	bl	8018400 <tcp_segs_free>
    next = NULL;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	603b      	str	r3, [r7, #0]
 801a0d6:	e056      	b.n	801a186 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	68db      	ldr	r3, [r3, #12]
 801a0dc:	899b      	ldrh	r3, [r3, #12]
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f7f8 fca9 	bl	8012a38 <lwip_htons>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	b2db      	uxtb	r3, r3
 801a0ea:	f003 0301 	and.w	r3, r3, #1
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d00d      	beq.n	801a10e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	68db      	ldr	r3, [r3, #12]
 801a0f6:	899b      	ldrh	r3, [r3, #12]
 801a0f8:	b29c      	uxth	r4, r3
 801a0fa:	2001      	movs	r0, #1
 801a0fc:	f7f8 fc9c 	bl	8012a38 <lwip_htons>
 801a100:	4603      	mov	r3, r0
 801a102:	461a      	mov	r2, r3
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	68db      	ldr	r3, [r3, #12]
 801a108:	4322      	orrs	r2, r4
 801a10a:	b292      	uxth	r2, r2
 801a10c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801a112:	683b      	ldr	r3, [r7, #0]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801a118:	68f8      	ldr	r0, [r7, #12]
 801a11a:	f7fe f986 	bl	801842a <tcp_seg_free>
    while (next &&
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d00e      	beq.n	801a142 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	891b      	ldrh	r3, [r3, #8]
 801a128:	461a      	mov	r2, r3
 801a12a:	4b1d      	ldr	r3, [pc, #116]	; (801a1a0 <tcp_oos_insert_segment+0x10c>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	441a      	add	r2, r3
 801a130:	683b      	ldr	r3, [r7, #0]
 801a132:	68db      	ldr	r3, [r3, #12]
 801a134:	685b      	ldr	r3, [r3, #4]
 801a136:	6839      	ldr	r1, [r7, #0]
 801a138:	8909      	ldrh	r1, [r1, #8]
 801a13a:	440b      	add	r3, r1
 801a13c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801a13e:	2b00      	cmp	r3, #0
 801a140:	daca      	bge.n	801a0d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d01e      	beq.n	801a186 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	891b      	ldrh	r3, [r3, #8]
 801a14c:	461a      	mov	r2, r3
 801a14e:	4b14      	ldr	r3, [pc, #80]	; (801a1a0 <tcp_oos_insert_segment+0x10c>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	441a      	add	r2, r3
 801a154:	683b      	ldr	r3, [r7, #0]
 801a156:	68db      	ldr	r3, [r3, #12]
 801a158:	685b      	ldr	r3, [r3, #4]
 801a15a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	dd12      	ble.n	801a186 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	68db      	ldr	r3, [r3, #12]
 801a164:	685b      	ldr	r3, [r3, #4]
 801a166:	b29a      	uxth	r2, r3
 801a168:	4b0d      	ldr	r3, [pc, #52]	; (801a1a0 <tcp_oos_insert_segment+0x10c>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	1ad3      	subs	r3, r2, r3
 801a170:	b29a      	uxth	r2, r3
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	685a      	ldr	r2, [r3, #4]
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	891b      	ldrh	r3, [r3, #8]
 801a17e:	4619      	mov	r1, r3
 801a180:	4610      	mov	r0, r2
 801a182:	f7fc f9cf 	bl	8016524 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	683a      	ldr	r2, [r7, #0]
 801a18a:	601a      	str	r2, [r3, #0]
}
 801a18c:	bf00      	nop
 801a18e:	3714      	adds	r7, #20
 801a190:	46bd      	mov	sp, r7
 801a192:	bd90      	pop	{r4, r7, pc}
 801a194:	080264d4 	.word	0x080264d4
 801a198:	080267c0 	.word	0x080267c0
 801a19c:	0802654c 	.word	0x0802654c
 801a1a0:	24005250 	.word	0x24005250

0801a1a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801a1a4:	b5b0      	push	{r4, r5, r7, lr}
 801a1a6:	b086      	sub	sp, #24
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	60f8      	str	r0, [r7, #12]
 801a1ac:	60b9      	str	r1, [r7, #8]
 801a1ae:	607a      	str	r2, [r7, #4]
 801a1b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801a1b2:	e03e      	b.n	801a232 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801a1be:	697b      	ldr	r3, [r7, #20]
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7fc fbbc 	bl	8016940 <pbuf_clen>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a1d2:	8a7a      	ldrh	r2, [r7, #18]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d906      	bls.n	801a1e6 <tcp_free_acked_segments+0x42>
 801a1d8:	4b2a      	ldr	r3, [pc, #168]	; (801a284 <tcp_free_acked_segments+0xe0>)
 801a1da:	f240 4257 	movw	r2, #1111	; 0x457
 801a1de:	492a      	ldr	r1, [pc, #168]	; (801a288 <tcp_free_acked_segments+0xe4>)
 801a1e0:	482a      	ldr	r0, [pc, #168]	; (801a28c <tcp_free_acked_segments+0xe8>)
 801a1e2:	f005 fc67 	bl	801fab4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801a1ec:	8a7b      	ldrh	r3, [r7, #18]
 801a1ee:	1ad3      	subs	r3, r2, r3
 801a1f0:	b29a      	uxth	r2, r3
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	891a      	ldrh	r2, [r3, #8]
 801a1fc:	4b24      	ldr	r3, [pc, #144]	; (801a290 <tcp_free_acked_segments+0xec>)
 801a1fe:	881b      	ldrh	r3, [r3, #0]
 801a200:	4413      	add	r3, r2
 801a202:	b29a      	uxth	r2, r3
 801a204:	4b22      	ldr	r3, [pc, #136]	; (801a290 <tcp_free_acked_segments+0xec>)
 801a206:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801a208:	6978      	ldr	r0, [r7, #20]
 801a20a:	f7fe f90e 	bl	801842a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a214:	2b00      	cmp	r3, #0
 801a216:	d00c      	beq.n	801a232 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d109      	bne.n	801a232 <tcp_free_acked_segments+0x8e>
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d106      	bne.n	801a232 <tcp_free_acked_segments+0x8e>
 801a224:	4b17      	ldr	r3, [pc, #92]	; (801a284 <tcp_free_acked_segments+0xe0>)
 801a226:	f240 4261 	movw	r2, #1121	; 0x461
 801a22a:	491a      	ldr	r1, [pc, #104]	; (801a294 <tcp_free_acked_segments+0xf0>)
 801a22c:	4817      	ldr	r0, [pc, #92]	; (801a28c <tcp_free_acked_segments+0xe8>)
 801a22e:	f005 fc41 	bl	801fab4 <iprintf>
  while (seg_list != NULL &&
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d020      	beq.n	801a27a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a238:	68bb      	ldr	r3, [r7, #8]
 801a23a:	68db      	ldr	r3, [r3, #12]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	4618      	mov	r0, r3
 801a240:	f7f8 fc0f 	bl	8012a62 <lwip_htonl>
 801a244:	4604      	mov	r4, r0
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	891b      	ldrh	r3, [r3, #8]
 801a24a:	461d      	mov	r5, r3
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	68db      	ldr	r3, [r3, #12]
 801a250:	899b      	ldrh	r3, [r3, #12]
 801a252:	b29b      	uxth	r3, r3
 801a254:	4618      	mov	r0, r3
 801a256:	f7f8 fbef 	bl	8012a38 <lwip_htons>
 801a25a:	4603      	mov	r3, r0
 801a25c:	b2db      	uxtb	r3, r3
 801a25e:	f003 0303 	and.w	r3, r3, #3
 801a262:	2b00      	cmp	r3, #0
 801a264:	d001      	beq.n	801a26a <tcp_free_acked_segments+0xc6>
 801a266:	2301      	movs	r3, #1
 801a268:	e000      	b.n	801a26c <tcp_free_acked_segments+0xc8>
 801a26a:	2300      	movs	r3, #0
 801a26c:	442b      	add	r3, r5
 801a26e:	18e2      	adds	r2, r4, r3
 801a270:	4b09      	ldr	r3, [pc, #36]	; (801a298 <tcp_free_acked_segments+0xf4>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801a276:	2b00      	cmp	r3, #0
 801a278:	dd9c      	ble.n	801a1b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801a27a:	68bb      	ldr	r3, [r7, #8]
}
 801a27c:	4618      	mov	r0, r3
 801a27e:	3718      	adds	r7, #24
 801a280:	46bd      	mov	sp, r7
 801a282:	bdb0      	pop	{r4, r5, r7, pc}
 801a284:	080264d4 	.word	0x080264d4
 801a288:	080267e8 	.word	0x080267e8
 801a28c:	0802654c 	.word	0x0802654c
 801a290:	24005258 	.word	0x24005258
 801a294:	08026810 	.word	0x08026810
 801a298:	24005254 	.word	0x24005254

0801a29c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801a29c:	b5b0      	push	{r4, r5, r7, lr}
 801a29e:	b094      	sub	sp, #80	; 0x50
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d106      	bne.n	801a2bc <tcp_receive+0x20>
 801a2ae:	4ba6      	ldr	r3, [pc, #664]	; (801a548 <tcp_receive+0x2ac>)
 801a2b0:	f240 427b 	movw	r2, #1147	; 0x47b
 801a2b4:	49a5      	ldr	r1, [pc, #660]	; (801a54c <tcp_receive+0x2b0>)
 801a2b6:	48a6      	ldr	r0, [pc, #664]	; (801a550 <tcp_receive+0x2b4>)
 801a2b8:	f005 fbfc 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	7d1b      	ldrb	r3, [r3, #20]
 801a2c0:	2b03      	cmp	r3, #3
 801a2c2:	d806      	bhi.n	801a2d2 <tcp_receive+0x36>
 801a2c4:	4ba0      	ldr	r3, [pc, #640]	; (801a548 <tcp_receive+0x2ac>)
 801a2c6:	f240 427c 	movw	r2, #1148	; 0x47c
 801a2ca:	49a2      	ldr	r1, [pc, #648]	; (801a554 <tcp_receive+0x2b8>)
 801a2cc:	48a0      	ldr	r0, [pc, #640]	; (801a550 <tcp_receive+0x2b4>)
 801a2ce:	f005 fbf1 	bl	801fab4 <iprintf>

  if (flags & TCP_ACK) {
 801a2d2:	4ba1      	ldr	r3, [pc, #644]	; (801a558 <tcp_receive+0x2bc>)
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	f003 0310 	and.w	r3, r3, #16
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	f000 8263 	beq.w	801a7a6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a2e6:	461a      	mov	r2, r3
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2ec:	4413      	add	r3, r2
 801a2ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a2f4:	4b99      	ldr	r3, [pc, #612]	; (801a55c <tcp_receive+0x2c0>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	1ad3      	subs	r3, r2, r3
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	db1b      	blt.n	801a336 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a302:	4b96      	ldr	r3, [pc, #600]	; (801a55c <tcp_receive+0x2c0>)
 801a304:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a306:	429a      	cmp	r2, r3
 801a308:	d106      	bne.n	801a318 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a30e:	4b94      	ldr	r3, [pc, #592]	; (801a560 <tcp_receive+0x2c4>)
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	1ad3      	subs	r3, r2, r3
 801a314:	2b00      	cmp	r3, #0
 801a316:	db0e      	blt.n	801a336 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a31c:	4b90      	ldr	r3, [pc, #576]	; (801a560 <tcp_receive+0x2c4>)
 801a31e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a320:	429a      	cmp	r2, r3
 801a322:	d125      	bne.n	801a370 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a324:	4b8f      	ldr	r3, [pc, #572]	; (801a564 <tcp_receive+0x2c8>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	89db      	ldrh	r3, [r3, #14]
 801a32a:	b29a      	uxth	r2, r3
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a332:	429a      	cmp	r2, r3
 801a334:	d91c      	bls.n	801a370 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a336:	4b8b      	ldr	r3, [pc, #556]	; (801a564 <tcp_receive+0x2c8>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	89db      	ldrh	r3, [r3, #14]
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a350:	429a      	cmp	r2, r3
 801a352:	d205      	bcs.n	801a360 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801a360:	4b7e      	ldr	r3, [pc, #504]	; (801a55c <tcp_receive+0x2c0>)
 801a362:	681a      	ldr	r2, [r3, #0]
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801a368:	4b7d      	ldr	r3, [pc, #500]	; (801a560 <tcp_receive+0x2c4>)
 801a36a:	681a      	ldr	r2, [r3, #0]
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a370:	4b7b      	ldr	r3, [pc, #492]	; (801a560 <tcp_receive+0x2c4>)
 801a372:	681a      	ldr	r2, [r3, #0]
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a378:	1ad3      	subs	r3, r2, r3
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	dc58      	bgt.n	801a430 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801a37e:	4b7a      	ldr	r3, [pc, #488]	; (801a568 <tcp_receive+0x2cc>)
 801a380:	881b      	ldrh	r3, [r3, #0]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d14b      	bne.n	801a41e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a38a:	687a      	ldr	r2, [r7, #4]
 801a38c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801a390:	4413      	add	r3, r2
 801a392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a394:	429a      	cmp	r2, r3
 801a396:	d142      	bne.n	801a41e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	db3d      	blt.n	801a41e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a3a6:	4b6e      	ldr	r3, [pc, #440]	; (801a560 <tcp_receive+0x2c4>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d137      	bne.n	801a41e <tcp_receive+0x182>
              found_dupack = 1;
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a3b8:	2bff      	cmp	r3, #255	; 0xff
 801a3ba:	d007      	beq.n	801a3cc <tcp_receive+0x130>
                ++pcb->dupacks;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a3c2:	3301      	adds	r3, #1
 801a3c4:	b2da      	uxtb	r2, r3
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a3d2:	2b03      	cmp	r3, #3
 801a3d4:	d91b      	bls.n	801a40e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3e0:	4413      	add	r3, r2
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d30a      	bcc.n	801a404 <tcp_receive+0x168>
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3f8:	4413      	add	r3, r2
 801a3fa:	b29a      	uxth	r2, r3
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a402:	e004      	b.n	801a40e <tcp_receive+0x172>
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a40a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a414:	2b02      	cmp	r3, #2
 801a416:	d902      	bls.n	801a41e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801a418:	6878      	ldr	r0, [r7, #4]
 801a41a:	f002 fb41 	bl	801caa0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801a41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a420:	2b00      	cmp	r3, #0
 801a422:	f040 8160 	bne.w	801a6e6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2200      	movs	r2, #0
 801a42a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a42e:	e15a      	b.n	801a6e6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a430:	4b4b      	ldr	r3, [pc, #300]	; (801a560 <tcp_receive+0x2c4>)
 801a432:	681a      	ldr	r2, [r3, #0]
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a438:	1ad3      	subs	r3, r2, r3
 801a43a:	3b01      	subs	r3, #1
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	f2c0 814d 	blt.w	801a6dc <tcp_receive+0x440>
 801a442:	4b47      	ldr	r3, [pc, #284]	; (801a560 <tcp_receive+0x2c4>)
 801a444:	681a      	ldr	r2, [r3, #0]
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a44a:	1ad3      	subs	r3, r2, r3
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	f300 8145 	bgt.w	801a6dc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	8b5b      	ldrh	r3, [r3, #26]
 801a456:	f003 0304 	and.w	r3, r3, #4
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d010      	beq.n	801a480 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	8b5b      	ldrh	r3, [r3, #26]
 801a462:	f023 0304 	bic.w	r3, r3, #4
 801a466:	b29a      	uxth	r2, r3
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	2200      	movs	r2, #0
 801a47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	2200      	movs	r2, #0
 801a484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a48e:	10db      	asrs	r3, r3, #3
 801a490:	b21b      	sxth	r3, r3
 801a492:	b29a      	uxth	r2, r3
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	4413      	add	r3, r2
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	b21a      	sxth	r2, r3
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a4a8:	4b2d      	ldr	r3, [pc, #180]	; (801a560 <tcp_receive+0x2c4>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	1ad3      	subs	r3, r2, r3
 801a4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801a4c0:	4b27      	ldr	r3, [pc, #156]	; (801a560 <tcp_receive+0x2c4>)
 801a4c2:	681a      	ldr	r2, [r3, #0]
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	7d1b      	ldrb	r3, [r3, #20]
 801a4cc:	2b03      	cmp	r3, #3
 801a4ce:	f240 8096 	bls.w	801a5fe <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d244      	bcs.n	801a56c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	8b5b      	ldrh	r3, [r3, #26]
 801a4e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d001      	beq.n	801a4f2 <tcp_receive+0x256>
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	e000      	b.n	801a4f4 <tcp_receive+0x258>
 801a4f2:	2302      	movs	r3, #2
 801a4f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a4f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a502:	fb12 f303 	smulbb	r3, r2, r3
 801a506:	b29b      	uxth	r3, r3
 801a508:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a50a:	4293      	cmp	r3, r2
 801a50c:	bf28      	it	cs
 801a50e:	4613      	movcs	r3, r2
 801a510:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a51a:	4413      	add	r3, r2
 801a51c:	b29a      	uxth	r2, r3
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a524:	429a      	cmp	r2, r3
 801a526:	d309      	bcc.n	801a53c <tcp_receive+0x2a0>
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a52e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a530:	4413      	add	r3, r2
 801a532:	b29a      	uxth	r2, r3
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a53a:	e060      	b.n	801a5fe <tcp_receive+0x362>
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a542:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a546:	e05a      	b.n	801a5fe <tcp_receive+0x362>
 801a548:	080264d4 	.word	0x080264d4
 801a54c:	08026830 	.word	0x08026830
 801a550:	0802654c 	.word	0x0802654c
 801a554:	0802684c 	.word	0x0802684c
 801a558:	2400525c 	.word	0x2400525c
 801a55c:	24005250 	.word	0x24005250
 801a560:	24005254 	.word	0x24005254
 801a564:	24005240 	.word	0x24005240
 801a568:	2400525a 	.word	0x2400525a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a572:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a574:	4413      	add	r3, r2
 801a576:	b29a      	uxth	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801a57e:	429a      	cmp	r2, r3
 801a580:	d309      	bcc.n	801a596 <tcp_receive+0x2fa>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a588:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a58a:	4413      	add	r3, r2
 801a58c:	b29a      	uxth	r2, r3
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801a594:	e004      	b.n	801a5a0 <tcp_receive+0x304>
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	d326      	bcc.n	801a5fe <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a5bc:	1ad3      	subs	r3, r2, r3
 801a5be:	b29a      	uxth	r2, r3
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5d0:	4413      	add	r3, r2
 801a5d2:	b29a      	uxth	r2, r3
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a5da:	429a      	cmp	r2, r3
 801a5dc:	d30a      	bcc.n	801a5f4 <tcp_receive+0x358>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5e8:	4413      	add	r3, r2
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a5f2:	e004      	b.n	801a5fe <tcp_receive+0x362>
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a606:	4a98      	ldr	r2, [pc, #608]	; (801a868 <tcp_receive+0x5cc>)
 801a608:	6878      	ldr	r0, [r7, #4]
 801a60a:	f7ff fdcb 	bl	801a1a4 <tcp_free_acked_segments>
 801a60e:	4602      	mov	r2, r0
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a61c:	4a93      	ldr	r2, [pc, #588]	; (801a86c <tcp_receive+0x5d0>)
 801a61e:	6878      	ldr	r0, [r7, #4]
 801a620:	f7ff fdc0 	bl	801a1a4 <tcp_free_acked_segments>
 801a624:	4602      	mov	r2, r0
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d104      	bne.n	801a63c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a638:	861a      	strh	r2, [r3, #48]	; 0x30
 801a63a:	e002      	b.n	801a642 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2200      	movs	r2, #0
 801a640:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	2200      	movs	r2, #0
 801a646:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d103      	bne.n	801a658 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2200      	movs	r2, #0
 801a654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a65e:	4b84      	ldr	r3, [pc, #528]	; (801a870 <tcp_receive+0x5d4>)
 801a660:	881b      	ldrh	r3, [r3, #0]
 801a662:	4413      	add	r3, r2
 801a664:	b29a      	uxth	r2, r3
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	8b5b      	ldrh	r3, [r3, #26]
 801a670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a674:	2b00      	cmp	r3, #0
 801a676:	d035      	beq.n	801a6e4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d118      	bne.n	801a6b2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a684:	2b00      	cmp	r3, #0
 801a686:	d00c      	beq.n	801a6a2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	685b      	ldr	r3, [r3, #4]
 801a694:	4618      	mov	r0, r3
 801a696:	f7f8 f9e4 	bl	8012a62 <lwip_htonl>
 801a69a:	4603      	mov	r3, r0
 801a69c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	dc20      	bgt.n	801a6e4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	8b5b      	ldrh	r3, [r3, #26]
 801a6a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a6b0:	e018      	b.n	801a6e4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a6ba:	68db      	ldr	r3, [r3, #12]
 801a6bc:	685b      	ldr	r3, [r3, #4]
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f7f8 f9cf 	bl	8012a62 <lwip_htonl>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	1ae3      	subs	r3, r4, r3
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	dc0b      	bgt.n	801a6e4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	8b5b      	ldrh	r3, [r3, #26]
 801a6d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a6d4:	b29a      	uxth	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a6da:	e003      	b.n	801a6e4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f002 fbcd 	bl	801ce7c <tcp_send_empty_ack>
 801a6e2:	e000      	b.n	801a6e6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a6e4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d05b      	beq.n	801a7a6 <tcp_receive+0x50a>
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a6f2:	4b60      	ldr	r3, [pc, #384]	; (801a874 <tcp_receive+0x5d8>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	1ad3      	subs	r3, r2, r3
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	da54      	bge.n	801a7a6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a6fc:	4b5e      	ldr	r3, [pc, #376]	; (801a878 <tcp_receive+0x5dc>)
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	b29a      	uxth	r2, r3
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a706:	b29b      	uxth	r3, r3
 801a708:	1ad3      	subs	r3, r2, r3
 801a70a:	b29b      	uxth	r3, r3
 801a70c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801a710:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a71a:	10db      	asrs	r3, r3, #3
 801a71c:	b21b      	sxth	r3, r3
 801a71e:	b29b      	uxth	r3, r3
 801a720:	1ad3      	subs	r3, r2, r3
 801a722:	b29b      	uxth	r3, r3
 801a724:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a72e:	b29a      	uxth	r2, r3
 801a730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a734:	4413      	add	r3, r2
 801a736:	b29b      	uxth	r3, r3
 801a738:	b21a      	sxth	r2, r3
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801a73e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a742:	2b00      	cmp	r3, #0
 801a744:	da05      	bge.n	801a752 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801a746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a74a:	425b      	negs	r3, r3
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801a752:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a75c:	109b      	asrs	r3, r3, #2
 801a75e:	b21b      	sxth	r3, r3
 801a760:	b29b      	uxth	r3, r3
 801a762:	1ad3      	subs	r3, r2, r3
 801a764:	b29b      	uxth	r3, r3
 801a766:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a770:	b29a      	uxth	r2, r3
 801a772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a776:	4413      	add	r3, r2
 801a778:	b29b      	uxth	r3, r3
 801a77a:	b21a      	sxth	r2, r3
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a786:	10db      	asrs	r3, r3, #3
 801a788:	b21b      	sxth	r3, r3
 801a78a:	b29a      	uxth	r2, r3
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a792:	b29b      	uxth	r3, r3
 801a794:	4413      	add	r3, r2
 801a796:	b29b      	uxth	r3, r3
 801a798:	b21a      	sxth	r2, r3
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a7a6:	4b35      	ldr	r3, [pc, #212]	; (801a87c <tcp_receive+0x5e0>)
 801a7a8:	881b      	ldrh	r3, [r3, #0]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	f000 84e1 	beq.w	801b172 <tcp_receive+0xed6>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	7d1b      	ldrb	r3, [r3, #20]
 801a7b4:	2b06      	cmp	r3, #6
 801a7b6:	f200 84dc 	bhi.w	801b172 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7be:	4b30      	ldr	r3, [pc, #192]	; (801a880 <tcp_receive+0x5e4>)
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	1ad3      	subs	r3, r2, r3
 801a7c4:	3b01      	subs	r3, #1
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f2c0 808e 	blt.w	801a8e8 <tcp_receive+0x64c>
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7d0:	4b2a      	ldr	r3, [pc, #168]	; (801a87c <tcp_receive+0x5e0>)
 801a7d2:	881b      	ldrh	r3, [r3, #0]
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	4b2a      	ldr	r3, [pc, #168]	; (801a880 <tcp_receive+0x5e4>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	440b      	add	r3, r1
 801a7dc:	1ad3      	subs	r3, r2, r3
 801a7de:	3301      	adds	r3, #1
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f300 8081 	bgt.w	801a8e8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801a7e6:	4b27      	ldr	r3, [pc, #156]	; (801a884 <tcp_receive+0x5e8>)
 801a7e8:	685b      	ldr	r3, [r3, #4]
 801a7ea:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a7f0:	4b23      	ldr	r3, [pc, #140]	; (801a880 <tcp_receive+0x5e4>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a7f8:	4b22      	ldr	r3, [pc, #136]	; (801a884 <tcp_receive+0x5e8>)
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d106      	bne.n	801a80e <tcp_receive+0x572>
 801a800:	4b21      	ldr	r3, [pc, #132]	; (801a888 <tcp_receive+0x5ec>)
 801a802:	f240 5294 	movw	r2, #1428	; 0x594
 801a806:	4921      	ldr	r1, [pc, #132]	; (801a88c <tcp_receive+0x5f0>)
 801a808:	4821      	ldr	r0, [pc, #132]	; (801a890 <tcp_receive+0x5f4>)
 801a80a:	f005 f953 	bl	801fab4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a810:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a814:	4293      	cmp	r3, r2
 801a816:	d906      	bls.n	801a826 <tcp_receive+0x58a>
 801a818:	4b1b      	ldr	r3, [pc, #108]	; (801a888 <tcp_receive+0x5ec>)
 801a81a:	f240 5295 	movw	r2, #1429	; 0x595
 801a81e:	491d      	ldr	r1, [pc, #116]	; (801a894 <tcp_receive+0x5f8>)
 801a820:	481b      	ldr	r0, [pc, #108]	; (801a890 <tcp_receive+0x5f4>)
 801a822:	f005 f947 	bl	801fab4 <iprintf>
      off = (u16_t)off32;
 801a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a82c:	4b15      	ldr	r3, [pc, #84]	; (801a884 <tcp_receive+0x5e8>)
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	891b      	ldrh	r3, [r3, #8]
 801a832:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a836:	429a      	cmp	r2, r3
 801a838:	d906      	bls.n	801a848 <tcp_receive+0x5ac>
 801a83a:	4b13      	ldr	r3, [pc, #76]	; (801a888 <tcp_receive+0x5ec>)
 801a83c:	f240 5297 	movw	r2, #1431	; 0x597
 801a840:	4915      	ldr	r1, [pc, #84]	; (801a898 <tcp_receive+0x5fc>)
 801a842:	4813      	ldr	r0, [pc, #76]	; (801a890 <tcp_receive+0x5f4>)
 801a844:	f005 f936 	bl	801fab4 <iprintf>
      inseg.len -= off;
 801a848:	4b0e      	ldr	r3, [pc, #56]	; (801a884 <tcp_receive+0x5e8>)
 801a84a:	891a      	ldrh	r2, [r3, #8]
 801a84c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a850:	1ad3      	subs	r3, r2, r3
 801a852:	b29a      	uxth	r2, r3
 801a854:	4b0b      	ldr	r3, [pc, #44]	; (801a884 <tcp_receive+0x5e8>)
 801a856:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a858:	4b0a      	ldr	r3, [pc, #40]	; (801a884 <tcp_receive+0x5e8>)
 801a85a:	685b      	ldr	r3, [r3, #4]
 801a85c:	891a      	ldrh	r2, [r3, #8]
 801a85e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801a866:	e029      	b.n	801a8bc <tcp_receive+0x620>
 801a868:	08026868 	.word	0x08026868
 801a86c:	08026870 	.word	0x08026870
 801a870:	24005258 	.word	0x24005258
 801a874:	24005254 	.word	0x24005254
 801a878:	24008a2c 	.word	0x24008a2c
 801a87c:	2400525a 	.word	0x2400525a
 801a880:	24005250 	.word	0x24005250
 801a884:	24005230 	.word	0x24005230
 801a888:	080264d4 	.word	0x080264d4
 801a88c:	08026878 	.word	0x08026878
 801a890:	0802654c 	.word	0x0802654c
 801a894:	08026888 	.word	0x08026888
 801a898:	08026898 	.word	0x08026898
        off -= p->len;
 801a89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a89e:	895b      	ldrh	r3, [r3, #10]
 801a8a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a8a4:	1ad3      	subs	r3, r2, r3
 801a8a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801a8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a8ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801a8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801a8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801a8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8be:	895b      	ldrh	r3, [r3, #10]
 801a8c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d8e9      	bhi.n	801a89c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801a8c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a8cc:	4619      	mov	r1, r3
 801a8ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a8d0:	f7fb ff28 	bl	8016724 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8d8:	4a91      	ldr	r2, [pc, #580]	; (801ab20 <tcp_receive+0x884>)
 801a8da:	6013      	str	r3, [r2, #0]
 801a8dc:	4b91      	ldr	r3, [pc, #580]	; (801ab24 <tcp_receive+0x888>)
 801a8de:	68db      	ldr	r3, [r3, #12]
 801a8e0:	4a8f      	ldr	r2, [pc, #572]	; (801ab20 <tcp_receive+0x884>)
 801a8e2:	6812      	ldr	r2, [r2, #0]
 801a8e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a8e6:	e00d      	b.n	801a904 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a8e8:	4b8d      	ldr	r3, [pc, #564]	; (801ab20 <tcp_receive+0x884>)
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8f0:	1ad3      	subs	r3, r2, r3
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	da06      	bge.n	801a904 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	8b5b      	ldrh	r3, [r3, #26]
 801a8fa:	f043 0302 	orr.w	r3, r3, #2
 801a8fe:	b29a      	uxth	r2, r3
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a904:	4b86      	ldr	r3, [pc, #536]	; (801ab20 <tcp_receive+0x884>)
 801a906:	681a      	ldr	r2, [r3, #0]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a90c:	1ad3      	subs	r3, r2, r3
 801a90e:	2b00      	cmp	r3, #0
 801a910:	f2c0 842a 	blt.w	801b168 <tcp_receive+0xecc>
 801a914:	4b82      	ldr	r3, [pc, #520]	; (801ab20 <tcp_receive+0x884>)
 801a916:	681a      	ldr	r2, [r3, #0]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a91c:	6879      	ldr	r1, [r7, #4]
 801a91e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a920:	440b      	add	r3, r1
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	3301      	adds	r3, #1
 801a926:	2b00      	cmp	r3, #0
 801a928:	f300 841e 	bgt.w	801b168 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a930:	4b7b      	ldr	r3, [pc, #492]	; (801ab20 <tcp_receive+0x884>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	429a      	cmp	r2, r3
 801a936:	f040 829a 	bne.w	801ae6e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801a93a:	4b7a      	ldr	r3, [pc, #488]	; (801ab24 <tcp_receive+0x888>)
 801a93c:	891c      	ldrh	r4, [r3, #8]
 801a93e:	4b79      	ldr	r3, [pc, #484]	; (801ab24 <tcp_receive+0x888>)
 801a940:	68db      	ldr	r3, [r3, #12]
 801a942:	899b      	ldrh	r3, [r3, #12]
 801a944:	b29b      	uxth	r3, r3
 801a946:	4618      	mov	r0, r3
 801a948:	f7f8 f876 	bl	8012a38 <lwip_htons>
 801a94c:	4603      	mov	r3, r0
 801a94e:	b2db      	uxtb	r3, r3
 801a950:	f003 0303 	and.w	r3, r3, #3
 801a954:	2b00      	cmp	r3, #0
 801a956:	d001      	beq.n	801a95c <tcp_receive+0x6c0>
 801a958:	2301      	movs	r3, #1
 801a95a:	e000      	b.n	801a95e <tcp_receive+0x6c2>
 801a95c:	2300      	movs	r3, #0
 801a95e:	4423      	add	r3, r4
 801a960:	b29a      	uxth	r2, r3
 801a962:	4b71      	ldr	r3, [pc, #452]	; (801ab28 <tcp_receive+0x88c>)
 801a964:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a96a:	4b6f      	ldr	r3, [pc, #444]	; (801ab28 <tcp_receive+0x88c>)
 801a96c:	881b      	ldrh	r3, [r3, #0]
 801a96e:	429a      	cmp	r2, r3
 801a970:	d275      	bcs.n	801aa5e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a972:	4b6c      	ldr	r3, [pc, #432]	; (801ab24 <tcp_receive+0x888>)
 801a974:	68db      	ldr	r3, [r3, #12]
 801a976:	899b      	ldrh	r3, [r3, #12]
 801a978:	b29b      	uxth	r3, r3
 801a97a:	4618      	mov	r0, r3
 801a97c:	f7f8 f85c 	bl	8012a38 <lwip_htons>
 801a980:	4603      	mov	r3, r0
 801a982:	b2db      	uxtb	r3, r3
 801a984:	f003 0301 	and.w	r3, r3, #1
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d01f      	beq.n	801a9cc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a98c:	4b65      	ldr	r3, [pc, #404]	; (801ab24 <tcp_receive+0x888>)
 801a98e:	68db      	ldr	r3, [r3, #12]
 801a990:	899b      	ldrh	r3, [r3, #12]
 801a992:	b29b      	uxth	r3, r3
 801a994:	b21b      	sxth	r3, r3
 801a996:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a99a:	b21c      	sxth	r4, r3
 801a99c:	4b61      	ldr	r3, [pc, #388]	; (801ab24 <tcp_receive+0x888>)
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	899b      	ldrh	r3, [r3, #12]
 801a9a2:	b29b      	uxth	r3, r3
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7f8 f847 	bl	8012a38 <lwip_htons>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	b2db      	uxtb	r3, r3
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f7f8 f83e 	bl	8012a38 <lwip_htons>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	b21b      	sxth	r3, r3
 801a9c0:	4323      	orrs	r3, r4
 801a9c2:	b21a      	sxth	r2, r3
 801a9c4:	4b57      	ldr	r3, [pc, #348]	; (801ab24 <tcp_receive+0x888>)
 801a9c6:	68db      	ldr	r3, [r3, #12]
 801a9c8:	b292      	uxth	r2, r2
 801a9ca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a9d0:	4b54      	ldr	r3, [pc, #336]	; (801ab24 <tcp_receive+0x888>)
 801a9d2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a9d4:	4b53      	ldr	r3, [pc, #332]	; (801ab24 <tcp_receive+0x888>)
 801a9d6:	68db      	ldr	r3, [r3, #12]
 801a9d8:	899b      	ldrh	r3, [r3, #12]
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f8 f82b 	bl	8012a38 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	b2db      	uxtb	r3, r3
 801a9e6:	f003 0302 	and.w	r3, r3, #2
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d005      	beq.n	801a9fa <tcp_receive+0x75e>
            inseg.len -= 1;
 801a9ee:	4b4d      	ldr	r3, [pc, #308]	; (801ab24 <tcp_receive+0x888>)
 801a9f0:	891b      	ldrh	r3, [r3, #8]
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	b29a      	uxth	r2, r3
 801a9f6:	4b4b      	ldr	r3, [pc, #300]	; (801ab24 <tcp_receive+0x888>)
 801a9f8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801a9fa:	4b4a      	ldr	r3, [pc, #296]	; (801ab24 <tcp_receive+0x888>)
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	4a49      	ldr	r2, [pc, #292]	; (801ab24 <tcp_receive+0x888>)
 801aa00:	8912      	ldrh	r2, [r2, #8]
 801aa02:	4611      	mov	r1, r2
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7fb fd8d 	bl	8016524 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801aa0a:	4b46      	ldr	r3, [pc, #280]	; (801ab24 <tcp_receive+0x888>)
 801aa0c:	891c      	ldrh	r4, [r3, #8]
 801aa0e:	4b45      	ldr	r3, [pc, #276]	; (801ab24 <tcp_receive+0x888>)
 801aa10:	68db      	ldr	r3, [r3, #12]
 801aa12:	899b      	ldrh	r3, [r3, #12]
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7f8 f80e 	bl	8012a38 <lwip_htons>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	b2db      	uxtb	r3, r3
 801aa20:	f003 0303 	and.w	r3, r3, #3
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d001      	beq.n	801aa2c <tcp_receive+0x790>
 801aa28:	2301      	movs	r3, #1
 801aa2a:	e000      	b.n	801aa2e <tcp_receive+0x792>
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	4423      	add	r3, r4
 801aa30:	b29a      	uxth	r2, r3
 801aa32:	4b3d      	ldr	r3, [pc, #244]	; (801ab28 <tcp_receive+0x88c>)
 801aa34:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801aa36:	4b3c      	ldr	r3, [pc, #240]	; (801ab28 <tcp_receive+0x88c>)
 801aa38:	881b      	ldrh	r3, [r3, #0]
 801aa3a:	461a      	mov	r2, r3
 801aa3c:	4b38      	ldr	r3, [pc, #224]	; (801ab20 <tcp_receive+0x884>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	441a      	add	r2, r3
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa46:	6879      	ldr	r1, [r7, #4]
 801aa48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aa4a:	440b      	add	r3, r1
 801aa4c:	429a      	cmp	r2, r3
 801aa4e:	d006      	beq.n	801aa5e <tcp_receive+0x7c2>
 801aa50:	4b36      	ldr	r3, [pc, #216]	; (801ab2c <tcp_receive+0x890>)
 801aa52:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801aa56:	4936      	ldr	r1, [pc, #216]	; (801ab30 <tcp_receive+0x894>)
 801aa58:	4836      	ldr	r0, [pc, #216]	; (801ab34 <tcp_receive+0x898>)
 801aa5a:	f005 f82b 	bl	801fab4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	f000 80e7 	beq.w	801ac36 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801aa68:	4b2e      	ldr	r3, [pc, #184]	; (801ab24 <tcp_receive+0x888>)
 801aa6a:	68db      	ldr	r3, [r3, #12]
 801aa6c:	899b      	ldrh	r3, [r3, #12]
 801aa6e:	b29b      	uxth	r3, r3
 801aa70:	4618      	mov	r0, r3
 801aa72:	f7f7 ffe1 	bl	8012a38 <lwip_htons>
 801aa76:	4603      	mov	r3, r0
 801aa78:	b2db      	uxtb	r3, r3
 801aa7a:	f003 0301 	and.w	r3, r3, #1
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d010      	beq.n	801aaa4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801aa82:	e00a      	b.n	801aa9a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa88:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa8e:	681a      	ldr	r2, [r3, #0]
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801aa94:	68f8      	ldr	r0, [r7, #12]
 801aa96:	f7fd fcc8 	bl	801842a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d1f0      	bne.n	801aa84 <tcp_receive+0x7e8>
 801aaa2:	e0c8      	b.n	801ac36 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801aaaa:	e052      	b.n	801ab52 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801aaac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aaae:	68db      	ldr	r3, [r3, #12]
 801aab0:	899b      	ldrh	r3, [r3, #12]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7f7 ffbf 	bl	8012a38 <lwip_htons>
 801aaba:	4603      	mov	r3, r0
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	f003 0301 	and.w	r3, r3, #1
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d03d      	beq.n	801ab42 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801aac6:	4b17      	ldr	r3, [pc, #92]	; (801ab24 <tcp_receive+0x888>)
 801aac8:	68db      	ldr	r3, [r3, #12]
 801aaca:	899b      	ldrh	r3, [r3, #12]
 801aacc:	b29b      	uxth	r3, r3
 801aace:	4618      	mov	r0, r3
 801aad0:	f7f7 ffb2 	bl	8012a38 <lwip_htons>
 801aad4:	4603      	mov	r3, r0
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d130      	bne.n	801ab42 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801aae0:	4b10      	ldr	r3, [pc, #64]	; (801ab24 <tcp_receive+0x888>)
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	899b      	ldrh	r3, [r3, #12]
 801aae6:	b29c      	uxth	r4, r3
 801aae8:	2001      	movs	r0, #1
 801aaea:	f7f7 ffa5 	bl	8012a38 <lwip_htons>
 801aaee:	4603      	mov	r3, r0
 801aaf0:	461a      	mov	r2, r3
 801aaf2:	4b0c      	ldr	r3, [pc, #48]	; (801ab24 <tcp_receive+0x888>)
 801aaf4:	68db      	ldr	r3, [r3, #12]
 801aaf6:	4322      	orrs	r2, r4
 801aaf8:	b292      	uxth	r2, r2
 801aafa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801aafc:	4b09      	ldr	r3, [pc, #36]	; (801ab24 <tcp_receive+0x888>)
 801aafe:	891c      	ldrh	r4, [r3, #8]
 801ab00:	4b08      	ldr	r3, [pc, #32]	; (801ab24 <tcp_receive+0x888>)
 801ab02:	68db      	ldr	r3, [r3, #12]
 801ab04:	899b      	ldrh	r3, [r3, #12]
 801ab06:	b29b      	uxth	r3, r3
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f7f7 ff95 	bl	8012a38 <lwip_htons>
 801ab0e:	4603      	mov	r3, r0
 801ab10:	b2db      	uxtb	r3, r3
 801ab12:	f003 0303 	and.w	r3, r3, #3
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d00e      	beq.n	801ab38 <tcp_receive+0x89c>
 801ab1a:	2301      	movs	r3, #1
 801ab1c:	e00d      	b.n	801ab3a <tcp_receive+0x89e>
 801ab1e:	bf00      	nop
 801ab20:	24005250 	.word	0x24005250
 801ab24:	24005230 	.word	0x24005230
 801ab28:	2400525a 	.word	0x2400525a
 801ab2c:	080264d4 	.word	0x080264d4
 801ab30:	080268a8 	.word	0x080268a8
 801ab34:	0802654c 	.word	0x0802654c
 801ab38:	2300      	movs	r3, #0
 801ab3a:	4423      	add	r3, r4
 801ab3c:	b29a      	uxth	r2, r3
 801ab3e:	4b98      	ldr	r3, [pc, #608]	; (801ada0 <tcp_receive+0xb04>)
 801ab40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ab42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab44:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ab46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801ab4c:	6938      	ldr	r0, [r7, #16]
 801ab4e:	f7fd fc6c 	bl	801842a <tcp_seg_free>
            while (next &&
 801ab52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d00e      	beq.n	801ab76 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ab58:	4b91      	ldr	r3, [pc, #580]	; (801ada0 <tcp_receive+0xb04>)
 801ab5a:	881b      	ldrh	r3, [r3, #0]
 801ab5c:	461a      	mov	r2, r3
 801ab5e:	4b91      	ldr	r3, [pc, #580]	; (801ada4 <tcp_receive+0xb08>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	441a      	add	r2, r3
 801ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab66:	68db      	ldr	r3, [r3, #12]
 801ab68:	685b      	ldr	r3, [r3, #4]
 801ab6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ab6c:	8909      	ldrh	r1, [r1, #8]
 801ab6e:	440b      	add	r3, r1
 801ab70:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	da9a      	bge.n	801aaac <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d059      	beq.n	801ac30 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801ab7c:	4b88      	ldr	r3, [pc, #544]	; (801ada0 <tcp_receive+0xb04>)
 801ab7e:	881b      	ldrh	r3, [r3, #0]
 801ab80:	461a      	mov	r2, r3
 801ab82:	4b88      	ldr	r3, [pc, #544]	; (801ada4 <tcp_receive+0xb08>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	441a      	add	r2, r3
 801ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab8a:	68db      	ldr	r3, [r3, #12]
 801ab8c:	685b      	ldr	r3, [r3, #4]
 801ab8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	dd4d      	ble.n	801ac30 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ab94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab96:	68db      	ldr	r3, [r3, #12]
 801ab98:	685b      	ldr	r3, [r3, #4]
 801ab9a:	b29a      	uxth	r2, r3
 801ab9c:	4b81      	ldr	r3, [pc, #516]	; (801ada4 <tcp_receive+0xb08>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	b29b      	uxth	r3, r3
 801aba2:	1ad3      	subs	r3, r2, r3
 801aba4:	b29a      	uxth	r2, r3
 801aba6:	4b80      	ldr	r3, [pc, #512]	; (801ada8 <tcp_receive+0xb0c>)
 801aba8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801abaa:	4b7f      	ldr	r3, [pc, #508]	; (801ada8 <tcp_receive+0xb0c>)
 801abac:	68db      	ldr	r3, [r3, #12]
 801abae:	899b      	ldrh	r3, [r3, #12]
 801abb0:	b29b      	uxth	r3, r3
 801abb2:	4618      	mov	r0, r3
 801abb4:	f7f7 ff40 	bl	8012a38 <lwip_htons>
 801abb8:	4603      	mov	r3, r0
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	f003 0302 	and.w	r3, r3, #2
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d005      	beq.n	801abd0 <tcp_receive+0x934>
                inseg.len -= 1;
 801abc4:	4b78      	ldr	r3, [pc, #480]	; (801ada8 <tcp_receive+0xb0c>)
 801abc6:	891b      	ldrh	r3, [r3, #8]
 801abc8:	3b01      	subs	r3, #1
 801abca:	b29a      	uxth	r2, r3
 801abcc:	4b76      	ldr	r3, [pc, #472]	; (801ada8 <tcp_receive+0xb0c>)
 801abce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801abd0:	4b75      	ldr	r3, [pc, #468]	; (801ada8 <tcp_receive+0xb0c>)
 801abd2:	685b      	ldr	r3, [r3, #4]
 801abd4:	4a74      	ldr	r2, [pc, #464]	; (801ada8 <tcp_receive+0xb0c>)
 801abd6:	8912      	ldrh	r2, [r2, #8]
 801abd8:	4611      	mov	r1, r2
 801abda:	4618      	mov	r0, r3
 801abdc:	f7fb fca2 	bl	8016524 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801abe0:	4b71      	ldr	r3, [pc, #452]	; (801ada8 <tcp_receive+0xb0c>)
 801abe2:	891c      	ldrh	r4, [r3, #8]
 801abe4:	4b70      	ldr	r3, [pc, #448]	; (801ada8 <tcp_receive+0xb0c>)
 801abe6:	68db      	ldr	r3, [r3, #12]
 801abe8:	899b      	ldrh	r3, [r3, #12]
 801abea:	b29b      	uxth	r3, r3
 801abec:	4618      	mov	r0, r3
 801abee:	f7f7 ff23 	bl	8012a38 <lwip_htons>
 801abf2:	4603      	mov	r3, r0
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	f003 0303 	and.w	r3, r3, #3
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d001      	beq.n	801ac02 <tcp_receive+0x966>
 801abfe:	2301      	movs	r3, #1
 801ac00:	e000      	b.n	801ac04 <tcp_receive+0x968>
 801ac02:	2300      	movs	r3, #0
 801ac04:	4423      	add	r3, r4
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	4b65      	ldr	r3, [pc, #404]	; (801ada0 <tcp_receive+0xb04>)
 801ac0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ac0c:	4b64      	ldr	r3, [pc, #400]	; (801ada0 <tcp_receive+0xb04>)
 801ac0e:	881b      	ldrh	r3, [r3, #0]
 801ac10:	461a      	mov	r2, r3
 801ac12:	4b64      	ldr	r3, [pc, #400]	; (801ada4 <tcp_receive+0xb08>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	441a      	add	r2, r3
 801ac18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac1a:	68db      	ldr	r3, [r3, #12]
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	429a      	cmp	r2, r3
 801ac20:	d006      	beq.n	801ac30 <tcp_receive+0x994>
 801ac22:	4b62      	ldr	r3, [pc, #392]	; (801adac <tcp_receive+0xb10>)
 801ac24:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ac28:	4961      	ldr	r1, [pc, #388]	; (801adb0 <tcp_receive+0xb14>)
 801ac2a:	4862      	ldr	r0, [pc, #392]	; (801adb4 <tcp_receive+0xb18>)
 801ac2c:	f004 ff42 	bl	801fab4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac34:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801ac36:	4b5a      	ldr	r3, [pc, #360]	; (801ada0 <tcp_receive+0xb04>)
 801ac38:	881b      	ldrh	r3, [r3, #0]
 801ac3a:	461a      	mov	r2, r3
 801ac3c:	4b59      	ldr	r3, [pc, #356]	; (801ada4 <tcp_receive+0xb08>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	441a      	add	r2, r3
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ac4a:	4b55      	ldr	r3, [pc, #340]	; (801ada0 <tcp_receive+0xb04>)
 801ac4c:	881b      	ldrh	r3, [r3, #0]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	d206      	bcs.n	801ac60 <tcp_receive+0x9c4>
 801ac52:	4b56      	ldr	r3, [pc, #344]	; (801adac <tcp_receive+0xb10>)
 801ac54:	f240 6207 	movw	r2, #1543	; 0x607
 801ac58:	4957      	ldr	r1, [pc, #348]	; (801adb8 <tcp_receive+0xb1c>)
 801ac5a:	4856      	ldr	r0, [pc, #344]	; (801adb4 <tcp_receive+0xb18>)
 801ac5c:	f004 ff2a 	bl	801fab4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ac64:	4b4e      	ldr	r3, [pc, #312]	; (801ada0 <tcp_receive+0xb04>)
 801ac66:	881b      	ldrh	r3, [r3, #0]
 801ac68:	1ad3      	subs	r3, r2, r3
 801ac6a:	b29a      	uxth	r2, r3
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ac70:	6878      	ldr	r0, [r7, #4]
 801ac72:	f7fc fd9d 	bl	80177b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ac76:	4b4c      	ldr	r3, [pc, #304]	; (801ada8 <tcp_receive+0xb0c>)
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	891b      	ldrh	r3, [r3, #8]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d006      	beq.n	801ac8e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801ac80:	4b49      	ldr	r3, [pc, #292]	; (801ada8 <tcp_receive+0xb0c>)
 801ac82:	685b      	ldr	r3, [r3, #4]
 801ac84:	4a4d      	ldr	r2, [pc, #308]	; (801adbc <tcp_receive+0xb20>)
 801ac86:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ac88:	4b47      	ldr	r3, [pc, #284]	; (801ada8 <tcp_receive+0xb0c>)
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ac8e:	4b46      	ldr	r3, [pc, #280]	; (801ada8 <tcp_receive+0xb0c>)
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	899b      	ldrh	r3, [r3, #12]
 801ac94:	b29b      	uxth	r3, r3
 801ac96:	4618      	mov	r0, r3
 801ac98:	f7f7 fece 	bl	8012a38 <lwip_htons>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	f003 0301 	and.w	r3, r3, #1
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	f000 80b8 	beq.w	801ae1a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801acaa:	4b45      	ldr	r3, [pc, #276]	; (801adc0 <tcp_receive+0xb24>)
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	f043 0320 	orr.w	r3, r3, #32
 801acb2:	b2da      	uxtb	r2, r3
 801acb4:	4b42      	ldr	r3, [pc, #264]	; (801adc0 <tcp_receive+0xb24>)
 801acb6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801acb8:	e0af      	b.n	801ae1a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801acbe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801acc4:	68db      	ldr	r3, [r3, #12]
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	4a36      	ldr	r2, [pc, #216]	; (801ada4 <tcp_receive+0xb08>)
 801acca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	891b      	ldrh	r3, [r3, #8]
 801acd0:	461c      	mov	r4, r3
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	68db      	ldr	r3, [r3, #12]
 801acd6:	899b      	ldrh	r3, [r3, #12]
 801acd8:	b29b      	uxth	r3, r3
 801acda:	4618      	mov	r0, r3
 801acdc:	f7f7 feac 	bl	8012a38 <lwip_htons>
 801ace0:	4603      	mov	r3, r0
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	f003 0303 	and.w	r3, r3, #3
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d001      	beq.n	801acf0 <tcp_receive+0xa54>
 801acec:	2301      	movs	r3, #1
 801acee:	e000      	b.n	801acf2 <tcp_receive+0xa56>
 801acf0:	2300      	movs	r3, #0
 801acf2:	191a      	adds	r2, r3, r4
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acf8:	441a      	add	r2, r3
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad02:	461c      	mov	r4, r3
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	891b      	ldrh	r3, [r3, #8]
 801ad08:	461d      	mov	r5, r3
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	68db      	ldr	r3, [r3, #12]
 801ad0e:	899b      	ldrh	r3, [r3, #12]
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	4618      	mov	r0, r3
 801ad14:	f7f7 fe90 	bl	8012a38 <lwip_htons>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	f003 0303 	and.w	r3, r3, #3
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d001      	beq.n	801ad28 <tcp_receive+0xa8c>
 801ad24:	2301      	movs	r3, #1
 801ad26:	e000      	b.n	801ad2a <tcp_receive+0xa8e>
 801ad28:	2300      	movs	r3, #0
 801ad2a:	442b      	add	r3, r5
 801ad2c:	429c      	cmp	r4, r3
 801ad2e:	d206      	bcs.n	801ad3e <tcp_receive+0xaa2>
 801ad30:	4b1e      	ldr	r3, [pc, #120]	; (801adac <tcp_receive+0xb10>)
 801ad32:	f240 622b 	movw	r2, #1579	; 0x62b
 801ad36:	4923      	ldr	r1, [pc, #140]	; (801adc4 <tcp_receive+0xb28>)
 801ad38:	481e      	ldr	r0, [pc, #120]	; (801adb4 <tcp_receive+0xb18>)
 801ad3a:	f004 febb 	bl	801fab4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	891b      	ldrh	r3, [r3, #8]
 801ad42:	461c      	mov	r4, r3
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	68db      	ldr	r3, [r3, #12]
 801ad48:	899b      	ldrh	r3, [r3, #12]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f7 fe73 	bl	8012a38 <lwip_htons>
 801ad52:	4603      	mov	r3, r0
 801ad54:	b2db      	uxtb	r3, r3
 801ad56:	f003 0303 	and.w	r3, r3, #3
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d001      	beq.n	801ad62 <tcp_receive+0xac6>
 801ad5e:	2301      	movs	r3, #1
 801ad60:	e000      	b.n	801ad64 <tcp_receive+0xac8>
 801ad62:	2300      	movs	r3, #0
 801ad64:	1919      	adds	r1, r3, r4
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ad6a:	b28b      	uxth	r3, r1
 801ad6c:	1ad3      	subs	r3, r2, r3
 801ad6e:	b29a      	uxth	r2, r3
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ad74:	6878      	ldr	r0, [r7, #4]
 801ad76:	f7fc fd1b 	bl	80177b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	891b      	ldrh	r3, [r3, #8]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d028      	beq.n	801add6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ad84:	4b0d      	ldr	r3, [pc, #52]	; (801adbc <tcp_receive+0xb20>)
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d01d      	beq.n	801adc8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801ad8c:	4b0b      	ldr	r3, [pc, #44]	; (801adbc <tcp_receive+0xb20>)
 801ad8e:	681a      	ldr	r2, [r3, #0]
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	685b      	ldr	r3, [r3, #4]
 801ad94:	4619      	mov	r1, r3
 801ad96:	4610      	mov	r0, r2
 801ad98:	f7fb fe0c 	bl	80169b4 <pbuf_cat>
 801ad9c:	e018      	b.n	801add0 <tcp_receive+0xb34>
 801ad9e:	bf00      	nop
 801ada0:	2400525a 	.word	0x2400525a
 801ada4:	24005250 	.word	0x24005250
 801ada8:	24005230 	.word	0x24005230
 801adac:	080264d4 	.word	0x080264d4
 801adb0:	080268e0 	.word	0x080268e0
 801adb4:	0802654c 	.word	0x0802654c
 801adb8:	0802691c 	.word	0x0802691c
 801adbc:	24005260 	.word	0x24005260
 801adc0:	2400525d 	.word	0x2400525d
 801adc4:	0802693c 	.word	0x0802693c
            } else {
              recv_data = cseg->p;
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	4a70      	ldr	r2, [pc, #448]	; (801af90 <tcp_receive+0xcf4>)
 801adce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	2200      	movs	r2, #0
 801add4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	68db      	ldr	r3, [r3, #12]
 801adda:	899b      	ldrh	r3, [r3, #12]
 801addc:	b29b      	uxth	r3, r3
 801adde:	4618      	mov	r0, r3
 801ade0:	f7f7 fe2a 	bl	8012a38 <lwip_htons>
 801ade4:	4603      	mov	r3, r0
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	f003 0301 	and.w	r3, r3, #1
 801adec:	2b00      	cmp	r3, #0
 801adee:	d00d      	beq.n	801ae0c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801adf0:	4b68      	ldr	r3, [pc, #416]	; (801af94 <tcp_receive+0xcf8>)
 801adf2:	781b      	ldrb	r3, [r3, #0]
 801adf4:	f043 0320 	orr.w	r3, r3, #32
 801adf8:	b2da      	uxtb	r2, r3
 801adfa:	4b66      	ldr	r3, [pc, #408]	; (801af94 <tcp_receive+0xcf8>)
 801adfc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	7d1b      	ldrb	r3, [r3, #20]
 801ae02:	2b04      	cmp	r3, #4
 801ae04:	d102      	bne.n	801ae0c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	2207      	movs	r2, #7
 801ae0a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801ae0c:	68bb      	ldr	r3, [r7, #8]
 801ae0e:	681a      	ldr	r2, [r3, #0]
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801ae14:	68b8      	ldr	r0, [r7, #8]
 801ae16:	f7fd fb08 	bl	801842a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d008      	beq.n	801ae34 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae26:	68db      	ldr	r3, [r3, #12]
 801ae28:	685a      	ldr	r2, [r3, #4]
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	f43f af43 	beq.w	801acba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	8b5b      	ldrh	r3, [r3, #26]
 801ae38:	f003 0301 	and.w	r3, r3, #1
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d00e      	beq.n	801ae5e <tcp_receive+0xbc2>
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	8b5b      	ldrh	r3, [r3, #26]
 801ae44:	f023 0301 	bic.w	r3, r3, #1
 801ae48:	b29a      	uxth	r2, r3
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	835a      	strh	r2, [r3, #26]
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	8b5b      	ldrh	r3, [r3, #26]
 801ae52:	f043 0302 	orr.w	r3, r3, #2
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ae5c:	e188      	b.n	801b170 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	8b5b      	ldrh	r3, [r3, #26]
 801ae62:	f043 0301 	orr.w	r3, r3, #1
 801ae66:	b29a      	uxth	r2, r3
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ae6c:	e180      	b.n	801b170 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d106      	bne.n	801ae84 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ae76:	4848      	ldr	r0, [pc, #288]	; (801af98 <tcp_receive+0xcfc>)
 801ae78:	f7fd faf0 	bl	801845c <tcp_seg_copy>
 801ae7c:	4602      	mov	r2, r0
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	675a      	str	r2, [r3, #116]	; 0x74
 801ae82:	e16d      	b.n	801b160 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801ae84:	2300      	movs	r3, #0
 801ae86:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae8c:	63bb      	str	r3, [r7, #56]	; 0x38
 801ae8e:	e157      	b.n	801b140 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae92:	68db      	ldr	r3, [r3, #12]
 801ae94:	685a      	ldr	r2, [r3, #4]
 801ae96:	4b41      	ldr	r3, [pc, #260]	; (801af9c <tcp_receive+0xd00>)
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d11d      	bne.n	801aeda <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801ae9e:	4b3e      	ldr	r3, [pc, #248]	; (801af98 <tcp_receive+0xcfc>)
 801aea0:	891a      	ldrh	r2, [r3, #8]
 801aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea4:	891b      	ldrh	r3, [r3, #8]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	f240 814f 	bls.w	801b14a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801aeac:	483a      	ldr	r0, [pc, #232]	; (801af98 <tcp_receive+0xcfc>)
 801aeae:	f7fd fad5 	bl	801845c <tcp_seg_copy>
 801aeb2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	f000 8149 	beq.w	801b14e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801aebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d003      	beq.n	801aeca <tcp_receive+0xc2e>
                    prev->next = cseg;
 801aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aec4:	697a      	ldr	r2, [r7, #20]
 801aec6:	601a      	str	r2, [r3, #0]
 801aec8:	e002      	b.n	801aed0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	697a      	ldr	r2, [r7, #20]
 801aece:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801aed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801aed2:	6978      	ldr	r0, [r7, #20]
 801aed4:	f7ff f8de 	bl	801a094 <tcp_oos_insert_segment>
                }
                break;
 801aed8:	e139      	b.n	801b14e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d117      	bne.n	801af10 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801aee0:	4b2e      	ldr	r3, [pc, #184]	; (801af9c <tcp_receive+0xd00>)
 801aee2:	681a      	ldr	r2, [r3, #0]
 801aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aee6:	68db      	ldr	r3, [r3, #12]
 801aee8:	685b      	ldr	r3, [r3, #4]
 801aeea:	1ad3      	subs	r3, r2, r3
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	da57      	bge.n	801afa0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801aef0:	4829      	ldr	r0, [pc, #164]	; (801af98 <tcp_receive+0xcfc>)
 801aef2:	f7fd fab3 	bl	801845c <tcp_seg_copy>
 801aef6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801aef8:	69bb      	ldr	r3, [r7, #24]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	f000 8129 	beq.w	801b152 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	69ba      	ldr	r2, [r7, #24]
 801af04:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801af06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801af08:	69b8      	ldr	r0, [r7, #24]
 801af0a:	f7ff f8c3 	bl	801a094 <tcp_oos_insert_segment>
                  }
                  break;
 801af0e:	e120      	b.n	801b152 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801af10:	4b22      	ldr	r3, [pc, #136]	; (801af9c <tcp_receive+0xd00>)
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af16:	68db      	ldr	r3, [r3, #12]
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	1ad3      	subs	r3, r2, r3
 801af1c:	3b01      	subs	r3, #1
 801af1e:	2b00      	cmp	r3, #0
 801af20:	db3e      	blt.n	801afa0 <tcp_receive+0xd04>
 801af22:	4b1e      	ldr	r3, [pc, #120]	; (801af9c <tcp_receive+0xd00>)
 801af24:	681a      	ldr	r2, [r3, #0]
 801af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af28:	68db      	ldr	r3, [r3, #12]
 801af2a:	685b      	ldr	r3, [r3, #4]
 801af2c:	1ad3      	subs	r3, r2, r3
 801af2e:	3301      	adds	r3, #1
 801af30:	2b00      	cmp	r3, #0
 801af32:	dc35      	bgt.n	801afa0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801af34:	4818      	ldr	r0, [pc, #96]	; (801af98 <tcp_receive+0xcfc>)
 801af36:	f7fd fa91 	bl	801845c <tcp_seg_copy>
 801af3a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	f000 8109 	beq.w	801b156 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801af44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af46:	68db      	ldr	r3, [r3, #12]
 801af48:	685b      	ldr	r3, [r3, #4]
 801af4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801af4c:	8912      	ldrh	r2, [r2, #8]
 801af4e:	441a      	add	r2, r3
 801af50:	4b12      	ldr	r3, [pc, #72]	; (801af9c <tcp_receive+0xd00>)
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	1ad3      	subs	r3, r2, r3
 801af56:	2b00      	cmp	r3, #0
 801af58:	dd12      	ble.n	801af80 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801af5a:	4b10      	ldr	r3, [pc, #64]	; (801af9c <tcp_receive+0xd00>)
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	b29a      	uxth	r2, r3
 801af60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af62:	68db      	ldr	r3, [r3, #12]
 801af64:	685b      	ldr	r3, [r3, #4]
 801af66:	b29b      	uxth	r3, r3
 801af68:	1ad3      	subs	r3, r2, r3
 801af6a:	b29a      	uxth	r2, r3
 801af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af6e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af72:	685a      	ldr	r2, [r3, #4]
 801af74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af76:	891b      	ldrh	r3, [r3, #8]
 801af78:	4619      	mov	r1, r3
 801af7a:	4610      	mov	r0, r2
 801af7c:	f7fb fad2 	bl	8016524 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af82:	69fa      	ldr	r2, [r7, #28]
 801af84:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801af86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801af88:	69f8      	ldr	r0, [r7, #28]
 801af8a:	f7ff f883 	bl	801a094 <tcp_oos_insert_segment>
                  }
                  break;
 801af8e:	e0e2      	b.n	801b156 <tcp_receive+0xeba>
 801af90:	24005260 	.word	0x24005260
 801af94:	2400525d 	.word	0x2400525d
 801af98:	24005230 	.word	0x24005230
 801af9c:	24005250 	.word	0x24005250
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afa2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f040 80c6 	bne.w	801b13a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801afae:	4b80      	ldr	r3, [pc, #512]	; (801b1b0 <tcp_receive+0xf14>)
 801afb0:	681a      	ldr	r2, [r3, #0]
 801afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	685b      	ldr	r3, [r3, #4]
 801afb8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f340 80bd 	ble.w	801b13a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afc2:	68db      	ldr	r3, [r3, #12]
 801afc4:	899b      	ldrh	r3, [r3, #12]
 801afc6:	b29b      	uxth	r3, r3
 801afc8:	4618      	mov	r0, r3
 801afca:	f7f7 fd35 	bl	8012a38 <lwip_htons>
 801afce:	4603      	mov	r3, r0
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	f003 0301 	and.w	r3, r3, #1
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	f040 80bf 	bne.w	801b15a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801afdc:	4875      	ldr	r0, [pc, #468]	; (801b1b4 <tcp_receive+0xf18>)
 801afde:	f7fd fa3d 	bl	801845c <tcp_seg_copy>
 801afe2:	4602      	mov	r2, r0
 801afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afe6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	2b00      	cmp	r3, #0
 801afee:	f000 80b6 	beq.w	801b15e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aff4:	68db      	ldr	r3, [r3, #12]
 801aff6:	685b      	ldr	r3, [r3, #4]
 801aff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801affa:	8912      	ldrh	r2, [r2, #8]
 801affc:	441a      	add	r2, r3
 801affe:	4b6c      	ldr	r3, [pc, #432]	; (801b1b0 <tcp_receive+0xf14>)
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	1ad3      	subs	r3, r2, r3
 801b004:	2b00      	cmp	r3, #0
 801b006:	dd12      	ble.n	801b02e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b008:	4b69      	ldr	r3, [pc, #420]	; (801b1b0 <tcp_receive+0xf14>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	b29a      	uxth	r2, r3
 801b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b010:	68db      	ldr	r3, [r3, #12]
 801b012:	685b      	ldr	r3, [r3, #4]
 801b014:	b29b      	uxth	r3, r3
 801b016:	1ad3      	subs	r3, r2, r3
 801b018:	b29a      	uxth	r2, r3
 801b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b01c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b020:	685a      	ldr	r2, [r3, #4]
 801b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b024:	891b      	ldrh	r3, [r3, #8]
 801b026:	4619      	mov	r1, r3
 801b028:	4610      	mov	r0, r2
 801b02a:	f7fb fa7b 	bl	8016524 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801b02e:	4b62      	ldr	r3, [pc, #392]	; (801b1b8 <tcp_receive+0xf1c>)
 801b030:	881b      	ldrh	r3, [r3, #0]
 801b032:	461a      	mov	r2, r3
 801b034:	4b5e      	ldr	r3, [pc, #376]	; (801b1b0 <tcp_receive+0xf14>)
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	441a      	add	r2, r3
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b03e:	6879      	ldr	r1, [r7, #4]
 801b040:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b042:	440b      	add	r3, r1
 801b044:	1ad3      	subs	r3, r2, r3
 801b046:	2b00      	cmp	r3, #0
 801b048:	f340 8089 	ble.w	801b15e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	68db      	ldr	r3, [r3, #12]
 801b052:	899b      	ldrh	r3, [r3, #12]
 801b054:	b29b      	uxth	r3, r3
 801b056:	4618      	mov	r0, r3
 801b058:	f7f7 fcee 	bl	8012a38 <lwip_htons>
 801b05c:	4603      	mov	r3, r0
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	f003 0301 	and.w	r3, r3, #1
 801b064:	2b00      	cmp	r3, #0
 801b066:	d022      	beq.n	801b0ae <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	68db      	ldr	r3, [r3, #12]
 801b06e:	899b      	ldrh	r3, [r3, #12]
 801b070:	b29b      	uxth	r3, r3
 801b072:	b21b      	sxth	r3, r3
 801b074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b078:	b21c      	sxth	r4, r3
 801b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	68db      	ldr	r3, [r3, #12]
 801b080:	899b      	ldrh	r3, [r3, #12]
 801b082:	b29b      	uxth	r3, r3
 801b084:	4618      	mov	r0, r3
 801b086:	f7f7 fcd7 	bl	8012a38 <lwip_htons>
 801b08a:	4603      	mov	r3, r0
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	b29b      	uxth	r3, r3
 801b090:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b094:	b29b      	uxth	r3, r3
 801b096:	4618      	mov	r0, r3
 801b098:	f7f7 fcce 	bl	8012a38 <lwip_htons>
 801b09c:	4603      	mov	r3, r0
 801b09e:	b21b      	sxth	r3, r3
 801b0a0:	4323      	orrs	r3, r4
 801b0a2:	b21a      	sxth	r2, r3
 801b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	68db      	ldr	r3, [r3, #12]
 801b0aa:	b292      	uxth	r2, r2
 801b0ac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0b2:	b29a      	uxth	r2, r3
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0b8:	4413      	add	r3, r2
 801b0ba:	b299      	uxth	r1, r3
 801b0bc:	4b3c      	ldr	r3, [pc, #240]	; (801b1b0 <tcp_receive+0xf14>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	b29a      	uxth	r2, r3
 801b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	1a8a      	subs	r2, r1, r2
 801b0c8:	b292      	uxth	r2, r2
 801b0ca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	685a      	ldr	r2, [r3, #4]
 801b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	891b      	ldrh	r3, [r3, #8]
 801b0d8:	4619      	mov	r1, r3
 801b0da:	4610      	mov	r0, r2
 801b0dc:	f7fb fa22 	bl	8016524 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	891c      	ldrh	r4, [r3, #8]
 801b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	899b      	ldrh	r3, [r3, #12]
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f7f7 fca1 	bl	8012a38 <lwip_htons>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	b2db      	uxtb	r3, r3
 801b0fa:	f003 0303 	and.w	r3, r3, #3
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d001      	beq.n	801b106 <tcp_receive+0xe6a>
 801b102:	2301      	movs	r3, #1
 801b104:	e000      	b.n	801b108 <tcp_receive+0xe6c>
 801b106:	2300      	movs	r3, #0
 801b108:	4423      	add	r3, r4
 801b10a:	b29a      	uxth	r2, r3
 801b10c:	4b2a      	ldr	r3, [pc, #168]	; (801b1b8 <tcp_receive+0xf1c>)
 801b10e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b110:	4b29      	ldr	r3, [pc, #164]	; (801b1b8 <tcp_receive+0xf1c>)
 801b112:	881b      	ldrh	r3, [r3, #0]
 801b114:	461a      	mov	r2, r3
 801b116:	4b26      	ldr	r3, [pc, #152]	; (801b1b0 <tcp_receive+0xf14>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	441a      	add	r2, r3
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b120:	6879      	ldr	r1, [r7, #4]
 801b122:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b124:	440b      	add	r3, r1
 801b126:	429a      	cmp	r2, r3
 801b128:	d019      	beq.n	801b15e <tcp_receive+0xec2>
 801b12a:	4b24      	ldr	r3, [pc, #144]	; (801b1bc <tcp_receive+0xf20>)
 801b12c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801b130:	4923      	ldr	r1, [pc, #140]	; (801b1c0 <tcp_receive+0xf24>)
 801b132:	4824      	ldr	r0, [pc, #144]	; (801b1c4 <tcp_receive+0xf28>)
 801b134:	f004 fcbe 	bl	801fab4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801b138:	e011      	b.n	801b15e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	63bb      	str	r3, [r7, #56]	; 0x38
 801b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b142:	2b00      	cmp	r3, #0
 801b144:	f47f aea4 	bne.w	801ae90 <tcp_receive+0xbf4>
 801b148:	e00a      	b.n	801b160 <tcp_receive+0xec4>
                break;
 801b14a:	bf00      	nop
 801b14c:	e008      	b.n	801b160 <tcp_receive+0xec4>
                break;
 801b14e:	bf00      	nop
 801b150:	e006      	b.n	801b160 <tcp_receive+0xec4>
                  break;
 801b152:	bf00      	nop
 801b154:	e004      	b.n	801b160 <tcp_receive+0xec4>
                  break;
 801b156:	bf00      	nop
 801b158:	e002      	b.n	801b160 <tcp_receive+0xec4>
                  break;
 801b15a:	bf00      	nop
 801b15c:	e000      	b.n	801b160 <tcp_receive+0xec4>
                break;
 801b15e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801b160:	6878      	ldr	r0, [r7, #4]
 801b162:	f001 fe8b 	bl	801ce7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801b166:	e003      	b.n	801b170 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801b168:	6878      	ldr	r0, [r7, #4]
 801b16a:	f001 fe87 	bl	801ce7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b16e:	e01a      	b.n	801b1a6 <tcp_receive+0xf0a>
 801b170:	e019      	b.n	801b1a6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801b172:	4b0f      	ldr	r3, [pc, #60]	; (801b1b0 <tcp_receive+0xf14>)
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b17a:	1ad3      	subs	r3, r2, r3
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	db0a      	blt.n	801b196 <tcp_receive+0xefa>
 801b180:	4b0b      	ldr	r3, [pc, #44]	; (801b1b0 <tcp_receive+0xf14>)
 801b182:	681a      	ldr	r2, [r3, #0]
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b188:	6879      	ldr	r1, [r7, #4]
 801b18a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b18c:	440b      	add	r3, r1
 801b18e:	1ad3      	subs	r3, r2, r3
 801b190:	3301      	adds	r3, #1
 801b192:	2b00      	cmp	r3, #0
 801b194:	dd07      	ble.n	801b1a6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	8b5b      	ldrh	r3, [r3, #26]
 801b19a:	f043 0302 	orr.w	r3, r3, #2
 801b19e:	b29a      	uxth	r2, r3
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801b1a4:	e7ff      	b.n	801b1a6 <tcp_receive+0xf0a>
 801b1a6:	bf00      	nop
 801b1a8:	3750      	adds	r7, #80	; 0x50
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bdb0      	pop	{r4, r5, r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	24005250 	.word	0x24005250
 801b1b4:	24005230 	.word	0x24005230
 801b1b8:	2400525a 	.word	0x2400525a
 801b1bc:	080264d4 	.word	0x080264d4
 801b1c0:	080268a8 	.word	0x080268a8
 801b1c4:	0802654c 	.word	0x0802654c

0801b1c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801b1c8:	b480      	push	{r7}
 801b1ca:	b083      	sub	sp, #12
 801b1cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801b1ce:	4b15      	ldr	r3, [pc, #84]	; (801b224 <tcp_get_next_optbyte+0x5c>)
 801b1d0:	881b      	ldrh	r3, [r3, #0]
 801b1d2:	1c5a      	adds	r2, r3, #1
 801b1d4:	b291      	uxth	r1, r2
 801b1d6:	4a13      	ldr	r2, [pc, #76]	; (801b224 <tcp_get_next_optbyte+0x5c>)
 801b1d8:	8011      	strh	r1, [r2, #0]
 801b1da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801b1dc:	4b12      	ldr	r3, [pc, #72]	; (801b228 <tcp_get_next_optbyte+0x60>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d004      	beq.n	801b1ee <tcp_get_next_optbyte+0x26>
 801b1e4:	4b11      	ldr	r3, [pc, #68]	; (801b22c <tcp_get_next_optbyte+0x64>)
 801b1e6:	881b      	ldrh	r3, [r3, #0]
 801b1e8:	88fa      	ldrh	r2, [r7, #6]
 801b1ea:	429a      	cmp	r2, r3
 801b1ec:	d208      	bcs.n	801b200 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801b1ee:	4b10      	ldr	r3, [pc, #64]	; (801b230 <tcp_get_next_optbyte+0x68>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	3314      	adds	r3, #20
 801b1f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801b1f6:	88fb      	ldrh	r3, [r7, #6]
 801b1f8:	683a      	ldr	r2, [r7, #0]
 801b1fa:	4413      	add	r3, r2
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	e00b      	b.n	801b218 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801b200:	88fb      	ldrh	r3, [r7, #6]
 801b202:	b2da      	uxtb	r2, r3
 801b204:	4b09      	ldr	r3, [pc, #36]	; (801b22c <tcp_get_next_optbyte+0x64>)
 801b206:	881b      	ldrh	r3, [r3, #0]
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	1ad3      	subs	r3, r2, r3
 801b20c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801b20e:	4b06      	ldr	r3, [pc, #24]	; (801b228 <tcp_get_next_optbyte+0x60>)
 801b210:	681a      	ldr	r2, [r3, #0]
 801b212:	797b      	ldrb	r3, [r7, #5]
 801b214:	4413      	add	r3, r2
 801b216:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b218:	4618      	mov	r0, r3
 801b21a:	370c      	adds	r7, #12
 801b21c:	46bd      	mov	sp, r7
 801b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b222:	4770      	bx	lr
 801b224:	2400524c 	.word	0x2400524c
 801b228:	24005248 	.word	0x24005248
 801b22c:	24005246 	.word	0x24005246
 801b230:	24005240 	.word	0x24005240

0801b234 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d106      	bne.n	801b250 <tcp_parseopt+0x1c>
 801b242:	4b32      	ldr	r3, [pc, #200]	; (801b30c <tcp_parseopt+0xd8>)
 801b244:	f240 727d 	movw	r2, #1917	; 0x77d
 801b248:	4931      	ldr	r1, [pc, #196]	; (801b310 <tcp_parseopt+0xdc>)
 801b24a:	4832      	ldr	r0, [pc, #200]	; (801b314 <tcp_parseopt+0xe0>)
 801b24c:	f004 fc32 	bl	801fab4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801b250:	4b31      	ldr	r3, [pc, #196]	; (801b318 <tcp_parseopt+0xe4>)
 801b252:	881b      	ldrh	r3, [r3, #0]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d055      	beq.n	801b304 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b258:	4b30      	ldr	r3, [pc, #192]	; (801b31c <tcp_parseopt+0xe8>)
 801b25a:	2200      	movs	r2, #0
 801b25c:	801a      	strh	r2, [r3, #0]
 801b25e:	e045      	b.n	801b2ec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801b260:	f7ff ffb2 	bl	801b1c8 <tcp_get_next_optbyte>
 801b264:	4603      	mov	r3, r0
 801b266:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801b268:	7bfb      	ldrb	r3, [r7, #15]
 801b26a:	2b02      	cmp	r3, #2
 801b26c:	d006      	beq.n	801b27c <tcp_parseopt+0x48>
 801b26e:	2b02      	cmp	r3, #2
 801b270:	dc2b      	bgt.n	801b2ca <tcp_parseopt+0x96>
 801b272:	2b00      	cmp	r3, #0
 801b274:	d041      	beq.n	801b2fa <tcp_parseopt+0xc6>
 801b276:	2b01      	cmp	r3, #1
 801b278:	d127      	bne.n	801b2ca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801b27a:	e037      	b.n	801b2ec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801b27c:	f7ff ffa4 	bl	801b1c8 <tcp_get_next_optbyte>
 801b280:	4603      	mov	r3, r0
 801b282:	2b04      	cmp	r3, #4
 801b284:	d13b      	bne.n	801b2fe <tcp_parseopt+0xca>
 801b286:	4b25      	ldr	r3, [pc, #148]	; (801b31c <tcp_parseopt+0xe8>)
 801b288:	881b      	ldrh	r3, [r3, #0]
 801b28a:	3301      	adds	r3, #1
 801b28c:	4a22      	ldr	r2, [pc, #136]	; (801b318 <tcp_parseopt+0xe4>)
 801b28e:	8812      	ldrh	r2, [r2, #0]
 801b290:	4293      	cmp	r3, r2
 801b292:	da34      	bge.n	801b2fe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801b294:	f7ff ff98 	bl	801b1c8 <tcp_get_next_optbyte>
 801b298:	4603      	mov	r3, r0
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	021b      	lsls	r3, r3, #8
 801b29e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801b2a0:	f7ff ff92 	bl	801b1c8 <tcp_get_next_optbyte>
 801b2a4:	4603      	mov	r3, r0
 801b2a6:	b29a      	uxth	r2, r3
 801b2a8:	89bb      	ldrh	r3, [r7, #12]
 801b2aa:	4313      	orrs	r3, r2
 801b2ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801b2ae:	89bb      	ldrh	r3, [r7, #12]
 801b2b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b2b4:	d804      	bhi.n	801b2c0 <tcp_parseopt+0x8c>
 801b2b6:	89bb      	ldrh	r3, [r7, #12]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d001      	beq.n	801b2c0 <tcp_parseopt+0x8c>
 801b2bc:	89ba      	ldrh	r2, [r7, #12]
 801b2be:	e001      	b.n	801b2c4 <tcp_parseopt+0x90>
 801b2c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801b2c8:	e010      	b.n	801b2ec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801b2ca:	f7ff ff7d 	bl	801b1c8 <tcp_get_next_optbyte>
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801b2d2:	7afb      	ldrb	r3, [r7, #11]
 801b2d4:	2b01      	cmp	r3, #1
 801b2d6:	d914      	bls.n	801b302 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801b2d8:	7afb      	ldrb	r3, [r7, #11]
 801b2da:	b29a      	uxth	r2, r3
 801b2dc:	4b0f      	ldr	r3, [pc, #60]	; (801b31c <tcp_parseopt+0xe8>)
 801b2de:	881b      	ldrh	r3, [r3, #0]
 801b2e0:	4413      	add	r3, r2
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	3b02      	subs	r3, #2
 801b2e6:	b29a      	uxth	r2, r3
 801b2e8:	4b0c      	ldr	r3, [pc, #48]	; (801b31c <tcp_parseopt+0xe8>)
 801b2ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b2ec:	4b0b      	ldr	r3, [pc, #44]	; (801b31c <tcp_parseopt+0xe8>)
 801b2ee:	881a      	ldrh	r2, [r3, #0]
 801b2f0:	4b09      	ldr	r3, [pc, #36]	; (801b318 <tcp_parseopt+0xe4>)
 801b2f2:	881b      	ldrh	r3, [r3, #0]
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d3b3      	bcc.n	801b260 <tcp_parseopt+0x2c>
 801b2f8:	e004      	b.n	801b304 <tcp_parseopt+0xd0>
          return;
 801b2fa:	bf00      	nop
 801b2fc:	e002      	b.n	801b304 <tcp_parseopt+0xd0>
            return;
 801b2fe:	bf00      	nop
 801b300:	e000      	b.n	801b304 <tcp_parseopt+0xd0>
            return;
 801b302:	bf00      	nop
      }
    }
  }
}
 801b304:	3710      	adds	r7, #16
 801b306:	46bd      	mov	sp, r7
 801b308:	bd80      	pop	{r7, pc}
 801b30a:	bf00      	nop
 801b30c:	080264d4 	.word	0x080264d4
 801b310:	08026964 	.word	0x08026964
 801b314:	0802654c 	.word	0x0802654c
 801b318:	24005244 	.word	0x24005244
 801b31c:	2400524c 	.word	0x2400524c

0801b320 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801b320:	b480      	push	{r7}
 801b322:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b324:	4b05      	ldr	r3, [pc, #20]	; (801b33c <tcp_trigger_input_pcb_close+0x1c>)
 801b326:	781b      	ldrb	r3, [r3, #0]
 801b328:	f043 0310 	orr.w	r3, r3, #16
 801b32c:	b2da      	uxtb	r2, r3
 801b32e:	4b03      	ldr	r3, [pc, #12]	; (801b33c <tcp_trigger_input_pcb_close+0x1c>)
 801b330:	701a      	strb	r2, [r3, #0]
}
 801b332:	bf00      	nop
 801b334:	46bd      	mov	sp, r7
 801b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33a:	4770      	bx	lr
 801b33c:	2400525d 	.word	0x2400525d

0801b340 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b084      	sub	sp, #16
 801b344:	af00      	add	r7, sp, #0
 801b346:	60f8      	str	r0, [r7, #12]
 801b348:	60b9      	str	r1, [r7, #8]
 801b34a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d00a      	beq.n	801b368 <tcp_route+0x28>
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	7a1b      	ldrb	r3, [r3, #8]
 801b356:	2b00      	cmp	r3, #0
 801b358:	d006      	beq.n	801b368 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	7a1b      	ldrb	r3, [r3, #8]
 801b35e:	4618      	mov	r0, r3
 801b360:	f7fa ff06 	bl	8016170 <netif_get_by_index>
 801b364:	4603      	mov	r3, r0
 801b366:	e003      	b.n	801b370 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b368:	6878      	ldr	r0, [r7, #4]
 801b36a:	f7f8 fe3b 	bl	8013fe4 <ip4_route>
 801b36e:	4603      	mov	r3, r0
  }
}
 801b370:	4618      	mov	r0, r3
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}

0801b378 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b378:	b590      	push	{r4, r7, lr}
 801b37a:	b087      	sub	sp, #28
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	60f8      	str	r0, [r7, #12]
 801b380:	60b9      	str	r1, [r7, #8]
 801b382:	603b      	str	r3, [r7, #0]
 801b384:	4613      	mov	r3, r2
 801b386:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d105      	bne.n	801b39a <tcp_create_segment+0x22>
 801b38e:	4b44      	ldr	r3, [pc, #272]	; (801b4a0 <tcp_create_segment+0x128>)
 801b390:	22a3      	movs	r2, #163	; 0xa3
 801b392:	4944      	ldr	r1, [pc, #272]	; (801b4a4 <tcp_create_segment+0x12c>)
 801b394:	4844      	ldr	r0, [pc, #272]	; (801b4a8 <tcp_create_segment+0x130>)
 801b396:	f004 fb8d 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d105      	bne.n	801b3ac <tcp_create_segment+0x34>
 801b3a0:	4b3f      	ldr	r3, [pc, #252]	; (801b4a0 <tcp_create_segment+0x128>)
 801b3a2:	22a4      	movs	r2, #164	; 0xa4
 801b3a4:	4941      	ldr	r1, [pc, #260]	; (801b4ac <tcp_create_segment+0x134>)
 801b3a6:	4840      	ldr	r0, [pc, #256]	; (801b4a8 <tcp_create_segment+0x130>)
 801b3a8:	f004 fb84 	bl	801fab4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b3ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b3b0:	009b      	lsls	r3, r3, #2
 801b3b2:	b2db      	uxtb	r3, r3
 801b3b4:	f003 0304 	and.w	r3, r3, #4
 801b3b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b3ba:	2003      	movs	r0, #3
 801b3bc:	f7fa fb52 	bl	8015a64 <memp_malloc>
 801b3c0:	6138      	str	r0, [r7, #16]
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d104      	bne.n	801b3d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b3c8:	68b8      	ldr	r0, [r7, #8]
 801b3ca:	f7fb fa31 	bl	8016830 <pbuf_free>
    return NULL;
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	e061      	b.n	801b496 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b3d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	2200      	movs	r2, #0
 801b3de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b3e0:	693b      	ldr	r3, [r7, #16]
 801b3e2:	68ba      	ldr	r2, [r7, #8]
 801b3e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	891a      	ldrh	r2, [r3, #8]
 801b3ea:	7dfb      	ldrb	r3, [r7, #23]
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d205      	bcs.n	801b3fe <tcp_create_segment+0x86>
 801b3f2:	4b2b      	ldr	r3, [pc, #172]	; (801b4a0 <tcp_create_segment+0x128>)
 801b3f4:	22b0      	movs	r2, #176	; 0xb0
 801b3f6:	492e      	ldr	r1, [pc, #184]	; (801b4b0 <tcp_create_segment+0x138>)
 801b3f8:	482b      	ldr	r0, [pc, #172]	; (801b4a8 <tcp_create_segment+0x130>)
 801b3fa:	f004 fb5b 	bl	801fab4 <iprintf>
  seg->len = p->tot_len - optlen;
 801b3fe:	68bb      	ldr	r3, [r7, #8]
 801b400:	891a      	ldrh	r2, [r3, #8]
 801b402:	7dfb      	ldrb	r3, [r7, #23]
 801b404:	b29b      	uxth	r3, r3
 801b406:	1ad3      	subs	r3, r2, r3
 801b408:	b29a      	uxth	r2, r3
 801b40a:	693b      	ldr	r3, [r7, #16]
 801b40c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b40e:	2114      	movs	r1, #20
 801b410:	68b8      	ldr	r0, [r7, #8]
 801b412:	f7fb f977 	bl	8016704 <pbuf_add_header>
 801b416:	4603      	mov	r3, r0
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d004      	beq.n	801b426 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b41c:	6938      	ldr	r0, [r7, #16]
 801b41e:	f7fd f804 	bl	801842a <tcp_seg_free>
    return NULL;
 801b422:	2300      	movs	r3, #0
 801b424:	e037      	b.n	801b496 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b426:	693b      	ldr	r3, [r7, #16]
 801b428:	685b      	ldr	r3, [r3, #4]
 801b42a:	685a      	ldr	r2, [r3, #4]
 801b42c:	693b      	ldr	r3, [r7, #16]
 801b42e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	8ada      	ldrh	r2, [r3, #22]
 801b434:	693b      	ldr	r3, [r7, #16]
 801b436:	68dc      	ldr	r4, [r3, #12]
 801b438:	4610      	mov	r0, r2
 801b43a:	f7f7 fafd 	bl	8012a38 <lwip_htons>
 801b43e:	4603      	mov	r3, r0
 801b440:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	8b1a      	ldrh	r2, [r3, #24]
 801b446:	693b      	ldr	r3, [r7, #16]
 801b448:	68dc      	ldr	r4, [r3, #12]
 801b44a:	4610      	mov	r0, r2
 801b44c:	f7f7 faf4 	bl	8012a38 <lwip_htons>
 801b450:	4603      	mov	r3, r0
 801b452:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	68dc      	ldr	r4, [r3, #12]
 801b458:	6838      	ldr	r0, [r7, #0]
 801b45a:	f7f7 fb02 	bl	8012a62 <lwip_htonl>
 801b45e:	4603      	mov	r3, r0
 801b460:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b462:	7dfb      	ldrb	r3, [r7, #23]
 801b464:	089b      	lsrs	r3, r3, #2
 801b466:	b2db      	uxtb	r3, r3
 801b468:	b29b      	uxth	r3, r3
 801b46a:	3305      	adds	r3, #5
 801b46c:	b29b      	uxth	r3, r3
 801b46e:	031b      	lsls	r3, r3, #12
 801b470:	b29a      	uxth	r2, r3
 801b472:	79fb      	ldrb	r3, [r7, #7]
 801b474:	b29b      	uxth	r3, r3
 801b476:	4313      	orrs	r3, r2
 801b478:	b29a      	uxth	r2, r3
 801b47a:	693b      	ldr	r3, [r7, #16]
 801b47c:	68dc      	ldr	r4, [r3, #12]
 801b47e:	4610      	mov	r0, r2
 801b480:	f7f7 fada 	bl	8012a38 <lwip_htons>
 801b484:	4603      	mov	r3, r0
 801b486:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	68db      	ldr	r3, [r3, #12]
 801b48c:	2200      	movs	r2, #0
 801b48e:	749a      	strb	r2, [r3, #18]
 801b490:	2200      	movs	r2, #0
 801b492:	74da      	strb	r2, [r3, #19]
  return seg;
 801b494:	693b      	ldr	r3, [r7, #16]
}
 801b496:	4618      	mov	r0, r3
 801b498:	371c      	adds	r7, #28
 801b49a:	46bd      	mov	sp, r7
 801b49c:	bd90      	pop	{r4, r7, pc}
 801b49e:	bf00      	nop
 801b4a0:	08026980 	.word	0x08026980
 801b4a4:	080269e0 	.word	0x080269e0
 801b4a8:	08026a00 	.word	0x08026a00
 801b4ac:	08026a28 	.word	0x08026a28
 801b4b0:	08026a4c 	.word	0x08026a4c

0801b4b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b086      	sub	sp, #24
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	607b      	str	r3, [r7, #4]
 801b4bc:	4603      	mov	r3, r0
 801b4be:	73fb      	strb	r3, [r7, #15]
 801b4c0:	460b      	mov	r3, r1
 801b4c2:	81bb      	strh	r3, [r7, #12]
 801b4c4:	4613      	mov	r3, r2
 801b4c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b4c8:	89bb      	ldrh	r3, [r7, #12]
 801b4ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d105      	bne.n	801b4de <tcp_pbuf_prealloc+0x2a>
 801b4d2:	4b30      	ldr	r3, [pc, #192]	; (801b594 <tcp_pbuf_prealloc+0xe0>)
 801b4d4:	22e8      	movs	r2, #232	; 0xe8
 801b4d6:	4930      	ldr	r1, [pc, #192]	; (801b598 <tcp_pbuf_prealloc+0xe4>)
 801b4d8:	4830      	ldr	r0, [pc, #192]	; (801b59c <tcp_pbuf_prealloc+0xe8>)
 801b4da:	f004 faeb 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b4de:	6a3b      	ldr	r3, [r7, #32]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d105      	bne.n	801b4f0 <tcp_pbuf_prealloc+0x3c>
 801b4e4:	4b2b      	ldr	r3, [pc, #172]	; (801b594 <tcp_pbuf_prealloc+0xe0>)
 801b4e6:	22e9      	movs	r2, #233	; 0xe9
 801b4e8:	492d      	ldr	r1, [pc, #180]	; (801b5a0 <tcp_pbuf_prealloc+0xec>)
 801b4ea:	482c      	ldr	r0, [pc, #176]	; (801b59c <tcp_pbuf_prealloc+0xe8>)
 801b4ec:	f004 fae2 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b4f0:	89ba      	ldrh	r2, [r7, #12]
 801b4f2:	897b      	ldrh	r3, [r7, #10]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d221      	bcs.n	801b53c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b4f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b4fc:	f003 0302 	and.w	r3, r3, #2
 801b500:	2b00      	cmp	r3, #0
 801b502:	d111      	bne.n	801b528 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801b504:	6a3b      	ldr	r3, [r7, #32]
 801b506:	8b5b      	ldrh	r3, [r3, #26]
 801b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d115      	bne.n	801b53c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801b510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b514:	2b00      	cmp	r3, #0
 801b516:	d007      	beq.n	801b528 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801b518:	6a3b      	ldr	r3, [r7, #32]
 801b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d103      	bne.n	801b528 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801b520:	6a3b      	ldr	r3, [r7, #32]
 801b522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801b524:	2b00      	cmp	r3, #0
 801b526:	d009      	beq.n	801b53c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b528:	89bb      	ldrh	r3, [r7, #12]
 801b52a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801b52e:	f023 0203 	bic.w	r2, r3, #3
 801b532:	897b      	ldrh	r3, [r7, #10]
 801b534:	4293      	cmp	r3, r2
 801b536:	bf28      	it	cs
 801b538:	4613      	movcs	r3, r2
 801b53a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b53c:	8af9      	ldrh	r1, [r7, #22]
 801b53e:	7bfb      	ldrb	r3, [r7, #15]
 801b540:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b544:	4618      	mov	r0, r3
 801b546:	f7fa fe8f 	bl	8016268 <pbuf_alloc>
 801b54a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d101      	bne.n	801b556 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801b552:	2300      	movs	r3, #0
 801b554:	e019      	b.n	801b58a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b556:	693b      	ldr	r3, [r7, #16]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d006      	beq.n	801b56c <tcp_pbuf_prealloc+0xb8>
 801b55e:	4b0d      	ldr	r3, [pc, #52]	; (801b594 <tcp_pbuf_prealloc+0xe0>)
 801b560:	f240 120b 	movw	r2, #267	; 0x10b
 801b564:	490f      	ldr	r1, [pc, #60]	; (801b5a4 <tcp_pbuf_prealloc+0xf0>)
 801b566:	480d      	ldr	r0, [pc, #52]	; (801b59c <tcp_pbuf_prealloc+0xe8>)
 801b568:	f004 faa4 	bl	801fab4 <iprintf>
  *oversize = p->len - length;
 801b56c:	693b      	ldr	r3, [r7, #16]
 801b56e:	895a      	ldrh	r2, [r3, #10]
 801b570:	89bb      	ldrh	r3, [r7, #12]
 801b572:	1ad3      	subs	r3, r2, r3
 801b574:	b29a      	uxth	r2, r3
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	89ba      	ldrh	r2, [r7, #12]
 801b57e:	811a      	strh	r2, [r3, #8]
 801b580:	693b      	ldr	r3, [r7, #16]
 801b582:	891a      	ldrh	r2, [r3, #8]
 801b584:	693b      	ldr	r3, [r7, #16]
 801b586:	815a      	strh	r2, [r3, #10]
  return p;
 801b588:	693b      	ldr	r3, [r7, #16]
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3718      	adds	r7, #24
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
 801b592:	bf00      	nop
 801b594:	08026980 	.word	0x08026980
 801b598:	08026a64 	.word	0x08026a64
 801b59c:	08026a00 	.word	0x08026a00
 801b5a0:	08026a88 	.word	0x08026a88
 801b5a4:	08026aa8 	.word	0x08026aa8

0801b5a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b082      	sub	sp, #8
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	460b      	mov	r3, r1
 801b5b2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d106      	bne.n	801b5c8 <tcp_write_checks+0x20>
 801b5ba:	4b33      	ldr	r3, [pc, #204]	; (801b688 <tcp_write_checks+0xe0>)
 801b5bc:	f240 1233 	movw	r2, #307	; 0x133
 801b5c0:	4932      	ldr	r1, [pc, #200]	; (801b68c <tcp_write_checks+0xe4>)
 801b5c2:	4833      	ldr	r0, [pc, #204]	; (801b690 <tcp_write_checks+0xe8>)
 801b5c4:	f004 fa76 	bl	801fab4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	7d1b      	ldrb	r3, [r3, #20]
 801b5cc:	2b04      	cmp	r3, #4
 801b5ce:	d00e      	beq.n	801b5ee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b5d4:	2b07      	cmp	r3, #7
 801b5d6:	d00a      	beq.n	801b5ee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b5dc:	2b02      	cmp	r3, #2
 801b5de:	d006      	beq.n	801b5ee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b5e4:	2b03      	cmp	r3, #3
 801b5e6:	d002      	beq.n	801b5ee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b5e8:	f06f 030a 	mvn.w	r3, #10
 801b5ec:	e048      	b.n	801b680 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b5ee:	887b      	ldrh	r3, [r7, #2]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d101      	bne.n	801b5f8 <tcp_write_checks+0x50>
    return ERR_OK;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	e043      	b.n	801b680 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b5fe:	887a      	ldrh	r2, [r7, #2]
 801b600:	429a      	cmp	r2, r3
 801b602:	d909      	bls.n	801b618 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	8b5b      	ldrh	r3, [r3, #26]
 801b608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b60c:	b29a      	uxth	r2, r3
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b616:	e033      	b.n	801b680 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b61e:	2b08      	cmp	r3, #8
 801b620:	d909      	bls.n	801b636 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	8b5b      	ldrh	r3, [r3, #26]
 801b626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b62a:	b29a      	uxth	r2, r3
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b634:	e024      	b.n	801b680 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d00f      	beq.n	801b660 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b644:	2b00      	cmp	r3, #0
 801b646:	d11a      	bne.n	801b67e <tcp_write_checks+0xd6>
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d116      	bne.n	801b67e <tcp_write_checks+0xd6>
 801b650:	4b0d      	ldr	r3, [pc, #52]	; (801b688 <tcp_write_checks+0xe0>)
 801b652:	f240 1255 	movw	r2, #341	; 0x155
 801b656:	490f      	ldr	r1, [pc, #60]	; (801b694 <tcp_write_checks+0xec>)
 801b658:	480d      	ldr	r0, [pc, #52]	; (801b690 <tcp_write_checks+0xe8>)
 801b65a:	f004 fa2b 	bl	801fab4 <iprintf>
 801b65e:	e00e      	b.n	801b67e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b664:	2b00      	cmp	r3, #0
 801b666:	d103      	bne.n	801b670 <tcp_write_checks+0xc8>
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d006      	beq.n	801b67e <tcp_write_checks+0xd6>
 801b670:	4b05      	ldr	r3, [pc, #20]	; (801b688 <tcp_write_checks+0xe0>)
 801b672:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b676:	4908      	ldr	r1, [pc, #32]	; (801b698 <tcp_write_checks+0xf0>)
 801b678:	4805      	ldr	r0, [pc, #20]	; (801b690 <tcp_write_checks+0xe8>)
 801b67a:	f004 fa1b 	bl	801fab4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b67e:	2300      	movs	r3, #0
}
 801b680:	4618      	mov	r0, r3
 801b682:	3708      	adds	r7, #8
 801b684:	46bd      	mov	sp, r7
 801b686:	bd80      	pop	{r7, pc}
 801b688:	08026980 	.word	0x08026980
 801b68c:	08026abc 	.word	0x08026abc
 801b690:	08026a00 	.word	0x08026a00
 801b694:	08026adc 	.word	0x08026adc
 801b698:	08026b18 	.word	0x08026b18

0801b69c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801b69c:	b590      	push	{r4, r7, lr}
 801b69e:	b09b      	sub	sp, #108	; 0x6c
 801b6a0:	af04      	add	r7, sp, #16
 801b6a2:	60f8      	str	r0, [r7, #12]
 801b6a4:	60b9      	str	r1, [r7, #8]
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	461a      	mov	r2, r3
 801b6aa:	460b      	mov	r3, r1
 801b6ac:	80fb      	strh	r3, [r7, #6]
 801b6ae:	4613      	mov	r3, r2
 801b6b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	653b      	str	r3, [r7, #80]	; 0x50
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b6be:	2300      	movs	r3, #0
 801b6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d109      	bne.n	801b6f8 <tcp_write+0x5c>
 801b6e4:	4ba4      	ldr	r3, [pc, #656]	; (801b978 <tcp_write+0x2dc>)
 801b6e6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b6ea:	49a4      	ldr	r1, [pc, #656]	; (801b97c <tcp_write+0x2e0>)
 801b6ec:	48a4      	ldr	r0, [pc, #656]	; (801b980 <tcp_write+0x2e4>)
 801b6ee:	f004 f9e1 	bl	801fab4 <iprintf>
 801b6f2:	f06f 030f 	mvn.w	r3, #15
 801b6f6:	e32a      	b.n	801bd4e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801b6fe:	085b      	lsrs	r3, r3, #1
 801b700:	b29a      	uxth	r2, r3
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b706:	4293      	cmp	r3, r2
 801b708:	bf28      	it	cs
 801b70a:	4613      	movcs	r3, r2
 801b70c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801b70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b710:	2b00      	cmp	r3, #0
 801b712:	d102      	bne.n	801b71a <tcp_write+0x7e>
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b718:	e000      	b.n	801b71c <tcp_write+0x80>
 801b71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b71c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d109      	bne.n	801b738 <tcp_write+0x9c>
 801b724:	4b94      	ldr	r3, [pc, #592]	; (801b978 <tcp_write+0x2dc>)
 801b726:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b72a:	4996      	ldr	r1, [pc, #600]	; (801b984 <tcp_write+0x2e8>)
 801b72c:	4894      	ldr	r0, [pc, #592]	; (801b980 <tcp_write+0x2e4>)
 801b72e:	f004 f9c1 	bl	801fab4 <iprintf>
 801b732:	f06f 030f 	mvn.w	r3, #15
 801b736:	e30a      	b.n	801bd4e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801b738:	88fb      	ldrh	r3, [r7, #6]
 801b73a:	4619      	mov	r1, r3
 801b73c:	68f8      	ldr	r0, [r7, #12]
 801b73e:	f7ff ff33 	bl	801b5a8 <tcp_write_checks>
 801b742:	4603      	mov	r3, r0
 801b744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801b748:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d002      	beq.n	801b756 <tcp_write+0xba>
    return err;
 801b750:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b754:	e2fb      	b.n	801bd4e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b75c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b760:	2300      	movs	r3, #0
 801b762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	f000 80f6 	beq.w	801b95c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b774:	653b      	str	r3, [r7, #80]	; 0x50
 801b776:	e002      	b.n	801b77e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801b778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d1f8      	bne.n	801b778 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b788:	7a9b      	ldrb	r3, [r3, #10]
 801b78a:	009b      	lsls	r3, r3, #2
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	f003 0304 	and.w	r3, r3, #4
 801b792:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b798:	891b      	ldrh	r3, [r3, #8]
 801b79a:	4619      	mov	r1, r3
 801b79c:	8c3b      	ldrh	r3, [r7, #32]
 801b79e:	440b      	add	r3, r1
 801b7a0:	429a      	cmp	r2, r3
 801b7a2:	da06      	bge.n	801b7b2 <tcp_write+0x116>
 801b7a4:	4b74      	ldr	r3, [pc, #464]	; (801b978 <tcp_write+0x2dc>)
 801b7a6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b7aa:	4977      	ldr	r1, [pc, #476]	; (801b988 <tcp_write+0x2ec>)
 801b7ac:	4874      	ldr	r0, [pc, #464]	; (801b980 <tcp_write+0x2e4>)
 801b7ae:	f004 f981 	bl	801fab4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b7b4:	891a      	ldrh	r2, [r3, #8]
 801b7b6:	8c3b      	ldrh	r3, [r7, #32]
 801b7b8:	4413      	add	r3, r2
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b7be:	1ad3      	subs	r3, r2, r3
 801b7c0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b7c8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801b7ca:	8a7b      	ldrh	r3, [r7, #18]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d026      	beq.n	801b81e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b7d0:	8a7b      	ldrh	r3, [r7, #18]
 801b7d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b7d4:	429a      	cmp	r2, r3
 801b7d6:	d206      	bcs.n	801b7e6 <tcp_write+0x14a>
 801b7d8:	4b67      	ldr	r3, [pc, #412]	; (801b978 <tcp_write+0x2dc>)
 801b7da:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b7de:	496b      	ldr	r1, [pc, #428]	; (801b98c <tcp_write+0x2f0>)
 801b7e0:	4867      	ldr	r0, [pc, #412]	; (801b980 <tcp_write+0x2e4>)
 801b7e2:	f004 f967 	bl	801fab4 <iprintf>
      seg = last_unsent;
 801b7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b7ea:	8a7b      	ldrh	r3, [r7, #18]
 801b7ec:	88fa      	ldrh	r2, [r7, #6]
 801b7ee:	4293      	cmp	r3, r2
 801b7f0:	bf28      	it	cs
 801b7f2:	4613      	movcs	r3, r2
 801b7f4:	b29b      	uxth	r3, r3
 801b7f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	bf28      	it	cs
 801b7fc:	4613      	movcs	r3, r2
 801b7fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801b800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b806:	4413      	add	r3, r2
 801b808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801b80c:	8a7a      	ldrh	r2, [r7, #18]
 801b80e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b810:	1ad3      	subs	r3, r2, r3
 801b812:	b29b      	uxth	r3, r3
 801b814:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801b816:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b81a:	1ad3      	subs	r3, r2, r3
 801b81c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b81e:	8a7b      	ldrh	r3, [r7, #18]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d00b      	beq.n	801b83c <tcp_write+0x1a0>
 801b824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b828:	88fb      	ldrh	r3, [r7, #6]
 801b82a:	429a      	cmp	r2, r3
 801b82c:	d006      	beq.n	801b83c <tcp_write+0x1a0>
 801b82e:	4b52      	ldr	r3, [pc, #328]	; (801b978 <tcp_write+0x2dc>)
 801b830:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b834:	4956      	ldr	r1, [pc, #344]	; (801b990 <tcp_write+0x2f4>)
 801b836:	4852      	ldr	r0, [pc, #328]	; (801b980 <tcp_write+0x2e4>)
 801b838:	f004 f93c 	bl	801fab4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b83c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b840:	88fb      	ldrh	r3, [r7, #6]
 801b842:	429a      	cmp	r2, r3
 801b844:	f080 8167 	bcs.w	801bb16 <tcp_write+0x47a>
 801b848:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	f000 8163 	beq.w	801bb16 <tcp_write+0x47a>
 801b850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b852:	891b      	ldrh	r3, [r3, #8]
 801b854:	2b00      	cmp	r3, #0
 801b856:	f000 815e 	beq.w	801bb16 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b85a:	88fa      	ldrh	r2, [r7, #6]
 801b85c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b860:	1ad2      	subs	r2, r2, r3
 801b862:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b864:	4293      	cmp	r3, r2
 801b866:	bfa8      	it	ge
 801b868:	4613      	movge	r3, r2
 801b86a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801b86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b86e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b870:	797b      	ldrb	r3, [r7, #5]
 801b872:	f003 0301 	and.w	r3, r3, #1
 801b876:	2b00      	cmp	r3, #0
 801b878:	d027      	beq.n	801b8ca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b87a:	f107 0012 	add.w	r0, r7, #18
 801b87e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b880:	8bf9      	ldrh	r1, [r7, #30]
 801b882:	2301      	movs	r3, #1
 801b884:	9302      	str	r3, [sp, #8]
 801b886:	797b      	ldrb	r3, [r7, #5]
 801b888:	9301      	str	r3, [sp, #4]
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	9300      	str	r3, [sp, #0]
 801b88e:	4603      	mov	r3, r0
 801b890:	2000      	movs	r0, #0
 801b892:	f7ff fe0f 	bl	801b4b4 <tcp_pbuf_prealloc>
 801b896:	6578      	str	r0, [r7, #84]	; 0x54
 801b898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	f000 8225 	beq.w	801bcea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b8a2:	6858      	ldr	r0, [r3, #4]
 801b8a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b8a8:	68ba      	ldr	r2, [r7, #8]
 801b8aa:	4413      	add	r3, r2
 801b8ac:	8bfa      	ldrh	r2, [r7, #30]
 801b8ae:	4619      	mov	r1, r3
 801b8b0:	f003 f9e0 	bl	801ec74 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801b8b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b8b6:	f7fb f843 	bl	8016940 <pbuf_clen>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	461a      	mov	r2, r3
 801b8be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b8c2:	4413      	add	r3, r2
 801b8c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b8c8:	e041      	b.n	801b94e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	637b      	str	r3, [r7, #52]	; 0x34
 801b8d0:	e002      	b.n	801b8d8 <tcp_write+0x23c>
 801b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	637b      	str	r3, [r7, #52]	; 0x34
 801b8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d1f8      	bne.n	801b8d2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8e2:	7b1b      	ldrb	r3, [r3, #12]
 801b8e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d115      	bne.n	801b918 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b8f2:	8952      	ldrh	r2, [r2, #10]
 801b8f4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b8f6:	68ba      	ldr	r2, [r7, #8]
 801b8f8:	429a      	cmp	r2, r3
 801b8fa:	d10d      	bne.n	801b918 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b900:	2b00      	cmp	r3, #0
 801b902:	d006      	beq.n	801b912 <tcp_write+0x276>
 801b904:	4b1c      	ldr	r3, [pc, #112]	; (801b978 <tcp_write+0x2dc>)
 801b906:	f240 2231 	movw	r2, #561	; 0x231
 801b90a:	4922      	ldr	r1, [pc, #136]	; (801b994 <tcp_write+0x2f8>)
 801b90c:	481c      	ldr	r0, [pc, #112]	; (801b980 <tcp_write+0x2e4>)
 801b90e:	f004 f8d1 	bl	801fab4 <iprintf>
          extendlen = seglen;
 801b912:	8bfb      	ldrh	r3, [r7, #30]
 801b914:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801b916:	e01a      	b.n	801b94e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b918:	8bfb      	ldrh	r3, [r7, #30]
 801b91a:	2201      	movs	r2, #1
 801b91c:	4619      	mov	r1, r3
 801b91e:	2000      	movs	r0, #0
 801b920:	f7fa fca2 	bl	8016268 <pbuf_alloc>
 801b924:	6578      	str	r0, [r7, #84]	; 0x54
 801b926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b928:	2b00      	cmp	r3, #0
 801b92a:	f000 81e0 	beq.w	801bcee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b92e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b932:	68ba      	ldr	r2, [r7, #8]
 801b934:	441a      	add	r2, r3
 801b936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b938:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801b93a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b93c:	f7fb f800 	bl	8016940 <pbuf_clen>
 801b940:	4603      	mov	r3, r0
 801b942:	461a      	mov	r2, r3
 801b944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b948:	4413      	add	r3, r2
 801b94a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801b94e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b952:	8bfb      	ldrh	r3, [r7, #30]
 801b954:	4413      	add	r3, r2
 801b956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b95a:	e0dc      	b.n	801bb16 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b962:	2b00      	cmp	r3, #0
 801b964:	f000 80d7 	beq.w	801bb16 <tcp_write+0x47a>
 801b968:	4b03      	ldr	r3, [pc, #12]	; (801b978 <tcp_write+0x2dc>)
 801b96a:	f240 224a 	movw	r2, #586	; 0x24a
 801b96e:	490a      	ldr	r1, [pc, #40]	; (801b998 <tcp_write+0x2fc>)
 801b970:	4803      	ldr	r0, [pc, #12]	; (801b980 <tcp_write+0x2e4>)
 801b972:	f004 f89f 	bl	801fab4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801b976:	e0ce      	b.n	801bb16 <tcp_write+0x47a>
 801b978:	08026980 	.word	0x08026980
 801b97c:	08026b4c 	.word	0x08026b4c
 801b980:	08026a00 	.word	0x08026a00
 801b984:	08026b64 	.word	0x08026b64
 801b988:	08026b98 	.word	0x08026b98
 801b98c:	08026bb0 	.word	0x08026bb0
 801b990:	08026bd0 	.word	0x08026bd0
 801b994:	08026bf0 	.word	0x08026bf0
 801b998:	08026c1c 	.word	0x08026c1c
    struct pbuf *p;
    u16_t left = len - pos;
 801b99c:	88fa      	ldrh	r2, [r7, #6]
 801b99e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b9a2:	1ad3      	subs	r3, r2, r3
 801b9a4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801b9a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b9ae:	1ad3      	subs	r3, r2, r3
 801b9b0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801b9b2:	8b7a      	ldrh	r2, [r7, #26]
 801b9b4:	8bbb      	ldrh	r3, [r7, #28]
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	bf28      	it	cs
 801b9ba:	4613      	movcs	r3, r2
 801b9bc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b9be:	797b      	ldrb	r3, [r7, #5]
 801b9c0:	f003 0301 	and.w	r3, r3, #1
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d036      	beq.n	801ba36 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b9c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b9cc:	b29a      	uxth	r2, r3
 801b9ce:	8b3b      	ldrh	r3, [r7, #24]
 801b9d0:	4413      	add	r3, r2
 801b9d2:	b299      	uxth	r1, r3
 801b9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	bf0c      	ite	eq
 801b9da:	2301      	moveq	r3, #1
 801b9dc:	2300      	movne	r3, #0
 801b9de:	b2db      	uxtb	r3, r3
 801b9e0:	f107 0012 	add.w	r0, r7, #18
 801b9e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b9e6:	9302      	str	r3, [sp, #8]
 801b9e8:	797b      	ldrb	r3, [r7, #5]
 801b9ea:	9301      	str	r3, [sp, #4]
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	9300      	str	r3, [sp, #0]
 801b9f0:	4603      	mov	r3, r0
 801b9f2:	2036      	movs	r0, #54	; 0x36
 801b9f4:	f7ff fd5e 	bl	801b4b4 <tcp_pbuf_prealloc>
 801b9f8:	6338      	str	r0, [r7, #48]	; 0x30
 801b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	f000 8178 	beq.w	801bcf2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba04:	895b      	ldrh	r3, [r3, #10]
 801ba06:	8b3a      	ldrh	r2, [r7, #24]
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d906      	bls.n	801ba1a <tcp_write+0x37e>
 801ba0c:	4b8c      	ldr	r3, [pc, #560]	; (801bc40 <tcp_write+0x5a4>)
 801ba0e:	f240 2266 	movw	r2, #614	; 0x266
 801ba12:	498c      	ldr	r1, [pc, #560]	; (801bc44 <tcp_write+0x5a8>)
 801ba14:	488c      	ldr	r0, [pc, #560]	; (801bc48 <tcp_write+0x5ac>)
 801ba16:	f004 f84d 	bl	801fab4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba1c:	685a      	ldr	r2, [r3, #4]
 801ba1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ba22:	18d0      	adds	r0, r2, r3
 801ba24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ba28:	68ba      	ldr	r2, [r7, #8]
 801ba2a:	4413      	add	r3, r2
 801ba2c:	8b3a      	ldrh	r2, [r7, #24]
 801ba2e:	4619      	mov	r1, r3
 801ba30:	f003 f920 	bl	801ec74 <memcpy>
 801ba34:	e02f      	b.n	801ba96 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ba36:	8a7b      	ldrh	r3, [r7, #18]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d006      	beq.n	801ba4a <tcp_write+0x3ae>
 801ba3c:	4b80      	ldr	r3, [pc, #512]	; (801bc40 <tcp_write+0x5a4>)
 801ba3e:	f240 2271 	movw	r2, #625	; 0x271
 801ba42:	4982      	ldr	r1, [pc, #520]	; (801bc4c <tcp_write+0x5b0>)
 801ba44:	4880      	ldr	r0, [pc, #512]	; (801bc48 <tcp_write+0x5ac>)
 801ba46:	f004 f835 	bl	801fab4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ba4a:	8b3b      	ldrh	r3, [r7, #24]
 801ba4c:	2201      	movs	r2, #1
 801ba4e:	4619      	mov	r1, r3
 801ba50:	2036      	movs	r0, #54	; 0x36
 801ba52:	f7fa fc09 	bl	8016268 <pbuf_alloc>
 801ba56:	6178      	str	r0, [r7, #20]
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	f000 814b 	beq.w	801bcf6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ba60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ba64:	68ba      	ldr	r2, [r7, #8]
 801ba66:	441a      	add	r2, r3
 801ba68:	697b      	ldr	r3, [r7, #20]
 801ba6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ba6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ba70:	b29b      	uxth	r3, r3
 801ba72:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ba76:	4619      	mov	r1, r3
 801ba78:	2036      	movs	r0, #54	; 0x36
 801ba7a:	f7fa fbf5 	bl	8016268 <pbuf_alloc>
 801ba7e:	6338      	str	r0, [r7, #48]	; 0x30
 801ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d103      	bne.n	801ba8e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801ba86:	6978      	ldr	r0, [r7, #20]
 801ba88:	f7fa fed2 	bl	8016830 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801ba8c:	e136      	b.n	801bcfc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801ba8e:	6979      	ldr	r1, [r7, #20]
 801ba90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ba92:	f7fa ff8f 	bl	80169b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801ba96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ba98:	f7fa ff52 	bl	8016940 <pbuf_clen>
 801ba9c:	4603      	mov	r3, r0
 801ba9e:	461a      	mov	r2, r3
 801baa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801baa4:	4413      	add	r3, r2
 801baa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801baaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801baae:	2b09      	cmp	r3, #9
 801bab0:	d903      	bls.n	801baba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801bab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bab4:	f7fa febc 	bl	8016830 <pbuf_free>
      goto memerr;
 801bab8:	e120      	b.n	801bcfc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801babe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bac2:	441a      	add	r2, r3
 801bac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bac8:	9300      	str	r3, [sp, #0]
 801baca:	4613      	mov	r3, r2
 801bacc:	2200      	movs	r2, #0
 801bace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bad0:	68f8      	ldr	r0, [r7, #12]
 801bad2:	f7ff fc51 	bl	801b378 <tcp_create_segment>
 801bad6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bada:	2b00      	cmp	r3, #0
 801badc:	f000 810d 	beq.w	801bcfa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801bae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d102      	bne.n	801baec <tcp_write+0x450>
      queue = seg;
 801bae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bae8:	647b      	str	r3, [r7, #68]	; 0x44
 801baea:	e00c      	b.n	801bb06 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801baec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d106      	bne.n	801bb00 <tcp_write+0x464>
 801baf2:	4b53      	ldr	r3, [pc, #332]	; (801bc40 <tcp_write+0x5a4>)
 801baf4:	f240 22ab 	movw	r2, #683	; 0x2ab
 801baf8:	4955      	ldr	r1, [pc, #340]	; (801bc50 <tcp_write+0x5b4>)
 801bafa:	4853      	ldr	r0, [pc, #332]	; (801bc48 <tcp_write+0x5ac>)
 801bafc:	f003 ffda 	bl	801fab4 <iprintf>
      prev_seg->next = seg;
 801bb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bb04:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801bb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb08:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801bb0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb0e:	8b3b      	ldrh	r3, [r7, #24]
 801bb10:	4413      	add	r3, r2
 801bb12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801bb16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb1a:	88fb      	ldrh	r3, [r7, #6]
 801bb1c:	429a      	cmp	r2, r3
 801bb1e:	f4ff af3d 	bcc.w	801b99c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801bb22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d02c      	beq.n	801bb82 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb2a:	685b      	ldr	r3, [r3, #4]
 801bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bb2e:	e01e      	b.n	801bb6e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb32:	891a      	ldrh	r2, [r3, #8]
 801bb34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb36:	4413      	add	r3, r2
 801bb38:	b29a      	uxth	r2, r3
 801bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb3c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d110      	bne.n	801bb68 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb48:	685b      	ldr	r3, [r3, #4]
 801bb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bb4c:	8952      	ldrh	r2, [r2, #10]
 801bb4e:	4413      	add	r3, r2
 801bb50:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bb52:	68b9      	ldr	r1, [r7, #8]
 801bb54:	4618      	mov	r0, r3
 801bb56:	f003 f88d 	bl	801ec74 <memcpy>
        p->len += oversize_used;
 801bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb5c:	895a      	ldrh	r2, [r3, #10]
 801bb5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb60:	4413      	add	r3, r2
 801bb62:	b29a      	uxth	r2, r3
 801bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb66:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d1dd      	bne.n	801bb30 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801bb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb76:	891a      	ldrh	r2, [r3, #8]
 801bb78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb7a:	4413      	add	r3, r2
 801bb7c:	b29a      	uxth	r2, r3
 801bb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb80:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801bb82:	8a7a      	ldrh	r2, [r7, #18]
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801bb8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d018      	beq.n	801bbc2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801bb90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d106      	bne.n	801bba4 <tcp_write+0x508>
 801bb96:	4b2a      	ldr	r3, [pc, #168]	; (801bc40 <tcp_write+0x5a4>)
 801bb98:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801bb9c:	492d      	ldr	r1, [pc, #180]	; (801bc54 <tcp_write+0x5b8>)
 801bb9e:	482a      	ldr	r0, [pc, #168]	; (801bc48 <tcp_write+0x5ac>)
 801bba0:	f003 ff88 	bl	801fab4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801bba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bba6:	685b      	ldr	r3, [r3, #4]
 801bba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f7fa ff02 	bl	80169b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801bbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbb2:	891a      	ldrh	r2, [r3, #8]
 801bbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bbb6:	891b      	ldrh	r3, [r3, #8]
 801bbb8:	4413      	add	r3, r2
 801bbba:	b29a      	uxth	r2, r3
 801bbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbbe:	811a      	strh	r2, [r3, #8]
 801bbc0:	e037      	b.n	801bc32 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801bbc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d034      	beq.n	801bc32 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801bbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d003      	beq.n	801bbd6 <tcp_write+0x53a>
 801bbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbd0:	685b      	ldr	r3, [r3, #4]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d106      	bne.n	801bbe4 <tcp_write+0x548>
 801bbd6:	4b1a      	ldr	r3, [pc, #104]	; (801bc40 <tcp_write+0x5a4>)
 801bbd8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801bbdc:	491e      	ldr	r1, [pc, #120]	; (801bc58 <tcp_write+0x5bc>)
 801bbde:	481a      	ldr	r0, [pc, #104]	; (801bc48 <tcp_write+0x5ac>)
 801bbe0:	f003 ff68 	bl	801fab4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbe6:	685b      	ldr	r3, [r3, #4]
 801bbe8:	62bb      	str	r3, [r7, #40]	; 0x28
 801bbea:	e009      	b.n	801bc00 <tcp_write+0x564>
      p->tot_len += extendlen;
 801bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbee:	891a      	ldrh	r2, [r3, #8]
 801bbf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bbf2:	4413      	add	r3, r2
 801bbf4:	b29a      	uxth	r2, r3
 801bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbf8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	62bb      	str	r3, [r7, #40]	; 0x28
 801bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d1f1      	bne.n	801bbec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc0a:	891a      	ldrh	r2, [r3, #8]
 801bc0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc0e:	4413      	add	r3, r2
 801bc10:	b29a      	uxth	r2, r3
 801bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc14:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc18:	895a      	ldrh	r2, [r3, #10]
 801bc1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc1c:	4413      	add	r3, r2
 801bc1e:	b29a      	uxth	r2, r3
 801bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc22:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801bc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc26:	891a      	ldrh	r2, [r3, #8]
 801bc28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc2a:	4413      	add	r3, r2
 801bc2c:	b29a      	uxth	r2, r3
 801bc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc30:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801bc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d111      	bne.n	801bc5c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bc3c:	66da      	str	r2, [r3, #108]	; 0x6c
 801bc3e:	e010      	b.n	801bc62 <tcp_write+0x5c6>
 801bc40:	08026980 	.word	0x08026980
 801bc44:	08026c4c 	.word	0x08026c4c
 801bc48:	08026a00 	.word	0x08026a00
 801bc4c:	08026c8c 	.word	0x08026c8c
 801bc50:	08026c9c 	.word	0x08026c9c
 801bc54:	08026cb0 	.word	0x08026cb0
 801bc58:	08026ce8 	.word	0x08026ce8
  } else {
    last_unsent->next = queue;
 801bc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bc60:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801bc66:	88fb      	ldrh	r3, [r7, #6]
 801bc68:	441a      	add	r2, r3
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801bc74:	88fb      	ldrh	r3, [r7, #6]
 801bc76:	1ad3      	subs	r3, r2, r3
 801bc78:	b29a      	uxth	r2, r3
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bc86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d00e      	beq.n	801bcb2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d10a      	bne.n	801bcb2 <tcp_write+0x616>
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d106      	bne.n	801bcb2 <tcp_write+0x616>
 801bca4:	4b2c      	ldr	r3, [pc, #176]	; (801bd58 <tcp_write+0x6bc>)
 801bca6:	f240 3212 	movw	r2, #786	; 0x312
 801bcaa:	492c      	ldr	r1, [pc, #176]	; (801bd5c <tcp_write+0x6c0>)
 801bcac:	482c      	ldr	r0, [pc, #176]	; (801bd60 <tcp_write+0x6c4>)
 801bcae:	f003 ff01 	bl	801fab4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801bcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d016      	beq.n	801bce6 <tcp_write+0x64a>
 801bcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcba:	68db      	ldr	r3, [r3, #12]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d012      	beq.n	801bce6 <tcp_write+0x64a>
 801bcc0:	797b      	ldrb	r3, [r7, #5]
 801bcc2:	f003 0302 	and.w	r3, r3, #2
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d10d      	bne.n	801bce6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bccc:	68db      	ldr	r3, [r3, #12]
 801bcce:	899b      	ldrh	r3, [r3, #12]
 801bcd0:	b29c      	uxth	r4, r3
 801bcd2:	2008      	movs	r0, #8
 801bcd4:	f7f6 feb0 	bl	8012a38 <lwip_htons>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	461a      	mov	r2, r3
 801bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcde:	68db      	ldr	r3, [r3, #12]
 801bce0:	4322      	orrs	r2, r4
 801bce2:	b292      	uxth	r2, r2
 801bce4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801bce6:	2300      	movs	r3, #0
 801bce8:	e031      	b.n	801bd4e <tcp_write+0x6b2>
          goto memerr;
 801bcea:	bf00      	nop
 801bcec:	e006      	b.n	801bcfc <tcp_write+0x660>
            goto memerr;
 801bcee:	bf00      	nop
 801bcf0:	e004      	b.n	801bcfc <tcp_write+0x660>
        goto memerr;
 801bcf2:	bf00      	nop
 801bcf4:	e002      	b.n	801bcfc <tcp_write+0x660>
        goto memerr;
 801bcf6:	bf00      	nop
 801bcf8:	e000      	b.n	801bcfc <tcp_write+0x660>
      goto memerr;
 801bcfa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	8b5b      	ldrh	r3, [r3, #26]
 801bd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd04:	b29a      	uxth	r2, r3
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801bd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d002      	beq.n	801bd16 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801bd10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bd12:	f7fa fd8d 	bl	8016830 <pbuf_free>
  }
  if (queue != NULL) {
 801bd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d002      	beq.n	801bd22 <tcp_write+0x686>
    tcp_segs_free(queue);
 801bd1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bd1e:	f7fc fb6f 	bl	8018400 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d00e      	beq.n	801bd4a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d10a      	bne.n	801bd4a <tcp_write+0x6ae>
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d106      	bne.n	801bd4a <tcp_write+0x6ae>
 801bd3c:	4b06      	ldr	r3, [pc, #24]	; (801bd58 <tcp_write+0x6bc>)
 801bd3e:	f240 3227 	movw	r2, #807	; 0x327
 801bd42:	4906      	ldr	r1, [pc, #24]	; (801bd5c <tcp_write+0x6c0>)
 801bd44:	4806      	ldr	r0, [pc, #24]	; (801bd60 <tcp_write+0x6c4>)
 801bd46:	f003 feb5 	bl	801fab4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801bd4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801bd4e:	4618      	mov	r0, r3
 801bd50:	375c      	adds	r7, #92	; 0x5c
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd90      	pop	{r4, r7, pc}
 801bd56:	bf00      	nop
 801bd58:	08026980 	.word	0x08026980
 801bd5c:	08026d20 	.word	0x08026d20
 801bd60:	08026a00 	.word	0x08026a00

0801bd64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801bd64:	b590      	push	{r4, r7, lr}
 801bd66:	b08b      	sub	sp, #44	; 0x2c
 801bd68:	af02      	add	r7, sp, #8
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	460b      	mov	r3, r1
 801bd6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801bd70:	2300      	movs	r3, #0
 801bd72:	61fb      	str	r3, [r7, #28]
 801bd74:	2300      	movs	r3, #0
 801bd76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801bd78:	2300      	movs	r3, #0
 801bd7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d106      	bne.n	801bd90 <tcp_split_unsent_seg+0x2c>
 801bd82:	4b95      	ldr	r3, [pc, #596]	; (801bfd8 <tcp_split_unsent_seg+0x274>)
 801bd84:	f240 324b 	movw	r2, #843	; 0x34b
 801bd88:	4994      	ldr	r1, [pc, #592]	; (801bfdc <tcp_split_unsent_seg+0x278>)
 801bd8a:	4895      	ldr	r0, [pc, #596]	; (801bfe0 <tcp_split_unsent_seg+0x27c>)
 801bd8c:	f003 fe92 	bl	801fab4 <iprintf>

  useg = pcb->unsent;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d102      	bne.n	801bda2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801bd9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bda0:	e116      	b.n	801bfd0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801bda2:	887b      	ldrh	r3, [r7, #2]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d109      	bne.n	801bdbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801bda8:	4b8b      	ldr	r3, [pc, #556]	; (801bfd8 <tcp_split_unsent_seg+0x274>)
 801bdaa:	f240 3253 	movw	r2, #851	; 0x353
 801bdae:	498d      	ldr	r1, [pc, #564]	; (801bfe4 <tcp_split_unsent_seg+0x280>)
 801bdb0:	488b      	ldr	r0, [pc, #556]	; (801bfe0 <tcp_split_unsent_seg+0x27c>)
 801bdb2:	f003 fe7f 	bl	801fab4 <iprintf>
    return ERR_VAL;
 801bdb6:	f06f 0305 	mvn.w	r3, #5
 801bdba:	e109      	b.n	801bfd0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801bdbc:	697b      	ldr	r3, [r7, #20]
 801bdbe:	891b      	ldrh	r3, [r3, #8]
 801bdc0:	887a      	ldrh	r2, [r7, #2]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d301      	bcc.n	801bdca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	e102      	b.n	801bfd0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bdce:	887a      	ldrh	r2, [r7, #2]
 801bdd0:	429a      	cmp	r2, r3
 801bdd2:	d906      	bls.n	801bde2 <tcp_split_unsent_seg+0x7e>
 801bdd4:	4b80      	ldr	r3, [pc, #512]	; (801bfd8 <tcp_split_unsent_seg+0x274>)
 801bdd6:	f240 325b 	movw	r2, #859	; 0x35b
 801bdda:	4983      	ldr	r1, [pc, #524]	; (801bfe8 <tcp_split_unsent_seg+0x284>)
 801bddc:	4880      	ldr	r0, [pc, #512]	; (801bfe0 <tcp_split_unsent_seg+0x27c>)
 801bdde:	f003 fe69 	bl	801fab4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801bde2:	697b      	ldr	r3, [r7, #20]
 801bde4:	891b      	ldrh	r3, [r3, #8]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d106      	bne.n	801bdf8 <tcp_split_unsent_seg+0x94>
 801bdea:	4b7b      	ldr	r3, [pc, #492]	; (801bfd8 <tcp_split_unsent_seg+0x274>)
 801bdec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801bdf0:	497e      	ldr	r1, [pc, #504]	; (801bfec <tcp_split_unsent_seg+0x288>)
 801bdf2:	487b      	ldr	r0, [pc, #492]	; (801bfe0 <tcp_split_unsent_seg+0x27c>)
 801bdf4:	f003 fe5e 	bl	801fab4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	7a9b      	ldrb	r3, [r3, #10]
 801bdfc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bdfe:	7bfb      	ldrb	r3, [r7, #15]
 801be00:	009b      	lsls	r3, r3, #2
 801be02:	b2db      	uxtb	r3, r3
 801be04:	f003 0304 	and.w	r3, r3, #4
 801be08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	891a      	ldrh	r2, [r3, #8]
 801be0e:	887b      	ldrh	r3, [r7, #2]
 801be10:	1ad3      	subs	r3, r2, r3
 801be12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801be14:	7bbb      	ldrb	r3, [r7, #14]
 801be16:	b29a      	uxth	r2, r3
 801be18:	89bb      	ldrh	r3, [r7, #12]
 801be1a:	4413      	add	r3, r2
 801be1c:	b29b      	uxth	r3, r3
 801be1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be22:	4619      	mov	r1, r3
 801be24:	2036      	movs	r0, #54	; 0x36
 801be26:	f7fa fa1f 	bl	8016268 <pbuf_alloc>
 801be2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801be2c:	693b      	ldr	r3, [r7, #16]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	f000 80b7 	beq.w	801bfa2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	891a      	ldrh	r2, [r3, #8]
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	891b      	ldrh	r3, [r3, #8]
 801be3e:	1ad3      	subs	r3, r2, r3
 801be40:	b29a      	uxth	r2, r3
 801be42:	887b      	ldrh	r3, [r7, #2]
 801be44:	4413      	add	r3, r2
 801be46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801be48:	697b      	ldr	r3, [r7, #20]
 801be4a:	6858      	ldr	r0, [r3, #4]
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	685a      	ldr	r2, [r3, #4]
 801be50:	7bbb      	ldrb	r3, [r7, #14]
 801be52:	18d1      	adds	r1, r2, r3
 801be54:	897b      	ldrh	r3, [r7, #10]
 801be56:	89ba      	ldrh	r2, [r7, #12]
 801be58:	f7fa fed4 	bl	8016c04 <pbuf_copy_partial>
 801be5c:	4603      	mov	r3, r0
 801be5e:	461a      	mov	r2, r3
 801be60:	89bb      	ldrh	r3, [r7, #12]
 801be62:	4293      	cmp	r3, r2
 801be64:	f040 809f 	bne.w	801bfa6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	68db      	ldr	r3, [r3, #12]
 801be6c:	899b      	ldrh	r3, [r3, #12]
 801be6e:	b29b      	uxth	r3, r3
 801be70:	4618      	mov	r0, r3
 801be72:	f7f6 fde1 	bl	8012a38 <lwip_htons>
 801be76:	4603      	mov	r3, r0
 801be78:	b2db      	uxtb	r3, r3
 801be7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801be80:	2300      	movs	r3, #0
 801be82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801be84:	7efb      	ldrb	r3, [r7, #27]
 801be86:	f003 0308 	and.w	r3, r3, #8
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d007      	beq.n	801be9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801be8e:	7efb      	ldrb	r3, [r7, #27]
 801be90:	f023 0308 	bic.w	r3, r3, #8
 801be94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801be96:	7ebb      	ldrb	r3, [r7, #26]
 801be98:	f043 0308 	orr.w	r3, r3, #8
 801be9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801be9e:	7efb      	ldrb	r3, [r7, #27]
 801bea0:	f003 0301 	and.w	r3, r3, #1
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d007      	beq.n	801beb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801bea8:	7efb      	ldrb	r3, [r7, #27]
 801beaa:	f023 0301 	bic.w	r3, r3, #1
 801beae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801beb0:	7ebb      	ldrb	r3, [r7, #26]
 801beb2:	f043 0301 	orr.w	r3, r3, #1
 801beb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	68db      	ldr	r3, [r3, #12]
 801bebc:	685b      	ldr	r3, [r3, #4]
 801bebe:	4618      	mov	r0, r3
 801bec0:	f7f6 fdcf 	bl	8012a62 <lwip_htonl>
 801bec4:	4602      	mov	r2, r0
 801bec6:	887b      	ldrh	r3, [r7, #2]
 801bec8:	18d1      	adds	r1, r2, r3
 801beca:	7eba      	ldrb	r2, [r7, #26]
 801becc:	7bfb      	ldrb	r3, [r7, #15]
 801bece:	9300      	str	r3, [sp, #0]
 801bed0:	460b      	mov	r3, r1
 801bed2:	6939      	ldr	r1, [r7, #16]
 801bed4:	6878      	ldr	r0, [r7, #4]
 801bed6:	f7ff fa4f 	bl	801b378 <tcp_create_segment>
 801beda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801bedc:	69fb      	ldr	r3, [r7, #28]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d063      	beq.n	801bfaa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	685b      	ldr	r3, [r3, #4]
 801bee6:	4618      	mov	r0, r3
 801bee8:	f7fa fd2a 	bl	8016940 <pbuf_clen>
 801beec:	4603      	mov	r3, r0
 801beee:	461a      	mov	r2, r3
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bef6:	1a9b      	subs	r3, r3, r2
 801bef8:	b29a      	uxth	r2, r3
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801bf00:	697b      	ldr	r3, [r7, #20]
 801bf02:	6858      	ldr	r0, [r3, #4]
 801bf04:	697b      	ldr	r3, [r7, #20]
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	891a      	ldrh	r2, [r3, #8]
 801bf0a:	89bb      	ldrh	r3, [r7, #12]
 801bf0c:	1ad3      	subs	r3, r2, r3
 801bf0e:	b29b      	uxth	r3, r3
 801bf10:	4619      	mov	r1, r3
 801bf12:	f7fa fb07 	bl	8016524 <pbuf_realloc>
  useg->len -= remainder;
 801bf16:	697b      	ldr	r3, [r7, #20]
 801bf18:	891a      	ldrh	r2, [r3, #8]
 801bf1a:	89bb      	ldrh	r3, [r7, #12]
 801bf1c:	1ad3      	subs	r3, r2, r3
 801bf1e:	b29a      	uxth	r2, r3
 801bf20:	697b      	ldr	r3, [r7, #20]
 801bf22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	68db      	ldr	r3, [r3, #12]
 801bf28:	899b      	ldrh	r3, [r3, #12]
 801bf2a:	b29c      	uxth	r4, r3
 801bf2c:	7efb      	ldrb	r3, [r7, #27]
 801bf2e:	b29b      	uxth	r3, r3
 801bf30:	4618      	mov	r0, r3
 801bf32:	f7f6 fd81 	bl	8012a38 <lwip_htons>
 801bf36:	4603      	mov	r3, r0
 801bf38:	461a      	mov	r2, r3
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	68db      	ldr	r3, [r3, #12]
 801bf3e:	4322      	orrs	r2, r4
 801bf40:	b292      	uxth	r2, r2
 801bf42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f7fa fcf9 	bl	8016940 <pbuf_clen>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	461a      	mov	r2, r3
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bf58:	4413      	add	r3, r2
 801bf5a:	b29a      	uxth	r2, r3
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bf62:	69fb      	ldr	r3, [r7, #28]
 801bf64:	685b      	ldr	r3, [r3, #4]
 801bf66:	4618      	mov	r0, r3
 801bf68:	f7fa fcea 	bl	8016940 <pbuf_clen>
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	461a      	mov	r2, r3
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bf76:	4413      	add	r3, r2
 801bf78:	b29a      	uxth	r2, r3
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	681a      	ldr	r2, [r3, #0]
 801bf84:	69fb      	ldr	r3, [r7, #28]
 801bf86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	69fa      	ldr	r2, [r7, #28]
 801bf8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801bf8e:	69fb      	ldr	r3, [r7, #28]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d103      	bne.n	801bf9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	2200      	movs	r2, #0
 801bf9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	e016      	b.n	801bfd0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801bfa2:	bf00      	nop
 801bfa4:	e002      	b.n	801bfac <tcp_split_unsent_seg+0x248>
    goto memerr;
 801bfa6:	bf00      	nop
 801bfa8:	e000      	b.n	801bfac <tcp_split_unsent_seg+0x248>
    goto memerr;
 801bfaa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801bfac:	69fb      	ldr	r3, [r7, #28]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d006      	beq.n	801bfc0 <tcp_split_unsent_seg+0x25c>
 801bfb2:	4b09      	ldr	r3, [pc, #36]	; (801bfd8 <tcp_split_unsent_seg+0x274>)
 801bfb4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801bfb8:	490d      	ldr	r1, [pc, #52]	; (801bff0 <tcp_split_unsent_seg+0x28c>)
 801bfba:	4809      	ldr	r0, [pc, #36]	; (801bfe0 <tcp_split_unsent_seg+0x27c>)
 801bfbc:	f003 fd7a 	bl	801fab4 <iprintf>
  if (p != NULL) {
 801bfc0:	693b      	ldr	r3, [r7, #16]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d002      	beq.n	801bfcc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801bfc6:	6938      	ldr	r0, [r7, #16]
 801bfc8:	f7fa fc32 	bl	8016830 <pbuf_free>
  }

  return ERR_MEM;
 801bfcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	3724      	adds	r7, #36	; 0x24
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd90      	pop	{r4, r7, pc}
 801bfd8:	08026980 	.word	0x08026980
 801bfdc:	08026d40 	.word	0x08026d40
 801bfe0:	08026a00 	.word	0x08026a00
 801bfe4:	08026d64 	.word	0x08026d64
 801bfe8:	08026d88 	.word	0x08026d88
 801bfec:	08026d98 	.word	0x08026d98
 801bff0:	08026da8 	.word	0x08026da8

0801bff4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801bff4:	b590      	push	{r4, r7, lr}
 801bff6:	b085      	sub	sp, #20
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d106      	bne.n	801c010 <tcp_send_fin+0x1c>
 801c002:	4b21      	ldr	r3, [pc, #132]	; (801c088 <tcp_send_fin+0x94>)
 801c004:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c008:	4920      	ldr	r1, [pc, #128]	; (801c08c <tcp_send_fin+0x98>)
 801c00a:	4821      	ldr	r0, [pc, #132]	; (801c090 <tcp_send_fin+0x9c>)
 801c00c:	f003 fd52 	bl	801fab4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c014:	2b00      	cmp	r3, #0
 801c016:	d02e      	beq.n	801c076 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c01c:	60fb      	str	r3, [r7, #12]
 801c01e:	e002      	b.n	801c026 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d1f8      	bne.n	801c020 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	68db      	ldr	r3, [r3, #12]
 801c032:	899b      	ldrh	r3, [r3, #12]
 801c034:	b29b      	uxth	r3, r3
 801c036:	4618      	mov	r0, r3
 801c038:	f7f6 fcfe 	bl	8012a38 <lwip_htons>
 801c03c:	4603      	mov	r3, r0
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	f003 0307 	and.w	r3, r3, #7
 801c044:	2b00      	cmp	r3, #0
 801c046:	d116      	bne.n	801c076 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	68db      	ldr	r3, [r3, #12]
 801c04c:	899b      	ldrh	r3, [r3, #12]
 801c04e:	b29c      	uxth	r4, r3
 801c050:	2001      	movs	r0, #1
 801c052:	f7f6 fcf1 	bl	8012a38 <lwip_htons>
 801c056:	4603      	mov	r3, r0
 801c058:	461a      	mov	r2, r3
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	68db      	ldr	r3, [r3, #12]
 801c05e:	4322      	orrs	r2, r4
 801c060:	b292      	uxth	r2, r2
 801c062:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	8b5b      	ldrh	r3, [r3, #26]
 801c068:	f043 0320 	orr.w	r3, r3, #32
 801c06c:	b29a      	uxth	r2, r3
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801c072:	2300      	movs	r3, #0
 801c074:	e004      	b.n	801c080 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c076:	2101      	movs	r1, #1
 801c078:	6878      	ldr	r0, [r7, #4]
 801c07a:	f000 f80b 	bl	801c094 <tcp_enqueue_flags>
 801c07e:	4603      	mov	r3, r0
}
 801c080:	4618      	mov	r0, r3
 801c082:	3714      	adds	r7, #20
 801c084:	46bd      	mov	sp, r7
 801c086:	bd90      	pop	{r4, r7, pc}
 801c088:	08026980 	.word	0x08026980
 801c08c:	08026db4 	.word	0x08026db4
 801c090:	08026a00 	.word	0x08026a00

0801c094 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801c094:	b580      	push	{r7, lr}
 801c096:	b08a      	sub	sp, #40	; 0x28
 801c098:	af02      	add	r7, sp, #8
 801c09a:	6078      	str	r0, [r7, #4]
 801c09c:	460b      	mov	r3, r1
 801c09e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c0a8:	78fb      	ldrb	r3, [r7, #3]
 801c0aa:	f003 0303 	and.w	r3, r3, #3
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d106      	bne.n	801c0c0 <tcp_enqueue_flags+0x2c>
 801c0b2:	4b67      	ldr	r3, [pc, #412]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c0b4:	f240 4211 	movw	r2, #1041	; 0x411
 801c0b8:	4966      	ldr	r1, [pc, #408]	; (801c254 <tcp_enqueue_flags+0x1c0>)
 801c0ba:	4867      	ldr	r0, [pc, #412]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c0bc:	f003 fcfa 	bl	801fab4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d106      	bne.n	801c0d4 <tcp_enqueue_flags+0x40>
 801c0c6:	4b62      	ldr	r3, [pc, #392]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c0c8:	f240 4213 	movw	r2, #1043	; 0x413
 801c0cc:	4963      	ldr	r1, [pc, #396]	; (801c25c <tcp_enqueue_flags+0x1c8>)
 801c0ce:	4862      	ldr	r0, [pc, #392]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c0d0:	f003 fcf0 	bl	801fab4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801c0d4:	78fb      	ldrb	r3, [r7, #3]
 801c0d6:	f003 0302 	and.w	r3, r3, #2
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d001      	beq.n	801c0e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801c0de:	2301      	movs	r3, #1
 801c0e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c0e2:	7ffb      	ldrb	r3, [r7, #31]
 801c0e4:	009b      	lsls	r3, r3, #2
 801c0e6:	b2db      	uxtb	r3, r3
 801c0e8:	f003 0304 	and.w	r3, r3, #4
 801c0ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c0ee:	7dfb      	ldrb	r3, [r7, #23]
 801c0f0:	b29b      	uxth	r3, r3
 801c0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	2036      	movs	r0, #54	; 0x36
 801c0fa:	f7fa f8b5 	bl	8016268 <pbuf_alloc>
 801c0fe:	6138      	str	r0, [r7, #16]
 801c100:	693b      	ldr	r3, [r7, #16]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d109      	bne.n	801c11a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	8b5b      	ldrh	r3, [r3, #26]
 801c10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c10e:	b29a      	uxth	r2, r3
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c118:	e095      	b.n	801c246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c11a:	693b      	ldr	r3, [r7, #16]
 801c11c:	895a      	ldrh	r2, [r3, #10]
 801c11e:	7dfb      	ldrb	r3, [r7, #23]
 801c120:	b29b      	uxth	r3, r3
 801c122:	429a      	cmp	r2, r3
 801c124:	d206      	bcs.n	801c134 <tcp_enqueue_flags+0xa0>
 801c126:	4b4a      	ldr	r3, [pc, #296]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c128:	f240 4239 	movw	r2, #1081	; 0x439
 801c12c:	494c      	ldr	r1, [pc, #304]	; (801c260 <tcp_enqueue_flags+0x1cc>)
 801c12e:	484a      	ldr	r0, [pc, #296]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c130:	f003 fcc0 	bl	801fab4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801c138:	78fa      	ldrb	r2, [r7, #3]
 801c13a:	7ffb      	ldrb	r3, [r7, #31]
 801c13c:	9300      	str	r3, [sp, #0]
 801c13e:	460b      	mov	r3, r1
 801c140:	6939      	ldr	r1, [r7, #16]
 801c142:	6878      	ldr	r0, [r7, #4]
 801c144:	f7ff f918 	bl	801b378 <tcp_create_segment>
 801c148:	60f8      	str	r0, [r7, #12]
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d109      	bne.n	801c164 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	8b5b      	ldrh	r3, [r3, #26]
 801c154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c158:	b29a      	uxth	r2, r3
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c15e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c162:	e070      	b.n	801c246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	68db      	ldr	r3, [r3, #12]
 801c168:	f003 0303 	and.w	r3, r3, #3
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d006      	beq.n	801c17e <tcp_enqueue_flags+0xea>
 801c170:	4b37      	ldr	r3, [pc, #220]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c172:	f240 4242 	movw	r2, #1090	; 0x442
 801c176:	493b      	ldr	r1, [pc, #236]	; (801c264 <tcp_enqueue_flags+0x1d0>)
 801c178:	4837      	ldr	r0, [pc, #220]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c17a:	f003 fc9b 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	891b      	ldrh	r3, [r3, #8]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d006      	beq.n	801c194 <tcp_enqueue_flags+0x100>
 801c186:	4b32      	ldr	r3, [pc, #200]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c188:	f240 4243 	movw	r2, #1091	; 0x443
 801c18c:	4936      	ldr	r1, [pc, #216]	; (801c268 <tcp_enqueue_flags+0x1d4>)
 801c18e:	4832      	ldr	r0, [pc, #200]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c190:	f003 fc90 	bl	801fab4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d103      	bne.n	801c1a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	68fa      	ldr	r2, [r7, #12]
 801c1a0:	66da      	str	r2, [r3, #108]	; 0x6c
 801c1a2:	e00d      	b.n	801c1c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1a8:	61bb      	str	r3, [r7, #24]
 801c1aa:	e002      	b.n	801c1b2 <tcp_enqueue_flags+0x11e>
 801c1ac:	69bb      	ldr	r3, [r7, #24]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	61bb      	str	r3, [r7, #24]
 801c1b2:	69bb      	ldr	r3, [r7, #24]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d1f8      	bne.n	801c1ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801c1ba:	69bb      	ldr	r3, [r7, #24]
 801c1bc:	68fa      	ldr	r2, [r7, #12]
 801c1be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c1c8:	78fb      	ldrb	r3, [r7, #3]
 801c1ca:	f003 0302 	and.w	r3, r3, #2
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d104      	bne.n	801c1dc <tcp_enqueue_flags+0x148>
 801c1d2:	78fb      	ldrb	r3, [r7, #3]
 801c1d4:	f003 0301 	and.w	r3, r3, #1
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d004      	beq.n	801c1e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1e0:	1c5a      	adds	r2, r3, #1
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801c1e6:	78fb      	ldrb	r3, [r7, #3]
 801c1e8:	f003 0301 	and.w	r3, r3, #1
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d006      	beq.n	801c1fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	8b5b      	ldrh	r3, [r3, #26]
 801c1f4:	f043 0320 	orr.w	r3, r3, #32
 801c1f8:	b29a      	uxth	r2, r3
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	685b      	ldr	r3, [r3, #4]
 801c202:	4618      	mov	r0, r3
 801c204:	f7fa fb9c 	bl	8016940 <pbuf_clen>
 801c208:	4603      	mov	r3, r0
 801c20a:	461a      	mov	r2, r3
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c212:	4413      	add	r3, r2
 801c214:	b29a      	uxth	r2, r3
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c222:	2b00      	cmp	r3, #0
 801c224:	d00e      	beq.n	801c244 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d10a      	bne.n	801c244 <tcp_enqueue_flags+0x1b0>
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c232:	2b00      	cmp	r3, #0
 801c234:	d106      	bne.n	801c244 <tcp_enqueue_flags+0x1b0>
 801c236:	4b06      	ldr	r3, [pc, #24]	; (801c250 <tcp_enqueue_flags+0x1bc>)
 801c238:	f240 4265 	movw	r2, #1125	; 0x465
 801c23c:	490b      	ldr	r1, [pc, #44]	; (801c26c <tcp_enqueue_flags+0x1d8>)
 801c23e:	4806      	ldr	r0, [pc, #24]	; (801c258 <tcp_enqueue_flags+0x1c4>)
 801c240:	f003 fc38 	bl	801fab4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c244:	2300      	movs	r3, #0
}
 801c246:	4618      	mov	r0, r3
 801c248:	3720      	adds	r7, #32
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}
 801c24e:	bf00      	nop
 801c250:	08026980 	.word	0x08026980
 801c254:	08026dd0 	.word	0x08026dd0
 801c258:	08026a00 	.word	0x08026a00
 801c25c:	08026e28 	.word	0x08026e28
 801c260:	08026e48 	.word	0x08026e48
 801c264:	08026e84 	.word	0x08026e84
 801c268:	08026e9c 	.word	0x08026e9c
 801c26c:	08026ec8 	.word	0x08026ec8

0801c270 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c270:	b5b0      	push	{r4, r5, r7, lr}
 801c272:	b08a      	sub	sp, #40	; 0x28
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d106      	bne.n	801c28c <tcp_output+0x1c>
 801c27e:	4b9e      	ldr	r3, [pc, #632]	; (801c4f8 <tcp_output+0x288>)
 801c280:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c284:	499d      	ldr	r1, [pc, #628]	; (801c4fc <tcp_output+0x28c>)
 801c286:	489e      	ldr	r0, [pc, #632]	; (801c500 <tcp_output+0x290>)
 801c288:	f003 fc14 	bl	801fab4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	7d1b      	ldrb	r3, [r3, #20]
 801c290:	2b01      	cmp	r3, #1
 801c292:	d106      	bne.n	801c2a2 <tcp_output+0x32>
 801c294:	4b98      	ldr	r3, [pc, #608]	; (801c4f8 <tcp_output+0x288>)
 801c296:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801c29a:	499a      	ldr	r1, [pc, #616]	; (801c504 <tcp_output+0x294>)
 801c29c:	4898      	ldr	r0, [pc, #608]	; (801c500 <tcp_output+0x290>)
 801c29e:	f003 fc09 	bl	801fab4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c2a2:	4b99      	ldr	r3, [pc, #612]	; (801c508 <tcp_output+0x298>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	687a      	ldr	r2, [r7, #4]
 801c2a8:	429a      	cmp	r2, r3
 801c2aa:	d101      	bne.n	801c2b0 <tcp_output+0x40>
    return ERR_OK;
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	e1ce      	b.n	801c64e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c2bc:	4293      	cmp	r3, r2
 801c2be:	bf28      	it	cs
 801c2c0:	4613      	movcs	r3, r2
 801c2c2:	b29b      	uxth	r3, r3
 801c2c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c2ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d10b      	bne.n	801c2ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	8b5b      	ldrh	r3, [r3, #26]
 801c2d6:	f003 0302 	and.w	r3, r3, #2
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f000 81aa 	beq.w	801c634 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801c2e0:	6878      	ldr	r0, [r7, #4]
 801c2e2:	f000 fdcb 	bl	801ce7c <tcp_send_empty_ack>
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	e1b1      	b.n	801c64e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c2ea:	6879      	ldr	r1, [r7, #4]
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	3304      	adds	r3, #4
 801c2f0:	461a      	mov	r2, r3
 801c2f2:	6878      	ldr	r0, [r7, #4]
 801c2f4:	f7ff f824 	bl	801b340 <tcp_route>
 801c2f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c2fa:	697b      	ldr	r3, [r7, #20]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d102      	bne.n	801c306 <tcp_output+0x96>
    return ERR_RTE;
 801c300:	f06f 0303 	mvn.w	r3, #3
 801c304:	e1a3      	b.n	801c64e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d003      	beq.n	801c314 <tcp_output+0xa4>
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d111      	bne.n	801c338 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c314:	697b      	ldr	r3, [r7, #20]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d002      	beq.n	801c320 <tcp_output+0xb0>
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	3304      	adds	r3, #4
 801c31e:	e000      	b.n	801c322 <tcp_output+0xb2>
 801c320:	2300      	movs	r3, #0
 801c322:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c324:	693b      	ldr	r3, [r7, #16]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d102      	bne.n	801c330 <tcp_output+0xc0>
      return ERR_RTE;
 801c32a:	f06f 0303 	mvn.w	r3, #3
 801c32e:	e18e      	b.n	801c64e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	681a      	ldr	r2, [r3, #0]
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c33a:	68db      	ldr	r3, [r3, #12]
 801c33c:	685b      	ldr	r3, [r3, #4]
 801c33e:	4618      	mov	r0, r3
 801c340:	f7f6 fb8f 	bl	8012a62 <lwip_htonl>
 801c344:	4602      	mov	r2, r0
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c34a:	1ad3      	subs	r3, r2, r3
 801c34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c34e:	8912      	ldrh	r2, [r2, #8]
 801c350:	4413      	add	r3, r2
 801c352:	69ba      	ldr	r2, [r7, #24]
 801c354:	429a      	cmp	r2, r3
 801c356:	d227      	bcs.n	801c3a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c35e:	461a      	mov	r2, r3
 801c360:	69bb      	ldr	r3, [r7, #24]
 801c362:	4293      	cmp	r3, r2
 801c364:	d114      	bne.n	801c390 <tcp_output+0x120>
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d110      	bne.n	801c390 <tcp_output+0x120>
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c374:	2b00      	cmp	r3, #0
 801c376:	d10b      	bne.n	801c390 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2200      	movs	r2, #0
 801c37c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	2201      	movs	r2, #1
 801c384:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	2200      	movs	r2, #0
 801c38c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	8b5b      	ldrh	r3, [r3, #26]
 801c394:	f003 0302 	and.w	r3, r3, #2
 801c398:	2b00      	cmp	r3, #0
 801c39a:	f000 814d 	beq.w	801c638 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801c39e:	6878      	ldr	r0, [r7, #4]
 801c3a0:	f000 fd6c 	bl	801ce7c <tcp_send_empty_ack>
 801c3a4:	4603      	mov	r3, r0
 801c3a6:	e152      	b.n	801c64e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c3b6:	6a3b      	ldr	r3, [r7, #32]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	f000 811c 	beq.w	801c5f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801c3be:	e002      	b.n	801c3c6 <tcp_output+0x156>
 801c3c0:	6a3b      	ldr	r3, [r7, #32]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	623b      	str	r3, [r7, #32]
 801c3c6:	6a3b      	ldr	r3, [r7, #32]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d1f8      	bne.n	801c3c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c3ce:	e112      	b.n	801c5f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d2:	68db      	ldr	r3, [r3, #12]
 801c3d4:	899b      	ldrh	r3, [r3, #12]
 801c3d6:	b29b      	uxth	r3, r3
 801c3d8:	4618      	mov	r0, r3
 801c3da:	f7f6 fb2d 	bl	8012a38 <lwip_htons>
 801c3de:	4603      	mov	r3, r0
 801c3e0:	b2db      	uxtb	r3, r3
 801c3e2:	f003 0304 	and.w	r3, r3, #4
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d006      	beq.n	801c3f8 <tcp_output+0x188>
 801c3ea:	4b43      	ldr	r3, [pc, #268]	; (801c4f8 <tcp_output+0x288>)
 801c3ec:	f240 5236 	movw	r2, #1334	; 0x536
 801c3f0:	4946      	ldr	r1, [pc, #280]	; (801c50c <tcp_output+0x29c>)
 801c3f2:	4843      	ldr	r0, [pc, #268]	; (801c500 <tcp_output+0x290>)
 801c3f4:	f003 fb5e 	bl	801fab4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d01f      	beq.n	801c440 <tcp_output+0x1d0>
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	8b5b      	ldrh	r3, [r3, #26]
 801c404:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d119      	bne.n	801c440 <tcp_output+0x1d0>
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c410:	2b00      	cmp	r3, #0
 801c412:	d00b      	beq.n	801c42c <tcp_output+0x1bc>
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d110      	bne.n	801c440 <tcp_output+0x1d0>
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c422:	891a      	ldrh	r2, [r3, #8]
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c428:	429a      	cmp	r2, r3
 801c42a:	d209      	bcs.n	801c440 <tcp_output+0x1d0>
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c432:	2b00      	cmp	r3, #0
 801c434:	d004      	beq.n	801c440 <tcp_output+0x1d0>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c43c:	2b08      	cmp	r3, #8
 801c43e:	d901      	bls.n	801c444 <tcp_output+0x1d4>
 801c440:	2301      	movs	r3, #1
 801c442:	e000      	b.n	801c446 <tcp_output+0x1d6>
 801c444:	2300      	movs	r3, #0
 801c446:	2b00      	cmp	r3, #0
 801c448:	d106      	bne.n	801c458 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	8b5b      	ldrh	r3, [r3, #26]
 801c44e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c452:	2b00      	cmp	r3, #0
 801c454:	f000 80e4 	beq.w	801c620 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	7d1b      	ldrb	r3, [r3, #20]
 801c45c:	2b02      	cmp	r3, #2
 801c45e:	d00d      	beq.n	801c47c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c462:	68db      	ldr	r3, [r3, #12]
 801c464:	899b      	ldrh	r3, [r3, #12]
 801c466:	b29c      	uxth	r4, r3
 801c468:	2010      	movs	r0, #16
 801c46a:	f7f6 fae5 	bl	8012a38 <lwip_htons>
 801c46e:	4603      	mov	r3, r0
 801c470:	461a      	mov	r2, r3
 801c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c474:	68db      	ldr	r3, [r3, #12]
 801c476:	4322      	orrs	r2, r4
 801c478:	b292      	uxth	r2, r2
 801c47a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c47c:	697a      	ldr	r2, [r7, #20]
 801c47e:	6879      	ldr	r1, [r7, #4]
 801c480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c482:	f000 f909 	bl	801c698 <tcp_output_segment>
 801c486:	4603      	mov	r3, r0
 801c488:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d009      	beq.n	801c4a6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	8b5b      	ldrh	r3, [r3, #26]
 801c496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c49a:	b29a      	uxth	r2, r3
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	835a      	strh	r2, [r3, #26]
      return err;
 801c4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c4a4:	e0d3      	b.n	801c64e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4a8:	681a      	ldr	r2, [r3, #0]
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	7d1b      	ldrb	r3, [r3, #20]
 801c4b2:	2b02      	cmp	r3, #2
 801c4b4:	d006      	beq.n	801c4c4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	8b5b      	ldrh	r3, [r3, #26]
 801c4ba:	f023 0303 	bic.w	r3, r3, #3
 801c4be:	b29a      	uxth	r2, r3
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4c6:	68db      	ldr	r3, [r3, #12]
 801c4c8:	685b      	ldr	r3, [r3, #4]
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	f7f6 fac9 	bl	8012a62 <lwip_htonl>
 801c4d0:	4604      	mov	r4, r0
 801c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4d4:	891b      	ldrh	r3, [r3, #8]
 801c4d6:	461d      	mov	r5, r3
 801c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4da:	68db      	ldr	r3, [r3, #12]
 801c4dc:	899b      	ldrh	r3, [r3, #12]
 801c4de:	b29b      	uxth	r3, r3
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f7f6 faa9 	bl	8012a38 <lwip_htons>
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	b2db      	uxtb	r3, r3
 801c4ea:	f003 0303 	and.w	r3, r3, #3
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d00e      	beq.n	801c510 <tcp_output+0x2a0>
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	e00d      	b.n	801c512 <tcp_output+0x2a2>
 801c4f6:	bf00      	nop
 801c4f8:	08026980 	.word	0x08026980
 801c4fc:	08026ef0 	.word	0x08026ef0
 801c500:	08026a00 	.word	0x08026a00
 801c504:	08026f08 	.word	0x08026f08
 801c508:	24008a3c 	.word	0x24008a3c
 801c50c:	08026f30 	.word	0x08026f30
 801c510:	2300      	movs	r3, #0
 801c512:	442b      	add	r3, r5
 801c514:	4423      	add	r3, r4
 801c516:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c51c:	68bb      	ldr	r3, [r7, #8]
 801c51e:	1ad3      	subs	r3, r2, r3
 801c520:	2b00      	cmp	r3, #0
 801c522:	da02      	bge.n	801c52a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	68ba      	ldr	r2, [r7, #8]
 801c528:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c52c:	891b      	ldrh	r3, [r3, #8]
 801c52e:	461c      	mov	r4, r3
 801c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c532:	68db      	ldr	r3, [r3, #12]
 801c534:	899b      	ldrh	r3, [r3, #12]
 801c536:	b29b      	uxth	r3, r3
 801c538:	4618      	mov	r0, r3
 801c53a:	f7f6 fa7d 	bl	8012a38 <lwip_htons>
 801c53e:	4603      	mov	r3, r0
 801c540:	b2db      	uxtb	r3, r3
 801c542:	f003 0303 	and.w	r3, r3, #3
 801c546:	2b00      	cmp	r3, #0
 801c548:	d001      	beq.n	801c54e <tcp_output+0x2de>
 801c54a:	2301      	movs	r3, #1
 801c54c:	e000      	b.n	801c550 <tcp_output+0x2e0>
 801c54e:	2300      	movs	r3, #0
 801c550:	4423      	add	r3, r4
 801c552:	2b00      	cmp	r3, #0
 801c554:	d049      	beq.n	801c5ea <tcp_output+0x37a>
      seg->next = NULL;
 801c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c558:	2200      	movs	r2, #0
 801c55a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c560:	2b00      	cmp	r3, #0
 801c562:	d105      	bne.n	801c570 <tcp_output+0x300>
        pcb->unacked = seg;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c568:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c56c:	623b      	str	r3, [r7, #32]
 801c56e:	e03f      	b.n	801c5f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c572:	68db      	ldr	r3, [r3, #12]
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	4618      	mov	r0, r3
 801c578:	f7f6 fa73 	bl	8012a62 <lwip_htonl>
 801c57c:	4604      	mov	r4, r0
 801c57e:	6a3b      	ldr	r3, [r7, #32]
 801c580:	68db      	ldr	r3, [r3, #12]
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	4618      	mov	r0, r3
 801c586:	f7f6 fa6c 	bl	8012a62 <lwip_htonl>
 801c58a:	4603      	mov	r3, r0
 801c58c:	1ae3      	subs	r3, r4, r3
 801c58e:	2b00      	cmp	r3, #0
 801c590:	da24      	bge.n	801c5dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	3370      	adds	r3, #112	; 0x70
 801c596:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c598:	e002      	b.n	801c5a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801c59a:	69fb      	ldr	r3, [r7, #28]
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c5a0:	69fb      	ldr	r3, [r7, #28]
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d011      	beq.n	801c5cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c5a8:	69fb      	ldr	r3, [r7, #28]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	68db      	ldr	r3, [r3, #12]
 801c5ae:	685b      	ldr	r3, [r3, #4]
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	f7f6 fa56 	bl	8012a62 <lwip_htonl>
 801c5b6:	4604      	mov	r4, r0
 801c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ba:	68db      	ldr	r3, [r3, #12]
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7f6 fa4f 	bl	8012a62 <lwip_htonl>
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	dbe6      	blt.n	801c59a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801c5cc:	69fb      	ldr	r3, [r7, #28]
 801c5ce:	681a      	ldr	r2, [r3, #0]
 801c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c5d4:	69fb      	ldr	r3, [r7, #28]
 801c5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5d8:	601a      	str	r2, [r3, #0]
 801c5da:	e009      	b.n	801c5f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c5dc:	6a3b      	ldr	r3, [r7, #32]
 801c5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c5e2:	6a3b      	ldr	r3, [r7, #32]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	623b      	str	r3, [r7, #32]
 801c5e8:	e002      	b.n	801c5f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c5ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c5ec:	f7fb ff1d 	bl	801842a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d012      	beq.n	801c622 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5fe:	68db      	ldr	r3, [r3, #12]
 801c600:	685b      	ldr	r3, [r3, #4]
 801c602:	4618      	mov	r0, r3
 801c604:	f7f6 fa2d 	bl	8012a62 <lwip_htonl>
 801c608:	4602      	mov	r2, r0
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c60e:	1ad3      	subs	r3, r2, r3
 801c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c612:	8912      	ldrh	r2, [r2, #8]
 801c614:	4413      	add	r3, r2
  while (seg != NULL &&
 801c616:	69ba      	ldr	r2, [r7, #24]
 801c618:	429a      	cmp	r2, r3
 801c61a:	f4bf aed9 	bcs.w	801c3d0 <tcp_output+0x160>
 801c61e:	e000      	b.n	801c622 <tcp_output+0x3b2>
      break;
 801c620:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c626:	2b00      	cmp	r3, #0
 801c628:	d108      	bne.n	801c63c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2200      	movs	r2, #0
 801c62e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c632:	e004      	b.n	801c63e <tcp_output+0x3ce>
    goto output_done;
 801c634:	bf00      	nop
 801c636:	e002      	b.n	801c63e <tcp_output+0x3ce>
    goto output_done;
 801c638:	bf00      	nop
 801c63a:	e000      	b.n	801c63e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c63c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	8b5b      	ldrh	r3, [r3, #26]
 801c642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c646:	b29a      	uxth	r2, r3
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c64c:	2300      	movs	r3, #0
}
 801c64e:	4618      	mov	r0, r3
 801c650:	3728      	adds	r7, #40	; 0x28
 801c652:	46bd      	mov	sp, r7
 801c654:	bdb0      	pop	{r4, r5, r7, pc}
 801c656:	bf00      	nop

0801c658 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b082      	sub	sp, #8
 801c65c:	af00      	add	r7, sp, #0
 801c65e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d106      	bne.n	801c674 <tcp_output_segment_busy+0x1c>
 801c666:	4b09      	ldr	r3, [pc, #36]	; (801c68c <tcp_output_segment_busy+0x34>)
 801c668:	f240 529a 	movw	r2, #1434	; 0x59a
 801c66c:	4908      	ldr	r1, [pc, #32]	; (801c690 <tcp_output_segment_busy+0x38>)
 801c66e:	4809      	ldr	r0, [pc, #36]	; (801c694 <tcp_output_segment_busy+0x3c>)
 801c670:	f003 fa20 	bl	801fab4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	685b      	ldr	r3, [r3, #4]
 801c678:	7b9b      	ldrb	r3, [r3, #14]
 801c67a:	2b01      	cmp	r3, #1
 801c67c:	d001      	beq.n	801c682 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801c67e:	2301      	movs	r3, #1
 801c680:	e000      	b.n	801c684 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801c682:	2300      	movs	r3, #0
}
 801c684:	4618      	mov	r0, r3
 801c686:	3708      	adds	r7, #8
 801c688:	46bd      	mov	sp, r7
 801c68a:	bd80      	pop	{r7, pc}
 801c68c:	08026980 	.word	0x08026980
 801c690:	08026f48 	.word	0x08026f48
 801c694:	08026a00 	.word	0x08026a00

0801c698 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801c698:	b5b0      	push	{r4, r5, r7, lr}
 801c69a:	b08c      	sub	sp, #48	; 0x30
 801c69c:	af04      	add	r7, sp, #16
 801c69e:	60f8      	str	r0, [r7, #12]
 801c6a0:	60b9      	str	r1, [r7, #8]
 801c6a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d106      	bne.n	801c6b8 <tcp_output_segment+0x20>
 801c6aa:	4b63      	ldr	r3, [pc, #396]	; (801c838 <tcp_output_segment+0x1a0>)
 801c6ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801c6b0:	4962      	ldr	r1, [pc, #392]	; (801c83c <tcp_output_segment+0x1a4>)
 801c6b2:	4863      	ldr	r0, [pc, #396]	; (801c840 <tcp_output_segment+0x1a8>)
 801c6b4:	f003 f9fe 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d106      	bne.n	801c6cc <tcp_output_segment+0x34>
 801c6be:	4b5e      	ldr	r3, [pc, #376]	; (801c838 <tcp_output_segment+0x1a0>)
 801c6c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801c6c4:	495f      	ldr	r1, [pc, #380]	; (801c844 <tcp_output_segment+0x1ac>)
 801c6c6:	485e      	ldr	r0, [pc, #376]	; (801c840 <tcp_output_segment+0x1a8>)
 801c6c8:	f003 f9f4 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d106      	bne.n	801c6e0 <tcp_output_segment+0x48>
 801c6d2:	4b59      	ldr	r3, [pc, #356]	; (801c838 <tcp_output_segment+0x1a0>)
 801c6d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801c6d8:	495b      	ldr	r1, [pc, #364]	; (801c848 <tcp_output_segment+0x1b0>)
 801c6da:	4859      	ldr	r0, [pc, #356]	; (801c840 <tcp_output_segment+0x1a8>)
 801c6dc:	f003 f9ea 	bl	801fab4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801c6e0:	68f8      	ldr	r0, [r7, #12]
 801c6e2:	f7ff ffb9 	bl	801c658 <tcp_output_segment_busy>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d001      	beq.n	801c6f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	e09f      	b.n	801c830 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	68dc      	ldr	r4, [r3, #12]
 801c6f8:	4610      	mov	r0, r2
 801c6fa:	f7f6 f9b2 	bl	8012a62 <lwip_htonl>
 801c6fe:	4603      	mov	r3, r0
 801c700:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801c702:	68bb      	ldr	r3, [r7, #8]
 801c704:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	68dc      	ldr	r4, [r3, #12]
 801c70a:	4610      	mov	r0, r2
 801c70c:	f7f6 f994 	bl	8012a38 <lwip_htons>
 801c710:	4603      	mov	r3, r0
 801c712:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c718:	68ba      	ldr	r2, [r7, #8]
 801c71a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c71c:	441a      	add	r2, r3
 801c71e:	68bb      	ldr	r3, [r7, #8]
 801c720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	68db      	ldr	r3, [r3, #12]
 801c726:	3314      	adds	r3, #20
 801c728:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	7a9b      	ldrb	r3, [r3, #10]
 801c72e:	f003 0301 	and.w	r3, r3, #1
 801c732:	2b00      	cmp	r3, #0
 801c734:	d015      	beq.n	801c762 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801c736:	68bb      	ldr	r3, [r7, #8]
 801c738:	3304      	adds	r3, #4
 801c73a:	461a      	mov	r2, r3
 801c73c:	6879      	ldr	r1, [r7, #4]
 801c73e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801c742:	f7fc fa37 	bl	8018bb4 <tcp_eff_send_mss_netif>
 801c746:	4603      	mov	r3, r0
 801c748:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801c74a:	8b7b      	ldrh	r3, [r7, #26]
 801c74c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801c750:	4618      	mov	r0, r3
 801c752:	f7f6 f986 	bl	8012a62 <lwip_htonl>
 801c756:	4602      	mov	r2, r0
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801c75c:	69fb      	ldr	r3, [r7, #28]
 801c75e:	3304      	adds	r3, #4
 801c760:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801c762:	68bb      	ldr	r3, [r7, #8]
 801c764:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c768:	2b00      	cmp	r3, #0
 801c76a:	da02      	bge.n	801c772 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	2200      	movs	r2, #0
 801c770:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c776:	2b00      	cmp	r3, #0
 801c778:	d10c      	bne.n	801c794 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801c77a:	4b34      	ldr	r3, [pc, #208]	; (801c84c <tcp_output_segment+0x1b4>)
 801c77c:	681a      	ldr	r2, [r3, #0]
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	68db      	ldr	r3, [r3, #12]
 801c786:	685b      	ldr	r3, [r3, #4]
 801c788:	4618      	mov	r0, r3
 801c78a:	f7f6 f96a 	bl	8012a62 <lwip_htonl>
 801c78e:	4602      	mov	r2, r0
 801c790:	68bb      	ldr	r3, [r7, #8]
 801c792:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	68da      	ldr	r2, [r3, #12]
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	685b      	ldr	r3, [r3, #4]
 801c79c:	685b      	ldr	r3, [r3, #4]
 801c79e:	1ad3      	subs	r3, r2, r3
 801c7a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	8959      	ldrh	r1, [r3, #10]
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	685b      	ldr	r3, [r3, #4]
 801c7ac:	8b3a      	ldrh	r2, [r7, #24]
 801c7ae:	1a8a      	subs	r2, r1, r2
 801c7b0:	b292      	uxth	r2, r2
 801c7b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	685b      	ldr	r3, [r3, #4]
 801c7b8:	8919      	ldrh	r1, [r3, #8]
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	685b      	ldr	r3, [r3, #4]
 801c7be:	8b3a      	ldrh	r2, [r7, #24]
 801c7c0:	1a8a      	subs	r2, r1, r2
 801c7c2:	b292      	uxth	r2, r2
 801c7c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	685b      	ldr	r3, [r3, #4]
 801c7ca:	68fa      	ldr	r2, [r7, #12]
 801c7cc:	68d2      	ldr	r2, [r2, #12]
 801c7ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	68db      	ldr	r3, [r3, #12]
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	741a      	strb	r2, [r3, #16]
 801c7d8:	2200      	movs	r2, #0
 801c7da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	68db      	ldr	r3, [r3, #12]
 801c7e0:	f103 0214 	add.w	r2, r3, #20
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	7a9b      	ldrb	r3, [r3, #10]
 801c7e8:	009b      	lsls	r3, r3, #2
 801c7ea:	f003 0304 	and.w	r3, r3, #4
 801c7ee:	4413      	add	r3, r2
 801c7f0:	69fa      	ldr	r2, [r7, #28]
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	d006      	beq.n	801c804 <tcp_output_segment+0x16c>
 801c7f6:	4b10      	ldr	r3, [pc, #64]	; (801c838 <tcp_output_segment+0x1a0>)
 801c7f8:	f240 621c 	movw	r2, #1564	; 0x61c
 801c7fc:	4914      	ldr	r1, [pc, #80]	; (801c850 <tcp_output_segment+0x1b8>)
 801c7fe:	4810      	ldr	r0, [pc, #64]	; (801c840 <tcp_output_segment+0x1a8>)
 801c800:	f003 f958 	bl	801fab4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	6858      	ldr	r0, [r3, #4]
 801c808:	68b9      	ldr	r1, [r7, #8]
 801c80a:	68bb      	ldr	r3, [r7, #8]
 801c80c:	1d1c      	adds	r4, r3, #4
 801c80e:	68bb      	ldr	r3, [r7, #8]
 801c810:	7add      	ldrb	r5, [r3, #11]
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	7a9b      	ldrb	r3, [r3, #10]
 801c816:	687a      	ldr	r2, [r7, #4]
 801c818:	9202      	str	r2, [sp, #8]
 801c81a:	2206      	movs	r2, #6
 801c81c:	9201      	str	r2, [sp, #4]
 801c81e:	9300      	str	r3, [sp, #0]
 801c820:	462b      	mov	r3, r5
 801c822:	4622      	mov	r2, r4
 801c824:	f7f7 fd9c 	bl	8014360 <ip4_output_if>
 801c828:	4603      	mov	r3, r0
 801c82a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801c82c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c830:	4618      	mov	r0, r3
 801c832:	3720      	adds	r7, #32
 801c834:	46bd      	mov	sp, r7
 801c836:	bdb0      	pop	{r4, r5, r7, pc}
 801c838:	08026980 	.word	0x08026980
 801c83c:	08026f70 	.word	0x08026f70
 801c840:	08026a00 	.word	0x08026a00
 801c844:	08026f90 	.word	0x08026f90
 801c848:	08026fb0 	.word	0x08026fb0
 801c84c:	24008a2c 	.word	0x24008a2c
 801c850:	08026fd4 	.word	0x08026fd4

0801c854 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801c854:	b5b0      	push	{r4, r5, r7, lr}
 801c856:	b084      	sub	sp, #16
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d106      	bne.n	801c870 <tcp_rexmit_rto_prepare+0x1c>
 801c862:	4b31      	ldr	r3, [pc, #196]	; (801c928 <tcp_rexmit_rto_prepare+0xd4>)
 801c864:	f240 6263 	movw	r2, #1635	; 0x663
 801c868:	4930      	ldr	r1, [pc, #192]	; (801c92c <tcp_rexmit_rto_prepare+0xd8>)
 801c86a:	4831      	ldr	r0, [pc, #196]	; (801c930 <tcp_rexmit_rto_prepare+0xdc>)
 801c86c:	f003 f922 	bl	801fab4 <iprintf>

  if (pcb->unacked == NULL) {
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c874:	2b00      	cmp	r3, #0
 801c876:	d102      	bne.n	801c87e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801c878:	f06f 0305 	mvn.w	r3, #5
 801c87c:	e050      	b.n	801c920 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c882:	60fb      	str	r3, [r7, #12]
 801c884:	e00b      	b.n	801c89e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801c886:	68f8      	ldr	r0, [r7, #12]
 801c888:	f7ff fee6 	bl	801c658 <tcp_output_segment_busy>
 801c88c:	4603      	mov	r3, r0
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d002      	beq.n	801c898 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801c892:	f06f 0305 	mvn.w	r3, #5
 801c896:	e043      	b.n	801c920 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	60fb      	str	r3, [r7, #12]
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d1ef      	bne.n	801c886 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801c8a6:	68f8      	ldr	r0, [r7, #12]
 801c8a8:	f7ff fed6 	bl	801c658 <tcp_output_segment_busy>
 801c8ac:	4603      	mov	r3, r0
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d002      	beq.n	801c8b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801c8b2:	f06f 0305 	mvn.w	r3, #5
 801c8b6:	e033      	b.n	801c920 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	8b5b      	ldrh	r3, [r3, #26]
 801c8d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c8d6:	b29a      	uxth	r2, r3
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	68db      	ldr	r3, [r3, #12]
 801c8e0:	685b      	ldr	r3, [r3, #4]
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7f6 f8bd 	bl	8012a62 <lwip_htonl>
 801c8e8:	4604      	mov	r4, r0
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	891b      	ldrh	r3, [r3, #8]
 801c8ee:	461d      	mov	r5, r3
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	68db      	ldr	r3, [r3, #12]
 801c8f4:	899b      	ldrh	r3, [r3, #12]
 801c8f6:	b29b      	uxth	r3, r3
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	f7f6 f89d 	bl	8012a38 <lwip_htons>
 801c8fe:	4603      	mov	r3, r0
 801c900:	b2db      	uxtb	r3, r3
 801c902:	f003 0303 	and.w	r3, r3, #3
 801c906:	2b00      	cmp	r3, #0
 801c908:	d001      	beq.n	801c90e <tcp_rexmit_rto_prepare+0xba>
 801c90a:	2301      	movs	r3, #1
 801c90c:	e000      	b.n	801c910 <tcp_rexmit_rto_prepare+0xbc>
 801c90e:	2300      	movs	r3, #0
 801c910:	442b      	add	r3, r5
 801c912:	18e2      	adds	r2, r4, r3
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	2200      	movs	r2, #0
 801c91c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801c91e:	2300      	movs	r3, #0
}
 801c920:	4618      	mov	r0, r3
 801c922:	3710      	adds	r7, #16
 801c924:	46bd      	mov	sp, r7
 801c926:	bdb0      	pop	{r4, r5, r7, pc}
 801c928:	08026980 	.word	0x08026980
 801c92c:	08026fe8 	.word	0x08026fe8
 801c930:	08026a00 	.word	0x08026a00

0801c934 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b082      	sub	sp, #8
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d106      	bne.n	801c950 <tcp_rexmit_rto_commit+0x1c>
 801c942:	4b0d      	ldr	r3, [pc, #52]	; (801c978 <tcp_rexmit_rto_commit+0x44>)
 801c944:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c948:	490c      	ldr	r1, [pc, #48]	; (801c97c <tcp_rexmit_rto_commit+0x48>)
 801c94a:	480d      	ldr	r0, [pc, #52]	; (801c980 <tcp_rexmit_rto_commit+0x4c>)
 801c94c:	f003 f8b2 	bl	801fab4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c956:	2bff      	cmp	r3, #255	; 0xff
 801c958:	d007      	beq.n	801c96a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c960:	3301      	adds	r3, #1
 801c962:	b2da      	uxtb	r2, r3
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801c96a:	6878      	ldr	r0, [r7, #4]
 801c96c:	f7ff fc80 	bl	801c270 <tcp_output>
}
 801c970:	bf00      	nop
 801c972:	3708      	adds	r7, #8
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}
 801c978:	08026980 	.word	0x08026980
 801c97c:	0802700c 	.word	0x0802700c
 801c980:	08026a00 	.word	0x08026a00

0801c984 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b082      	sub	sp, #8
 801c988:	af00      	add	r7, sp, #0
 801c98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d106      	bne.n	801c9a0 <tcp_rexmit_rto+0x1c>
 801c992:	4b0a      	ldr	r3, [pc, #40]	; (801c9bc <tcp_rexmit_rto+0x38>)
 801c994:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801c998:	4909      	ldr	r1, [pc, #36]	; (801c9c0 <tcp_rexmit_rto+0x3c>)
 801c99a:	480a      	ldr	r0, [pc, #40]	; (801c9c4 <tcp_rexmit_rto+0x40>)
 801c99c:	f003 f88a 	bl	801fab4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801c9a0:	6878      	ldr	r0, [r7, #4]
 801c9a2:	f7ff ff57 	bl	801c854 <tcp_rexmit_rto_prepare>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d102      	bne.n	801c9b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801c9ac:	6878      	ldr	r0, [r7, #4]
 801c9ae:	f7ff ffc1 	bl	801c934 <tcp_rexmit_rto_commit>
  }
}
 801c9b2:	bf00      	nop
 801c9b4:	3708      	adds	r7, #8
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	bd80      	pop	{r7, pc}
 801c9ba:	bf00      	nop
 801c9bc:	08026980 	.word	0x08026980
 801c9c0:	08027030 	.word	0x08027030
 801c9c4:	08026a00 	.word	0x08026a00

0801c9c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c9c8:	b590      	push	{r4, r7, lr}
 801c9ca:	b085      	sub	sp, #20
 801c9cc:	af00      	add	r7, sp, #0
 801c9ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d106      	bne.n	801c9e4 <tcp_rexmit+0x1c>
 801c9d6:	4b2f      	ldr	r3, [pc, #188]	; (801ca94 <tcp_rexmit+0xcc>)
 801c9d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801c9dc:	492e      	ldr	r1, [pc, #184]	; (801ca98 <tcp_rexmit+0xd0>)
 801c9de:	482f      	ldr	r0, [pc, #188]	; (801ca9c <tcp_rexmit+0xd4>)
 801c9e0:	f003 f868 	bl	801fab4 <iprintf>

  if (pcb->unacked == NULL) {
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d102      	bne.n	801c9f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801c9ec:	f06f 0305 	mvn.w	r3, #5
 801c9f0:	e04c      	b.n	801ca8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801c9f8:	68b8      	ldr	r0, [r7, #8]
 801c9fa:	f7ff fe2d 	bl	801c658 <tcp_output_segment_busy>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d002      	beq.n	801ca0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ca04:	f06f 0305 	mvn.w	r3, #5
 801ca08:	e040      	b.n	801ca8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ca0a:	68bb      	ldr	r3, [r7, #8]
 801ca0c:	681a      	ldr	r2, [r3, #0]
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	336c      	adds	r3, #108	; 0x6c
 801ca16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ca18:	e002      	b.n	801ca20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d011      	beq.n	801ca4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	68db      	ldr	r3, [r3, #12]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	4618      	mov	r0, r3
 801ca32:	f7f6 f816 	bl	8012a62 <lwip_htonl>
 801ca36:	4604      	mov	r4, r0
 801ca38:	68bb      	ldr	r3, [r7, #8]
 801ca3a:	68db      	ldr	r3, [r3, #12]
 801ca3c:	685b      	ldr	r3, [r3, #4]
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f7f6 f80f 	bl	8012a62 <lwip_htonl>
 801ca44:	4603      	mov	r3, r0
 801ca46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	dbe6      	blt.n	801ca1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	681a      	ldr	r2, [r3, #0]
 801ca50:	68bb      	ldr	r3, [r7, #8]
 801ca52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	68ba      	ldr	r2, [r7, #8]
 801ca58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ca5a:	68bb      	ldr	r3, [r7, #8]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d103      	bne.n	801ca6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	2200      	movs	r2, #0
 801ca66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ca70:	2bff      	cmp	r3, #255	; 0xff
 801ca72:	d007      	beq.n	801ca84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ca7a:	3301      	adds	r3, #1
 801ca7c:	b2da      	uxtb	r2, r3
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2200      	movs	r2, #0
 801ca88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ca8a:	2300      	movs	r3, #0
}
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	3714      	adds	r7, #20
 801ca90:	46bd      	mov	sp, r7
 801ca92:	bd90      	pop	{r4, r7, pc}
 801ca94:	08026980 	.word	0x08026980
 801ca98:	0802704c 	.word	0x0802704c
 801ca9c:	08026a00 	.word	0x08026a00

0801caa0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b082      	sub	sp, #8
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d106      	bne.n	801cabc <tcp_rexmit_fast+0x1c>
 801caae:	4b2a      	ldr	r3, [pc, #168]	; (801cb58 <tcp_rexmit_fast+0xb8>)
 801cab0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801cab4:	4929      	ldr	r1, [pc, #164]	; (801cb5c <tcp_rexmit_fast+0xbc>)
 801cab6:	482a      	ldr	r0, [pc, #168]	; (801cb60 <tcp_rexmit_fast+0xc0>)
 801cab8:	f002 fffc 	bl	801fab4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d045      	beq.n	801cb50 <tcp_rexmit_fast+0xb0>
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	8b5b      	ldrh	r3, [r3, #26]
 801cac8:	f003 0304 	and.w	r3, r3, #4
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d13f      	bne.n	801cb50 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801cad0:	6878      	ldr	r0, [r7, #4]
 801cad2:	f7ff ff79 	bl	801c9c8 <tcp_rexmit>
 801cad6:	4603      	mov	r3, r0
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d139      	bne.n	801cb50 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cae8:	4293      	cmp	r3, r2
 801caea:	bf28      	it	cs
 801caec:	4613      	movcs	r3, r2
 801caee:	b29b      	uxth	r3, r3
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	da00      	bge.n	801caf6 <tcp_rexmit_fast+0x56>
 801caf4:	3301      	adds	r3, #1
 801caf6:	105b      	asrs	r3, r3, #1
 801caf8:	b29a      	uxth	r2, r3
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801cb06:	461a      	mov	r2, r3
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb0c:	005b      	lsls	r3, r3, #1
 801cb0e:	429a      	cmp	r2, r3
 801cb10:	d206      	bcs.n	801cb20 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb16:	005b      	lsls	r3, r3, #1
 801cb18:	b29a      	uxth	r2, r3
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb2a:	4619      	mov	r1, r3
 801cb2c:	0049      	lsls	r1, r1, #1
 801cb2e:	440b      	add	r3, r1
 801cb30:	b29b      	uxth	r3, r3
 801cb32:	4413      	add	r3, r2
 801cb34:	b29a      	uxth	r2, r3
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	8b5b      	ldrh	r3, [r3, #26]
 801cb40:	f043 0304 	orr.w	r3, r3, #4
 801cb44:	b29a      	uxth	r2, r3
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801cb50:	bf00      	nop
 801cb52:	3708      	adds	r7, #8
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}
 801cb58:	08026980 	.word	0x08026980
 801cb5c:	08027064 	.word	0x08027064
 801cb60:	08026a00 	.word	0x08026a00

0801cb64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b086      	sub	sp, #24
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	60f8      	str	r0, [r7, #12]
 801cb6c:	607b      	str	r3, [r7, #4]
 801cb6e:	460b      	mov	r3, r1
 801cb70:	817b      	strh	r3, [r7, #10]
 801cb72:	4613      	mov	r3, r2
 801cb74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801cb76:	897a      	ldrh	r2, [r7, #10]
 801cb78:	893b      	ldrh	r3, [r7, #8]
 801cb7a:	4413      	add	r3, r2
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	3314      	adds	r3, #20
 801cb80:	b29b      	uxth	r3, r3
 801cb82:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb86:	4619      	mov	r1, r3
 801cb88:	2022      	movs	r0, #34	; 0x22
 801cb8a:	f7f9 fb6d 	bl	8016268 <pbuf_alloc>
 801cb8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d04d      	beq.n	801cc32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801cb96:	897b      	ldrh	r3, [r7, #10]
 801cb98:	3313      	adds	r3, #19
 801cb9a:	697a      	ldr	r2, [r7, #20]
 801cb9c:	8952      	ldrh	r2, [r2, #10]
 801cb9e:	4293      	cmp	r3, r2
 801cba0:	db06      	blt.n	801cbb0 <tcp_output_alloc_header_common+0x4c>
 801cba2:	4b26      	ldr	r3, [pc, #152]	; (801cc3c <tcp_output_alloc_header_common+0xd8>)
 801cba4:	f240 7223 	movw	r2, #1827	; 0x723
 801cba8:	4925      	ldr	r1, [pc, #148]	; (801cc40 <tcp_output_alloc_header_common+0xdc>)
 801cbaa:	4826      	ldr	r0, [pc, #152]	; (801cc44 <tcp_output_alloc_header_common+0xe0>)
 801cbac:	f002 ff82 	bl	801fab4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	685b      	ldr	r3, [r3, #4]
 801cbb4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801cbb6:	8c3b      	ldrh	r3, [r7, #32]
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f7f5 ff3d 	bl	8012a38 <lwip_htons>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	461a      	mov	r2, r3
 801cbc2:	693b      	ldr	r3, [r7, #16]
 801cbc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801cbc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7f5 ff35 	bl	8012a38 <lwip_htons>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	461a      	mov	r2, r3
 801cbd2:	693b      	ldr	r3, [r7, #16]
 801cbd4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801cbd6:	693b      	ldr	r3, [r7, #16]
 801cbd8:	687a      	ldr	r2, [r7, #4]
 801cbda:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801cbdc:	68f8      	ldr	r0, [r7, #12]
 801cbde:	f7f5 ff40 	bl	8012a62 <lwip_htonl>
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	693b      	ldr	r3, [r7, #16]
 801cbe6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801cbe8:	897b      	ldrh	r3, [r7, #10]
 801cbea:	089b      	lsrs	r3, r3, #2
 801cbec:	b29b      	uxth	r3, r3
 801cbee:	3305      	adds	r3, #5
 801cbf0:	b29b      	uxth	r3, r3
 801cbf2:	031b      	lsls	r3, r3, #12
 801cbf4:	b29a      	uxth	r2, r3
 801cbf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cbfa:	b29b      	uxth	r3, r3
 801cbfc:	4313      	orrs	r3, r2
 801cbfe:	b29b      	uxth	r3, r3
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7f5 ff19 	bl	8012a38 <lwip_htons>
 801cc06:	4603      	mov	r3, r0
 801cc08:	461a      	mov	r2, r3
 801cc0a:	693b      	ldr	r3, [r7, #16]
 801cc0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801cc0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cc10:	4618      	mov	r0, r3
 801cc12:	f7f5 ff11 	bl	8012a38 <lwip_htons>
 801cc16:	4603      	mov	r3, r0
 801cc18:	461a      	mov	r2, r3
 801cc1a:	693b      	ldr	r3, [r7, #16]
 801cc1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801cc1e:	693b      	ldr	r3, [r7, #16]
 801cc20:	2200      	movs	r2, #0
 801cc22:	741a      	strb	r2, [r3, #16]
 801cc24:	2200      	movs	r2, #0
 801cc26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801cc28:	693b      	ldr	r3, [r7, #16]
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	749a      	strb	r2, [r3, #18]
 801cc2e:	2200      	movs	r2, #0
 801cc30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801cc32:	697b      	ldr	r3, [r7, #20]
}
 801cc34:	4618      	mov	r0, r3
 801cc36:	3718      	adds	r7, #24
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	bd80      	pop	{r7, pc}
 801cc3c:	08026980 	.word	0x08026980
 801cc40:	08027084 	.word	0x08027084
 801cc44:	08026a00 	.word	0x08026a00

0801cc48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801cc48:	b5b0      	push	{r4, r5, r7, lr}
 801cc4a:	b08a      	sub	sp, #40	; 0x28
 801cc4c:	af04      	add	r7, sp, #16
 801cc4e:	60f8      	str	r0, [r7, #12]
 801cc50:	607b      	str	r3, [r7, #4]
 801cc52:	460b      	mov	r3, r1
 801cc54:	817b      	strh	r3, [r7, #10]
 801cc56:	4613      	mov	r3, r2
 801cc58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d106      	bne.n	801cc6e <tcp_output_alloc_header+0x26>
 801cc60:	4b15      	ldr	r3, [pc, #84]	; (801ccb8 <tcp_output_alloc_header+0x70>)
 801cc62:	f240 7242 	movw	r2, #1858	; 0x742
 801cc66:	4915      	ldr	r1, [pc, #84]	; (801ccbc <tcp_output_alloc_header+0x74>)
 801cc68:	4815      	ldr	r0, [pc, #84]	; (801ccc0 <tcp_output_alloc_header+0x78>)
 801cc6a:	f002 ff23 	bl	801fab4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	8adb      	ldrh	r3, [r3, #22]
 801cc76:	68fa      	ldr	r2, [r7, #12]
 801cc78:	8b12      	ldrh	r2, [r2, #24]
 801cc7a:	68f9      	ldr	r1, [r7, #12]
 801cc7c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801cc7e:	893d      	ldrh	r5, [r7, #8]
 801cc80:	897c      	ldrh	r4, [r7, #10]
 801cc82:	9103      	str	r1, [sp, #12]
 801cc84:	2110      	movs	r1, #16
 801cc86:	9102      	str	r1, [sp, #8]
 801cc88:	9201      	str	r2, [sp, #4]
 801cc8a:	9300      	str	r3, [sp, #0]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	462a      	mov	r2, r5
 801cc90:	4621      	mov	r1, r4
 801cc92:	f7ff ff67 	bl	801cb64 <tcp_output_alloc_header_common>
 801cc96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801cc98:	697b      	ldr	r3, [r7, #20]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d006      	beq.n	801ccac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cca2:	68fa      	ldr	r2, [r7, #12]
 801cca4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801cca6:	441a      	add	r2, r3
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ccac:	697b      	ldr	r3, [r7, #20]
}
 801ccae:	4618      	mov	r0, r3
 801ccb0:	3718      	adds	r7, #24
 801ccb2:	46bd      	mov	sp, r7
 801ccb4:	bdb0      	pop	{r4, r5, r7, pc}
 801ccb6:	bf00      	nop
 801ccb8:	08026980 	.word	0x08026980
 801ccbc:	080270b4 	.word	0x080270b4
 801ccc0:	08026a00 	.word	0x08026a00

0801ccc4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b088      	sub	sp, #32
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	60f8      	str	r0, [r7, #12]
 801cccc:	60b9      	str	r1, [r7, #8]
 801ccce:	4611      	mov	r1, r2
 801ccd0:	461a      	mov	r2, r3
 801ccd2:	460b      	mov	r3, r1
 801ccd4:	71fb      	strb	r3, [r7, #7]
 801ccd6:	4613      	mov	r3, r2
 801ccd8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ccde:	68bb      	ldr	r3, [r7, #8]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d106      	bne.n	801ccf2 <tcp_output_fill_options+0x2e>
 801cce4:	4b13      	ldr	r3, [pc, #76]	; (801cd34 <tcp_output_fill_options+0x70>)
 801cce6:	f240 7256 	movw	r2, #1878	; 0x756
 801ccea:	4913      	ldr	r1, [pc, #76]	; (801cd38 <tcp_output_fill_options+0x74>)
 801ccec:	4813      	ldr	r0, [pc, #76]	; (801cd3c <tcp_output_fill_options+0x78>)
 801ccee:	f002 fee1 	bl	801fab4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ccf2:	68bb      	ldr	r3, [r7, #8]
 801ccf4:	685b      	ldr	r3, [r3, #4]
 801ccf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ccf8:	69bb      	ldr	r3, [r7, #24]
 801ccfa:	3314      	adds	r3, #20
 801ccfc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ccfe:	69bb      	ldr	r3, [r7, #24]
 801cd00:	f103 0214 	add.w	r2, r3, #20
 801cd04:	8bfb      	ldrh	r3, [r7, #30]
 801cd06:	009b      	lsls	r3, r3, #2
 801cd08:	4619      	mov	r1, r3
 801cd0a:	79fb      	ldrb	r3, [r7, #7]
 801cd0c:	009b      	lsls	r3, r3, #2
 801cd0e:	f003 0304 	and.w	r3, r3, #4
 801cd12:	440b      	add	r3, r1
 801cd14:	4413      	add	r3, r2
 801cd16:	697a      	ldr	r2, [r7, #20]
 801cd18:	429a      	cmp	r2, r3
 801cd1a:	d006      	beq.n	801cd2a <tcp_output_fill_options+0x66>
 801cd1c:	4b05      	ldr	r3, [pc, #20]	; (801cd34 <tcp_output_fill_options+0x70>)
 801cd1e:	f240 7275 	movw	r2, #1909	; 0x775
 801cd22:	4907      	ldr	r1, [pc, #28]	; (801cd40 <tcp_output_fill_options+0x7c>)
 801cd24:	4805      	ldr	r0, [pc, #20]	; (801cd3c <tcp_output_fill_options+0x78>)
 801cd26:	f002 fec5 	bl	801fab4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801cd2a:	bf00      	nop
 801cd2c:	3720      	adds	r7, #32
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	bd80      	pop	{r7, pc}
 801cd32:	bf00      	nop
 801cd34:	08026980 	.word	0x08026980
 801cd38:	080270dc 	.word	0x080270dc
 801cd3c:	08026a00 	.word	0x08026a00
 801cd40:	08026fd4 	.word	0x08026fd4

0801cd44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b08a      	sub	sp, #40	; 0x28
 801cd48:	af04      	add	r7, sp, #16
 801cd4a:	60f8      	str	r0, [r7, #12]
 801cd4c:	60b9      	str	r1, [r7, #8]
 801cd4e:	607a      	str	r2, [r7, #4]
 801cd50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801cd52:	68bb      	ldr	r3, [r7, #8]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d106      	bne.n	801cd66 <tcp_output_control_segment+0x22>
 801cd58:	4b1c      	ldr	r3, [pc, #112]	; (801cdcc <tcp_output_control_segment+0x88>)
 801cd5a:	f240 7287 	movw	r2, #1927	; 0x787
 801cd5e:	491c      	ldr	r1, [pc, #112]	; (801cdd0 <tcp_output_control_segment+0x8c>)
 801cd60:	481c      	ldr	r0, [pc, #112]	; (801cdd4 <tcp_output_control_segment+0x90>)
 801cd62:	f002 fea7 	bl	801fab4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801cd66:	683a      	ldr	r2, [r7, #0]
 801cd68:	6879      	ldr	r1, [r7, #4]
 801cd6a:	68f8      	ldr	r0, [r7, #12]
 801cd6c:	f7fe fae8 	bl	801b340 <tcp_route>
 801cd70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d102      	bne.n	801cd7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801cd78:	23fc      	movs	r3, #252	; 0xfc
 801cd7a:	75fb      	strb	r3, [r7, #23]
 801cd7c:	e01c      	b.n	801cdb8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d006      	beq.n	801cd92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	7adb      	ldrb	r3, [r3, #11]
 801cd88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	7a9b      	ldrb	r3, [r3, #10]
 801cd8e:	757b      	strb	r3, [r7, #21]
 801cd90:	e003      	b.n	801cd9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801cd92:	23ff      	movs	r3, #255	; 0xff
 801cd94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801cd96:	2300      	movs	r3, #0
 801cd98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801cd9a:	7dba      	ldrb	r2, [r7, #22]
 801cd9c:	693b      	ldr	r3, [r7, #16]
 801cd9e:	9302      	str	r3, [sp, #8]
 801cda0:	2306      	movs	r3, #6
 801cda2:	9301      	str	r3, [sp, #4]
 801cda4:	7d7b      	ldrb	r3, [r7, #21]
 801cda6:	9300      	str	r3, [sp, #0]
 801cda8:	4613      	mov	r3, r2
 801cdaa:	683a      	ldr	r2, [r7, #0]
 801cdac:	6879      	ldr	r1, [r7, #4]
 801cdae:	68b8      	ldr	r0, [r7, #8]
 801cdb0:	f7f7 fad6 	bl	8014360 <ip4_output_if>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801cdb8:	68b8      	ldr	r0, [r7, #8]
 801cdba:	f7f9 fd39 	bl	8016830 <pbuf_free>
  return err;
 801cdbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	3718      	adds	r7, #24
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	bd80      	pop	{r7, pc}
 801cdca:	bf00      	nop
 801cdcc:	08026980 	.word	0x08026980
 801cdd0:	08027104 	.word	0x08027104
 801cdd4:	08026a00 	.word	0x08026a00

0801cdd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801cdd8:	b590      	push	{r4, r7, lr}
 801cdda:	b08b      	sub	sp, #44	; 0x2c
 801cddc:	af04      	add	r7, sp, #16
 801cdde:	60f8      	str	r0, [r7, #12]
 801cde0:	60b9      	str	r1, [r7, #8]
 801cde2:	607a      	str	r2, [r7, #4]
 801cde4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d106      	bne.n	801cdfa <tcp_rst+0x22>
 801cdec:	4b1f      	ldr	r3, [pc, #124]	; (801ce6c <tcp_rst+0x94>)
 801cdee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801cdf2:	491f      	ldr	r1, [pc, #124]	; (801ce70 <tcp_rst+0x98>)
 801cdf4:	481f      	ldr	r0, [pc, #124]	; (801ce74 <tcp_rst+0x9c>)
 801cdf6:	f002 fe5d 	bl	801fab4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d106      	bne.n	801ce0e <tcp_rst+0x36>
 801ce00:	4b1a      	ldr	r3, [pc, #104]	; (801ce6c <tcp_rst+0x94>)
 801ce02:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ce06:	491c      	ldr	r1, [pc, #112]	; (801ce78 <tcp_rst+0xa0>)
 801ce08:	481a      	ldr	r0, [pc, #104]	; (801ce74 <tcp_rst+0x9c>)
 801ce0a:	f002 fe53 	bl	801fab4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ce0e:	2300      	movs	r3, #0
 801ce10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ce12:	f246 0308 	movw	r3, #24584	; 0x6008
 801ce16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ce18:	7dfb      	ldrb	r3, [r7, #23]
 801ce1a:	b29c      	uxth	r4, r3
 801ce1c:	68b8      	ldr	r0, [r7, #8]
 801ce1e:	f7f5 fe20 	bl	8012a62 <lwip_htonl>
 801ce22:	4602      	mov	r2, r0
 801ce24:	8abb      	ldrh	r3, [r7, #20]
 801ce26:	9303      	str	r3, [sp, #12]
 801ce28:	2314      	movs	r3, #20
 801ce2a:	9302      	str	r3, [sp, #8]
 801ce2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ce2e:	9301      	str	r3, [sp, #4]
 801ce30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ce32:	9300      	str	r3, [sp, #0]
 801ce34:	4613      	mov	r3, r2
 801ce36:	2200      	movs	r2, #0
 801ce38:	4621      	mov	r1, r4
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7ff fe92 	bl	801cb64 <tcp_output_alloc_header_common>
 801ce40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ce42:	693b      	ldr	r3, [r7, #16]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d00c      	beq.n	801ce62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ce48:	7dfb      	ldrb	r3, [r7, #23]
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	6939      	ldr	r1, [r7, #16]
 801ce4e:	68f8      	ldr	r0, [r7, #12]
 801ce50:	f7ff ff38 	bl	801ccc4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce56:	683a      	ldr	r2, [r7, #0]
 801ce58:	6939      	ldr	r1, [r7, #16]
 801ce5a:	68f8      	ldr	r0, [r7, #12]
 801ce5c:	f7ff ff72 	bl	801cd44 <tcp_output_control_segment>
 801ce60:	e000      	b.n	801ce64 <tcp_rst+0x8c>
    return;
 801ce62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ce64:	371c      	adds	r7, #28
 801ce66:	46bd      	mov	sp, r7
 801ce68:	bd90      	pop	{r4, r7, pc}
 801ce6a:	bf00      	nop
 801ce6c:	08026980 	.word	0x08026980
 801ce70:	08027130 	.word	0x08027130
 801ce74:	08026a00 	.word	0x08026a00
 801ce78:	0802714c 	.word	0x0802714c

0801ce7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ce7c:	b590      	push	{r4, r7, lr}
 801ce7e:	b087      	sub	sp, #28
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ce84:	2300      	movs	r3, #0
 801ce86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ce88:	2300      	movs	r3, #0
 801ce8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d106      	bne.n	801cea0 <tcp_send_empty_ack+0x24>
 801ce92:	4b28      	ldr	r3, [pc, #160]	; (801cf34 <tcp_send_empty_ack+0xb8>)
 801ce94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ce98:	4927      	ldr	r1, [pc, #156]	; (801cf38 <tcp_send_empty_ack+0xbc>)
 801ce9a:	4828      	ldr	r0, [pc, #160]	; (801cf3c <tcp_send_empty_ack+0xc0>)
 801ce9c:	f002 fe0a 	bl	801fab4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cea0:	7dfb      	ldrb	r3, [r7, #23]
 801cea2:	009b      	lsls	r3, r3, #2
 801cea4:	b2db      	uxtb	r3, r3
 801cea6:	f003 0304 	and.w	r3, r3, #4
 801ceaa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ceac:	7d7b      	ldrb	r3, [r7, #21]
 801ceae:	b29c      	uxth	r4, r3
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7f5 fdd4 	bl	8012a62 <lwip_htonl>
 801ceba:	4603      	mov	r3, r0
 801cebc:	2200      	movs	r2, #0
 801cebe:	4621      	mov	r1, r4
 801cec0:	6878      	ldr	r0, [r7, #4]
 801cec2:	f7ff fec1 	bl	801cc48 <tcp_output_alloc_header>
 801cec6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cec8:	693b      	ldr	r3, [r7, #16]
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d109      	bne.n	801cee2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	8b5b      	ldrh	r3, [r3, #26]
 801ced2:	f043 0303 	orr.w	r3, r3, #3
 801ced6:	b29a      	uxth	r2, r3
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801cedc:	f06f 0301 	mvn.w	r3, #1
 801cee0:	e023      	b.n	801cf2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801cee2:	7dbb      	ldrb	r3, [r7, #22]
 801cee4:	7dfa      	ldrb	r2, [r7, #23]
 801cee6:	6939      	ldr	r1, [r7, #16]
 801cee8:	6878      	ldr	r0, [r7, #4]
 801ceea:	f7ff feeb 	bl	801ccc4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ceee:	687a      	ldr	r2, [r7, #4]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	3304      	adds	r3, #4
 801cef4:	6939      	ldr	r1, [r7, #16]
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f7ff ff24 	bl	801cd44 <tcp_output_control_segment>
 801cefc:	4603      	mov	r3, r0
 801cefe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801cf00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d007      	beq.n	801cf18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	8b5b      	ldrh	r3, [r3, #26]
 801cf0c:	f043 0303 	orr.w	r3, r3, #3
 801cf10:	b29a      	uxth	r2, r3
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	835a      	strh	r2, [r3, #26]
 801cf16:	e006      	b.n	801cf26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	8b5b      	ldrh	r3, [r3, #26]
 801cf1c:	f023 0303 	bic.w	r3, r3, #3
 801cf20:	b29a      	uxth	r2, r3
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801cf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cf2a:	4618      	mov	r0, r3
 801cf2c:	371c      	adds	r7, #28
 801cf2e:	46bd      	mov	sp, r7
 801cf30:	bd90      	pop	{r4, r7, pc}
 801cf32:	bf00      	nop
 801cf34:	08026980 	.word	0x08026980
 801cf38:	08027168 	.word	0x08027168
 801cf3c:	08026a00 	.word	0x08026a00

0801cf40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801cf40:	b590      	push	{r4, r7, lr}
 801cf42:	b087      	sub	sp, #28
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cf48:	2300      	movs	r3, #0
 801cf4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d106      	bne.n	801cf60 <tcp_keepalive+0x20>
 801cf52:	4b18      	ldr	r3, [pc, #96]	; (801cfb4 <tcp_keepalive+0x74>)
 801cf54:	f640 0224 	movw	r2, #2084	; 0x824
 801cf58:	4917      	ldr	r1, [pc, #92]	; (801cfb8 <tcp_keepalive+0x78>)
 801cf5a:	4818      	ldr	r0, [pc, #96]	; (801cfbc <tcp_keepalive+0x7c>)
 801cf5c:	f002 fdaa 	bl	801fab4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801cf60:	7dfb      	ldrb	r3, [r7, #23]
 801cf62:	b29c      	uxth	r4, r3
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf68:	3b01      	subs	r3, #1
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7f5 fd79 	bl	8012a62 <lwip_htonl>
 801cf70:	4603      	mov	r3, r0
 801cf72:	2200      	movs	r2, #0
 801cf74:	4621      	mov	r1, r4
 801cf76:	6878      	ldr	r0, [r7, #4]
 801cf78:	f7ff fe66 	bl	801cc48 <tcp_output_alloc_header>
 801cf7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cf7e:	693b      	ldr	r3, [r7, #16]
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d102      	bne.n	801cf8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801cf84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf88:	e010      	b.n	801cfac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cf8a:	7dfb      	ldrb	r3, [r7, #23]
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	6939      	ldr	r1, [r7, #16]
 801cf90:	6878      	ldr	r0, [r7, #4]
 801cf92:	f7ff fe97 	bl	801ccc4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cf96:	687a      	ldr	r2, [r7, #4]
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	3304      	adds	r3, #4
 801cf9c:	6939      	ldr	r1, [r7, #16]
 801cf9e:	6878      	ldr	r0, [r7, #4]
 801cfa0:	f7ff fed0 	bl	801cd44 <tcp_output_control_segment>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cfa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cfac:	4618      	mov	r0, r3
 801cfae:	371c      	adds	r7, #28
 801cfb0:	46bd      	mov	sp, r7
 801cfb2:	bd90      	pop	{r4, r7, pc}
 801cfb4:	08026980 	.word	0x08026980
 801cfb8:	08027188 	.word	0x08027188
 801cfbc:	08026a00 	.word	0x08026a00

0801cfc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801cfc0:	b590      	push	{r4, r7, lr}
 801cfc2:	b08b      	sub	sp, #44	; 0x2c
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cfc8:	2300      	movs	r3, #0
 801cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d106      	bne.n	801cfe2 <tcp_zero_window_probe+0x22>
 801cfd4:	4b4c      	ldr	r3, [pc, #304]	; (801d108 <tcp_zero_window_probe+0x148>)
 801cfd6:	f640 024f 	movw	r2, #2127	; 0x84f
 801cfda:	494c      	ldr	r1, [pc, #304]	; (801d10c <tcp_zero_window_probe+0x14c>)
 801cfdc:	484c      	ldr	r0, [pc, #304]	; (801d110 <tcp_zero_window_probe+0x150>)
 801cfde:	f002 fd69 	bl	801fab4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfe6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801cfe8:	6a3b      	ldr	r3, [r7, #32]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d101      	bne.n	801cff2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801cfee:	2300      	movs	r3, #0
 801cff0:	e086      	b.n	801d100 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cff8:	2bff      	cmp	r3, #255	; 0xff
 801cffa:	d007      	beq.n	801d00c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d002:	3301      	adds	r3, #1
 801d004:	b2da      	uxtb	r2, r3
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801d00c:	6a3b      	ldr	r3, [r7, #32]
 801d00e:	68db      	ldr	r3, [r3, #12]
 801d010:	899b      	ldrh	r3, [r3, #12]
 801d012:	b29b      	uxth	r3, r3
 801d014:	4618      	mov	r0, r3
 801d016:	f7f5 fd0f 	bl	8012a38 <lwip_htons>
 801d01a:	4603      	mov	r3, r0
 801d01c:	b2db      	uxtb	r3, r3
 801d01e:	f003 0301 	and.w	r3, r3, #1
 801d022:	2b00      	cmp	r3, #0
 801d024:	d005      	beq.n	801d032 <tcp_zero_window_probe+0x72>
 801d026:	6a3b      	ldr	r3, [r7, #32]
 801d028:	891b      	ldrh	r3, [r3, #8]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d101      	bne.n	801d032 <tcp_zero_window_probe+0x72>
 801d02e:	2301      	movs	r3, #1
 801d030:	e000      	b.n	801d034 <tcp_zero_window_probe+0x74>
 801d032:	2300      	movs	r3, #0
 801d034:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801d036:	7ffb      	ldrb	r3, [r7, #31]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	bf0c      	ite	eq
 801d03c:	2301      	moveq	r3, #1
 801d03e:	2300      	movne	r3, #0
 801d040:	b2db      	uxtb	r3, r3
 801d042:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d048:	b299      	uxth	r1, r3
 801d04a:	6a3b      	ldr	r3, [r7, #32]
 801d04c:	68db      	ldr	r3, [r3, #12]
 801d04e:	685b      	ldr	r3, [r3, #4]
 801d050:	8bba      	ldrh	r2, [r7, #28]
 801d052:	6878      	ldr	r0, [r7, #4]
 801d054:	f7ff fdf8 	bl	801cc48 <tcp_output_alloc_header>
 801d058:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801d05a:	69bb      	ldr	r3, [r7, #24]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d102      	bne.n	801d066 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801d060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d064:	e04c      	b.n	801d100 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801d066:	69bb      	ldr	r3, [r7, #24]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801d06c:	7ffb      	ldrb	r3, [r7, #31]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d011      	beq.n	801d096 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801d072:	697b      	ldr	r3, [r7, #20]
 801d074:	899b      	ldrh	r3, [r3, #12]
 801d076:	b29b      	uxth	r3, r3
 801d078:	b21b      	sxth	r3, r3
 801d07a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d07e:	b21c      	sxth	r4, r3
 801d080:	2011      	movs	r0, #17
 801d082:	f7f5 fcd9 	bl	8012a38 <lwip_htons>
 801d086:	4603      	mov	r3, r0
 801d088:	b21b      	sxth	r3, r3
 801d08a:	4323      	orrs	r3, r4
 801d08c:	b21b      	sxth	r3, r3
 801d08e:	b29a      	uxth	r2, r3
 801d090:	697b      	ldr	r3, [r7, #20]
 801d092:	819a      	strh	r2, [r3, #12]
 801d094:	e010      	b.n	801d0b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801d096:	69bb      	ldr	r3, [r7, #24]
 801d098:	685b      	ldr	r3, [r3, #4]
 801d09a:	3314      	adds	r3, #20
 801d09c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801d09e:	6a3b      	ldr	r3, [r7, #32]
 801d0a0:	6858      	ldr	r0, [r3, #4]
 801d0a2:	6a3b      	ldr	r3, [r7, #32]
 801d0a4:	685b      	ldr	r3, [r3, #4]
 801d0a6:	891a      	ldrh	r2, [r3, #8]
 801d0a8:	6a3b      	ldr	r3, [r7, #32]
 801d0aa:	891b      	ldrh	r3, [r3, #8]
 801d0ac:	1ad3      	subs	r3, r2, r3
 801d0ae:	b29b      	uxth	r3, r3
 801d0b0:	2201      	movs	r2, #1
 801d0b2:	6939      	ldr	r1, [r7, #16]
 801d0b4:	f7f9 fda6 	bl	8016c04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801d0b8:	6a3b      	ldr	r3, [r7, #32]
 801d0ba:	68db      	ldr	r3, [r3, #12]
 801d0bc:	685b      	ldr	r3, [r3, #4]
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7f5 fccf 	bl	8012a62 <lwip_htonl>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	3301      	adds	r3, #1
 801d0c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	1ad3      	subs	r3, r2, r3
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	da02      	bge.n	801d0dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	68fa      	ldr	r2, [r7, #12]
 801d0da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	69b9      	ldr	r1, [r7, #24]
 801d0e4:	6878      	ldr	r0, [r7, #4]
 801d0e6:	f7ff fded 	bl	801ccc4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d0ea:	687a      	ldr	r2, [r7, #4]
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	3304      	adds	r3, #4
 801d0f0:	69b9      	ldr	r1, [r7, #24]
 801d0f2:	6878      	ldr	r0, [r7, #4]
 801d0f4:	f7ff fe26 	bl	801cd44 <tcp_output_control_segment>
 801d0f8:	4603      	mov	r3, r0
 801d0fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d0fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d100:	4618      	mov	r0, r3
 801d102:	372c      	adds	r7, #44	; 0x2c
 801d104:	46bd      	mov	sp, r7
 801d106:	bd90      	pop	{r4, r7, pc}
 801d108:	08026980 	.word	0x08026980
 801d10c:	080271a4 	.word	0x080271a4
 801d110:	08026a00 	.word	0x08026a00

0801d114 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801d114:	b580      	push	{r7, lr}
 801d116:	b082      	sub	sp, #8
 801d118:	af00      	add	r7, sp, #0
 801d11a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801d11c:	f7f9 ff18 	bl	8016f50 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801d120:	4b0a      	ldr	r3, [pc, #40]	; (801d14c <tcpip_tcp_timer+0x38>)
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d103      	bne.n	801d130 <tcpip_tcp_timer+0x1c>
 801d128:	4b09      	ldr	r3, [pc, #36]	; (801d150 <tcpip_tcp_timer+0x3c>)
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d005      	beq.n	801d13c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d130:	2200      	movs	r2, #0
 801d132:	4908      	ldr	r1, [pc, #32]	; (801d154 <tcpip_tcp_timer+0x40>)
 801d134:	20fa      	movs	r0, #250	; 0xfa
 801d136:	f000 f8f3 	bl	801d320 <sys_timeout>
 801d13a:	e003      	b.n	801d144 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801d13c:	4b06      	ldr	r3, [pc, #24]	; (801d158 <tcpip_tcp_timer+0x44>)
 801d13e:	2200      	movs	r2, #0
 801d140:	601a      	str	r2, [r3, #0]
  }
}
 801d142:	bf00      	nop
 801d144:	bf00      	nop
 801d146:	3708      	adds	r7, #8
 801d148:	46bd      	mov	sp, r7
 801d14a:	bd80      	pop	{r7, pc}
 801d14c:	24008a28 	.word	0x24008a28
 801d150:	24008a38 	.word	0x24008a38
 801d154:	0801d115 	.word	0x0801d115
 801d158:	2400526c 	.word	0x2400526c

0801d15c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d160:	4b0a      	ldr	r3, [pc, #40]	; (801d18c <tcp_timer_needed+0x30>)
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d10f      	bne.n	801d188 <tcp_timer_needed+0x2c>
 801d168:	4b09      	ldr	r3, [pc, #36]	; (801d190 <tcp_timer_needed+0x34>)
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d103      	bne.n	801d178 <tcp_timer_needed+0x1c>
 801d170:	4b08      	ldr	r3, [pc, #32]	; (801d194 <tcp_timer_needed+0x38>)
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	2b00      	cmp	r3, #0
 801d176:	d007      	beq.n	801d188 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801d178:	4b04      	ldr	r3, [pc, #16]	; (801d18c <tcp_timer_needed+0x30>)
 801d17a:	2201      	movs	r2, #1
 801d17c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d17e:	2200      	movs	r2, #0
 801d180:	4905      	ldr	r1, [pc, #20]	; (801d198 <tcp_timer_needed+0x3c>)
 801d182:	20fa      	movs	r0, #250	; 0xfa
 801d184:	f000 f8cc 	bl	801d320 <sys_timeout>
  }
}
 801d188:	bf00      	nop
 801d18a:	bd80      	pop	{r7, pc}
 801d18c:	2400526c 	.word	0x2400526c
 801d190:	24008a28 	.word	0x24008a28
 801d194:	24008a38 	.word	0x24008a38
 801d198:	0801d115 	.word	0x0801d115

0801d19c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b086      	sub	sp, #24
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	60f8      	str	r0, [r7, #12]
 801d1a4:	60b9      	str	r1, [r7, #8]
 801d1a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801d1a8:	2006      	movs	r0, #6
 801d1aa:	f7f8 fc5b 	bl	8015a64 <memp_malloc>
 801d1ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801d1b0:	693b      	ldr	r3, [r7, #16]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	d109      	bne.n	801d1ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801d1b6:	693b      	ldr	r3, [r7, #16]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d151      	bne.n	801d260 <sys_timeout_abs+0xc4>
 801d1bc:	4b2a      	ldr	r3, [pc, #168]	; (801d268 <sys_timeout_abs+0xcc>)
 801d1be:	22be      	movs	r2, #190	; 0xbe
 801d1c0:	492a      	ldr	r1, [pc, #168]	; (801d26c <sys_timeout_abs+0xd0>)
 801d1c2:	482b      	ldr	r0, [pc, #172]	; (801d270 <sys_timeout_abs+0xd4>)
 801d1c4:	f002 fc76 	bl	801fab4 <iprintf>
    return;
 801d1c8:	e04a      	b.n	801d260 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801d1ca:	693b      	ldr	r3, [r7, #16]
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801d1d0:	693b      	ldr	r3, [r7, #16]
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801d1d6:	693b      	ldr	r3, [r7, #16]
 801d1d8:	687a      	ldr	r2, [r7, #4]
 801d1da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801d1dc:	693b      	ldr	r3, [r7, #16]
 801d1de:	68fa      	ldr	r2, [r7, #12]
 801d1e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801d1e2:	4b24      	ldr	r3, [pc, #144]	; (801d274 <sys_timeout_abs+0xd8>)
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d103      	bne.n	801d1f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801d1ea:	4a22      	ldr	r2, [pc, #136]	; (801d274 <sys_timeout_abs+0xd8>)
 801d1ec:	693b      	ldr	r3, [r7, #16]
 801d1ee:	6013      	str	r3, [r2, #0]
    return;
 801d1f0:	e037      	b.n	801d262 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801d1f2:	693b      	ldr	r3, [r7, #16]
 801d1f4:	685a      	ldr	r2, [r3, #4]
 801d1f6:	4b1f      	ldr	r3, [pc, #124]	; (801d274 <sys_timeout_abs+0xd8>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	685b      	ldr	r3, [r3, #4]
 801d1fc:	1ad3      	subs	r3, r2, r3
 801d1fe:	0fdb      	lsrs	r3, r3, #31
 801d200:	f003 0301 	and.w	r3, r3, #1
 801d204:	b2db      	uxtb	r3, r3
 801d206:	2b00      	cmp	r3, #0
 801d208:	d007      	beq.n	801d21a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801d20a:	4b1a      	ldr	r3, [pc, #104]	; (801d274 <sys_timeout_abs+0xd8>)
 801d20c:	681a      	ldr	r2, [r3, #0]
 801d20e:	693b      	ldr	r3, [r7, #16]
 801d210:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801d212:	4a18      	ldr	r2, [pc, #96]	; (801d274 <sys_timeout_abs+0xd8>)
 801d214:	693b      	ldr	r3, [r7, #16]
 801d216:	6013      	str	r3, [r2, #0]
 801d218:	e023      	b.n	801d262 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d21a:	4b16      	ldr	r3, [pc, #88]	; (801d274 <sys_timeout_abs+0xd8>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	617b      	str	r3, [r7, #20]
 801d220:	e01a      	b.n	801d258 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d222:	697b      	ldr	r3, [r7, #20]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d00b      	beq.n	801d242 <sys_timeout_abs+0xa6>
 801d22a:	693b      	ldr	r3, [r7, #16]
 801d22c:	685a      	ldr	r2, [r3, #4]
 801d22e:	697b      	ldr	r3, [r7, #20]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	685b      	ldr	r3, [r3, #4]
 801d234:	1ad3      	subs	r3, r2, r3
 801d236:	0fdb      	lsrs	r3, r3, #31
 801d238:	f003 0301 	and.w	r3, r3, #1
 801d23c:	b2db      	uxtb	r3, r3
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d007      	beq.n	801d252 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d242:	697b      	ldr	r3, [r7, #20]
 801d244:	681a      	ldr	r2, [r3, #0]
 801d246:	693b      	ldr	r3, [r7, #16]
 801d248:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d24a:	697b      	ldr	r3, [r7, #20]
 801d24c:	693a      	ldr	r2, [r7, #16]
 801d24e:	601a      	str	r2, [r3, #0]
        break;
 801d250:	e007      	b.n	801d262 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d252:	697b      	ldr	r3, [r7, #20]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	617b      	str	r3, [r7, #20]
 801d258:	697b      	ldr	r3, [r7, #20]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d1e1      	bne.n	801d222 <sys_timeout_abs+0x86>
 801d25e:	e000      	b.n	801d262 <sys_timeout_abs+0xc6>
    return;
 801d260:	bf00      	nop
      }
    }
  }
}
 801d262:	3718      	adds	r7, #24
 801d264:	46bd      	mov	sp, r7
 801d266:	bd80      	pop	{r7, pc}
 801d268:	080271c8 	.word	0x080271c8
 801d26c:	08027228 	.word	0x08027228
 801d270:	08027268 	.word	0x08027268
 801d274:	24005264 	.word	0x24005264

0801d278 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b086      	sub	sp, #24
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801d284:	697b      	ldr	r3, [r7, #20]
 801d286:	685b      	ldr	r3, [r3, #4]
 801d288:	4798      	blx	r3

  now = sys_now();
 801d28a:	f7f4 fe0d 	bl	8011ea8 <sys_now>
 801d28e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801d290:	697b      	ldr	r3, [r7, #20]
 801d292:	681a      	ldr	r2, [r3, #0]
 801d294:	4b0f      	ldr	r3, [pc, #60]	; (801d2d4 <lwip_cyclic_timer+0x5c>)
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	4413      	add	r3, r2
 801d29a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801d29c:	68fa      	ldr	r2, [r7, #12]
 801d29e:	693b      	ldr	r3, [r7, #16]
 801d2a0:	1ad3      	subs	r3, r2, r3
 801d2a2:	0fdb      	lsrs	r3, r3, #31
 801d2a4:	f003 0301 	and.w	r3, r3, #1
 801d2a8:	b2db      	uxtb	r3, r3
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d009      	beq.n	801d2c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801d2ae:	697b      	ldr	r3, [r7, #20]
 801d2b0:	681a      	ldr	r2, [r3, #0]
 801d2b2:	693b      	ldr	r3, [r7, #16]
 801d2b4:	4413      	add	r3, r2
 801d2b6:	687a      	ldr	r2, [r7, #4]
 801d2b8:	4907      	ldr	r1, [pc, #28]	; (801d2d8 <lwip_cyclic_timer+0x60>)
 801d2ba:	4618      	mov	r0, r3
 801d2bc:	f7ff ff6e 	bl	801d19c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801d2c0:	e004      	b.n	801d2cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801d2c2:	687a      	ldr	r2, [r7, #4]
 801d2c4:	4904      	ldr	r1, [pc, #16]	; (801d2d8 <lwip_cyclic_timer+0x60>)
 801d2c6:	68f8      	ldr	r0, [r7, #12]
 801d2c8:	f7ff ff68 	bl	801d19c <sys_timeout_abs>
}
 801d2cc:	bf00      	nop
 801d2ce:	3718      	adds	r7, #24
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	24005268 	.word	0x24005268
 801d2d8:	0801d279 	.word	0x0801d279

0801d2dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b082      	sub	sp, #8
 801d2e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d2e2:	2301      	movs	r3, #1
 801d2e4:	607b      	str	r3, [r7, #4]
 801d2e6:	e00e      	b.n	801d306 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d2e8:	4a0b      	ldr	r2, [pc, #44]	; (801d318 <sys_timeouts_init+0x3c>)
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	00db      	lsls	r3, r3, #3
 801d2f4:	4a08      	ldr	r2, [pc, #32]	; (801d318 <sys_timeouts_init+0x3c>)
 801d2f6:	4413      	add	r3, r2
 801d2f8:	461a      	mov	r2, r3
 801d2fa:	4908      	ldr	r1, [pc, #32]	; (801d31c <sys_timeouts_init+0x40>)
 801d2fc:	f000 f810 	bl	801d320 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	3301      	adds	r3, #1
 801d304:	607b      	str	r3, [r7, #4]
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	2b02      	cmp	r3, #2
 801d30a:	d9ed      	bls.n	801d2e8 <sys_timeouts_init+0xc>
  }
}
 801d30c:	bf00      	nop
 801d30e:	bf00      	nop
 801d310:	3708      	adds	r7, #8
 801d312:	46bd      	mov	sp, r7
 801d314:	bd80      	pop	{r7, pc}
 801d316:	bf00      	nop
 801d318:	08027dc4 	.word	0x08027dc4
 801d31c:	0801d279 	.word	0x0801d279

0801d320 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b086      	sub	sp, #24
 801d324:	af00      	add	r7, sp, #0
 801d326:	60f8      	str	r0, [r7, #12]
 801d328:	60b9      	str	r1, [r7, #8]
 801d32a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d332:	d306      	bcc.n	801d342 <sys_timeout+0x22>
 801d334:	4b0a      	ldr	r3, [pc, #40]	; (801d360 <sys_timeout+0x40>)
 801d336:	f240 1229 	movw	r2, #297	; 0x129
 801d33a:	490a      	ldr	r1, [pc, #40]	; (801d364 <sys_timeout+0x44>)
 801d33c:	480a      	ldr	r0, [pc, #40]	; (801d368 <sys_timeout+0x48>)
 801d33e:	f002 fbb9 	bl	801fab4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d342:	f7f4 fdb1 	bl	8011ea8 <sys_now>
 801d346:	4602      	mov	r2, r0
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	4413      	add	r3, r2
 801d34c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	68b9      	ldr	r1, [r7, #8]
 801d352:	6978      	ldr	r0, [r7, #20]
 801d354:	f7ff ff22 	bl	801d19c <sys_timeout_abs>
#endif
}
 801d358:	bf00      	nop
 801d35a:	3718      	adds	r7, #24
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	080271c8 	.word	0x080271c8
 801d364:	08027290 	.word	0x08027290
 801d368:	08027268 	.word	0x08027268

0801d36c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	b084      	sub	sp, #16
 801d370:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d372:	f7f4 fd99 	bl	8011ea8 <sys_now>
 801d376:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801d378:	4b1a      	ldr	r3, [pc, #104]	; (801d3e4 <sys_check_timeouts+0x78>)
 801d37a:	781b      	ldrb	r3, [r3, #0]
 801d37c:	b2db      	uxtb	r3, r3
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d001      	beq.n	801d386 <sys_check_timeouts+0x1a>
 801d382:	f7f8 ff1b 	bl	80161bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801d386:	4b18      	ldr	r3, [pc, #96]	; (801d3e8 <sys_check_timeouts+0x7c>)
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801d38c:	68bb      	ldr	r3, [r7, #8]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d022      	beq.n	801d3d8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d392:	68bb      	ldr	r3, [r7, #8]
 801d394:	685b      	ldr	r3, [r3, #4]
 801d396:	68fa      	ldr	r2, [r7, #12]
 801d398:	1ad3      	subs	r3, r2, r3
 801d39a:	0fdb      	lsrs	r3, r3, #31
 801d39c:	f003 0301 	and.w	r3, r3, #1
 801d3a0:	b2db      	uxtb	r3, r3
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d11a      	bne.n	801d3dc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801d3a6:	68bb      	ldr	r3, [r7, #8]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	4a0f      	ldr	r2, [pc, #60]	; (801d3e8 <sys_check_timeouts+0x7c>)
 801d3ac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801d3ae:	68bb      	ldr	r3, [r7, #8]
 801d3b0:	689b      	ldr	r3, [r3, #8]
 801d3b2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801d3b4:	68bb      	ldr	r3, [r7, #8]
 801d3b6:	68db      	ldr	r3, [r3, #12]
 801d3b8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801d3ba:	68bb      	ldr	r3, [r7, #8]
 801d3bc:	685b      	ldr	r3, [r3, #4]
 801d3be:	4a0b      	ldr	r2, [pc, #44]	; (801d3ec <sys_check_timeouts+0x80>)
 801d3c0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d3c2:	68b9      	ldr	r1, [r7, #8]
 801d3c4:	2006      	movs	r0, #6
 801d3c6:	f7f8 fbbd 	bl	8015b44 <memp_free>
    if (handler != NULL) {
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d0d3      	beq.n	801d378 <sys_check_timeouts+0xc>
      handler(arg);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	6838      	ldr	r0, [r7, #0]
 801d3d4:	4798      	blx	r3
  do {
 801d3d6:	e7cf      	b.n	801d378 <sys_check_timeouts+0xc>
      return;
 801d3d8:	bf00      	nop
 801d3da:	e000      	b.n	801d3de <sys_check_timeouts+0x72>
      return;
 801d3dc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d3de:	3710      	adds	r7, #16
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd80      	pop	{r7, pc}
 801d3e4:	24008a20 	.word	0x24008a20
 801d3e8:	24005264 	.word	0x24005264
 801d3ec:	24005268 	.word	0x24005268

0801d3f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d3f4:	f002 fbec 	bl	801fbd0 <rand>
 801d3f8:	4603      	mov	r3, r0
 801d3fa:	b29b      	uxth	r3, r3
 801d3fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801d400:	b29b      	uxth	r3, r3
 801d402:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801d406:	b29a      	uxth	r2, r3
 801d408:	4b01      	ldr	r3, [pc, #4]	; (801d410 <udp_init+0x20>)
 801d40a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801d40c:	bf00      	nop
 801d40e:	bd80      	pop	{r7, pc}
 801d410:	2400002c 	.word	0x2400002c

0801d414 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801d414:	b480      	push	{r7}
 801d416:	b083      	sub	sp, #12
 801d418:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801d41a:	2300      	movs	r3, #0
 801d41c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801d41e:	4b17      	ldr	r3, [pc, #92]	; (801d47c <udp_new_port+0x68>)
 801d420:	881b      	ldrh	r3, [r3, #0]
 801d422:	1c5a      	adds	r2, r3, #1
 801d424:	b291      	uxth	r1, r2
 801d426:	4a15      	ldr	r2, [pc, #84]	; (801d47c <udp_new_port+0x68>)
 801d428:	8011      	strh	r1, [r2, #0]
 801d42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d42e:	4293      	cmp	r3, r2
 801d430:	d103      	bne.n	801d43a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801d432:	4b12      	ldr	r3, [pc, #72]	; (801d47c <udp_new_port+0x68>)
 801d434:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d438:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d43a:	4b11      	ldr	r3, [pc, #68]	; (801d480 <udp_new_port+0x6c>)
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	603b      	str	r3, [r7, #0]
 801d440:	e011      	b.n	801d466 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	8a5a      	ldrh	r2, [r3, #18]
 801d446:	4b0d      	ldr	r3, [pc, #52]	; (801d47c <udp_new_port+0x68>)
 801d448:	881b      	ldrh	r3, [r3, #0]
 801d44a:	429a      	cmp	r2, r3
 801d44c:	d108      	bne.n	801d460 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801d44e:	88fb      	ldrh	r3, [r7, #6]
 801d450:	3301      	adds	r3, #1
 801d452:	80fb      	strh	r3, [r7, #6]
 801d454:	88fb      	ldrh	r3, [r7, #6]
 801d456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d45a:	d3e0      	bcc.n	801d41e <udp_new_port+0xa>
        return 0;
 801d45c:	2300      	movs	r3, #0
 801d45e:	e007      	b.n	801d470 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d460:	683b      	ldr	r3, [r7, #0]
 801d462:	68db      	ldr	r3, [r3, #12]
 801d464:	603b      	str	r3, [r7, #0]
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d1ea      	bne.n	801d442 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801d46c:	4b03      	ldr	r3, [pc, #12]	; (801d47c <udp_new_port+0x68>)
 801d46e:	881b      	ldrh	r3, [r3, #0]
}
 801d470:	4618      	mov	r0, r3
 801d472:	370c      	adds	r7, #12
 801d474:	46bd      	mov	sp, r7
 801d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d47a:	4770      	bx	lr
 801d47c:	2400002c 	.word	0x2400002c
 801d480:	24008a40 	.word	0x24008a40

0801d484 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b084      	sub	sp, #16
 801d488:	af00      	add	r7, sp, #0
 801d48a:	60f8      	str	r0, [r7, #12]
 801d48c:	60b9      	str	r1, [r7, #8]
 801d48e:	4613      	mov	r3, r2
 801d490:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d105      	bne.n	801d4a4 <udp_input_local_match+0x20>
 801d498:	4b27      	ldr	r3, [pc, #156]	; (801d538 <udp_input_local_match+0xb4>)
 801d49a:	2287      	movs	r2, #135	; 0x87
 801d49c:	4927      	ldr	r1, [pc, #156]	; (801d53c <udp_input_local_match+0xb8>)
 801d49e:	4828      	ldr	r0, [pc, #160]	; (801d540 <udp_input_local_match+0xbc>)
 801d4a0:	f002 fb08 	bl	801fab4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d4a4:	68bb      	ldr	r3, [r7, #8]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d105      	bne.n	801d4b6 <udp_input_local_match+0x32>
 801d4aa:	4b23      	ldr	r3, [pc, #140]	; (801d538 <udp_input_local_match+0xb4>)
 801d4ac:	2288      	movs	r2, #136	; 0x88
 801d4ae:	4925      	ldr	r1, [pc, #148]	; (801d544 <udp_input_local_match+0xc0>)
 801d4b0:	4823      	ldr	r0, [pc, #140]	; (801d540 <udp_input_local_match+0xbc>)
 801d4b2:	f002 faff 	bl	801fab4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	7a1b      	ldrb	r3, [r3, #8]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d00b      	beq.n	801d4d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	7a1a      	ldrb	r2, [r3, #8]
 801d4c2:	4b21      	ldr	r3, [pc, #132]	; (801d548 <udp_input_local_match+0xc4>)
 801d4c4:	685b      	ldr	r3, [r3, #4]
 801d4c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d4ca:	3301      	adds	r3, #1
 801d4cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d4ce:	429a      	cmp	r2, r3
 801d4d0:	d001      	beq.n	801d4d6 <udp_input_local_match+0x52>
    return 0;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	e02b      	b.n	801d52e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d4d6:	79fb      	ldrb	r3, [r7, #7]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d018      	beq.n	801d50e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d013      	beq.n	801d50a <udp_input_local_match+0x86>
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d00f      	beq.n	801d50a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d4ea:	4b17      	ldr	r3, [pc, #92]	; (801d548 <udp_input_local_match+0xc4>)
 801d4ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d4f2:	d00a      	beq.n	801d50a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	681a      	ldr	r2, [r3, #0]
 801d4f8:	4b13      	ldr	r3, [pc, #76]	; (801d548 <udp_input_local_match+0xc4>)
 801d4fa:	695b      	ldr	r3, [r3, #20]
 801d4fc:	405a      	eors	r2, r3
 801d4fe:	68bb      	ldr	r3, [r7, #8]
 801d500:	3308      	adds	r3, #8
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d506:	2b00      	cmp	r3, #0
 801d508:	d110      	bne.n	801d52c <udp_input_local_match+0xa8>
          return 1;
 801d50a:	2301      	movs	r3, #1
 801d50c:	e00f      	b.n	801d52e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	2b00      	cmp	r3, #0
 801d512:	d009      	beq.n	801d528 <udp_input_local_match+0xa4>
 801d514:	68fb      	ldr	r3, [r7, #12]
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d005      	beq.n	801d528 <udp_input_local_match+0xa4>
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	681a      	ldr	r2, [r3, #0]
 801d520:	4b09      	ldr	r3, [pc, #36]	; (801d548 <udp_input_local_match+0xc4>)
 801d522:	695b      	ldr	r3, [r3, #20]
 801d524:	429a      	cmp	r2, r3
 801d526:	d101      	bne.n	801d52c <udp_input_local_match+0xa8>
        return 1;
 801d528:	2301      	movs	r3, #1
 801d52a:	e000      	b.n	801d52e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801d52c:	2300      	movs	r3, #0
}
 801d52e:	4618      	mov	r0, r3
 801d530:	3710      	adds	r7, #16
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}
 801d536:	bf00      	nop
 801d538:	080272dc 	.word	0x080272dc
 801d53c:	08027338 	.word	0x08027338
 801d540:	0802735c 	.word	0x0802735c
 801d544:	08027384 	.word	0x08027384
 801d548:	24005b38 	.word	0x24005b38

0801d54c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d54c:	b590      	push	{r4, r7, lr}
 801d54e:	b08d      	sub	sp, #52	; 0x34
 801d550:	af02      	add	r7, sp, #8
 801d552:	6078      	str	r0, [r7, #4]
 801d554:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801d556:	2300      	movs	r3, #0
 801d558:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d105      	bne.n	801d56c <udp_input+0x20>
 801d560:	4b7c      	ldr	r3, [pc, #496]	; (801d754 <udp_input+0x208>)
 801d562:	22cf      	movs	r2, #207	; 0xcf
 801d564:	497c      	ldr	r1, [pc, #496]	; (801d758 <udp_input+0x20c>)
 801d566:	487d      	ldr	r0, [pc, #500]	; (801d75c <udp_input+0x210>)
 801d568:	f002 faa4 	bl	801fab4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d56c:	683b      	ldr	r3, [r7, #0]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d105      	bne.n	801d57e <udp_input+0x32>
 801d572:	4b78      	ldr	r3, [pc, #480]	; (801d754 <udp_input+0x208>)
 801d574:	22d0      	movs	r2, #208	; 0xd0
 801d576:	497a      	ldr	r1, [pc, #488]	; (801d760 <udp_input+0x214>)
 801d578:	4878      	ldr	r0, [pc, #480]	; (801d75c <udp_input+0x210>)
 801d57a:	f002 fa9b 	bl	801fab4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	895b      	ldrh	r3, [r3, #10]
 801d582:	2b07      	cmp	r3, #7
 801d584:	d803      	bhi.n	801d58e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d586:	6878      	ldr	r0, [r7, #4]
 801d588:	f7f9 f952 	bl	8016830 <pbuf_free>
    goto end;
 801d58c:	e0de      	b.n	801d74c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	685b      	ldr	r3, [r3, #4]
 801d592:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d594:	4b73      	ldr	r3, [pc, #460]	; (801d764 <udp_input+0x218>)
 801d596:	695b      	ldr	r3, [r3, #20]
 801d598:	4a72      	ldr	r2, [pc, #456]	; (801d764 <udp_input+0x218>)
 801d59a:	6812      	ldr	r2, [r2, #0]
 801d59c:	4611      	mov	r1, r2
 801d59e:	4618      	mov	r0, r3
 801d5a0:	f7f6 ffb6 	bl	8014510 <ip4_addr_isbroadcast_u32>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d5a8:	697b      	ldr	r3, [r7, #20]
 801d5aa:	881b      	ldrh	r3, [r3, #0]
 801d5ac:	b29b      	uxth	r3, r3
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f7f5 fa42 	bl	8012a38 <lwip_htons>
 801d5b4:	4603      	mov	r3, r0
 801d5b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d5b8:	697b      	ldr	r3, [r7, #20]
 801d5ba:	885b      	ldrh	r3, [r3, #2]
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f7f5 fa3a 	bl	8012a38 <lwip_htons>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d5d4:	4b64      	ldr	r3, [pc, #400]	; (801d768 <udp_input+0x21c>)
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	627b      	str	r3, [r7, #36]	; 0x24
 801d5da:	e054      	b.n	801d686 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5de:	8a5b      	ldrh	r3, [r3, #18]
 801d5e0:	89fa      	ldrh	r2, [r7, #14]
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d14a      	bne.n	801d67c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d5e6:	7cfb      	ldrb	r3, [r7, #19]
 801d5e8:	461a      	mov	r2, r3
 801d5ea:	6839      	ldr	r1, [r7, #0]
 801d5ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5ee:	f7ff ff49 	bl	801d484 <udp_input_local_match>
 801d5f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d041      	beq.n	801d67c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5fa:	7c1b      	ldrb	r3, [r3, #16]
 801d5fc:	f003 0304 	and.w	r3, r3, #4
 801d600:	2b00      	cmp	r3, #0
 801d602:	d11d      	bne.n	801d640 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801d604:	69fb      	ldr	r3, [r7, #28]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d102      	bne.n	801d610 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d60c:	61fb      	str	r3, [r7, #28]
 801d60e:	e017      	b.n	801d640 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d610:	7cfb      	ldrb	r3, [r7, #19]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d014      	beq.n	801d640 <udp_input+0xf4>
 801d616:	4b53      	ldr	r3, [pc, #332]	; (801d764 <udp_input+0x218>)
 801d618:	695b      	ldr	r3, [r3, #20]
 801d61a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d61e:	d10f      	bne.n	801d640 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d620:	69fb      	ldr	r3, [r7, #28]
 801d622:	681a      	ldr	r2, [r3, #0]
 801d624:	683b      	ldr	r3, [r7, #0]
 801d626:	3304      	adds	r3, #4
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	429a      	cmp	r2, r3
 801d62c:	d008      	beq.n	801d640 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d630:	681a      	ldr	r2, [r3, #0]
 801d632:	683b      	ldr	r3, [r7, #0]
 801d634:	3304      	adds	r3, #4
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	429a      	cmp	r2, r3
 801d63a:	d101      	bne.n	801d640 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d63e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d642:	8a9b      	ldrh	r3, [r3, #20]
 801d644:	8a3a      	ldrh	r2, [r7, #16]
 801d646:	429a      	cmp	r2, r3
 801d648:	d118      	bne.n	801d67c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d64c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d005      	beq.n	801d65e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d654:	685a      	ldr	r2, [r3, #4]
 801d656:	4b43      	ldr	r3, [pc, #268]	; (801d764 <udp_input+0x218>)
 801d658:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d65a:	429a      	cmp	r2, r3
 801d65c:	d10e      	bne.n	801d67c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d65e:	6a3b      	ldr	r3, [r7, #32]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d014      	beq.n	801d68e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d666:	68da      	ldr	r2, [r3, #12]
 801d668:	6a3b      	ldr	r3, [r7, #32]
 801d66a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801d66c:	4b3e      	ldr	r3, [pc, #248]	; (801d768 <udp_input+0x21c>)
 801d66e:	681a      	ldr	r2, [r3, #0]
 801d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d672:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801d674:	4a3c      	ldr	r2, [pc, #240]	; (801d768 <udp_input+0x21c>)
 801d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d678:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801d67a:	e008      	b.n	801d68e <udp_input+0x142>
      }
    }

    prev = pcb;
 801d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d67e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d682:	68db      	ldr	r3, [r3, #12]
 801d684:	627b      	str	r3, [r7, #36]	; 0x24
 801d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d1a7      	bne.n	801d5dc <udp_input+0x90>
 801d68c:	e000      	b.n	801d690 <udp_input+0x144>
        break;
 801d68e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d692:	2b00      	cmp	r3, #0
 801d694:	d101      	bne.n	801d69a <udp_input+0x14e>
    pcb = uncon_pcb;
 801d696:	69fb      	ldr	r3, [r7, #28]
 801d698:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d002      	beq.n	801d6a6 <udp_input+0x15a>
    for_us = 1;
 801d6a0:	2301      	movs	r3, #1
 801d6a2:	76fb      	strb	r3, [r7, #27]
 801d6a4:	e00a      	b.n	801d6bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801d6a6:	683b      	ldr	r3, [r7, #0]
 801d6a8:	3304      	adds	r3, #4
 801d6aa:	681a      	ldr	r2, [r3, #0]
 801d6ac:	4b2d      	ldr	r3, [pc, #180]	; (801d764 <udp_input+0x218>)
 801d6ae:	695b      	ldr	r3, [r3, #20]
 801d6b0:	429a      	cmp	r2, r3
 801d6b2:	bf0c      	ite	eq
 801d6b4:	2301      	moveq	r3, #1
 801d6b6:	2300      	movne	r3, #0
 801d6b8:	b2db      	uxtb	r3, r3
 801d6ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801d6bc:	7efb      	ldrb	r3, [r7, #27]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d041      	beq.n	801d746 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d6c2:	2108      	movs	r1, #8
 801d6c4:	6878      	ldr	r0, [r7, #4]
 801d6c6:	f7f9 f82d 	bl	8016724 <pbuf_remove_header>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d00a      	beq.n	801d6e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d6d0:	4b20      	ldr	r3, [pc, #128]	; (801d754 <udp_input+0x208>)
 801d6d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d6d6:	4925      	ldr	r1, [pc, #148]	; (801d76c <udp_input+0x220>)
 801d6d8:	4820      	ldr	r0, [pc, #128]	; (801d75c <udp_input+0x210>)
 801d6da:	f002 f9eb 	bl	801fab4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801d6de:	6878      	ldr	r0, [r7, #4]
 801d6e0:	f7f9 f8a6 	bl	8016830 <pbuf_free>
      goto end;
 801d6e4:	e032      	b.n	801d74c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d012      	beq.n	801d712 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ee:	699b      	ldr	r3, [r3, #24]
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	d00a      	beq.n	801d70a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6f6:	699c      	ldr	r4, [r3, #24]
 801d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6fa:	69d8      	ldr	r0, [r3, #28]
 801d6fc:	8a3b      	ldrh	r3, [r7, #16]
 801d6fe:	9300      	str	r3, [sp, #0]
 801d700:	4b1b      	ldr	r3, [pc, #108]	; (801d770 <udp_input+0x224>)
 801d702:	687a      	ldr	r2, [r7, #4]
 801d704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d706:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801d708:	e021      	b.n	801d74e <udp_input+0x202>
        pbuf_free(p);
 801d70a:	6878      	ldr	r0, [r7, #4]
 801d70c:	f7f9 f890 	bl	8016830 <pbuf_free>
        goto end;
 801d710:	e01c      	b.n	801d74c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d712:	7cfb      	ldrb	r3, [r7, #19]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d112      	bne.n	801d73e <udp_input+0x1f2>
 801d718:	4b12      	ldr	r3, [pc, #72]	; (801d764 <udp_input+0x218>)
 801d71a:	695b      	ldr	r3, [r3, #20]
 801d71c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d720:	2be0      	cmp	r3, #224	; 0xe0
 801d722:	d00c      	beq.n	801d73e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d724:	4b0f      	ldr	r3, [pc, #60]	; (801d764 <udp_input+0x218>)
 801d726:	899b      	ldrh	r3, [r3, #12]
 801d728:	3308      	adds	r3, #8
 801d72a:	b29b      	uxth	r3, r3
 801d72c:	b21b      	sxth	r3, r3
 801d72e:	4619      	mov	r1, r3
 801d730:	6878      	ldr	r0, [r7, #4]
 801d732:	f7f9 f86a 	bl	801680a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d736:	2103      	movs	r1, #3
 801d738:	6878      	ldr	r0, [r7, #4]
 801d73a:	f7f6 faed 	bl	8013d18 <icmp_dest_unreach>
      pbuf_free(p);
 801d73e:	6878      	ldr	r0, [r7, #4]
 801d740:	f7f9 f876 	bl	8016830 <pbuf_free>
  return;
 801d744:	e003      	b.n	801d74e <udp_input+0x202>
    pbuf_free(p);
 801d746:	6878      	ldr	r0, [r7, #4]
 801d748:	f7f9 f872 	bl	8016830 <pbuf_free>
  return;
 801d74c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d74e:	372c      	adds	r7, #44	; 0x2c
 801d750:	46bd      	mov	sp, r7
 801d752:	bd90      	pop	{r4, r7, pc}
 801d754:	080272dc 	.word	0x080272dc
 801d758:	080273ac 	.word	0x080273ac
 801d75c:	0802735c 	.word	0x0802735c
 801d760:	080273c4 	.word	0x080273c4
 801d764:	24005b38 	.word	0x24005b38
 801d768:	24008a40 	.word	0x24008a40
 801d76c:	080273e0 	.word	0x080273e0
 801d770:	24005b48 	.word	0x24005b48

0801d774 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b086      	sub	sp, #24
 801d778:	af00      	add	r7, sp, #0
 801d77a:	60f8      	str	r0, [r7, #12]
 801d77c:	60b9      	str	r1, [r7, #8]
 801d77e:	4613      	mov	r3, r2
 801d780:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	2b00      	cmp	r3, #0
 801d786:	d101      	bne.n	801d78c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d788:	4b39      	ldr	r3, [pc, #228]	; (801d870 <udp_bind+0xfc>)
 801d78a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d109      	bne.n	801d7a6 <udp_bind+0x32>
 801d792:	4b38      	ldr	r3, [pc, #224]	; (801d874 <udp_bind+0x100>)
 801d794:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d798:	4937      	ldr	r1, [pc, #220]	; (801d878 <udp_bind+0x104>)
 801d79a:	4838      	ldr	r0, [pc, #224]	; (801d87c <udp_bind+0x108>)
 801d79c:	f002 f98a 	bl	801fab4 <iprintf>
 801d7a0:	f06f 030f 	mvn.w	r3, #15
 801d7a4:	e060      	b.n	801d868 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7aa:	4b35      	ldr	r3, [pc, #212]	; (801d880 <udp_bind+0x10c>)
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	617b      	str	r3, [r7, #20]
 801d7b0:	e009      	b.n	801d7c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d7b2:	68fa      	ldr	r2, [r7, #12]
 801d7b4:	697b      	ldr	r3, [r7, #20]
 801d7b6:	429a      	cmp	r2, r3
 801d7b8:	d102      	bne.n	801d7c0 <udp_bind+0x4c>
      rebind = 1;
 801d7ba:	2301      	movs	r3, #1
 801d7bc:	74fb      	strb	r3, [r7, #19]
      break;
 801d7be:	e005      	b.n	801d7cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7c0:	697b      	ldr	r3, [r7, #20]
 801d7c2:	68db      	ldr	r3, [r3, #12]
 801d7c4:	617b      	str	r3, [r7, #20]
 801d7c6:	697b      	ldr	r3, [r7, #20]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d1f2      	bne.n	801d7b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d7cc:	88fb      	ldrh	r3, [r7, #6]
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d109      	bne.n	801d7e6 <udp_bind+0x72>
    port = udp_new_port();
 801d7d2:	f7ff fe1f 	bl	801d414 <udp_new_port>
 801d7d6:	4603      	mov	r3, r0
 801d7d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d7da:	88fb      	ldrh	r3, [r7, #6]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d12c      	bne.n	801d83a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d7e0:	f06f 0307 	mvn.w	r3, #7
 801d7e4:	e040      	b.n	801d868 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d7e6:	4b26      	ldr	r3, [pc, #152]	; (801d880 <udp_bind+0x10c>)
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	617b      	str	r3, [r7, #20]
 801d7ec:	e022      	b.n	801d834 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801d7ee:	68fa      	ldr	r2, [r7, #12]
 801d7f0:	697b      	ldr	r3, [r7, #20]
 801d7f2:	429a      	cmp	r2, r3
 801d7f4:	d01b      	beq.n	801d82e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d7f6:	697b      	ldr	r3, [r7, #20]
 801d7f8:	8a5b      	ldrh	r3, [r3, #18]
 801d7fa:	88fa      	ldrh	r2, [r7, #6]
 801d7fc:	429a      	cmp	r2, r3
 801d7fe:	d116      	bne.n	801d82e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d800:	697b      	ldr	r3, [r7, #20]
 801d802:	681a      	ldr	r2, [r3, #0]
 801d804:	68bb      	ldr	r3, [r7, #8]
 801d806:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d808:	429a      	cmp	r2, r3
 801d80a:	d00d      	beq.n	801d828 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d80c:	68bb      	ldr	r3, [r7, #8]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d00a      	beq.n	801d828 <udp_bind+0xb4>
 801d812:	68bb      	ldr	r3, [r7, #8]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d006      	beq.n	801d828 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d81a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d003      	beq.n	801d828 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d820:	697b      	ldr	r3, [r7, #20]
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d102      	bne.n	801d82e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d828:	f06f 0307 	mvn.w	r3, #7
 801d82c:	e01c      	b.n	801d868 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d82e:	697b      	ldr	r3, [r7, #20]
 801d830:	68db      	ldr	r3, [r3, #12]
 801d832:	617b      	str	r3, [r7, #20]
 801d834:	697b      	ldr	r3, [r7, #20]
 801d836:	2b00      	cmp	r3, #0
 801d838:	d1d9      	bne.n	801d7ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d83a:	68bb      	ldr	r3, [r7, #8]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d002      	beq.n	801d846 <udp_bind+0xd2>
 801d840:	68bb      	ldr	r3, [r7, #8]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	e000      	b.n	801d848 <udp_bind+0xd4>
 801d846:	2300      	movs	r3, #0
 801d848:	68fa      	ldr	r2, [r7, #12]
 801d84a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	88fa      	ldrh	r2, [r7, #6]
 801d850:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d852:	7cfb      	ldrb	r3, [r7, #19]
 801d854:	2b00      	cmp	r3, #0
 801d856:	d106      	bne.n	801d866 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d858:	4b09      	ldr	r3, [pc, #36]	; (801d880 <udp_bind+0x10c>)
 801d85a:	681a      	ldr	r2, [r3, #0]
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d860:	4a07      	ldr	r2, [pc, #28]	; (801d880 <udp_bind+0x10c>)
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d866:	2300      	movs	r3, #0
}
 801d868:	4618      	mov	r0, r3
 801d86a:	3718      	adds	r7, #24
 801d86c:	46bd      	mov	sp, r7
 801d86e:	bd80      	pop	{r7, pc}
 801d870:	08027d08 	.word	0x08027d08
 801d874:	080272dc 	.word	0x080272dc
 801d878:	080275d0 	.word	0x080275d0
 801d87c:	0802735c 	.word	0x0802735c
 801d880:	24008a40 	.word	0x24008a40

0801d884 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d884:	b580      	push	{r7, lr}
 801d886:	b086      	sub	sp, #24
 801d888:	af00      	add	r7, sp, #0
 801d88a:	60f8      	str	r0, [r7, #12]
 801d88c:	60b9      	str	r1, [r7, #8]
 801d88e:	4613      	mov	r3, r2
 801d890:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d109      	bne.n	801d8ac <udp_connect+0x28>
 801d898:	4b2c      	ldr	r3, [pc, #176]	; (801d94c <udp_connect+0xc8>)
 801d89a:	f240 4235 	movw	r2, #1077	; 0x435
 801d89e:	492c      	ldr	r1, [pc, #176]	; (801d950 <udp_connect+0xcc>)
 801d8a0:	482c      	ldr	r0, [pc, #176]	; (801d954 <udp_connect+0xd0>)
 801d8a2:	f002 f907 	bl	801fab4 <iprintf>
 801d8a6:	f06f 030f 	mvn.w	r3, #15
 801d8aa:	e04b      	b.n	801d944 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d109      	bne.n	801d8c6 <udp_connect+0x42>
 801d8b2:	4b26      	ldr	r3, [pc, #152]	; (801d94c <udp_connect+0xc8>)
 801d8b4:	f240 4236 	movw	r2, #1078	; 0x436
 801d8b8:	4927      	ldr	r1, [pc, #156]	; (801d958 <udp_connect+0xd4>)
 801d8ba:	4826      	ldr	r0, [pc, #152]	; (801d954 <udp_connect+0xd0>)
 801d8bc:	f002 f8fa 	bl	801fab4 <iprintf>
 801d8c0:	f06f 030f 	mvn.w	r3, #15
 801d8c4:	e03e      	b.n	801d944 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	8a5b      	ldrh	r3, [r3, #18]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d10f      	bne.n	801d8ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d8ce:	68f9      	ldr	r1, [r7, #12]
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	8a5b      	ldrh	r3, [r3, #18]
 801d8d4:	461a      	mov	r2, r3
 801d8d6:	68f8      	ldr	r0, [r7, #12]
 801d8d8:	f7ff ff4c 	bl	801d774 <udp_bind>
 801d8dc:	4603      	mov	r3, r0
 801d8de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d8e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d002      	beq.n	801d8ee <udp_connect+0x6a>
      return err;
 801d8e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d8ec:	e02a      	b.n	801d944 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d8ee:	68bb      	ldr	r3, [r7, #8]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d002      	beq.n	801d8fa <udp_connect+0x76>
 801d8f4:	68bb      	ldr	r3, [r7, #8]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	e000      	b.n	801d8fc <udp_connect+0x78>
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	68fa      	ldr	r2, [r7, #12]
 801d8fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	88fa      	ldrh	r2, [r7, #6]
 801d904:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d906:	68fb      	ldr	r3, [r7, #12]
 801d908:	7c1b      	ldrb	r3, [r3, #16]
 801d90a:	f043 0304 	orr.w	r3, r3, #4
 801d90e:	b2da      	uxtb	r2, r3
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d914:	4b11      	ldr	r3, [pc, #68]	; (801d95c <udp_connect+0xd8>)
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	617b      	str	r3, [r7, #20]
 801d91a:	e008      	b.n	801d92e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801d91c:	68fa      	ldr	r2, [r7, #12]
 801d91e:	697b      	ldr	r3, [r7, #20]
 801d920:	429a      	cmp	r2, r3
 801d922:	d101      	bne.n	801d928 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801d924:	2300      	movs	r3, #0
 801d926:	e00d      	b.n	801d944 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d928:	697b      	ldr	r3, [r7, #20]
 801d92a:	68db      	ldr	r3, [r3, #12]
 801d92c:	617b      	str	r3, [r7, #20]
 801d92e:	697b      	ldr	r3, [r7, #20]
 801d930:	2b00      	cmp	r3, #0
 801d932:	d1f3      	bne.n	801d91c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d934:	4b09      	ldr	r3, [pc, #36]	; (801d95c <udp_connect+0xd8>)
 801d936:	681a      	ldr	r2, [r3, #0]
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d93c:	4a07      	ldr	r2, [pc, #28]	; (801d95c <udp_connect+0xd8>)
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d942:	2300      	movs	r3, #0
}
 801d944:	4618      	mov	r0, r3
 801d946:	3718      	adds	r7, #24
 801d948:	46bd      	mov	sp, r7
 801d94a:	bd80      	pop	{r7, pc}
 801d94c:	080272dc 	.word	0x080272dc
 801d950:	080275e8 	.word	0x080275e8
 801d954:	0802735c 	.word	0x0802735c
 801d958:	08027604 	.word	0x08027604
 801d95c:	24008a40 	.word	0x24008a40

0801d960 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b082      	sub	sp, #8
 801d964:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d966:	2000      	movs	r0, #0
 801d968:	f7f8 f87c 	bl	8015a64 <memp_malloc>
 801d96c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d007      	beq.n	801d984 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d974:	2220      	movs	r2, #32
 801d976:	2100      	movs	r1, #0
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f001 f9a3 	bl	801ecc4 <memset>
    pcb->ttl = UDP_TTL;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	22ff      	movs	r2, #255	; 0xff
 801d982:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d984:	687b      	ldr	r3, [r7, #4]
}
 801d986:	4618      	mov	r0, r3
 801d988:	3708      	adds	r7, #8
 801d98a:	46bd      	mov	sp, r7
 801d98c:	bd80      	pop	{r7, pc}
	...

0801d990 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d990:	b480      	push	{r7}
 801d992:	b085      	sub	sp, #20
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
 801d998:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d01e      	beq.n	801d9de <udp_netif_ip_addr_changed+0x4e>
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d01a      	beq.n	801d9de <udp_netif_ip_addr_changed+0x4e>
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d017      	beq.n	801d9de <udp_netif_ip_addr_changed+0x4e>
 801d9ae:	683b      	ldr	r3, [r7, #0]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d013      	beq.n	801d9de <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d9b6:	4b0d      	ldr	r3, [pc, #52]	; (801d9ec <udp_netif_ip_addr_changed+0x5c>)
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	60fb      	str	r3, [r7, #12]
 801d9bc:	e00c      	b.n	801d9d8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	681a      	ldr	r2, [r3, #0]
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	429a      	cmp	r2, r3
 801d9c8:	d103      	bne.n	801d9d2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d9ca:	683b      	ldr	r3, [r7, #0]
 801d9cc:	681a      	ldr	r2, [r3, #0]
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	68db      	ldr	r3, [r3, #12]
 801d9d6:	60fb      	str	r3, [r7, #12]
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d1ef      	bne.n	801d9be <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d9de:	bf00      	nop
 801d9e0:	3714      	adds	r7, #20
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9e8:	4770      	bx	lr
 801d9ea:	bf00      	nop
 801d9ec:	24008a40 	.word	0x24008a40

0801d9f0 <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801d9f0:	b580      	push	{r7, lr}
 801d9f2:	b082      	sub	sp, #8
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	71fb      	strb	r3, [r7, #7]
	if (mode == IFFT_MODE)
 801d9fa:	79fb      	ldrb	r3, [r7, #7]
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d10c      	bne.n	801da1a <cis_Init+0x2a>
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IFFT_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801da00:	4b30      	ldr	r3, [pc, #192]	; (801dac4 <cis_Init+0xd4>)
 801da02:	2260      	movs	r2, #96	; 0x60
 801da04:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	CIS_PIXEL_AERA_START / (CIS_IFFT_OVERSAMPLING_RATIO);
 801da06:	4b30      	ldr	r3, [pc, #192]	; (801dac8 <cis_Init+0xd8>)
 801da08:	2206      	movs	r2, #6
 801da0a:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	CIS_PIXEL_AERA_STOP / (CIS_IFFT_OVERSAMPLING_RATIO);
 801da0c:	4b2f      	ldr	r3, [pc, #188]	; (801dacc <cis_Init+0xdc>)
 801da0e:	2266      	movs	r2, #102	; 0x66
 801da10:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / (CIS_IFFT_OVERSAMPLING_RATIO);
 801da12:	4b2f      	ldr	r3, [pc, #188]	; (801dad0 <cis_Init+0xe0>)
 801da14:	22a9      	movs	r2, #169	; 0xa9
 801da16:	801a      	strh	r2, [r3, #0]
 801da18:	e00b      	b.n	801da32 <cis_Init+0x42>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IMGPLY_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801da1a:	4b2a      	ldr	r3, [pc, #168]	; (801dac4 <cis_Init+0xd4>)
 801da1c:	2260      	movs	r2, #96	; 0x60
 801da1e:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	CIS_PIXEL_AERA_START / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801da20:	4b29      	ldr	r3, [pc, #164]	; (801dac8 <cis_Init+0xd8>)
 801da22:	2206      	movs	r2, #6
 801da24:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	CIS_PIXEL_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801da26:	4b29      	ldr	r3, [pc, #164]	; (801dacc <cis_Init+0xdc>)
 801da28:	2266      	movs	r2, #102	; 0x66
 801da2a:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801da2c:	4b28      	ldr	r3, [pc, #160]	; (801dad0 <cis_Init+0xe0>)
 801da2e:	22a9      	movs	r2, #169	; 0xa9
 801da30:	801a      	strh	r2, [r3, #0]
	}

	//allocate the contiguous memory area for storage cis data
	cisData = malloc(CIS_ADC_BUFF_SIZE * sizeof(uint16_t*));
 801da32:	4b28      	ldr	r3, [pc, #160]	; (801dad4 <cis_Init+0xe4>)
 801da34:	881b      	ldrh	r3, [r3, #0]
 801da36:	009b      	lsls	r3, r3, #2
 801da38:	4618      	mov	r0, r3
 801da3a:	f001 f905 	bl	801ec48 <malloc>
 801da3e:	4603      	mov	r3, r0
 801da40:	461a      	mov	r2, r3
 801da42:	4b25      	ldr	r3, [pc, #148]	; (801dad8 <cis_Init+0xe8>)
 801da44:	601a      	str	r2, [r3, #0]
	if (cisData == NULL)
 801da46:	4b24      	ldr	r3, [pc, #144]	; (801dad8 <cis_Init+0xe8>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d101      	bne.n	801da52 <cis_Init+0x62>
	{
		Error_Handler();
 801da4e:	f7e5 f9db 	bl	8002e08 <Error_Handler>
	}

	memset(cisData, 0, CIS_ADC_BUFF_SIZE * sizeof(uint16_t*)); //clear image
 801da52:	4b21      	ldr	r3, [pc, #132]	; (801dad8 <cis_Init+0xe8>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	4a1f      	ldr	r2, [pc, #124]	; (801dad4 <cis_Init+0xe4>)
 801da58:	8812      	ldrh	r2, [r2, #0]
 801da5a:	0092      	lsls	r2, r2, #2
 801da5c:	2100      	movs	r1, #0
 801da5e:	4618      	mov	r0, r3
 801da60:	f001 f930 	bl	801ecc4 <memset>

	HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_SET); //SET : 200DPI   RESET : 400DPI
 801da64:	2201      	movs	r2, #1
 801da66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801da6a:	481c      	ldr	r0, [pc, #112]	; (801dadc <cis_Init+0xec>)
 801da6c:	f7ec fa08 	bl	8009e80 <HAL_GPIO_WritePin>

	cis_ADC_Init(mode);
 801da70:	79fb      	ldrb	r3, [r7, #7]
 801da72:	4618      	mov	r0, r3
 801da74:	f000 f906 	bl	801dc84 <cis_ADC_Init>
	cis_TIM_SP_Init();
 801da78:	f000 f8bc 	bl	801dbf4 <cis_TIM_SP_Init>
	cis_TIM_LED_R_Init();
 801da7c:	f000 f8de 	bl	801dc3c <cis_TIM_LED_R_Init>
	cis_TIM_LED_G_Init();
 801da80:	f000 f8ee 	bl	801dc60 <cis_TIM_LED_G_Init>
	cis_TIM_LED_B_Init();
 801da84:	f000 f8c8 	bl	801dc18 <cis_TIM_LED_B_Init>
	cis_TIM_CLK_Init();
 801da88:	f000 f89a 	bl	801dbc0 <cis_TIM_CLK_Init>
//	{
//		Error_Handler();
//	}

	//Reset CLK counter
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 801da8c:	4b14      	ldr	r3, [pc, #80]	; (801dae0 <cis_Init+0xf0>)
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	2200      	movs	r2, #0
 801da92:	625a      	str	r2, [r3, #36]	; 0x24

	//Reset SP counter
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 801da94:	4b13      	ldr	r3, [pc, #76]	; (801dae4 <cis_Init+0xf4>)
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	2200      	movs	r2, #0
 801da9a:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef CIS_BW
	//Set BW phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE) - CIS_LED_ON);			//B
 801da9c:	4b12      	ldr	r3, [pc, #72]	; (801dae8 <cis_Init+0xf8>)
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801daa4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE) - CIS_LED_ON);			//G
 801daa6:	4b11      	ldr	r3, [pc, #68]	; (801daec <cis_Init+0xfc>)
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801daae:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
 801dab0:	4b0f      	ldr	r3, [pc, #60]	; (801daf0 <cis_Init+0x100>)
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801dab8:	625a      	str	r2, [r3, #36]	; 0x24
	//Set RGB phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
#endif
}
 801daba:	bf00      	nop
 801dabc:	3708      	adds	r7, #8
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop
 801dac4:	24000030 	.word	0x24000030
 801dac8:	24000032 	.word	0x24000032
 801dacc:	24000034 	.word	0x24000034
 801dad0:	24000036 	.word	0x24000036
 801dad4:	24000038 	.word	0x24000038
 801dad8:	24005270 	.word	0x24005270
 801dadc:	58020000 	.word	0x58020000
 801dae0:	2400585c 	.word	0x2400585c
 801dae4:	2400572c 	.word	0x2400572c
 801dae8:	240057c4 	.word	0x240057c4
 801daec:	24005778 	.word	0x24005778
 801daf0:	24005810 	.word	0x24005810

0801daf4 <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801daf4:	b480      	push	{r7}
 801daf6:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS;
 801daf8:	4b03      	ldr	r3, [pc, #12]	; (801db08 <cis_GetEffectivePixelNb+0x14>)
 801dafa:	881b      	ldrh	r3, [r3, #0]
}
 801dafc:	4618      	mov	r0, r3
 801dafe:	46bd      	mov	sp, r7
 801db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db04:	4770      	bx	lr
 801db06:	bf00      	nop
 801db08:	2400002e 	.word	0x2400002e

0801db0c <cis_GetBuffData>:
 * @brief  Return buffer data
 * @param  index
 * @retval value
 */
uint16_t cis_GetBuffData(uint32_t index)
{
 801db0c:	b480      	push	{r7}
 801db0e:	b083      	sub	sp, #12
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
	//	if (index >= ADC_CONVERTED_DATA_BUFFER_SIZE)
	//		Error_Handler();
	if (index < CIS_EFFECTIVE_PIXELS_PER_LINE)
 801db14:	4b22      	ldr	r3, [pc, #136]	; (801dba0 <cis_GetBuffData+0x94>)
 801db16:	881b      	ldrh	r3, [r3, #0]
 801db18:	461a      	mov	r2, r3
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	4293      	cmp	r3, r2
 801db1e:	d20a      	bcs.n	801db36 <cis_GetBuffData+0x2a>
		return cisData[index + CIS_ADC_BUFF_START_OFFSET];
 801db20:	4b20      	ldr	r3, [pc, #128]	; (801dba4 <cis_GetBuffData+0x98>)
 801db22:	681a      	ldr	r2, [r3, #0]
 801db24:	4b20      	ldr	r3, [pc, #128]	; (801dba8 <cis_GetBuffData+0x9c>)
 801db26:	881b      	ldrh	r3, [r3, #0]
 801db28:	4619      	mov	r1, r3
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	440b      	add	r3, r1
 801db2e:	005b      	lsls	r3, r3, #1
 801db30:	4413      	add	r3, r2
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	e02e      	b.n	801db94 <cis_GetBuffData+0x88>
	if (index < CIS_EFFECTIVE_PIXELS_PER_LINE * 2)
 801db36:	4b1a      	ldr	r3, [pc, #104]	; (801dba0 <cis_GetBuffData+0x94>)
 801db38:	881b      	ldrh	r3, [r3, #0]
 801db3a:	005b      	lsls	r3, r3, #1
 801db3c:	461a      	mov	r2, r3
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	4293      	cmp	r3, r2
 801db42:	d20d      	bcs.n	801db60 <cis_GetBuffData+0x54>
		return cisData[index + CIS_ADC_BUFF_START_OFFSET + CIS_EFFECTIVE_PIXELS_PER_LINE];
 801db44:	4b17      	ldr	r3, [pc, #92]	; (801dba4 <cis_GetBuffData+0x98>)
 801db46:	681a      	ldr	r2, [r3, #0]
 801db48:	4b17      	ldr	r3, [pc, #92]	; (801dba8 <cis_GetBuffData+0x9c>)
 801db4a:	881b      	ldrh	r3, [r3, #0]
 801db4c:	4619      	mov	r1, r3
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	440b      	add	r3, r1
 801db52:	4913      	ldr	r1, [pc, #76]	; (801dba0 <cis_GetBuffData+0x94>)
 801db54:	8809      	ldrh	r1, [r1, #0]
 801db56:	440b      	add	r3, r1
 801db58:	005b      	lsls	r3, r3, #1
 801db5a:	4413      	add	r3, r2
 801db5c:	881b      	ldrh	r3, [r3, #0]
 801db5e:	e019      	b.n	801db94 <cis_GetBuffData+0x88>
	if (index < CIS_EFFECTIVE_PIXELS_PER_LINE * 3)
 801db60:	4b0f      	ldr	r3, [pc, #60]	; (801dba0 <cis_GetBuffData+0x94>)
 801db62:	881b      	ldrh	r3, [r3, #0]
 801db64:	461a      	mov	r2, r3
 801db66:	4613      	mov	r3, r2
 801db68:	005b      	lsls	r3, r3, #1
 801db6a:	4413      	add	r3, r2
 801db6c:	461a      	mov	r2, r3
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	4293      	cmp	r3, r2
 801db72:	d20e      	bcs.n	801db92 <cis_GetBuffData+0x86>
		return cisData[index + CIS_ADC_BUFF_START_OFFSET + (CIS_EFFECTIVE_PIXELS_PER_LINE * 2)];
 801db74:	4b0b      	ldr	r3, [pc, #44]	; (801dba4 <cis_GetBuffData+0x98>)
 801db76:	681a      	ldr	r2, [r3, #0]
 801db78:	4b0b      	ldr	r3, [pc, #44]	; (801dba8 <cis_GetBuffData+0x9c>)
 801db7a:	881b      	ldrh	r3, [r3, #0]
 801db7c:	4619      	mov	r1, r3
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	440b      	add	r3, r1
 801db82:	4907      	ldr	r1, [pc, #28]	; (801dba0 <cis_GetBuffData+0x94>)
 801db84:	8809      	ldrh	r1, [r1, #0]
 801db86:	0049      	lsls	r1, r1, #1
 801db88:	440b      	add	r3, r1
 801db8a:	005b      	lsls	r3, r3, #1
 801db8c:	4413      	add	r3, r2
 801db8e:	881b      	ldrh	r3, [r3, #0]
 801db90:	e000      	b.n	801db94 <cis_GetBuffData+0x88>
	return 0;
 801db92:	2300      	movs	r3, #0
}
 801db94:	4618      	mov	r0, r3
 801db96:	370c      	adds	r7, #12
 801db98:	46bd      	mov	sp, r7
 801db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db9e:	4770      	bx	lr
 801dba0:	24000030 	.word	0x24000030
 801dba4:	24005270 	.word	0x24005270
 801dba8:	24000032 	.word	0x24000032

0801dbac <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801dbac:	b480      	push	{r7}
 801dbae:	b083      	sub	sp, #12
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	6078      	str	r0, [r7, #4]
//			arm_copy_q15((int16_t*)&cisData[offset + CIS_ADC_BUFF_START_OFFSET + (CIS_ADC_BUFF_END_CAPTURE / 2)], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
//
//			cis_ImageFilterBW(cis_buff);
//		}
//	}
}
 801dbb4:	bf00      	nop
 801dbb6:	370c      	adds	r7, #12
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbbe:	4770      	bx	lr

0801dbc0 <cis_TIM_CLK_Init>:
 * @brief  Init CIS clock Frequency
 * @param  sampling_frequency
 * @retval None
 */
void cis_TIM_CLK_Init()
{
 801dbc0:	b580      	push	{r7, lr}
 801dbc2:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 801dbc4:	f7e5 fc96 	bl	80034f4 <MX_TIM1_Init>

	/* Start ADC Timer #######################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 801dbc8:	2100      	movs	r1, #0
 801dbca:	4809      	ldr	r0, [pc, #36]	; (801dbf0 <cis_TIM_CLK_Init+0x30>)
 801dbcc:	f7f1 fbb6 	bl	800f33c <HAL_TIM_PWM_Start>
 801dbd0:	4603      	mov	r3, r0
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d001      	beq.n	801dbda <cis_TIM_CLK_Init+0x1a>
	{
		Error_Handler();
 801dbd6:	f7e5 f917 	bl	8002e08 <Error_Handler>
	}

	/* Start CLK generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 801dbda:	2104      	movs	r1, #4
 801dbdc:	4804      	ldr	r0, [pc, #16]	; (801dbf0 <cis_TIM_CLK_Init+0x30>)
 801dbde:	f7f1 fbad 	bl	800f33c <HAL_TIM_PWM_Start>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d001      	beq.n	801dbec <cis_TIM_CLK_Init+0x2c>
	{
		Error_Handler();
 801dbe8:	f7e5 f90e 	bl	8002e08 <Error_Handler>
	}
}
 801dbec:	bf00      	nop
 801dbee:	bd80      	pop	{r7, pc}
 801dbf0:	2400585c 	.word	0x2400585c

0801dbf4 <cis_TIM_SP_Init>:
 * @brief  CIS start pulse timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_SP_Init()
{
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	af00      	add	r7, sp, #0
	MX_TIM8_Init();
 801dbf8:	f7e5 feac 	bl	8003954 <MX_TIM8_Init>

	/* Start SP generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK)
 801dbfc:	2108      	movs	r1, #8
 801dbfe:	4805      	ldr	r0, [pc, #20]	; (801dc14 <cis_TIM_SP_Init+0x20>)
 801dc00:	f7f1 fb9c 	bl	800f33c <HAL_TIM_PWM_Start>
 801dc04:	4603      	mov	r3, r0
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d001      	beq.n	801dc0e <cis_TIM_SP_Init+0x1a>
	{
		Error_Handler();
 801dc0a:	f7e5 f8fd 	bl	8002e08 <Error_Handler>
	}
}
 801dc0e:	bf00      	nop
 801dc10:	bd80      	pop	{r7, pc}
 801dc12:	bf00      	nop
 801dc14:	2400572c 	.word	0x2400572c

0801dc18 <cis_TIM_LED_B_Init>:
 * @brief  CIS red led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_B_Init()
{
 801dc18:	b580      	push	{r7, lr}
 801dc1a:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 801dc1c:	f7e5 fd1a 	bl	8003654 <MX_TIM3_Init>

	/* Start LED R generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 801dc20:	2100      	movs	r1, #0
 801dc22:	4805      	ldr	r0, [pc, #20]	; (801dc38 <cis_TIM_LED_B_Init+0x20>)
 801dc24:	f7f1 fb8a 	bl	800f33c <HAL_TIM_PWM_Start>
 801dc28:	4603      	mov	r3, r0
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d001      	beq.n	801dc32 <cis_TIM_LED_B_Init+0x1a>
	{
		Error_Handler();
 801dc2e:	f7e5 f8eb 	bl	8002e08 <Error_Handler>
	}
}
 801dc32:	bf00      	nop
 801dc34:	bd80      	pop	{r7, pc}
 801dc36:	bf00      	nop
 801dc38:	24005810 	.word	0x24005810

0801dc3c <cis_TIM_LED_R_Init>:
 * @brief  CIS green led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_R_Init()
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 801dc40:	f7e5 fd88 	bl	8003754 <MX_TIM4_Init>

	/* Start LED G generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 801dc44:	2104      	movs	r1, #4
 801dc46:	4805      	ldr	r0, [pc, #20]	; (801dc5c <cis_TIM_LED_R_Init+0x20>)
 801dc48:	f7f1 fb78 	bl	800f33c <HAL_TIM_PWM_Start>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d001      	beq.n	801dc56 <cis_TIM_LED_R_Init+0x1a>
	{
		Error_Handler();
 801dc52:	f7e5 f8d9 	bl	8002e08 <Error_Handler>
	}
}
 801dc56:	bf00      	nop
 801dc58:	bd80      	pop	{r7, pc}
 801dc5a:	bf00      	nop
 801dc5c:	24005778 	.word	0x24005778

0801dc60 <cis_TIM_LED_G_Init>:
 * @brief  CIS blue led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_G_Init()
{
 801dc60:	b580      	push	{r7, lr}
 801dc62:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 801dc64:	f7e5 fdf6 	bl	8003854 <MX_TIM5_Init>

	/* Start LED B generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3) != HAL_OK)
 801dc68:	2108      	movs	r1, #8
 801dc6a:	4805      	ldr	r0, [pc, #20]	; (801dc80 <cis_TIM_LED_G_Init+0x20>)
 801dc6c:	f7f1 fb66 	bl	800f33c <HAL_TIM_PWM_Start>
 801dc70:	4603      	mov	r3, r0
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d001      	beq.n	801dc7a <cis_TIM_LED_G_Init+0x1a>
	{
		Error_Handler();
 801dc76:	f7e5 f8c7 	bl	8002e08 <Error_Handler>
	}
}
 801dc7a:	bf00      	nop
 801dc7c:	bd80      	pop	{r7, pc}
 801dc7e:	bf00      	nop
 801dc80:	240057c4 	.word	0x240057c4

0801dc84 <cis_ADC_Init>:
 * @brief  CIS adc init
 * @param  Void
 * @retval None
 */
void cis_ADC_Init(synthModeTypeDef mode)
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b082      	sub	sp, #8
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	71fb      	strb	r3, [r7, #7]
	MX_ADC1_Init();
 801dc8e:	f7e3 f90b 	bl	8000ea8 <MX_ADC1_Init>
	MX_ADC2_Init();
 801dc92:	f7e3 f98f 	bl	8000fb4 <MX_ADC2_Init>
	MX_ADC3_Init();
 801dc96:	f7e3 fa03 	bl	80010a0 <MX_ADC3_Init>

	/* ### Start calibration ############################################ */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801dc9a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801dc9e:	2100      	movs	r1, #0
 801dca0:	4810      	ldr	r0, [pc, #64]	; (801dce4 <cis_ADC_Init+0x60>)
 801dca2:	f7e7 fc15 	bl	80054d0 <HAL_ADCEx_Calibration_Start>
 801dca6:	4603      	mov	r3, r0
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d001      	beq.n	801dcb0 <cis_ADC_Init+0x2c>
	{
		Error_Handler();
 801dcac:	f7e5 f8ac 	bl	8002e08 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801dcb0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801dcb4:	2100      	movs	r1, #0
 801dcb6:	480c      	ldr	r0, [pc, #48]	; (801dce8 <cis_ADC_Init+0x64>)
 801dcb8:	f7e7 fc0a 	bl	80054d0 <HAL_ADCEx_Calibration_Start>
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d001      	beq.n	801dcc6 <cis_ADC_Init+0x42>
	{
		Error_Handler();
 801dcc2:	f7e5 f8a1 	bl	8002e08 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801dcc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801dcca:	2100      	movs	r1, #0
 801dccc:	4807      	ldr	r0, [pc, #28]	; (801dcec <cis_ADC_Init+0x68>)
 801dcce:	f7e7 fbff 	bl	80054d0 <HAL_ADCEx_Calibration_Start>
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d001      	beq.n	801dcdc <cis_ADC_Init+0x58>
	{
		Error_Handler();
 801dcd8:	f7e5 f896 	bl	8002e08 <Error_Handler>
	}
}
 801dcdc:	bf00      	nop
 801dcde:	3708      	adds	r7, #8
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd80      	pop	{r7, pc}
 801dce4:	24005358 	.word	0x24005358
 801dce8:	2400527c 	.word	0x2400527c
 801dcec:	240053bc 	.word	0x240053bc

0801dcf0 <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b084      	sub	sp, #16
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	6039      	str	r1, [r7, #0]
 801dcfa:	71fb      	strb	r3, [r7, #7]
 801dcfc:	4613      	mov	r3, r2
 801dcfe:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801dd00:	2300      	movs	r3, #0
 801dd02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801dd04:	2200      	movs	r2, #0
 801dd06:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dd0a:	4819      	ldr	r0, [pc, #100]	; (801dd70 <icm20602_write+0x80>)
 801dd0c:	f7ec f8b8 	bl	8009e80 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801dd10:	bf00      	nop
 801dd12:	4818      	ldr	r0, [pc, #96]	; (801dd74 <icm20602_write+0x84>)
 801dd14:	f7f1 f8d8 	bl	800eec8 <HAL_SPI_GetState>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	2b01      	cmp	r3, #1
 801dd1c:	d1f9      	bne.n	801dd12 <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801dd1e:	1df9      	adds	r1, r7, #7
 801dd20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801dd24:	2201      	movs	r2, #1
 801dd26:	4813      	ldr	r0, [pc, #76]	; (801dd74 <icm20602_write+0x84>)
 801dd28:	f7f0 f9fe 	bl	800e128 <HAL_SPI_Transmit>
 801dd2c:	4603      	mov	r3, r0
 801dd2e:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801dd30:	bf00      	nop
 801dd32:	4810      	ldr	r0, [pc, #64]	; (801dd74 <icm20602_write+0x84>)
 801dd34:	f7f1 f8c8 	bl	800eec8 <HAL_SPI_GetState>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	2b01      	cmp	r3, #1
 801dd3c:	d1f9      	bne.n	801dd32 <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801dd3e:	88ba      	ldrh	r2, [r7, #4]
 801dd40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801dd44:	6839      	ldr	r1, [r7, #0]
 801dd46:	480b      	ldr	r0, [pc, #44]	; (801dd74 <icm20602_write+0x84>)
 801dd48:	f7f0 f9ee 	bl	800e128 <HAL_SPI_Transmit>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	461a      	mov	r2, r3
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	4413      	add	r3, r2
 801dd54:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801dd56:	2201      	movs	r2, #1
 801dd58:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dd5c:	4804      	ldr	r0, [pc, #16]	; (801dd70 <icm20602_write+0x80>)
 801dd5e:	f7ec f88f 	bl	8009e80 <HAL_GPIO_WritePin>
	return rv;
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	b2db      	uxtb	r3, r3
}
 801dd66:	4618      	mov	r0, r3
 801dd68:	3710      	adds	r7, #16
 801dd6a:	46bd      	mov	sp, r7
 801dd6c:	bd80      	pop	{r7, pc}
 801dd6e:	bf00      	nop
 801dd70:	58020400 	.word	0x58020400
 801dd74:	240056a4 	.word	0x240056a4

0801dd78 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b084      	sub	sp, #16
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	4603      	mov	r3, r0
 801dd80:	6039      	str	r1, [r7, #0]
 801dd82:	71fb      	strb	r3, [r7, #7]
 801dd84:	4613      	mov	r3, r2
 801dd86:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801dd88:	2300      	movs	r3, #0
 801dd8a:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801dd8c:	79fb      	ldrb	r3, [r7, #7]
 801dd8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801dd92:	b2db      	uxtb	r3, r3
 801dd94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801dd96:	2200      	movs	r2, #0
 801dd98:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dd9c:	4818      	ldr	r0, [pc, #96]	; (801de00 <icm20602_read+0x88>)
 801dd9e:	f7ec f86f 	bl	8009e80 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801dda2:	bf00      	nop
 801dda4:	4817      	ldr	r0, [pc, #92]	; (801de04 <icm20602_read+0x8c>)
 801dda6:	f7f1 f88f 	bl	800eec8 <HAL_SPI_GetState>
 801ddaa:	4603      	mov	r3, r0
 801ddac:	2b01      	cmp	r3, #1
 801ddae:	d1f9      	bne.n	801dda4 <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801ddb0:	1df9      	adds	r1, r7, #7
 801ddb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ddb6:	2201      	movs	r2, #1
 801ddb8:	4812      	ldr	r0, [pc, #72]	; (801de04 <icm20602_read+0x8c>)
 801ddba:	f7f0 f9b5 	bl	800e128 <HAL_SPI_Transmit>
 801ddbe:	4603      	mov	r3, r0
 801ddc0:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801ddc2:	bf00      	nop
 801ddc4:	480f      	ldr	r0, [pc, #60]	; (801de04 <icm20602_read+0x8c>)
 801ddc6:	f7f1 f87f 	bl	800eec8 <HAL_SPI_GetState>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	2b01      	cmp	r3, #1
 801ddce:	d1f9      	bne.n	801ddc4 <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801ddd0:	88ba      	ldrh	r2, [r7, #4]
 801ddd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ddd6:	6839      	ldr	r1, [r7, #0]
 801ddd8:	480a      	ldr	r0, [pc, #40]	; (801de04 <icm20602_read+0x8c>)
 801ddda:	f7f0 fb97 	bl	800e50c <HAL_SPI_Receive>
 801ddde:	4603      	mov	r3, r0
 801dde0:	461a      	mov	r2, r3
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	4413      	add	r3, r2
 801dde6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801dde8:	2201      	movs	r2, #1
 801ddea:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ddee:	4804      	ldr	r0, [pc, #16]	; (801de00 <icm20602_read+0x88>)
 801ddf0:	f7ec f846 	bl	8009e80 <HAL_GPIO_WritePin>
	return rv;
 801ddf4:	68fb      	ldr	r3, [r7, #12]
 801ddf6:	b2db      	uxtb	r3, r3
}
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	3710      	adds	r7, #16
 801ddfc:	46bd      	mov	sp, r7
 801ddfe:	bd80      	pop	{r7, pc}
 801de00:	58020400 	.word	0x58020400
 801de04:	240056a4 	.word	0x240056a4

0801de08 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b082      	sub	sp, #8
 801de0c:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801de0e:	2300      	movs	r3, #0
 801de10:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801de12:	2300      	movs	r3, #0
 801de14:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801de16:	2380      	movs	r3, #128	; 0x80
 801de18:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801de1a:	1dbb      	adds	r3, r7, #6
 801de1c:	2201      	movs	r2, #1
 801de1e:	4619      	mov	r1, r3
 801de20:	206b      	movs	r0, #107	; 0x6b
 801de22:	f7ff ff65 	bl	801dcf0 <icm20602_write>
 801de26:	4603      	mov	r3, r0
 801de28:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801de2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	f040 818e 	bne.w	801e150 <icm20602_init+0x348>

	HAL_Delay(1000);
 801de34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801de38:	f7e6 fa76 	bl	8004328 <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801de3c:	1dbb      	adds	r3, r7, #6
 801de3e:	2201      	movs	r2, #1
 801de40:	4619      	mov	r1, r3
 801de42:	2075      	movs	r0, #117	; 0x75
 801de44:	f7ff ff98 	bl	801dd78 <icm20602_read>
 801de48:	4603      	mov	r3, r0
 801de4a:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801de4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de50:	2b00      	cmp	r3, #0
 801de52:	f040 817f 	bne.w	801e154 <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801de56:	79bb      	ldrb	r3, [r7, #6]
 801de58:	2b12      	cmp	r3, #18
 801de5a:	d006      	beq.n	801de6a <icm20602_init+0x62>
		r = -1;
 801de5c:	23ff      	movs	r3, #255	; 0xff
 801de5e:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801de60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de64:	2b00      	cmp	r3, #0
 801de66:	f040 8177 	bne.w	801e158 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801de6a:	2303      	movs	r3, #3
 801de6c:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801de6e:	1dbb      	adds	r3, r7, #6
 801de70:	2201      	movs	r2, #1
 801de72:	4619      	mov	r1, r3
 801de74:	2068      	movs	r0, #104	; 0x68
 801de76:	f7ff ff3b 	bl	801dcf0 <icm20602_write>
 801de7a:	4603      	mov	r3, r0
 801de7c:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801de7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de82:	2b00      	cmp	r3, #0
 801de84:	f040 816a 	bne.w	801e15c <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801de88:	2301      	movs	r3, #1
 801de8a:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801de8c:	1dbb      	adds	r3, r7, #6
 801de8e:	2201      	movs	r2, #1
 801de90:	4619      	mov	r1, r3
 801de92:	206b      	movs	r0, #107	; 0x6b
 801de94:	f7ff ff2c 	bl	801dcf0 <icm20602_write>
 801de98:	4603      	mov	r3, r0
 801de9a:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801de9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	f040 815d 	bne.w	801e160 <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801dea6:	233f      	movs	r3, #63	; 0x3f
 801dea8:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801deaa:	1dbb      	adds	r3, r7, #6
 801deac:	2201      	movs	r2, #1
 801deae:	4619      	mov	r1, r3
 801deb0:	206c      	movs	r0, #108	; 0x6c
 801deb2:	f7ff ff1d 	bl	801dcf0 <icm20602_write>
 801deb6:	4603      	mov	r3, r0
 801deb8:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801deba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	f040 8150 	bne.w	801e164 <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801dec4:	2301      	movs	r3, #1
 801dec6:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801dec8:	1dbb      	adds	r3, r7, #6
 801deca:	2201      	movs	r2, #1
 801decc:	4619      	mov	r1, r3
 801dece:	206a      	movs	r0, #106	; 0x6a
 801ded0:	f7ff ff0e 	bl	801dcf0 <icm20602_write>
 801ded4:	4603      	mov	r3, r0
 801ded6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801ded8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	f040 8143 	bne.w	801e168 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801dee2:	2340      	movs	r3, #64	; 0x40
 801dee4:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801dee6:	1dbb      	adds	r3, r7, #6
 801dee8:	2201      	movs	r2, #1
 801deea:	4619      	mov	r1, r3
 801deec:	2070      	movs	r0, #112	; 0x70
 801deee:	f7ff feff 	bl	801dcf0 <icm20602_write>
 801def2:	4603      	mov	r3, r0
 801def4:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801def6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801defa:	2b00      	cmp	r3, #0
 801defc:	f040 8136 	bne.w	801e16c <icm20602_init+0x364>

	if (dev.use_accel) {
 801df00:	4ba7      	ldr	r3, [pc, #668]	; (801e1a0 <icm20602_init+0x398>)
 801df02:	781b      	ldrb	r3, [r3, #0]
 801df04:	2b00      	cmp	r3, #0
 801df06:	d034      	beq.n	801df72 <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801df08:	4ba5      	ldr	r3, [pc, #660]	; (801e1a0 <icm20602_init+0x398>)
 801df0a:	789b      	ldrb	r3, [r3, #2]
 801df0c:	2b08      	cmp	r3, #8
 801df0e:	d10e      	bne.n	801df2e <icm20602_init+0x126>
			tmp = (1 << 3);
 801df10:	2308      	movs	r3, #8
 801df12:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801df14:	1dbb      	adds	r3, r7, #6
 801df16:	2201      	movs	r2, #1
 801df18:	4619      	mov	r1, r3
 801df1a:	201d      	movs	r0, #29
 801df1c:	f7ff fee8 	bl	801dcf0 <icm20602_write>
 801df20:	4603      	mov	r3, r0
 801df22:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801df24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d010      	beq.n	801df4e <icm20602_init+0x146>
 801df2c:	e131      	b.n	801e192 <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801df2e:	4b9c      	ldr	r3, [pc, #624]	; (801e1a0 <icm20602_init+0x398>)
 801df30:	789b      	ldrb	r3, [r3, #2]
 801df32:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801df34:	1dbb      	adds	r3, r7, #6
 801df36:	2201      	movs	r2, #1
 801df38:	4619      	mov	r1, r3
 801df3a:	201d      	movs	r0, #29
 801df3c:	f7ff fed8 	bl	801dcf0 <icm20602_write>
 801df40:	4603      	mov	r3, r0
 801df42:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801df44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	f040 8111 	bne.w	801e170 <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801df4e:	4b94      	ldr	r3, [pc, #592]	; (801e1a0 <icm20602_init+0x398>)
 801df50:	78db      	ldrb	r3, [r3, #3]
 801df52:	009b      	lsls	r3, r3, #2
 801df54:	b2db      	uxtb	r3, r3
 801df56:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801df58:	1dbb      	adds	r3, r7, #6
 801df5a:	2201      	movs	r2, #1
 801df5c:	4619      	mov	r1, r3
 801df5e:	201c      	movs	r0, #28
 801df60:	f7ff fec6 	bl	801dcf0 <icm20602_write>
 801df64:	4603      	mov	r3, r0
 801df66:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801df68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	f040 8101 	bne.w	801e174 <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801df72:	4b8b      	ldr	r3, [pc, #556]	; (801e1a0 <icm20602_init+0x398>)
 801df74:	791b      	ldrb	r3, [r3, #4]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d073      	beq.n	801e062 <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801df7a:	4b89      	ldr	r3, [pc, #548]	; (801e1a0 <icm20602_init+0x398>)
 801df7c:	799b      	ldrb	r3, [r3, #6]
 801df7e:	2b08      	cmp	r3, #8
 801df80:	d124      	bne.n	801dfcc <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801df82:	2300      	movs	r3, #0
 801df84:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801df86:	1dbb      	adds	r3, r7, #6
 801df88:	2201      	movs	r2, #1
 801df8a:	4619      	mov	r1, r3
 801df8c:	201a      	movs	r0, #26
 801df8e:	f7ff feaf 	bl	801dcf0 <icm20602_write>
 801df92:	4603      	mov	r3, r0
 801df94:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801df96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	f040 80ec 	bne.w	801e178 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801dfa0:	4b7f      	ldr	r3, [pc, #508]	; (801e1a0 <icm20602_init+0x398>)
 801dfa2:	79db      	ldrb	r3, [r3, #7]
 801dfa4:	00db      	lsls	r3, r3, #3
 801dfa6:	b25b      	sxtb	r3, r3
 801dfa8:	f043 0302 	orr.w	r3, r3, #2
 801dfac:	b25b      	sxtb	r3, r3
 801dfae:	b2db      	uxtb	r3, r3
 801dfb0:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801dfb2:	1dbb      	adds	r3, r7, #6
 801dfb4:	2201      	movs	r2, #1
 801dfb6:	4619      	mov	r1, r3
 801dfb8:	201b      	movs	r0, #27
 801dfba:	f7ff fe99 	bl	801dcf0 <icm20602_write>
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801dfc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d04b      	beq.n	801e062 <icm20602_init+0x25a>
 801dfca:	e0e2      	b.n	801e192 <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801dfcc:	4b74      	ldr	r3, [pc, #464]	; (801e1a0 <icm20602_init+0x398>)
 801dfce:	799b      	ldrb	r3, [r3, #6]
 801dfd0:	2b09      	cmp	r3, #9
 801dfd2:	d124      	bne.n	801e01e <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801dfd8:	1dbb      	adds	r3, r7, #6
 801dfda:	2201      	movs	r2, #1
 801dfdc:	4619      	mov	r1, r3
 801dfde:	201a      	movs	r0, #26
 801dfe0:	f7ff fe86 	bl	801dcf0 <icm20602_write>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801dfe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	f040 80c5 	bne.w	801e17c <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801dff2:	4b6b      	ldr	r3, [pc, #428]	; (801e1a0 <icm20602_init+0x398>)
 801dff4:	79db      	ldrb	r3, [r3, #7]
 801dff6:	00db      	lsls	r3, r3, #3
 801dff8:	b25b      	sxtb	r3, r3
 801dffa:	f043 0301 	orr.w	r3, r3, #1
 801dffe:	b25b      	sxtb	r3, r3
 801e000:	b2db      	uxtb	r3, r3
 801e002:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801e004:	1dbb      	adds	r3, r7, #6
 801e006:	2201      	movs	r2, #1
 801e008:	4619      	mov	r1, r3
 801e00a:	201b      	movs	r0, #27
 801e00c:	f7ff fe70 	bl	801dcf0 <icm20602_write>
 801e010:	4603      	mov	r3, r0
 801e012:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d022      	beq.n	801e062 <icm20602_init+0x25a>
 801e01c:	e0b9      	b.n	801e192 <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801e01e:	4b60      	ldr	r3, [pc, #384]	; (801e1a0 <icm20602_init+0x398>)
 801e020:	799b      	ldrb	r3, [r3, #6]
 801e022:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801e024:	1dbb      	adds	r3, r7, #6
 801e026:	2201      	movs	r2, #1
 801e028:	4619      	mov	r1, r3
 801e02a:	201a      	movs	r0, #26
 801e02c:	f7ff fe60 	bl	801dcf0 <icm20602_write>
 801e030:	4603      	mov	r3, r0
 801e032:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	f040 80a1 	bne.w	801e180 <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801e03e:	4b58      	ldr	r3, [pc, #352]	; (801e1a0 <icm20602_init+0x398>)
 801e040:	79db      	ldrb	r3, [r3, #7]
 801e042:	00db      	lsls	r3, r3, #3
 801e044:	b2db      	uxtb	r3, r3
 801e046:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801e048:	1dbb      	adds	r3, r7, #6
 801e04a:	2201      	movs	r2, #1
 801e04c:	4619      	mov	r1, r3
 801e04e:	201b      	movs	r0, #27
 801e050:	f7ff fe4e 	bl	801dcf0 <icm20602_write>
 801e054:	4603      	mov	r3, r0
 801e056:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	f040 8091 	bne.w	801e184 <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801e062:	2300      	movs	r3, #0
 801e064:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801e066:	1dbb      	adds	r3, r7, #6
 801e068:	2201      	movs	r2, #1
 801e06a:	4619      	mov	r1, r3
 801e06c:	201e      	movs	r0, #30
 801e06e:	f7ff fe3f 	bl	801dcf0 <icm20602_write>
 801e072:	4603      	mov	r3, r0
 801e074:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	f040 8084 	bne.w	801e188 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801e080:	4b47      	ldr	r3, [pc, #284]	; (801e1a0 <icm20602_init+0x398>)
 801e082:	781b      	ldrb	r3, [r3, #0]
 801e084:	2b00      	cmp	r3, #0
 801e086:	d005      	beq.n	801e094 <icm20602_init+0x28c>
 801e088:	4b45      	ldr	r3, [pc, #276]	; (801e1a0 <icm20602_init+0x398>)
 801e08a:	785b      	ldrb	r3, [r3, #1]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d001      	beq.n	801e094 <icm20602_init+0x28c>
 801e090:	2308      	movs	r3, #8
 801e092:	e000      	b.n	801e096 <icm20602_init+0x28e>
 801e094:	2300      	movs	r3, #0
 801e096:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801e098:	4b41      	ldr	r3, [pc, #260]	; (801e1a0 <icm20602_init+0x398>)
 801e09a:	791b      	ldrb	r3, [r3, #4]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d005      	beq.n	801e0ac <icm20602_init+0x2a4>
 801e0a0:	4b3f      	ldr	r3, [pc, #252]	; (801e1a0 <icm20602_init+0x398>)
 801e0a2:	795b      	ldrb	r3, [r3, #5]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d001      	beq.n	801e0ac <icm20602_init+0x2a4>
 801e0a8:	2210      	movs	r2, #16
 801e0aa:	e000      	b.n	801e0ae <icm20602_init+0x2a6>
 801e0ac:	2200      	movs	r2, #0
 801e0ae:	79bb      	ldrb	r3, [r7, #6]
 801e0b0:	b25b      	sxtb	r3, r3
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	b25b      	sxtb	r3, r3
 801e0b6:	b2db      	uxtb	r3, r3
 801e0b8:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801e0ba:	1dbb      	adds	r3, r7, #6
 801e0bc:	2201      	movs	r2, #1
 801e0be:	4619      	mov	r1, r3
 801e0c0:	2023      	movs	r0, #35	; 0x23
 801e0c2:	f7ff fe15 	bl	801dcf0 <icm20602_write>
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d15c      	bne.n	801e18c <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801e0d2:	4b33      	ldr	r3, [pc, #204]	; (801e1a0 <icm20602_init+0x398>)
 801e0d4:	7a1b      	ldrb	r3, [r3, #8]
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d004      	beq.n	801e0e4 <icm20602_init+0x2dc>
 801e0da:	4b31      	ldr	r3, [pc, #196]	; (801e1a0 <icm20602_init+0x398>)
 801e0dc:	7a1b      	ldrb	r3, [r3, #8]
 801e0de:	3b01      	subs	r3, #1
 801e0e0:	b2db      	uxtb	r3, r3
 801e0e2:	e000      	b.n	801e0e6 <icm20602_init+0x2de>
 801e0e4:	2301      	movs	r3, #1
 801e0e6:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801e0e8:	1dbb      	adds	r3, r7, #6
 801e0ea:	2201      	movs	r2, #1
 801e0ec:	4619      	mov	r1, r3
 801e0ee:	2019      	movs	r0, #25
 801e0f0:	f7ff fdfe 	bl	801dcf0 <icm20602_write>
 801e0f4:	4603      	mov	r3, r0
 801e0f6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e0f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d147      	bne.n	801e190 <icm20602_init+0x388>

	tmp = 0;
 801e100:	2300      	movs	r3, #0
 801e102:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801e104:	4b26      	ldr	r3, [pc, #152]	; (801e1a0 <icm20602_init+0x398>)
 801e106:	791b      	ldrb	r3, [r3, #4]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d001      	beq.n	801e110 <icm20602_init+0x308>
 801e10c:	2200      	movs	r2, #0
 801e10e:	e000      	b.n	801e112 <icm20602_init+0x30a>
 801e110:	2207      	movs	r2, #7
 801e112:	79bb      	ldrb	r3, [r7, #6]
 801e114:	b25b      	sxtb	r3, r3
 801e116:	4313      	orrs	r3, r2
 801e118:	b25b      	sxtb	r3, r3
 801e11a:	b2db      	uxtb	r3, r3
 801e11c:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801e11e:	4b20      	ldr	r3, [pc, #128]	; (801e1a0 <icm20602_init+0x398>)
 801e120:	781b      	ldrb	r3, [r3, #0]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d001      	beq.n	801e12a <icm20602_init+0x322>
 801e126:	2200      	movs	r2, #0
 801e128:	e000      	b.n	801e12c <icm20602_init+0x324>
 801e12a:	2238      	movs	r2, #56	; 0x38
 801e12c:	79bb      	ldrb	r3, [r7, #6]
 801e12e:	b25b      	sxtb	r3, r3
 801e130:	4313      	orrs	r3, r2
 801e132:	b25b      	sxtb	r3, r3
 801e134:	b2db      	uxtb	r3, r3
 801e136:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801e138:	1dbb      	adds	r3, r7, #6
 801e13a:	2201      	movs	r2, #1
 801e13c:	4619      	mov	r1, r3
 801e13e:	206c      	movs	r0, #108	; 0x6c
 801e140:	f7ff fdd6 	bl	801dcf0 <icm20602_write>
 801e144:	4603      	mov	r3, r0
 801e146:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e14c:	2b00      	cmp	r3, #0

	return_err:
 801e14e:	e020      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e150:	bf00      	nop
 801e152:	e01e      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e154:	bf00      	nop
 801e156:	e01c      	b.n	801e192 <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801e158:	bf00      	nop
 801e15a:	e01a      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e15c:	bf00      	nop
 801e15e:	e018      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e160:	bf00      	nop
 801e162:	e016      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e164:	bf00      	nop
 801e166:	e014      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e168:	bf00      	nop
 801e16a:	e012      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e16c:	bf00      	nop
 801e16e:	e010      	b.n	801e192 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e170:	bf00      	nop
 801e172:	e00e      	b.n	801e192 <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801e174:	bf00      	nop
 801e176:	e00c      	b.n	801e192 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e178:	bf00      	nop
 801e17a:	e00a      	b.n	801e192 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e17c:	bf00      	nop
 801e17e:	e008      	b.n	801e192 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e180:	bf00      	nop
 801e182:	e006      	b.n	801e192 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e184:	bf00      	nop
 801e186:	e004      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e188:	bf00      	nop
 801e18a:	e002      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e18c:	bf00      	nop
 801e18e:	e000      	b.n	801e192 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e190:	bf00      	nop

	return r;
 801e192:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e196:	4618      	mov	r0, r3
 801e198:	3708      	adds	r7, #8
 801e19a:	46bd      	mov	sp, r7
 801e19c:	bd80      	pop	{r7, pc}
 801e19e:	bf00      	nop
 801e1a0:	2400003c 	.word	0x2400003c

0801e1a4 <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b088      	sub	sp, #32
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	60f8      	str	r0, [r7, #12]
 801e1ac:	60b9      	str	r1, [r7, #8]
 801e1ae:	607a      	str	r2, [r7, #4]
 801e1b0:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801e1b2:	2300      	movs	r3, #0
 801e1b4:	613b      	str	r3, [r7, #16]
 801e1b6:	f107 0314 	add.w	r3, r7, #20
 801e1ba:	2200      	movs	r2, #0
 801e1bc:	601a      	str	r2, [r3, #0]
 801e1be:	605a      	str	r2, [r3, #4]
 801e1c0:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801e1c6:	f107 0310 	add.w	r3, r7, #16
 801e1ca:	220e      	movs	r2, #14
 801e1cc:	4619      	mov	r1, r3
 801e1ce:	203b      	movs	r0, #59	; 0x3b
 801e1d0:	f7ff fdd2 	bl	801dd78 <icm20602_read>
 801e1d4:	4603      	mov	r3, r0
 801e1d6:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801e1d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	f040 808c 	bne.w	801e2fa <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801e1e2:	7c3b      	ldrb	r3, [r7, #16]
 801e1e4:	b21a      	sxth	r2, r3
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	801a      	strh	r2, [r3, #0]
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1f0:	021b      	lsls	r3, r3, #8
 801e1f2:	b21a      	sxth	r2, r3
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	801a      	strh	r2, [r3, #0]
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e1fe:	7c7b      	ldrb	r3, [r7, #17]
 801e200:	b21b      	sxth	r3, r3
 801e202:	4313      	orrs	r3, r2
 801e204:	b21a      	sxth	r2, r3
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801e20a:	7cbb      	ldrb	r3, [r7, #18]
 801e20c:	b21a      	sxth	r2, r3
 801e20e:	68bb      	ldr	r3, [r7, #8]
 801e210:	801a      	strh	r2, [r3, #0]
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e218:	021b      	lsls	r3, r3, #8
 801e21a:	b21a      	sxth	r2, r3
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	801a      	strh	r2, [r3, #0]
 801e220:	68bb      	ldr	r3, [r7, #8]
 801e222:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e226:	7cfb      	ldrb	r3, [r7, #19]
 801e228:	b21b      	sxth	r3, r3
 801e22a:	4313      	orrs	r3, r2
 801e22c:	b21a      	sxth	r2, r3
 801e22e:	68bb      	ldr	r3, [r7, #8]
 801e230:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801e232:	7d3b      	ldrb	r3, [r7, #20]
 801e234:	b21a      	sxth	r2, r3
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	801a      	strh	r2, [r3, #0]
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e240:	021b      	lsls	r3, r3, #8
 801e242:	b21a      	sxth	r2, r3
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	801a      	strh	r2, [r3, #0]
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e24e:	7d7b      	ldrb	r3, [r7, #21]
 801e250:	b21b      	sxth	r3, r3
 801e252:	4313      	orrs	r3, r2
 801e254:	b21a      	sxth	r2, r3
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801e25a:	7dbb      	ldrb	r3, [r7, #22]
 801e25c:	b21a      	sxth	r2, r3
 801e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e260:	801a      	strh	r2, [r3, #0]
 801e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e264:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e268:	021b      	lsls	r3, r3, #8
 801e26a:	b21a      	sxth	r2, r3
 801e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e26e:	801a      	strh	r2, [r3, #0]
 801e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e272:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e276:	7dfb      	ldrb	r3, [r7, #23]
 801e278:	b21b      	sxth	r3, r3
 801e27a:	4313      	orrs	r3, r2
 801e27c:	b21a      	sxth	r2, r3
 801e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e280:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801e282:	7e3b      	ldrb	r3, [r7, #24]
 801e284:	b21a      	sxth	r2, r3
 801e286:	683b      	ldr	r3, [r7, #0]
 801e288:	801a      	strh	r2, [r3, #0]
 801e28a:	683b      	ldr	r3, [r7, #0]
 801e28c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e290:	021b      	lsls	r3, r3, #8
 801e292:	b21a      	sxth	r2, r3
 801e294:	683b      	ldr	r3, [r7, #0]
 801e296:	801a      	strh	r2, [r3, #0]
 801e298:	683b      	ldr	r3, [r7, #0]
 801e29a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e29e:	7e7b      	ldrb	r3, [r7, #25]
 801e2a0:	b21b      	sxth	r3, r3
 801e2a2:	4313      	orrs	r3, r2
 801e2a4:	b21a      	sxth	r2, r3
 801e2a6:	683b      	ldr	r3, [r7, #0]
 801e2a8:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801e2aa:	7ebb      	ldrb	r3, [r7, #26]
 801e2ac:	b21a      	sxth	r2, r3
 801e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2b0:	801a      	strh	r2, [r3, #0]
 801e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e2b8:	021b      	lsls	r3, r3, #8
 801e2ba:	b21a      	sxth	r2, r3
 801e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2be:	801a      	strh	r2, [r3, #0]
 801e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e2c6:	7efb      	ldrb	r3, [r7, #27]
 801e2c8:	b21b      	sxth	r3, r3
 801e2ca:	4313      	orrs	r3, r2
 801e2cc:	b21a      	sxth	r2, r3
 801e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2d0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801e2d2:	7f3b      	ldrb	r3, [r7, #28]
 801e2d4:	b21a      	sxth	r2, r3
 801e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2d8:	801a      	strh	r2, [r3, #0]
 801e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e2e0:	021b      	lsls	r3, r3, #8
 801e2e2:	b21a      	sxth	r2, r3
 801e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2e6:	801a      	strh	r2, [r3, #0]
 801e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e2ee:	7f7b      	ldrb	r3, [r7, #29]
 801e2f0:	b21b      	sxth	r3, r3
 801e2f2:	4313      	orrs	r3, r2
 801e2f4:	b21a      	sxth	r2, r3
 801e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2f8:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801e2fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e2fe:	4618      	mov	r0, r3
 801e300:	3720      	adds	r7, #32
 801e302:	46bd      	mov	sp, r7
 801e304:	bd80      	pop	{r7, pc}
	...

0801e308 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_SET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801e30c:	2201      	movs	r2, #1
 801e30e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e312:	480a      	ldr	r0, [pc, #40]	; (801e33c <pcm5102_Init+0x34>)
 801e314:	f7eb fdb4 	bl	8009e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801e318:	2200      	movs	r2, #0
 801e31a:	2108      	movs	r1, #8
 801e31c:	4808      	ldr	r0, [pc, #32]	; (801e340 <pcm5102_Init+0x38>)
 801e31e:	f7eb fdaf 	bl	8009e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801e322:	2201      	movs	r2, #1
 801e324:	2104      	movs	r1, #4
 801e326:	4805      	ldr	r0, [pc, #20]	; (801e33c <pcm5102_Init+0x34>)
 801e328:	f7eb fdaa 	bl	8009e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801e32c:	2200      	movs	r2, #0
 801e32e:	2140      	movs	r1, #64	; 0x40
 801e330:	4804      	ldr	r0, [pc, #16]	; (801e344 <pcm5102_Init+0x3c>)
 801e332:	f7eb fda5 	bl	8009e80 <HAL_GPIO_WritePin>
}
 801e336:	bf00      	nop
 801e338:	bd80      	pop	{r7, pc}
 801e33a:	bf00      	nop
 801e33c:	58020800 	.word	0x58020800
 801e340:	58021c00 	.word	0x58021c00
 801e344:	58021400 	.word	0x58021400

0801e348 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	b082      	sub	sp, #8
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	6078      	str	r0, [r7, #4]
 801e350:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e358:	d306      	bcc.n	801e368 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801e35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e35e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801e360:	2140      	movs	r1, #64	; 0x40
 801e362:	4807      	ldr	r0, [pc, #28]	; (801e380 <Audio_Player_Play+0x38>)
 801e364:	f7eb fda5 	bl	8009eb2 <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 801e368:	683b      	ldr	r3, [r7, #0]
 801e36a:	b29b      	uxth	r3, r3
 801e36c:	461a      	mov	r2, r3
 801e36e:	6879      	ldr	r1, [r7, #4]
 801e370:	4804      	ldr	r0, [pc, #16]	; (801e384 <Audio_Player_Play+0x3c>)
 801e372:	f7ef fb03 	bl	800d97c <HAL_SAI_Transmit_DMA>

//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 801e376:	bf00      	nop
 801e378:	3708      	adds	r7, #8
 801e37a:	46bd      	mov	sp, r7
 801e37c:	bd80      	pop	{r7, pc}
 801e37e:	bf00      	nop
 801e380:	58021c00 	.word	0x58021c00
 801e384:	2400560c 	.word	0x2400560c

0801e388 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801e388:	b580      	push	{r7, lr}
 801e38a:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801e38c:	2200      	movs	r2, #0
 801e38e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e392:	4808      	ldr	r0, [pc, #32]	; (801e3b4 <ssd1362_Reset+0x2c>)
 801e394:	f7eb fd74 	bl	8009e80 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801e398:	200a      	movs	r0, #10
 801e39a:	f7e5 ffc5 	bl	8004328 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801e39e:	2201      	movs	r2, #1
 801e3a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e3a4:	4803      	ldr	r0, [pc, #12]	; (801e3b4 <ssd1362_Reset+0x2c>)
 801e3a6:	f7eb fd6b 	bl	8009e80 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801e3aa:	200a      	movs	r0, #10
 801e3ac:	f7e5 ffbc 	bl	8004328 <HAL_Delay>
}
 801e3b0:	bf00      	nop
 801e3b2:	bd80      	pop	{r7, pc}
 801e3b4:	58020400 	.word	0x58020400

0801e3b8 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801e3b8:	b580      	push	{r7, lr}
 801e3ba:	b082      	sub	sp, #8
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	4603      	mov	r3, r0
 801e3c0:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801e3c2:	1dfa      	adds	r2, r7, #7
 801e3c4:	2301      	movs	r3, #1
 801e3c6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801e3ca:	4803      	ldr	r0, [pc, #12]	; (801e3d8 <ssd1362_writeCmd+0x20>)
 801e3cc:	f7f0 fec4 	bl	800f158 <HAL_SRAM_Write_8b>
}
 801e3d0:	bf00      	nop
 801e3d2:	3708      	adds	r7, #8
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	bd80      	pop	{r7, pc}
 801e3d8:	24005534 	.word	0x24005534

0801e3dc <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801e3dc:	b580      	push	{r7, lr}
 801e3de:	b082      	sub	sp, #8
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	4603      	mov	r3, r0
 801e3e4:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801e3e6:	1dfa      	adds	r2, r7, #7
 801e3e8:	2301      	movs	r3, #1
 801e3ea:	4904      	ldr	r1, [pc, #16]	; (801e3fc <ssd1362_writeData+0x20>)
 801e3ec:	4804      	ldr	r0, [pc, #16]	; (801e400 <ssd1362_writeData+0x24>)
 801e3ee:	f7f0 feb3 	bl	800f158 <HAL_SRAM_Write_8b>
}
 801e3f2:	bf00      	nop
 801e3f4:	3708      	adds	r7, #8
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	bd80      	pop	{r7, pc}
 801e3fa:	bf00      	nop
 801e3fc:	c0000001 	.word	0xc0000001
 801e400:	24005534 	.word	0x24005534

0801e404 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801e404:	b480      	push	{r7}
 801e406:	b083      	sub	sp, #12
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
 801e40c:	460b      	mov	r3, r1
 801e40e:	70fb      	strb	r3, [r7, #3]
 801e410:	4613      	mov	r3, r2
 801e412:	70bb      	strb	r3, [r7, #2]
   if (value)
 801e414:	78bb      	ldrb	r3, [r7, #2]
 801e416:	2b00      	cmp	r3, #0
 801e418:	d00d      	beq.n	801e436 <bitWrite+0x32>
      *x |= (1 << n);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	781b      	ldrb	r3, [r3, #0]
 801e41e:	b25a      	sxtb	r2, r3
 801e420:	78fb      	ldrb	r3, [r7, #3]
 801e422:	2101      	movs	r1, #1
 801e424:	fa01 f303 	lsl.w	r3, r1, r3
 801e428:	b25b      	sxtb	r3, r3
 801e42a:	4313      	orrs	r3, r2
 801e42c:	b25b      	sxtb	r3, r3
 801e42e:	b2da      	uxtb	r2, r3
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801e434:	e00e      	b.n	801e454 <bitWrite+0x50>
      *x &= ~(1 << n);
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	781b      	ldrb	r3, [r3, #0]
 801e43a:	b25a      	sxtb	r2, r3
 801e43c:	78fb      	ldrb	r3, [r7, #3]
 801e43e:	2101      	movs	r1, #1
 801e440:	fa01 f303 	lsl.w	r3, r1, r3
 801e444:	b25b      	sxtb	r3, r3
 801e446:	43db      	mvns	r3, r3
 801e448:	b25b      	sxtb	r3, r3
 801e44a:	4013      	ands	r3, r2
 801e44c:	b25b      	sxtb	r3, r3
 801e44e:	b2da      	uxtb	r2, r3
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	701a      	strb	r2, [r3, #0]
}
 801e454:	bf00      	nop
 801e456:	370c      	adds	r7, #12
 801e458:	46bd      	mov	sp, r7
 801e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e45e:	4770      	bx	lr

0801e460 <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801e460:	b480      	push	{r7}
 801e462:	b083      	sub	sp, #12
 801e464:	af00      	add	r7, sp, #0
 801e466:	6078      	str	r0, [r7, #4]
 801e468:	460b      	mov	r3, r1
 801e46a:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	781b      	ldrb	r3, [r3, #0]
 801e470:	461a      	mov	r2, r3
 801e472:	78fb      	ldrb	r3, [r7, #3]
 801e474:	fa42 f303 	asr.w	r3, r2, r3
 801e478:	b2db      	uxtb	r3, r3
 801e47a:	f003 0301 	and.w	r3, r3, #1
 801e47e:	b2db      	uxtb	r3, r3
}
 801e480:	4618      	mov	r0, r3
 801e482:	370c      	adds	r7, #12
 801e484:	46bd      	mov	sp, r7
 801e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48a:	4770      	bx	lr

0801e48c <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801e48c:	b590      	push	{r4, r7, lr}
 801e48e:	b083      	sub	sp, #12
 801e490:	af00      	add	r7, sp, #0
 801e492:	4604      	mov	r4, r0
 801e494:	4608      	mov	r0, r1
 801e496:	4611      	mov	r1, r2
 801e498:	461a      	mov	r2, r3
 801e49a:	4623      	mov	r3, r4
 801e49c:	80fb      	strh	r3, [r7, #6]
 801e49e:	4603      	mov	r3, r0
 801e4a0:	80bb      	strh	r3, [r7, #4]
 801e4a2:	460b      	mov	r3, r1
 801e4a4:	807b      	strh	r3, [r7, #2]
 801e4a6:	4613      	mov	r3, r2
 801e4a8:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801e4aa:	2015      	movs	r0, #21
 801e4ac:	f7ff ff84 	bl	801e3b8 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801e4b0:	88fb      	ldrh	r3, [r7, #6]
 801e4b2:	b2db      	uxtb	r3, r3
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f7ff ff7f 	bl	801e3b8 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801e4ba:	887b      	ldrh	r3, [r7, #2]
 801e4bc:	b2db      	uxtb	r3, r3
 801e4be:	4618      	mov	r0, r3
 801e4c0:	f7ff ff7a 	bl	801e3b8 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801e4c4:	2075      	movs	r0, #117	; 0x75
 801e4c6:	f7ff ff77 	bl	801e3b8 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801e4ca:	88bb      	ldrh	r3, [r7, #4]
 801e4cc:	b2db      	uxtb	r3, r3
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f7ff ff72 	bl	801e3b8 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801e4d4:	883b      	ldrh	r3, [r7, #0]
 801e4d6:	b2db      	uxtb	r3, r3
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f7ff ff6d 	bl	801e3b8 <ssd1362_writeCmd>
}
 801e4de:	bf00      	nop
 801e4e0:	370c      	adds	r7, #12
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	bd90      	pop	{r4, r7, pc}

0801e4e6 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801e4e6:	b480      	push	{r7}
 801e4e8:	b083      	sub	sp, #12
 801e4ea:	af00      	add	r7, sp, #0
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	460a      	mov	r2, r1
 801e4f0:	80fb      	strh	r3, [r7, #6]
 801e4f2:	4613      	mov	r3, r2
 801e4f4:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801e4f6:	88fb      	ldrh	r3, [r7, #6]
 801e4f8:	085b      	lsrs	r3, r3, #1
 801e4fa:	b29a      	uxth	r2, r3
 801e4fc:	88bb      	ldrh	r3, [r7, #4]
 801e4fe:	01db      	lsls	r3, r3, #7
 801e500:	b29b      	uxth	r3, r3
 801e502:	4413      	add	r3, r2
 801e504:	b29b      	uxth	r3, r3
}
 801e506:	4618      	mov	r0, r3
 801e508:	370c      	adds	r7, #12
 801e50a:	46bd      	mov	sp, r7
 801e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e510:	4770      	bx	lr
	...

0801e514 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801e514:	b590      	push	{r4, r7, lr}
 801e516:	b085      	sub	sp, #20
 801e518:	af00      	add	r7, sp, #0
 801e51a:	4603      	mov	r3, r0
 801e51c:	80fb      	strh	r3, [r7, #6]
 801e51e:	460b      	mov	r3, r1
 801e520:	80bb      	strh	r3, [r7, #4]
 801e522:	4613      	mov	r3, r2
 801e524:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801e526:	88ba      	ldrh	r2, [r7, #4]
 801e528:	88fb      	ldrh	r3, [r7, #6]
 801e52a:	4611      	mov	r1, r2
 801e52c:	4618      	mov	r0, r3
 801e52e:	f7ff ffda 	bl	801e4e6 <ssd1362_coordsToAddress>
 801e532:	4603      	mov	r3, r0
 801e534:	08db      	lsrs	r3, r3, #3
 801e536:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801e538:	89fb      	ldrh	r3, [r7, #14]
 801e53a:	4a0b      	ldr	r2, [pc, #44]	; (801e568 <ssd1362_setPixelChanged+0x54>)
 801e53c:	189c      	adds	r4, r3, r2
 801e53e:	88ba      	ldrh	r2, [r7, #4]
 801e540:	88fb      	ldrh	r3, [r7, #6]
 801e542:	4611      	mov	r1, r2
 801e544:	4618      	mov	r0, r3
 801e546:	f7ff ffce 	bl	801e4e6 <ssd1362_coordsToAddress>
 801e54a:	4603      	mov	r3, r0
 801e54c:	b2db      	uxtb	r3, r3
 801e54e:	f003 0307 	and.w	r3, r3, #7
 801e552:	b2db      	uxtb	r3, r3
 801e554:	78fa      	ldrb	r2, [r7, #3]
 801e556:	4619      	mov	r1, r3
 801e558:	4620      	mov	r0, r4
 801e55a:	f7ff ff53 	bl	801e404 <bitWrite>
}
 801e55e:	bf00      	nop
 801e560:	3714      	adds	r7, #20
 801e562:	46bd      	mov	sp, r7
 801e564:	bd90      	pop	{r4, r7, pc}
 801e566:	bf00      	nop
 801e568:	24008a44 	.word	0x24008a44

0801e56c <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801e56c:	b590      	push	{r4, r7, lr}
 801e56e:	b085      	sub	sp, #20
 801e570:	af00      	add	r7, sp, #0
 801e572:	4604      	mov	r4, r0
 801e574:	4608      	mov	r0, r1
 801e576:	4611      	mov	r1, r2
 801e578:	461a      	mov	r2, r3
 801e57a:	4623      	mov	r3, r4
 801e57c:	80fb      	strh	r3, [r7, #6]
 801e57e:	4603      	mov	r3, r0
 801e580:	80bb      	strh	r3, [r7, #4]
 801e582:	460b      	mov	r3, r1
 801e584:	70fb      	strb	r3, [r7, #3]
 801e586:	4613      	mov	r3, r2
 801e588:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801e58a:	88ba      	ldrh	r2, [r7, #4]
 801e58c:	88fb      	ldrh	r3, [r7, #6]
 801e58e:	4611      	mov	r1, r2
 801e590:	4618      	mov	r0, r3
 801e592:	f7ff ffa8 	bl	801e4e6 <ssd1362_coordsToAddress>
 801e596:	4603      	mov	r3, r0
 801e598:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801e59a:	88fb      	ldrh	r3, [r7, #6]
 801e59c:	f003 0301 	and.w	r3, r3, #1
 801e5a0:	b29b      	uxth	r3, r3
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d113      	bne.n	801e5ce <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801e5a6:	4a25      	ldr	r2, [pc, #148]	; (801e63c <ssd1362_drawPixel+0xd0>)
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	4413      	add	r3, r2
 801e5ac:	781b      	ldrb	r3, [r3, #0]
 801e5ae:	b25b      	sxtb	r3, r3
 801e5b0:	f003 030f 	and.w	r3, r3, #15
 801e5b4:	b25a      	sxtb	r2, r3
 801e5b6:	78fb      	ldrb	r3, [r7, #3]
 801e5b8:	011b      	lsls	r3, r3, #4
 801e5ba:	b25b      	sxtb	r3, r3
 801e5bc:	4313      	orrs	r3, r2
 801e5be:	b25b      	sxtb	r3, r3
 801e5c0:	b2d9      	uxtb	r1, r3
 801e5c2:	4a1e      	ldr	r2, [pc, #120]	; (801e63c <ssd1362_drawPixel+0xd0>)
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	4413      	add	r3, r2
 801e5c8:	460a      	mov	r2, r1
 801e5ca:	701a      	strb	r2, [r3, #0]
 801e5cc:	e011      	b.n	801e5f2 <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801e5ce:	4a1b      	ldr	r2, [pc, #108]	; (801e63c <ssd1362_drawPixel+0xd0>)
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	4413      	add	r3, r2
 801e5d4:	781b      	ldrb	r3, [r3, #0]
 801e5d6:	b25b      	sxtb	r3, r3
 801e5d8:	f023 030f 	bic.w	r3, r3, #15
 801e5dc:	b25a      	sxtb	r2, r3
 801e5de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e5e2:	4313      	orrs	r3, r2
 801e5e4:	b25b      	sxtb	r3, r3
 801e5e6:	b2d9      	uxtb	r1, r3
 801e5e8:	4a14      	ldr	r2, [pc, #80]	; (801e63c <ssd1362_drawPixel+0xd0>)
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	4413      	add	r3, r2
 801e5ee:	460a      	mov	r2, r1
 801e5f0:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801e5f2:	78bb      	ldrb	r3, [r7, #2]
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	d017      	beq.n	801e628 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801e5f8:	88fb      	ldrh	r3, [r7, #6]
 801e5fa:	085b      	lsrs	r3, r3, #1
 801e5fc:	b298      	uxth	r0, r3
 801e5fe:	88fb      	ldrh	r3, [r7, #6]
 801e600:	085b      	lsrs	r3, r3, #1
 801e602:	b29a      	uxth	r2, r3
 801e604:	88bb      	ldrh	r3, [r7, #4]
 801e606:	88b9      	ldrh	r1, [r7, #4]
 801e608:	f7ff ff40 	bl	801e48c <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801e60c:	4a0b      	ldr	r2, [pc, #44]	; (801e63c <ssd1362_drawPixel+0xd0>)
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	4413      	add	r3, r2
 801e612:	781b      	ldrb	r3, [r3, #0]
 801e614:	4618      	mov	r0, r3
 801e616:	f7ff fee1 	bl	801e3dc <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801e61a:	88b9      	ldrh	r1, [r7, #4]
 801e61c:	88fb      	ldrh	r3, [r7, #6]
 801e61e:	2200      	movs	r2, #0
 801e620:	4618      	mov	r0, r3
 801e622:	f7ff ff77 	bl	801e514 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801e626:	e005      	b.n	801e634 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801e628:	88b9      	ldrh	r1, [r7, #4]
 801e62a:	88fb      	ldrh	r3, [r7, #6]
 801e62c:	2201      	movs	r2, #1
 801e62e:	4618      	mov	r0, r3
 801e630:	f7ff ff70 	bl	801e514 <ssd1362_setPixelChanged>
}
 801e634:	bf00      	nop
 801e636:	3714      	adds	r7, #20
 801e638:	46bd      	mov	sp, r7
 801e63a:	bd90      	pop	{r4, r7, pc}
 801e63c:	24009244 	.word	0x24009244

0801e640 <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801e640:	b590      	push	{r4, r7, lr}
 801e642:	b087      	sub	sp, #28
 801e644:	af00      	add	r7, sp, #0
 801e646:	4604      	mov	r4, r0
 801e648:	4608      	mov	r0, r1
 801e64a:	4611      	mov	r1, r2
 801e64c:	461a      	mov	r2, r3
 801e64e:	4623      	mov	r3, r4
 801e650:	80fb      	strh	r3, [r7, #6]
 801e652:	4603      	mov	r3, r0
 801e654:	80bb      	strh	r3, [r7, #4]
 801e656:	460b      	mov	r3, r1
 801e658:	807b      	strh	r3, [r7, #2]
 801e65a:	4613      	mov	r3, r2
 801e65c:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801e65e:	887a      	ldrh	r2, [r7, #2]
 801e660:	88fb      	ldrh	r3, [r7, #6]
 801e662:	4293      	cmp	r3, r2
 801e664:	bf28      	it	cs
 801e666:	4613      	movcs	r3, r2
 801e668:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801e66a:	887a      	ldrh	r2, [r7, #2]
 801e66c:	88fb      	ldrh	r3, [r7, #6]
 801e66e:	4293      	cmp	r3, r2
 801e670:	bf38      	it	cc
 801e672:	4613      	movcc	r3, r2
 801e674:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801e676:	883a      	ldrh	r2, [r7, #0]
 801e678:	88bb      	ldrh	r3, [r7, #4]
 801e67a:	4293      	cmp	r3, r2
 801e67c:	bf28      	it	cs
 801e67e:	4613      	movcs	r3, r2
 801e680:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801e682:	883a      	ldrh	r2, [r7, #0]
 801e684:	88bb      	ldrh	r3, [r7, #4]
 801e686:	4293      	cmp	r3, r2
 801e688:	bf38      	it	cc
 801e68a:	4613      	movcc	r3, r2
 801e68c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801e68e:	8a7b      	ldrh	r3, [r7, #18]
 801e690:	82fb      	strh	r3, [r7, #22]
 801e692:	e014      	b.n	801e6be <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801e694:	89fb      	ldrh	r3, [r7, #14]
 801e696:	82bb      	strh	r3, [r7, #20]
 801e698:	e00a      	b.n	801e6b0 <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801e69a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e69e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e6a2:	8ab9      	ldrh	r1, [r7, #20]
 801e6a4:	8af8      	ldrh	r0, [r7, #22]
 801e6a6:	f7ff ff61 	bl	801e56c <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801e6aa:	8abb      	ldrh	r3, [r7, #20]
 801e6ac:	3301      	adds	r3, #1
 801e6ae:	82bb      	strh	r3, [r7, #20]
 801e6b0:	8aba      	ldrh	r2, [r7, #20]
 801e6b2:	89bb      	ldrh	r3, [r7, #12]
 801e6b4:	429a      	cmp	r2, r3
 801e6b6:	d3f0      	bcc.n	801e69a <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801e6b8:	8afb      	ldrh	r3, [r7, #22]
 801e6ba:	3301      	adds	r3, #1
 801e6bc:	82fb      	strh	r3, [r7, #22]
 801e6be:	8afa      	ldrh	r2, [r7, #22]
 801e6c0:	8a3b      	ldrh	r3, [r7, #16]
 801e6c2:	429a      	cmp	r2, r3
 801e6c4:	d3e6      	bcc.n	801e694 <ssd1362_drawRect+0x54>
		}
	}
}
 801e6c6:	bf00      	nop
 801e6c8:	bf00      	nop
 801e6ca:	371c      	adds	r7, #28
 801e6cc:	46bd      	mov	sp, r7
 801e6ce:	bd90      	pop	{r4, r7, pc}

0801e6d0 <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801e6d0:	b590      	push	{r4, r7, lr}
 801e6d2:	b085      	sub	sp, #20
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	4604      	mov	r4, r0
 801e6d8:	4608      	mov	r0, r1
 801e6da:	4611      	mov	r1, r2
 801e6dc:	461a      	mov	r2, r3
 801e6de:	4623      	mov	r3, r4
 801e6e0:	80fb      	strh	r3, [r7, #6]
 801e6e2:	4603      	mov	r3, r0
 801e6e4:	80bb      	strh	r3, [r7, #4]
 801e6e6:	460b      	mov	r3, r1
 801e6e8:	807b      	strh	r3, [r7, #2]
 801e6ea:	4613      	mov	r3, r2
 801e6ec:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801e6ee:	88fb      	ldrh	r3, [r7, #6]
 801e6f0:	60fb      	str	r3, [r7, #12]
 801e6f2:	e00a      	b.n	801e70a <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	b298      	uxth	r0, r3
 801e6f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e6fc:	787a      	ldrb	r2, [r7, #1]
 801e6fe:	88b9      	ldrh	r1, [r7, #4]
 801e700:	f7ff ff34 	bl	801e56c <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	3301      	adds	r3, #1
 801e708:	60fb      	str	r3, [r7, #12]
 801e70a:	88fa      	ldrh	r2, [r7, #6]
 801e70c:	887b      	ldrh	r3, [r7, #2]
 801e70e:	4413      	add	r3, r2
 801e710:	461a      	mov	r2, r3
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	4293      	cmp	r3, r2
 801e716:	d3ed      	bcc.n	801e6f4 <ssd1362_drawHLine+0x24>
	}
}
 801e718:	bf00      	nop
 801e71a:	bf00      	nop
 801e71c:	3714      	adds	r7, #20
 801e71e:	46bd      	mov	sp, r7
 801e720:	bd90      	pop	{r4, r7, pc}

0801e722 <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801e722:	b590      	push	{r4, r7, lr}
 801e724:	b085      	sub	sp, #20
 801e726:	af00      	add	r7, sp, #0
 801e728:	4604      	mov	r4, r0
 801e72a:	4608      	mov	r0, r1
 801e72c:	4611      	mov	r1, r2
 801e72e:	461a      	mov	r2, r3
 801e730:	4623      	mov	r3, r4
 801e732:	80fb      	strh	r3, [r7, #6]
 801e734:	4603      	mov	r3, r0
 801e736:	80bb      	strh	r3, [r7, #4]
 801e738:	460b      	mov	r3, r1
 801e73a:	807b      	strh	r3, [r7, #2]
 801e73c:	4613      	mov	r3, r2
 801e73e:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801e740:	88bb      	ldrh	r3, [r7, #4]
 801e742:	60fb      	str	r3, [r7, #12]
 801e744:	e00a      	b.n	801e75c <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	b299      	uxth	r1, r3
 801e74a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e74e:	787a      	ldrb	r2, [r7, #1]
 801e750:	88f8      	ldrh	r0, [r7, #6]
 801e752:	f7ff ff0b 	bl	801e56c <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	3301      	adds	r3, #1
 801e75a:	60fb      	str	r3, [r7, #12]
 801e75c:	88ba      	ldrh	r2, [r7, #4]
 801e75e:	887b      	ldrh	r3, [r7, #2]
 801e760:	4413      	add	r3, r2
 801e762:	461a      	mov	r2, r3
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	4293      	cmp	r3, r2
 801e768:	d3ed      	bcc.n	801e746 <ssd1362_drawVLine+0x24>
	}
}
 801e76a:	bf00      	nop
 801e76c:	bf00      	nop
 801e76e:	3714      	adds	r7, #20
 801e770:	46bd      	mov	sp, r7
 801e772:	bd90      	pop	{r4, r7, pc}

0801e774 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801e774:	b590      	push	{r4, r7, lr}
 801e776:	b085      	sub	sp, #20
 801e778:	af00      	add	r7, sp, #0
 801e77a:	4604      	mov	r4, r0
 801e77c:	4608      	mov	r0, r1
 801e77e:	4611      	mov	r1, r2
 801e780:	461a      	mov	r2, r3
 801e782:	4623      	mov	r3, r4
 801e784:	80fb      	strh	r3, [r7, #6]
 801e786:	4603      	mov	r3, r0
 801e788:	80bb      	strh	r3, [r7, #4]
 801e78a:	460b      	mov	r3, r1
 801e78c:	70fb      	strb	r3, [r7, #3]
 801e78e:	4613      	mov	r3, r2
 801e790:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801e792:	2300      	movs	r3, #0
 801e794:	60fb      	str	r3, [r7, #12]
 801e796:	e016      	b.n	801e7c6 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	b2da      	uxtb	r2, r3
 801e79c:	1cfb      	adds	r3, r7, #3
 801e79e:	4611      	mov	r1, r2
 801e7a0:	4618      	mov	r0, r3
 801e7a2:	f7ff fe5d 	bl	801e460 <bitRead>
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d009      	beq.n	801e7c0 <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801e7ac:	68fb      	ldr	r3, [r7, #12]
 801e7ae:	b29a      	uxth	r2, r3
 801e7b0:	88fb      	ldrh	r3, [r7, #6]
 801e7b2:	4413      	add	r3, r2
 801e7b4:	b298      	uxth	r0, r3
 801e7b6:	78ba      	ldrb	r2, [r7, #2]
 801e7b8:	88b9      	ldrh	r1, [r7, #4]
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	f7ff fed6 	bl	801e56c <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	3301      	adds	r3, #1
 801e7c4:	60fb      	str	r3, [r7, #12]
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	2b07      	cmp	r3, #7
 801e7ca:	d9e5      	bls.n	801e798 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801e7cc:	bf00      	nop
 801e7ce:	bf00      	nop
 801e7d0:	3714      	adds	r7, #20
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	bd90      	pop	{r4, r7, pc}
	...

0801e7d8 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801e7d8:	b590      	push	{r4, r7, lr}
 801e7da:	b085      	sub	sp, #20
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	4604      	mov	r4, r0
 801e7e0:	4608      	mov	r0, r1
 801e7e2:	4611      	mov	r1, r2
 801e7e4:	461a      	mov	r2, r3
 801e7e6:	4623      	mov	r3, r4
 801e7e8:	80fb      	strh	r3, [r7, #6]
 801e7ea:	4603      	mov	r3, r0
 801e7ec:	80bb      	strh	r3, [r7, #4]
 801e7ee:	460b      	mov	r3, r1
 801e7f0:	70fb      	strb	r3, [r7, #3]
 801e7f2:	4613      	mov	r3, r2
 801e7f4:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	60fb      	str	r3, [r7, #12]
 801e7fa:	e012      	b.n	801e822 <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	b29a      	uxth	r2, r3
 801e800:	88bb      	ldrh	r3, [r7, #4]
 801e802:	4413      	add	r3, r2
 801e804:	b299      	uxth	r1, r3
 801e806:	78fb      	ldrb	r3, [r7, #3]
 801e808:	4a0a      	ldr	r2, [pc, #40]	; (801e834 <ssd1362_drawChar+0x5c>)
 801e80a:	00db      	lsls	r3, r3, #3
 801e80c:	441a      	add	r2, r3
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	4413      	add	r3, r2
 801e812:	781a      	ldrb	r2, [r3, #0]
 801e814:	78bb      	ldrb	r3, [r7, #2]
 801e816:	88f8      	ldrh	r0, [r7, #6]
 801e818:	f7ff ffac 	bl	801e774 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	3301      	adds	r3, #1
 801e820:	60fb      	str	r3, [r7, #12]
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	2b07      	cmp	r3, #7
 801e826:	d9e9      	bls.n	801e7fc <ssd1362_drawChar+0x24>
	}
}
 801e828:	bf00      	nop
 801e82a:	bf00      	nop
 801e82c:	3714      	adds	r7, #20
 801e82e:	46bd      	mov	sp, r7
 801e830:	bd90      	pop	{r4, r7, pc}
 801e832:	bf00      	nop
 801e834:	24003048 	.word	0x24003048

0801e838 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801e838:	b580      	push	{r7, lr}
 801e83a:	b086      	sub	sp, #24
 801e83c:	af00      	add	r7, sp, #0
 801e83e:	60ba      	str	r2, [r7, #8]
 801e840:	461a      	mov	r2, r3
 801e842:	4603      	mov	r3, r0
 801e844:	81fb      	strh	r3, [r7, #14]
 801e846:	460b      	mov	r3, r1
 801e848:	81bb      	strh	r3, [r7, #12]
 801e84a:	4613      	mov	r3, r2
 801e84c:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801e84e:	2300      	movs	r3, #0
 801e850:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801e852:	6a3b      	ldr	r3, [r7, #32]
 801e854:	2b10      	cmp	r3, #16
 801e856:	d11a      	bne.n	801e88e <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e858:	68bb      	ldr	r3, [r7, #8]
 801e85a:	617b      	str	r3, [r7, #20]
 801e85c:	e011      	b.n	801e882 <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801e85e:	89fa      	ldrh	r2, [r7, #14]
 801e860:	8a7b      	ldrh	r3, [r7, #18]
 801e862:	4413      	add	r3, r2
 801e864:	b298      	uxth	r0, r3
 801e866:	697b      	ldr	r3, [r7, #20]
 801e868:	f993 3000 	ldrsb.w	r3, [r3]
 801e86c:	b2da      	uxtb	r2, r3
 801e86e:	79fb      	ldrb	r3, [r7, #7]
 801e870:	89b9      	ldrh	r1, [r7, #12]
 801e872:	f000 f861 	bl	801e938 <ssd1362_drawChar16>
			xOffset += 8;
 801e876:	8a7b      	ldrh	r3, [r7, #18]
 801e878:	3308      	adds	r3, #8
 801e87a:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e87c:	697b      	ldr	r3, [r7, #20]
 801e87e:	3301      	adds	r3, #1
 801e880:	617b      	str	r3, [r7, #20]
 801e882:	697b      	ldr	r3, [r7, #20]
 801e884:	f993 3000 	ldrsb.w	r3, [r3]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d1e8      	bne.n	801e85e <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801e88c:	e037      	b.n	801e8fe <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801e88e:	6a3b      	ldr	r3, [r7, #32]
 801e890:	2b20      	cmp	r3, #32
 801e892:	d11a      	bne.n	801e8ca <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e894:	68bb      	ldr	r3, [r7, #8]
 801e896:	617b      	str	r3, [r7, #20]
 801e898:	e011      	b.n	801e8be <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801e89a:	89fa      	ldrh	r2, [r7, #14]
 801e89c:	8a7b      	ldrh	r3, [r7, #18]
 801e89e:	4413      	add	r3, r2
 801e8a0:	b298      	uxth	r0, r3
 801e8a2:	697b      	ldr	r3, [r7, #20]
 801e8a4:	f993 3000 	ldrsb.w	r3, [r3]
 801e8a8:	b2da      	uxtb	r2, r3
 801e8aa:	79fb      	ldrb	r3, [r7, #7]
 801e8ac:	89b9      	ldrh	r1, [r7, #12]
 801e8ae:	f000 f887 	bl	801e9c0 <ssd1362_drawChar32>
			xOffset += 16;
 801e8b2:	8a7b      	ldrh	r3, [r7, #18]
 801e8b4:	3310      	adds	r3, #16
 801e8b6:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e8b8:	697b      	ldr	r3, [r7, #20]
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	617b      	str	r3, [r7, #20]
 801e8be:	697b      	ldr	r3, [r7, #20]
 801e8c0:	f993 3000 	ldrsb.w	r3, [r3]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d1e8      	bne.n	801e89a <ssd1362_drawCharArray+0x62>
}
 801e8c8:	e019      	b.n	801e8fe <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e8ca:	68bb      	ldr	r3, [r7, #8]
 801e8cc:	617b      	str	r3, [r7, #20]
 801e8ce:	e011      	b.n	801e8f4 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801e8d0:	89fa      	ldrh	r2, [r7, #14]
 801e8d2:	8a7b      	ldrh	r3, [r7, #18]
 801e8d4:	4413      	add	r3, r2
 801e8d6:	b298      	uxth	r0, r3
 801e8d8:	697b      	ldr	r3, [r7, #20]
 801e8da:	f993 3000 	ldrsb.w	r3, [r3]
 801e8de:	b2da      	uxtb	r2, r3
 801e8e0:	79fb      	ldrb	r3, [r7, #7]
 801e8e2:	89b9      	ldrh	r1, [r7, #12]
 801e8e4:	f7ff ff78 	bl	801e7d8 <ssd1362_drawChar>
			xOffset += 8;
 801e8e8:	8a7b      	ldrh	r3, [r7, #18]
 801e8ea:	3308      	adds	r3, #8
 801e8ec:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801e8ee:	697b      	ldr	r3, [r7, #20]
 801e8f0:	3301      	adds	r3, #1
 801e8f2:	617b      	str	r3, [r7, #20]
 801e8f4:	697b      	ldr	r3, [r7, #20]
 801e8f6:	f993 3000 	ldrsb.w	r3, [r3]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d1e8      	bne.n	801e8d0 <ssd1362_drawCharArray+0x98>
}
 801e8fe:	bf00      	nop
 801e900:	3718      	adds	r7, #24
 801e902:	46bd      	mov	sp, r7
 801e904:	bd80      	pop	{r7, pc}

0801e906 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801e906:	b580      	push	{r7, lr}
 801e908:	b086      	sub	sp, #24
 801e90a:	af02      	add	r7, sp, #8
 801e90c:	60ba      	str	r2, [r7, #8]
 801e90e:	461a      	mov	r2, r3
 801e910:	4603      	mov	r3, r0
 801e912:	81fb      	strh	r3, [r7, #14]
 801e914:	460b      	mov	r3, r1
 801e916:	81bb      	strh	r3, [r7, #12]
 801e918:	4613      	mov	r3, r2
 801e91a:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801e91c:	79fa      	ldrb	r2, [r7, #7]
 801e91e:	89b9      	ldrh	r1, [r7, #12]
 801e920:	89f8      	ldrh	r0, [r7, #14]
 801e922:	69bb      	ldr	r3, [r7, #24]
 801e924:	9300      	str	r3, [sp, #0]
 801e926:	4613      	mov	r3, r2
 801e928:	68ba      	ldr	r2, [r7, #8]
 801e92a:	f7ff ff85 	bl	801e838 <ssd1362_drawCharArray>
}
 801e92e:	bf00      	nop
 801e930:	3710      	adds	r7, #16
 801e932:	46bd      	mov	sp, r7
 801e934:	bd80      	pop	{r7, pc}
	...

0801e938 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801e938:	b590      	push	{r4, r7, lr}
 801e93a:	b085      	sub	sp, #20
 801e93c:	af00      	add	r7, sp, #0
 801e93e:	4604      	mov	r4, r0
 801e940:	4608      	mov	r0, r1
 801e942:	4611      	mov	r1, r2
 801e944:	461a      	mov	r2, r3
 801e946:	4623      	mov	r3, r4
 801e948:	80fb      	strh	r3, [r7, #6]
 801e94a:	4603      	mov	r3, r0
 801e94c:	80bb      	strh	r3, [r7, #4]
 801e94e:	460b      	mov	r3, r1
 801e950:	70fb      	strb	r3, [r7, #3]
 801e952:	4613      	mov	r3, r2
 801e954:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801e956:	2300      	movs	r3, #0
 801e958:	60fb      	str	r3, [r7, #12]
 801e95a:	e027      	b.n	801e9ac <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	b29a      	uxth	r2, r3
 801e960:	88bb      	ldrh	r3, [r7, #4]
 801e962:	4413      	add	r3, r2
 801e964:	b299      	uxth	r1, r3
 801e966:	78fa      	ldrb	r2, [r7, #3]
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	005b      	lsls	r3, r3, #1
 801e96c:	4813      	ldr	r0, [pc, #76]	; (801e9bc <ssd1362_drawChar16+0x84>)
 801e96e:	0152      	lsls	r2, r2, #5
 801e970:	4402      	add	r2, r0
 801e972:	4413      	add	r3, r2
 801e974:	781a      	ldrb	r2, [r3, #0]
 801e976:	78bb      	ldrb	r3, [r7, #2]
 801e978:	88f8      	ldrh	r0, [r7, #6]
 801e97a:	f7ff fefb 	bl	801e774 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801e97e:	88fb      	ldrh	r3, [r7, #6]
 801e980:	3308      	adds	r3, #8
 801e982:	b298      	uxth	r0, r3
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	b29a      	uxth	r2, r3
 801e988:	88bb      	ldrh	r3, [r7, #4]
 801e98a:	4413      	add	r3, r2
 801e98c:	b299      	uxth	r1, r3
 801e98e:	78fa      	ldrb	r2, [r7, #3]
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	005b      	lsls	r3, r3, #1
 801e994:	3301      	adds	r3, #1
 801e996:	4c09      	ldr	r4, [pc, #36]	; (801e9bc <ssd1362_drawChar16+0x84>)
 801e998:	0152      	lsls	r2, r2, #5
 801e99a:	4422      	add	r2, r4
 801e99c:	4413      	add	r3, r2
 801e99e:	781a      	ldrb	r2, [r3, #0]
 801e9a0:	78bb      	ldrb	r3, [r7, #2]
 801e9a2:	f7ff fee7 	bl	801e774 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801e9a6:	68fb      	ldr	r3, [r7, #12]
 801e9a8:	3301      	adds	r3, #1
 801e9aa:	60fb      	str	r3, [r7, #12]
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	2b0f      	cmp	r3, #15
 801e9b0:	d9d4      	bls.n	801e95c <ssd1362_drawChar16+0x24>
	}
}
 801e9b2:	bf00      	nop
 801e9b4:	bf00      	nop
 801e9b6:	3714      	adds	r7, #20
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd90      	pop	{r4, r7, pc}
 801e9bc:	24000048 	.word	0x24000048

0801e9c0 <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801e9c0:	b590      	push	{r4, r7, lr}
 801e9c2:	b085      	sub	sp, #20
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	4608      	mov	r0, r1
 801e9ca:	4611      	mov	r1, r2
 801e9cc:	461a      	mov	r2, r3
 801e9ce:	4623      	mov	r3, r4
 801e9d0:	80fb      	strh	r3, [r7, #6]
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	80bb      	strh	r3, [r7, #4]
 801e9d6:	460b      	mov	r3, r1
 801e9d8:	70fb      	strb	r3, [r7, #3]
 801e9da:	4613      	mov	r3, r2
 801e9dc:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801e9de:	2300      	movs	r3, #0
 801e9e0:	60fb      	str	r3, [r7, #12]
 801e9e2:	e027      	b.n	801ea34 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	b29a      	uxth	r2, r3
 801e9e8:	88bb      	ldrh	r3, [r7, #4]
 801e9ea:	4413      	add	r3, r2
 801e9ec:	b299      	uxth	r1, r3
 801e9ee:	78fa      	ldrb	r2, [r7, #3]
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	005b      	lsls	r3, r3, #1
 801e9f4:	4813      	ldr	r0, [pc, #76]	; (801ea44 <ssd1362_drawChar32+0x84>)
 801e9f6:	0192      	lsls	r2, r2, #6
 801e9f8:	4402      	add	r2, r0
 801e9fa:	4413      	add	r3, r2
 801e9fc:	781a      	ldrb	r2, [r3, #0]
 801e9fe:	78bb      	ldrb	r3, [r7, #2]
 801ea00:	88f8      	ldrh	r0, [r7, #6]
 801ea02:	f7ff feb7 	bl	801e774 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801ea06:	88fb      	ldrh	r3, [r7, #6]
 801ea08:	3308      	adds	r3, #8
 801ea0a:	b298      	uxth	r0, r3
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	b29a      	uxth	r2, r3
 801ea10:	88bb      	ldrh	r3, [r7, #4]
 801ea12:	4413      	add	r3, r2
 801ea14:	b299      	uxth	r1, r3
 801ea16:	78fa      	ldrb	r2, [r7, #3]
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	005b      	lsls	r3, r3, #1
 801ea1c:	3301      	adds	r3, #1
 801ea1e:	4c09      	ldr	r4, [pc, #36]	; (801ea44 <ssd1362_drawChar32+0x84>)
 801ea20:	0192      	lsls	r2, r2, #6
 801ea22:	4422      	add	r2, r4
 801ea24:	4413      	add	r3, r2
 801ea26:	781a      	ldrb	r2, [r3, #0]
 801ea28:	78bb      	ldrb	r3, [r7, #2]
 801ea2a:	f7ff fea3 	bl	801e774 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	3301      	adds	r3, #1
 801ea32:	60fb      	str	r3, [r7, #12]
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	2b1f      	cmp	r3, #31
 801ea38:	d9d4      	bls.n	801e9e4 <ssd1362_drawChar32+0x24>
	}
}
 801ea3a:	bf00      	nop
 801ea3c:	bf00      	nop
 801ea3e:	3714      	adds	r7, #20
 801ea40:	46bd      	mov	sp, r7
 801ea42:	bd90      	pop	{r4, r7, pc}
 801ea44:	24001048 	.word	0x24001048

0801ea48 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801ea48:	b580      	push	{r7, lr}
 801ea4a:	b082      	sub	sp, #8
 801ea4c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801ea4e:	2300      	movs	r3, #0
 801ea50:	607b      	str	r3, [r7, #4]
 801ea52:	e01a      	b.n	801ea8a <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801ea54:	4a11      	ldr	r2, [pc, #68]	; (801ea9c <ssd1362_clearBuffer+0x54>)
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	4413      	add	r3, r2
 801ea5a:	781b      	ldrb	r3, [r3, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d011      	beq.n	801ea84 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801ea60:	4a0e      	ldr	r2, [pc, #56]	; (801ea9c <ssd1362_clearBuffer+0x54>)
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	4413      	add	r3, r2
 801ea66:	2200      	movs	r2, #0
 801ea68:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	08db      	lsrs	r3, r3, #3
 801ea6e:	4a0c      	ldr	r2, [pc, #48]	; (801eaa0 <ssd1362_clearBuffer+0x58>)
 801ea70:	1898      	adds	r0, r3, r2
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	b2db      	uxtb	r3, r3
 801ea76:	f003 0307 	and.w	r3, r3, #7
 801ea7a:	b2db      	uxtb	r3, r3
 801ea7c:	2201      	movs	r2, #1
 801ea7e:	4619      	mov	r1, r3
 801ea80:	f7ff fcc0 	bl	801e404 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	3301      	adds	r3, #1
 801ea88:	607b      	str	r3, [r7, #4]
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ea90:	d3e0      	bcc.n	801ea54 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801ea92:	bf00      	nop
 801ea94:	bf00      	nop
 801ea96:	3708      	adds	r7, #8
 801ea98:	46bd      	mov	sp, r7
 801ea9a:	bd80      	pop	{r7, pc}
 801ea9c:	24009244 	.word	0x24009244
 801eaa0:	24008a44 	.word	0x24008a44

0801eaa4 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b082      	sub	sp, #8
 801eaa8:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801eaaa:	233f      	movs	r3, #63	; 0x3f
 801eaac:	227f      	movs	r2, #127	; 0x7f
 801eaae:	2100      	movs	r1, #0
 801eab0:	2000      	movs	r0, #0
 801eab2:	f7ff fceb 	bl	801e48c <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801eab6:	2300      	movs	r3, #0
 801eab8:	607b      	str	r3, [r7, #4]
 801eaba:	e009      	b.n	801ead0 <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801eabc:	4a10      	ldr	r2, [pc, #64]	; (801eb00 <ssd1362_writeFullBuffer+0x5c>)
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	4413      	add	r3, r2
 801eac2:	781b      	ldrb	r3, [r3, #0]
 801eac4:	4618      	mov	r0, r3
 801eac6:	f7ff fc89 	bl	801e3dc <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	3301      	adds	r3, #1
 801eace:	607b      	str	r3, [r7, #4]
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ead6:	d3f1      	bcc.n	801eabc <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801ead8:	2300      	movs	r3, #0
 801eada:	603b      	str	r3, [r7, #0]
 801eadc:	e007      	b.n	801eaee <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801eade:	4a09      	ldr	r2, [pc, #36]	; (801eb04 <ssd1362_writeFullBuffer+0x60>)
 801eae0:	683b      	ldr	r3, [r7, #0]
 801eae2:	4413      	add	r3, r2
 801eae4:	2200      	movs	r2, #0
 801eae6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801eae8:	683b      	ldr	r3, [r7, #0]
 801eaea:	3301      	adds	r3, #1
 801eaec:	603b      	str	r3, [r7, #0]
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eaf4:	d3f3      	bcc.n	801eade <ssd1362_writeFullBuffer+0x3a>
	}
}
 801eaf6:	bf00      	nop
 801eaf8:	bf00      	nop
 801eafa:	3708      	adds	r7, #8
 801eafc:	46bd      	mov	sp, r7
 801eafe:	bd80      	pop	{r7, pc}
 801eb00:	24009244 	.word	0x24009244
 801eb04:	24008a44 	.word	0x24008a44

0801eb08 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801eb08:	b580      	push	{r7, lr}
 801eb0a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 801eb0c:	f7ff fc3c 	bl	801e388 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801eb10:	2064      	movs	r0, #100	; 0x64
 801eb12:	f7e5 fc09 	bl	8004328 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801eb16:	20fd      	movs	r0, #253	; 0xfd
 801eb18:	f7ff fc4e 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801eb1c:	2012      	movs	r0, #18
 801eb1e:	f7ff fc4b 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801eb22:	20ae      	movs	r0, #174	; 0xae
 801eb24:	f7ff fc48 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801eb28:	2015      	movs	r0, #21
 801eb2a:	f7ff fc45 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801eb2e:	2000      	movs	r0, #0
 801eb30:	f7ff fc42 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801eb34:	207f      	movs	r0, #127	; 0x7f
 801eb36:	f7ff fc3f 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801eb3a:	2075      	movs	r0, #117	; 0x75
 801eb3c:	f7ff fc3c 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801eb40:	2000      	movs	r0, #0
 801eb42:	f7ff fc39 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801eb46:	203f      	movs	r0, #63	; 0x3f
 801eb48:	f7ff fc36 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801eb4c:	2081      	movs	r0, #129	; 0x81
 801eb4e:	f7ff fc33 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801eb52:	202f      	movs	r0, #47	; 0x2f
 801eb54:	f7ff fc30 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801eb58:	20a0      	movs	r0, #160	; 0xa0
 801eb5a:	f7ff fc2d 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801eb5e:	20c3      	movs	r0, #195	; 0xc3
 801eb60:	f7ff fc2a 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801eb64:	20a1      	movs	r0, #161	; 0xa1
 801eb66:	f7ff fc27 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801eb6a:	2000      	movs	r0, #0
 801eb6c:	f7ff fc24 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801eb70:	20a2      	movs	r0, #162	; 0xa2
 801eb72:	f7ff fc21 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801eb76:	2000      	movs	r0, #0
 801eb78:	f7ff fc1e 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801eb7c:	20a4      	movs	r0, #164	; 0xa4
 801eb7e:	f7ff fc1b 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801eb82:	20a8      	movs	r0, #168	; 0xa8
 801eb84:	f7ff fc18 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801eb88:	203f      	movs	r0, #63	; 0x3f
 801eb8a:	f7ff fc15 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801eb8e:	20ab      	movs	r0, #171	; 0xab
 801eb90:	f7ff fc12 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801eb94:	2001      	movs	r0, #1
 801eb96:	f7ff fc0f 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801eb9a:	20ad      	movs	r0, #173	; 0xad
 801eb9c:	f7ff fc0c 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801eba0:	208e      	movs	r0, #142	; 0x8e
 801eba2:	f7ff fc09 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801eba6:	20b1      	movs	r0, #177	; 0xb1
 801eba8:	f7ff fc06 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801ebac:	2022      	movs	r0, #34	; 0x22
 801ebae:	f7ff fc03 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801ebb2:	20b3      	movs	r0, #179	; 0xb3
 801ebb4:	f7ff fc00 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801ebb8:	20a0      	movs	r0, #160	; 0xa0
 801ebba:	f7ff fbfd 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801ebbe:	20b6      	movs	r0, #182	; 0xb6
 801ebc0:	f7ff fbfa 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801ebc4:	2004      	movs	r0, #4
 801ebc6:	f7ff fbf7 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801ebca:	20b9      	movs	r0, #185	; 0xb9
 801ebcc:	f7ff fbf4 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801ebd0:	20bc      	movs	r0, #188	; 0xbc
 801ebd2:	f7ff fbf1 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801ebd6:	2010      	movs	r0, #16
 801ebd8:	f7ff fbee 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801ebdc:	20bd      	movs	r0, #189	; 0xbd
 801ebde:	f7ff fbeb 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801ebe2:	2001      	movs	r0, #1
 801ebe4:	f7ff fbe8 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801ebe8:	20be      	movs	r0, #190	; 0xbe
 801ebea:	f7ff fbe5 	bl	801e3b8 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801ebee:	2007      	movs	r0, #7
 801ebf0:	f7ff fbe2 	bl	801e3b8 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801ebf4:	20af      	movs	r0, #175	; 0xaf
 801ebf6:	f7ff fbdf 	bl	801e3b8 <ssd1362_writeCmd>
}
 801ebfa:	bf00      	nop
 801ebfc:	bd80      	pop	{r7, pc}
	...

0801ec00 <__libc_init_array>:
 801ec00:	b570      	push	{r4, r5, r6, lr}
 801ec02:	4d0d      	ldr	r5, [pc, #52]	; (801ec38 <__libc_init_array+0x38>)
 801ec04:	4c0d      	ldr	r4, [pc, #52]	; (801ec3c <__libc_init_array+0x3c>)
 801ec06:	1b64      	subs	r4, r4, r5
 801ec08:	10a4      	asrs	r4, r4, #2
 801ec0a:	2600      	movs	r6, #0
 801ec0c:	42a6      	cmp	r6, r4
 801ec0e:	d109      	bne.n	801ec24 <__libc_init_array+0x24>
 801ec10:	4d0b      	ldr	r5, [pc, #44]	; (801ec40 <__libc_init_array+0x40>)
 801ec12:	4c0c      	ldr	r4, [pc, #48]	; (801ec44 <__libc_init_array+0x44>)
 801ec14:	f005 fdca 	bl	80247ac <_init>
 801ec18:	1b64      	subs	r4, r4, r5
 801ec1a:	10a4      	asrs	r4, r4, #2
 801ec1c:	2600      	movs	r6, #0
 801ec1e:	42a6      	cmp	r6, r4
 801ec20:	d105      	bne.n	801ec2e <__libc_init_array+0x2e>
 801ec22:	bd70      	pop	{r4, r5, r6, pc}
 801ec24:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec28:	4798      	blx	r3
 801ec2a:	3601      	adds	r6, #1
 801ec2c:	e7ee      	b.n	801ec0c <__libc_init_array+0xc>
 801ec2e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec32:	4798      	blx	r3
 801ec34:	3601      	adds	r6, #1
 801ec36:	e7f2      	b.n	801ec1e <__libc_init_array+0x1e>
 801ec38:	08029d90 	.word	0x08029d90
 801ec3c:	08029d90 	.word	0x08029d90
 801ec40:	08029d90 	.word	0x08029d90
 801ec44:	08029d94 	.word	0x08029d94

0801ec48 <malloc>:
 801ec48:	4b02      	ldr	r3, [pc, #8]	; (801ec54 <malloc+0xc>)
 801ec4a:	4601      	mov	r1, r0
 801ec4c:	6818      	ldr	r0, [r3, #0]
 801ec4e:	f000 b891 	b.w	801ed74 <_malloc_r>
 801ec52:	bf00      	nop
 801ec54:	24003448 	.word	0x24003448

0801ec58 <memcmp>:
 801ec58:	b530      	push	{r4, r5, lr}
 801ec5a:	3901      	subs	r1, #1
 801ec5c:	2400      	movs	r4, #0
 801ec5e:	42a2      	cmp	r2, r4
 801ec60:	d101      	bne.n	801ec66 <memcmp+0xe>
 801ec62:	2000      	movs	r0, #0
 801ec64:	e005      	b.n	801ec72 <memcmp+0x1a>
 801ec66:	5d03      	ldrb	r3, [r0, r4]
 801ec68:	3401      	adds	r4, #1
 801ec6a:	5d0d      	ldrb	r5, [r1, r4]
 801ec6c:	42ab      	cmp	r3, r5
 801ec6e:	d0f6      	beq.n	801ec5e <memcmp+0x6>
 801ec70:	1b58      	subs	r0, r3, r5
 801ec72:	bd30      	pop	{r4, r5, pc}

0801ec74 <memcpy>:
 801ec74:	440a      	add	r2, r1
 801ec76:	4291      	cmp	r1, r2
 801ec78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ec7c:	d100      	bne.n	801ec80 <memcpy+0xc>
 801ec7e:	4770      	bx	lr
 801ec80:	b510      	push	{r4, lr}
 801ec82:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec86:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec8a:	4291      	cmp	r1, r2
 801ec8c:	d1f9      	bne.n	801ec82 <memcpy+0xe>
 801ec8e:	bd10      	pop	{r4, pc}

0801ec90 <memmove>:
 801ec90:	4288      	cmp	r0, r1
 801ec92:	b510      	push	{r4, lr}
 801ec94:	eb01 0402 	add.w	r4, r1, r2
 801ec98:	d902      	bls.n	801eca0 <memmove+0x10>
 801ec9a:	4284      	cmp	r4, r0
 801ec9c:	4623      	mov	r3, r4
 801ec9e:	d807      	bhi.n	801ecb0 <memmove+0x20>
 801eca0:	1e43      	subs	r3, r0, #1
 801eca2:	42a1      	cmp	r1, r4
 801eca4:	d008      	beq.n	801ecb8 <memmove+0x28>
 801eca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ecaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ecae:	e7f8      	b.n	801eca2 <memmove+0x12>
 801ecb0:	4402      	add	r2, r0
 801ecb2:	4601      	mov	r1, r0
 801ecb4:	428a      	cmp	r2, r1
 801ecb6:	d100      	bne.n	801ecba <memmove+0x2a>
 801ecb8:	bd10      	pop	{r4, pc}
 801ecba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ecbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ecc2:	e7f7      	b.n	801ecb4 <memmove+0x24>

0801ecc4 <memset>:
 801ecc4:	4402      	add	r2, r0
 801ecc6:	4603      	mov	r3, r0
 801ecc8:	4293      	cmp	r3, r2
 801ecca:	d100      	bne.n	801ecce <memset+0xa>
 801eccc:	4770      	bx	lr
 801ecce:	f803 1b01 	strb.w	r1, [r3], #1
 801ecd2:	e7f9      	b.n	801ecc8 <memset+0x4>

0801ecd4 <_free_r>:
 801ecd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ecd6:	2900      	cmp	r1, #0
 801ecd8:	d048      	beq.n	801ed6c <_free_r+0x98>
 801ecda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ecde:	9001      	str	r0, [sp, #4]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	f1a1 0404 	sub.w	r4, r1, #4
 801ece6:	bfb8      	it	lt
 801ece8:	18e4      	addlt	r4, r4, r3
 801ecea:	f003 fb1f 	bl	802232c <__malloc_lock>
 801ecee:	4a20      	ldr	r2, [pc, #128]	; (801ed70 <_free_r+0x9c>)
 801ecf0:	9801      	ldr	r0, [sp, #4]
 801ecf2:	6813      	ldr	r3, [r2, #0]
 801ecf4:	4615      	mov	r5, r2
 801ecf6:	b933      	cbnz	r3, 801ed06 <_free_r+0x32>
 801ecf8:	6063      	str	r3, [r4, #4]
 801ecfa:	6014      	str	r4, [r2, #0]
 801ecfc:	b003      	add	sp, #12
 801ecfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed02:	f003 bb19 	b.w	8022338 <__malloc_unlock>
 801ed06:	42a3      	cmp	r3, r4
 801ed08:	d90b      	bls.n	801ed22 <_free_r+0x4e>
 801ed0a:	6821      	ldr	r1, [r4, #0]
 801ed0c:	1862      	adds	r2, r4, r1
 801ed0e:	4293      	cmp	r3, r2
 801ed10:	bf04      	itt	eq
 801ed12:	681a      	ldreq	r2, [r3, #0]
 801ed14:	685b      	ldreq	r3, [r3, #4]
 801ed16:	6063      	str	r3, [r4, #4]
 801ed18:	bf04      	itt	eq
 801ed1a:	1852      	addeq	r2, r2, r1
 801ed1c:	6022      	streq	r2, [r4, #0]
 801ed1e:	602c      	str	r4, [r5, #0]
 801ed20:	e7ec      	b.n	801ecfc <_free_r+0x28>
 801ed22:	461a      	mov	r2, r3
 801ed24:	685b      	ldr	r3, [r3, #4]
 801ed26:	b10b      	cbz	r3, 801ed2c <_free_r+0x58>
 801ed28:	42a3      	cmp	r3, r4
 801ed2a:	d9fa      	bls.n	801ed22 <_free_r+0x4e>
 801ed2c:	6811      	ldr	r1, [r2, #0]
 801ed2e:	1855      	adds	r5, r2, r1
 801ed30:	42a5      	cmp	r5, r4
 801ed32:	d10b      	bne.n	801ed4c <_free_r+0x78>
 801ed34:	6824      	ldr	r4, [r4, #0]
 801ed36:	4421      	add	r1, r4
 801ed38:	1854      	adds	r4, r2, r1
 801ed3a:	42a3      	cmp	r3, r4
 801ed3c:	6011      	str	r1, [r2, #0]
 801ed3e:	d1dd      	bne.n	801ecfc <_free_r+0x28>
 801ed40:	681c      	ldr	r4, [r3, #0]
 801ed42:	685b      	ldr	r3, [r3, #4]
 801ed44:	6053      	str	r3, [r2, #4]
 801ed46:	4421      	add	r1, r4
 801ed48:	6011      	str	r1, [r2, #0]
 801ed4a:	e7d7      	b.n	801ecfc <_free_r+0x28>
 801ed4c:	d902      	bls.n	801ed54 <_free_r+0x80>
 801ed4e:	230c      	movs	r3, #12
 801ed50:	6003      	str	r3, [r0, #0]
 801ed52:	e7d3      	b.n	801ecfc <_free_r+0x28>
 801ed54:	6825      	ldr	r5, [r4, #0]
 801ed56:	1961      	adds	r1, r4, r5
 801ed58:	428b      	cmp	r3, r1
 801ed5a:	bf04      	itt	eq
 801ed5c:	6819      	ldreq	r1, [r3, #0]
 801ed5e:	685b      	ldreq	r3, [r3, #4]
 801ed60:	6063      	str	r3, [r4, #4]
 801ed62:	bf04      	itt	eq
 801ed64:	1949      	addeq	r1, r1, r5
 801ed66:	6021      	streq	r1, [r4, #0]
 801ed68:	6054      	str	r4, [r2, #4]
 801ed6a:	e7c7      	b.n	801ecfc <_free_r+0x28>
 801ed6c:	b003      	add	sp, #12
 801ed6e:	bd30      	pop	{r4, r5, pc}
 801ed70:	24005274 	.word	0x24005274

0801ed74 <_malloc_r>:
 801ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed76:	1ccd      	adds	r5, r1, #3
 801ed78:	f025 0503 	bic.w	r5, r5, #3
 801ed7c:	3508      	adds	r5, #8
 801ed7e:	2d0c      	cmp	r5, #12
 801ed80:	bf38      	it	cc
 801ed82:	250c      	movcc	r5, #12
 801ed84:	2d00      	cmp	r5, #0
 801ed86:	4606      	mov	r6, r0
 801ed88:	db01      	blt.n	801ed8e <_malloc_r+0x1a>
 801ed8a:	42a9      	cmp	r1, r5
 801ed8c:	d903      	bls.n	801ed96 <_malloc_r+0x22>
 801ed8e:	230c      	movs	r3, #12
 801ed90:	6033      	str	r3, [r6, #0]
 801ed92:	2000      	movs	r0, #0
 801ed94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed96:	f003 fac9 	bl	802232c <__malloc_lock>
 801ed9a:	4921      	ldr	r1, [pc, #132]	; (801ee20 <_malloc_r+0xac>)
 801ed9c:	680a      	ldr	r2, [r1, #0]
 801ed9e:	4614      	mov	r4, r2
 801eda0:	b99c      	cbnz	r4, 801edca <_malloc_r+0x56>
 801eda2:	4f20      	ldr	r7, [pc, #128]	; (801ee24 <_malloc_r+0xb0>)
 801eda4:	683b      	ldr	r3, [r7, #0]
 801eda6:	b923      	cbnz	r3, 801edb2 <_malloc_r+0x3e>
 801eda8:	4621      	mov	r1, r4
 801edaa:	4630      	mov	r0, r6
 801edac:	f000 ff50 	bl	801fc50 <_sbrk_r>
 801edb0:	6038      	str	r0, [r7, #0]
 801edb2:	4629      	mov	r1, r5
 801edb4:	4630      	mov	r0, r6
 801edb6:	f000 ff4b 	bl	801fc50 <_sbrk_r>
 801edba:	1c43      	adds	r3, r0, #1
 801edbc:	d123      	bne.n	801ee06 <_malloc_r+0x92>
 801edbe:	230c      	movs	r3, #12
 801edc0:	6033      	str	r3, [r6, #0]
 801edc2:	4630      	mov	r0, r6
 801edc4:	f003 fab8 	bl	8022338 <__malloc_unlock>
 801edc8:	e7e3      	b.n	801ed92 <_malloc_r+0x1e>
 801edca:	6823      	ldr	r3, [r4, #0]
 801edcc:	1b5b      	subs	r3, r3, r5
 801edce:	d417      	bmi.n	801ee00 <_malloc_r+0x8c>
 801edd0:	2b0b      	cmp	r3, #11
 801edd2:	d903      	bls.n	801eddc <_malloc_r+0x68>
 801edd4:	6023      	str	r3, [r4, #0]
 801edd6:	441c      	add	r4, r3
 801edd8:	6025      	str	r5, [r4, #0]
 801edda:	e004      	b.n	801ede6 <_malloc_r+0x72>
 801eddc:	6863      	ldr	r3, [r4, #4]
 801edde:	42a2      	cmp	r2, r4
 801ede0:	bf0c      	ite	eq
 801ede2:	600b      	streq	r3, [r1, #0]
 801ede4:	6053      	strne	r3, [r2, #4]
 801ede6:	4630      	mov	r0, r6
 801ede8:	f003 faa6 	bl	8022338 <__malloc_unlock>
 801edec:	f104 000b 	add.w	r0, r4, #11
 801edf0:	1d23      	adds	r3, r4, #4
 801edf2:	f020 0007 	bic.w	r0, r0, #7
 801edf6:	1ac2      	subs	r2, r0, r3
 801edf8:	d0cc      	beq.n	801ed94 <_malloc_r+0x20>
 801edfa:	1a1b      	subs	r3, r3, r0
 801edfc:	50a3      	str	r3, [r4, r2]
 801edfe:	e7c9      	b.n	801ed94 <_malloc_r+0x20>
 801ee00:	4622      	mov	r2, r4
 801ee02:	6864      	ldr	r4, [r4, #4]
 801ee04:	e7cc      	b.n	801eda0 <_malloc_r+0x2c>
 801ee06:	1cc4      	adds	r4, r0, #3
 801ee08:	f024 0403 	bic.w	r4, r4, #3
 801ee0c:	42a0      	cmp	r0, r4
 801ee0e:	d0e3      	beq.n	801edd8 <_malloc_r+0x64>
 801ee10:	1a21      	subs	r1, r4, r0
 801ee12:	4630      	mov	r0, r6
 801ee14:	f000 ff1c 	bl	801fc50 <_sbrk_r>
 801ee18:	3001      	adds	r0, #1
 801ee1a:	d1dd      	bne.n	801edd8 <_malloc_r+0x64>
 801ee1c:	e7cf      	b.n	801edbe <_malloc_r+0x4a>
 801ee1e:	bf00      	nop
 801ee20:	24005274 	.word	0x24005274
 801ee24:	24005278 	.word	0x24005278

0801ee28 <__cvt>:
 801ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee2a:	ed2d 8b02 	vpush	{d8}
 801ee2e:	eeb0 8b40 	vmov.f64	d8, d0
 801ee32:	b085      	sub	sp, #20
 801ee34:	4617      	mov	r7, r2
 801ee36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ee38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ee3a:	ee18 2a90 	vmov	r2, s17
 801ee3e:	f025 0520 	bic.w	r5, r5, #32
 801ee42:	2a00      	cmp	r2, #0
 801ee44:	bfb6      	itet	lt
 801ee46:	222d      	movlt	r2, #45	; 0x2d
 801ee48:	2200      	movge	r2, #0
 801ee4a:	eeb1 8b40 	vneglt.f64	d8, d0
 801ee4e:	2d46      	cmp	r5, #70	; 0x46
 801ee50:	460c      	mov	r4, r1
 801ee52:	701a      	strb	r2, [r3, #0]
 801ee54:	d004      	beq.n	801ee60 <__cvt+0x38>
 801ee56:	2d45      	cmp	r5, #69	; 0x45
 801ee58:	d100      	bne.n	801ee5c <__cvt+0x34>
 801ee5a:	3401      	adds	r4, #1
 801ee5c:	2102      	movs	r1, #2
 801ee5e:	e000      	b.n	801ee62 <__cvt+0x3a>
 801ee60:	2103      	movs	r1, #3
 801ee62:	ab03      	add	r3, sp, #12
 801ee64:	9301      	str	r3, [sp, #4]
 801ee66:	ab02      	add	r3, sp, #8
 801ee68:	9300      	str	r3, [sp, #0]
 801ee6a:	4622      	mov	r2, r4
 801ee6c:	4633      	mov	r3, r6
 801ee6e:	eeb0 0b48 	vmov.f64	d0, d8
 801ee72:	f001 ff1d 	bl	8020cb0 <_dtoa_r>
 801ee76:	2d47      	cmp	r5, #71	; 0x47
 801ee78:	d109      	bne.n	801ee8e <__cvt+0x66>
 801ee7a:	07fb      	lsls	r3, r7, #31
 801ee7c:	d407      	bmi.n	801ee8e <__cvt+0x66>
 801ee7e:	9b03      	ldr	r3, [sp, #12]
 801ee80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee82:	1a1b      	subs	r3, r3, r0
 801ee84:	6013      	str	r3, [r2, #0]
 801ee86:	b005      	add	sp, #20
 801ee88:	ecbd 8b02 	vpop	{d8}
 801ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee8e:	2d46      	cmp	r5, #70	; 0x46
 801ee90:	eb00 0204 	add.w	r2, r0, r4
 801ee94:	d10c      	bne.n	801eeb0 <__cvt+0x88>
 801ee96:	7803      	ldrb	r3, [r0, #0]
 801ee98:	2b30      	cmp	r3, #48	; 0x30
 801ee9a:	d107      	bne.n	801eeac <__cvt+0x84>
 801ee9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801eea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eea4:	bf1c      	itt	ne
 801eea6:	f1c4 0401 	rsbne	r4, r4, #1
 801eeaa:	6034      	strne	r4, [r6, #0]
 801eeac:	6833      	ldr	r3, [r6, #0]
 801eeae:	441a      	add	r2, r3
 801eeb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801eeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeb8:	bf08      	it	eq
 801eeba:	9203      	streq	r2, [sp, #12]
 801eebc:	2130      	movs	r1, #48	; 0x30
 801eebe:	9b03      	ldr	r3, [sp, #12]
 801eec0:	4293      	cmp	r3, r2
 801eec2:	d2dc      	bcs.n	801ee7e <__cvt+0x56>
 801eec4:	1c5c      	adds	r4, r3, #1
 801eec6:	9403      	str	r4, [sp, #12]
 801eec8:	7019      	strb	r1, [r3, #0]
 801eeca:	e7f8      	b.n	801eebe <__cvt+0x96>

0801eecc <__exponent>:
 801eecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eece:	4603      	mov	r3, r0
 801eed0:	2900      	cmp	r1, #0
 801eed2:	bfb8      	it	lt
 801eed4:	4249      	neglt	r1, r1
 801eed6:	f803 2b02 	strb.w	r2, [r3], #2
 801eeda:	bfb4      	ite	lt
 801eedc:	222d      	movlt	r2, #45	; 0x2d
 801eede:	222b      	movge	r2, #43	; 0x2b
 801eee0:	2909      	cmp	r1, #9
 801eee2:	7042      	strb	r2, [r0, #1]
 801eee4:	dd2a      	ble.n	801ef3c <__exponent+0x70>
 801eee6:	f10d 0407 	add.w	r4, sp, #7
 801eeea:	46a4      	mov	ip, r4
 801eeec:	270a      	movs	r7, #10
 801eeee:	46a6      	mov	lr, r4
 801eef0:	460a      	mov	r2, r1
 801eef2:	fb91 f6f7 	sdiv	r6, r1, r7
 801eef6:	fb07 1516 	mls	r5, r7, r6, r1
 801eefa:	3530      	adds	r5, #48	; 0x30
 801eefc:	2a63      	cmp	r2, #99	; 0x63
 801eefe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801ef02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ef06:	4631      	mov	r1, r6
 801ef08:	dcf1      	bgt.n	801eeee <__exponent+0x22>
 801ef0a:	3130      	adds	r1, #48	; 0x30
 801ef0c:	f1ae 0502 	sub.w	r5, lr, #2
 801ef10:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ef14:	1c44      	adds	r4, r0, #1
 801ef16:	4629      	mov	r1, r5
 801ef18:	4561      	cmp	r1, ip
 801ef1a:	d30a      	bcc.n	801ef32 <__exponent+0x66>
 801ef1c:	f10d 0209 	add.w	r2, sp, #9
 801ef20:	eba2 020e 	sub.w	r2, r2, lr
 801ef24:	4565      	cmp	r5, ip
 801ef26:	bf88      	it	hi
 801ef28:	2200      	movhi	r2, #0
 801ef2a:	4413      	add	r3, r2
 801ef2c:	1a18      	subs	r0, r3, r0
 801ef2e:	b003      	add	sp, #12
 801ef30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef32:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef36:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ef3a:	e7ed      	b.n	801ef18 <__exponent+0x4c>
 801ef3c:	2330      	movs	r3, #48	; 0x30
 801ef3e:	3130      	adds	r1, #48	; 0x30
 801ef40:	7083      	strb	r3, [r0, #2]
 801ef42:	70c1      	strb	r1, [r0, #3]
 801ef44:	1d03      	adds	r3, r0, #4
 801ef46:	e7f1      	b.n	801ef2c <__exponent+0x60>

0801ef48 <_printf_float>:
 801ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef4c:	b08b      	sub	sp, #44	; 0x2c
 801ef4e:	460c      	mov	r4, r1
 801ef50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ef54:	4616      	mov	r6, r2
 801ef56:	461f      	mov	r7, r3
 801ef58:	4605      	mov	r5, r0
 801ef5a:	f003 f969 	bl	8022230 <_localeconv_r>
 801ef5e:	f8d0 b000 	ldr.w	fp, [r0]
 801ef62:	4658      	mov	r0, fp
 801ef64:	f7e1 f9bc 	bl	80002e0 <strlen>
 801ef68:	2300      	movs	r3, #0
 801ef6a:	9308      	str	r3, [sp, #32]
 801ef6c:	f8d8 3000 	ldr.w	r3, [r8]
 801ef70:	f894 9018 	ldrb.w	r9, [r4, #24]
 801ef74:	6822      	ldr	r2, [r4, #0]
 801ef76:	3307      	adds	r3, #7
 801ef78:	f023 0307 	bic.w	r3, r3, #7
 801ef7c:	f103 0108 	add.w	r1, r3, #8
 801ef80:	f8c8 1000 	str.w	r1, [r8]
 801ef84:	4682      	mov	sl, r0
 801ef86:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ef8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801ef8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801f1f0 <_printf_float+0x2a8>
 801ef92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801ef96:	eeb0 6bc0 	vabs.f64	d6, d0
 801ef9a:	eeb4 6b47 	vcmp.f64	d6, d7
 801ef9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa2:	dd24      	ble.n	801efee <_printf_float+0xa6>
 801efa4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efac:	d502      	bpl.n	801efb4 <_printf_float+0x6c>
 801efae:	232d      	movs	r3, #45	; 0x2d
 801efb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801efb4:	4b90      	ldr	r3, [pc, #576]	; (801f1f8 <_printf_float+0x2b0>)
 801efb6:	4891      	ldr	r0, [pc, #580]	; (801f1fc <_printf_float+0x2b4>)
 801efb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801efbc:	bf94      	ite	ls
 801efbe:	4698      	movls	r8, r3
 801efc0:	4680      	movhi	r8, r0
 801efc2:	2303      	movs	r3, #3
 801efc4:	6123      	str	r3, [r4, #16]
 801efc6:	f022 0204 	bic.w	r2, r2, #4
 801efca:	2300      	movs	r3, #0
 801efcc:	6022      	str	r2, [r4, #0]
 801efce:	9304      	str	r3, [sp, #16]
 801efd0:	9700      	str	r7, [sp, #0]
 801efd2:	4633      	mov	r3, r6
 801efd4:	aa09      	add	r2, sp, #36	; 0x24
 801efd6:	4621      	mov	r1, r4
 801efd8:	4628      	mov	r0, r5
 801efda:	f000 f9d3 	bl	801f384 <_printf_common>
 801efde:	3001      	adds	r0, #1
 801efe0:	f040 808a 	bne.w	801f0f8 <_printf_float+0x1b0>
 801efe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801efe8:	b00b      	add	sp, #44	; 0x2c
 801efea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efee:	eeb4 0b40 	vcmp.f64	d0, d0
 801eff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eff6:	d709      	bvc.n	801f00c <_printf_float+0xc4>
 801eff8:	ee10 3a90 	vmov	r3, s1
 801effc:	2b00      	cmp	r3, #0
 801effe:	bfbc      	itt	lt
 801f000:	232d      	movlt	r3, #45	; 0x2d
 801f002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f006:	487e      	ldr	r0, [pc, #504]	; (801f200 <_printf_float+0x2b8>)
 801f008:	4b7e      	ldr	r3, [pc, #504]	; (801f204 <_printf_float+0x2bc>)
 801f00a:	e7d5      	b.n	801efb8 <_printf_float+0x70>
 801f00c:	6863      	ldr	r3, [r4, #4]
 801f00e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801f012:	9104      	str	r1, [sp, #16]
 801f014:	1c59      	adds	r1, r3, #1
 801f016:	d13c      	bne.n	801f092 <_printf_float+0x14a>
 801f018:	2306      	movs	r3, #6
 801f01a:	6063      	str	r3, [r4, #4]
 801f01c:	2300      	movs	r3, #0
 801f01e:	9303      	str	r3, [sp, #12]
 801f020:	ab08      	add	r3, sp, #32
 801f022:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801f026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f02a:	ab07      	add	r3, sp, #28
 801f02c:	6861      	ldr	r1, [r4, #4]
 801f02e:	9300      	str	r3, [sp, #0]
 801f030:	6022      	str	r2, [r4, #0]
 801f032:	f10d 031b 	add.w	r3, sp, #27
 801f036:	4628      	mov	r0, r5
 801f038:	f7ff fef6 	bl	801ee28 <__cvt>
 801f03c:	9b04      	ldr	r3, [sp, #16]
 801f03e:	9907      	ldr	r1, [sp, #28]
 801f040:	2b47      	cmp	r3, #71	; 0x47
 801f042:	4680      	mov	r8, r0
 801f044:	d108      	bne.n	801f058 <_printf_float+0x110>
 801f046:	1cc8      	adds	r0, r1, #3
 801f048:	db02      	blt.n	801f050 <_printf_float+0x108>
 801f04a:	6863      	ldr	r3, [r4, #4]
 801f04c:	4299      	cmp	r1, r3
 801f04e:	dd41      	ble.n	801f0d4 <_printf_float+0x18c>
 801f050:	f1a9 0902 	sub.w	r9, r9, #2
 801f054:	fa5f f989 	uxtb.w	r9, r9
 801f058:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f05c:	d820      	bhi.n	801f0a0 <_printf_float+0x158>
 801f05e:	3901      	subs	r1, #1
 801f060:	464a      	mov	r2, r9
 801f062:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f066:	9107      	str	r1, [sp, #28]
 801f068:	f7ff ff30 	bl	801eecc <__exponent>
 801f06c:	9a08      	ldr	r2, [sp, #32]
 801f06e:	9004      	str	r0, [sp, #16]
 801f070:	1813      	adds	r3, r2, r0
 801f072:	2a01      	cmp	r2, #1
 801f074:	6123      	str	r3, [r4, #16]
 801f076:	dc02      	bgt.n	801f07e <_printf_float+0x136>
 801f078:	6822      	ldr	r2, [r4, #0]
 801f07a:	07d2      	lsls	r2, r2, #31
 801f07c:	d501      	bpl.n	801f082 <_printf_float+0x13a>
 801f07e:	3301      	adds	r3, #1
 801f080:	6123      	str	r3, [r4, #16]
 801f082:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d0a2      	beq.n	801efd0 <_printf_float+0x88>
 801f08a:	232d      	movs	r3, #45	; 0x2d
 801f08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f090:	e79e      	b.n	801efd0 <_printf_float+0x88>
 801f092:	9904      	ldr	r1, [sp, #16]
 801f094:	2947      	cmp	r1, #71	; 0x47
 801f096:	d1c1      	bne.n	801f01c <_printf_float+0xd4>
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d1bf      	bne.n	801f01c <_printf_float+0xd4>
 801f09c:	2301      	movs	r3, #1
 801f09e:	e7bc      	b.n	801f01a <_printf_float+0xd2>
 801f0a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801f0a4:	d118      	bne.n	801f0d8 <_printf_float+0x190>
 801f0a6:	2900      	cmp	r1, #0
 801f0a8:	6863      	ldr	r3, [r4, #4]
 801f0aa:	dd0b      	ble.n	801f0c4 <_printf_float+0x17c>
 801f0ac:	6121      	str	r1, [r4, #16]
 801f0ae:	b913      	cbnz	r3, 801f0b6 <_printf_float+0x16e>
 801f0b0:	6822      	ldr	r2, [r4, #0]
 801f0b2:	07d0      	lsls	r0, r2, #31
 801f0b4:	d502      	bpl.n	801f0bc <_printf_float+0x174>
 801f0b6:	3301      	adds	r3, #1
 801f0b8:	440b      	add	r3, r1
 801f0ba:	6123      	str	r3, [r4, #16]
 801f0bc:	2300      	movs	r3, #0
 801f0be:	65a1      	str	r1, [r4, #88]	; 0x58
 801f0c0:	9304      	str	r3, [sp, #16]
 801f0c2:	e7de      	b.n	801f082 <_printf_float+0x13a>
 801f0c4:	b913      	cbnz	r3, 801f0cc <_printf_float+0x184>
 801f0c6:	6822      	ldr	r2, [r4, #0]
 801f0c8:	07d2      	lsls	r2, r2, #31
 801f0ca:	d501      	bpl.n	801f0d0 <_printf_float+0x188>
 801f0cc:	3302      	adds	r3, #2
 801f0ce:	e7f4      	b.n	801f0ba <_printf_float+0x172>
 801f0d0:	2301      	movs	r3, #1
 801f0d2:	e7f2      	b.n	801f0ba <_printf_float+0x172>
 801f0d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801f0d8:	9b08      	ldr	r3, [sp, #32]
 801f0da:	4299      	cmp	r1, r3
 801f0dc:	db05      	blt.n	801f0ea <_printf_float+0x1a2>
 801f0de:	6823      	ldr	r3, [r4, #0]
 801f0e0:	6121      	str	r1, [r4, #16]
 801f0e2:	07d8      	lsls	r0, r3, #31
 801f0e4:	d5ea      	bpl.n	801f0bc <_printf_float+0x174>
 801f0e6:	1c4b      	adds	r3, r1, #1
 801f0e8:	e7e7      	b.n	801f0ba <_printf_float+0x172>
 801f0ea:	2900      	cmp	r1, #0
 801f0ec:	bfd4      	ite	le
 801f0ee:	f1c1 0202 	rsble	r2, r1, #2
 801f0f2:	2201      	movgt	r2, #1
 801f0f4:	4413      	add	r3, r2
 801f0f6:	e7e0      	b.n	801f0ba <_printf_float+0x172>
 801f0f8:	6823      	ldr	r3, [r4, #0]
 801f0fa:	055a      	lsls	r2, r3, #21
 801f0fc:	d407      	bmi.n	801f10e <_printf_float+0x1c6>
 801f0fe:	6923      	ldr	r3, [r4, #16]
 801f100:	4642      	mov	r2, r8
 801f102:	4631      	mov	r1, r6
 801f104:	4628      	mov	r0, r5
 801f106:	47b8      	blx	r7
 801f108:	3001      	adds	r0, #1
 801f10a:	d12a      	bne.n	801f162 <_printf_float+0x21a>
 801f10c:	e76a      	b.n	801efe4 <_printf_float+0x9c>
 801f10e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f112:	f240 80e2 	bls.w	801f2da <_printf_float+0x392>
 801f116:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f11a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f122:	d133      	bne.n	801f18c <_printf_float+0x244>
 801f124:	4a38      	ldr	r2, [pc, #224]	; (801f208 <_printf_float+0x2c0>)
 801f126:	2301      	movs	r3, #1
 801f128:	4631      	mov	r1, r6
 801f12a:	4628      	mov	r0, r5
 801f12c:	47b8      	blx	r7
 801f12e:	3001      	adds	r0, #1
 801f130:	f43f af58 	beq.w	801efe4 <_printf_float+0x9c>
 801f134:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f138:	429a      	cmp	r2, r3
 801f13a:	db02      	blt.n	801f142 <_printf_float+0x1fa>
 801f13c:	6823      	ldr	r3, [r4, #0]
 801f13e:	07d8      	lsls	r0, r3, #31
 801f140:	d50f      	bpl.n	801f162 <_printf_float+0x21a>
 801f142:	4653      	mov	r3, sl
 801f144:	465a      	mov	r2, fp
 801f146:	4631      	mov	r1, r6
 801f148:	4628      	mov	r0, r5
 801f14a:	47b8      	blx	r7
 801f14c:	3001      	adds	r0, #1
 801f14e:	f43f af49 	beq.w	801efe4 <_printf_float+0x9c>
 801f152:	f04f 0800 	mov.w	r8, #0
 801f156:	f104 091a 	add.w	r9, r4, #26
 801f15a:	9b08      	ldr	r3, [sp, #32]
 801f15c:	3b01      	subs	r3, #1
 801f15e:	4543      	cmp	r3, r8
 801f160:	dc09      	bgt.n	801f176 <_printf_float+0x22e>
 801f162:	6823      	ldr	r3, [r4, #0]
 801f164:	079b      	lsls	r3, r3, #30
 801f166:	f100 8108 	bmi.w	801f37a <_printf_float+0x432>
 801f16a:	68e0      	ldr	r0, [r4, #12]
 801f16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f16e:	4298      	cmp	r0, r3
 801f170:	bfb8      	it	lt
 801f172:	4618      	movlt	r0, r3
 801f174:	e738      	b.n	801efe8 <_printf_float+0xa0>
 801f176:	2301      	movs	r3, #1
 801f178:	464a      	mov	r2, r9
 801f17a:	4631      	mov	r1, r6
 801f17c:	4628      	mov	r0, r5
 801f17e:	47b8      	blx	r7
 801f180:	3001      	adds	r0, #1
 801f182:	f43f af2f 	beq.w	801efe4 <_printf_float+0x9c>
 801f186:	f108 0801 	add.w	r8, r8, #1
 801f18a:	e7e6      	b.n	801f15a <_printf_float+0x212>
 801f18c:	9b07      	ldr	r3, [sp, #28]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	dc3c      	bgt.n	801f20c <_printf_float+0x2c4>
 801f192:	4a1d      	ldr	r2, [pc, #116]	; (801f208 <_printf_float+0x2c0>)
 801f194:	2301      	movs	r3, #1
 801f196:	4631      	mov	r1, r6
 801f198:	4628      	mov	r0, r5
 801f19a:	47b8      	blx	r7
 801f19c:	3001      	adds	r0, #1
 801f19e:	f43f af21 	beq.w	801efe4 <_printf_float+0x9c>
 801f1a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f1a6:	4313      	orrs	r3, r2
 801f1a8:	d102      	bne.n	801f1b0 <_printf_float+0x268>
 801f1aa:	6823      	ldr	r3, [r4, #0]
 801f1ac:	07d9      	lsls	r1, r3, #31
 801f1ae:	d5d8      	bpl.n	801f162 <_printf_float+0x21a>
 801f1b0:	4653      	mov	r3, sl
 801f1b2:	465a      	mov	r2, fp
 801f1b4:	4631      	mov	r1, r6
 801f1b6:	4628      	mov	r0, r5
 801f1b8:	47b8      	blx	r7
 801f1ba:	3001      	adds	r0, #1
 801f1bc:	f43f af12 	beq.w	801efe4 <_printf_float+0x9c>
 801f1c0:	f04f 0900 	mov.w	r9, #0
 801f1c4:	f104 0a1a 	add.w	sl, r4, #26
 801f1c8:	9b07      	ldr	r3, [sp, #28]
 801f1ca:	425b      	negs	r3, r3
 801f1cc:	454b      	cmp	r3, r9
 801f1ce:	dc01      	bgt.n	801f1d4 <_printf_float+0x28c>
 801f1d0:	9b08      	ldr	r3, [sp, #32]
 801f1d2:	e795      	b.n	801f100 <_printf_float+0x1b8>
 801f1d4:	2301      	movs	r3, #1
 801f1d6:	4652      	mov	r2, sl
 801f1d8:	4631      	mov	r1, r6
 801f1da:	4628      	mov	r0, r5
 801f1dc:	47b8      	blx	r7
 801f1de:	3001      	adds	r0, #1
 801f1e0:	f43f af00 	beq.w	801efe4 <_printf_float+0x9c>
 801f1e4:	f109 0901 	add.w	r9, r9, #1
 801f1e8:	e7ee      	b.n	801f1c8 <_printf_float+0x280>
 801f1ea:	bf00      	nop
 801f1ec:	f3af 8000 	nop.w
 801f1f0:	ffffffff 	.word	0xffffffff
 801f1f4:	7fefffff 	.word	0x7fefffff
 801f1f8:	08027ee4 	.word	0x08027ee4
 801f1fc:	08027ee8 	.word	0x08027ee8
 801f200:	08027ef0 	.word	0x08027ef0
 801f204:	08027eec 	.word	0x08027eec
 801f208:	08027ef4 	.word	0x08027ef4
 801f20c:	9a08      	ldr	r2, [sp, #32]
 801f20e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f210:	429a      	cmp	r2, r3
 801f212:	bfa8      	it	ge
 801f214:	461a      	movge	r2, r3
 801f216:	2a00      	cmp	r2, #0
 801f218:	4691      	mov	r9, r2
 801f21a:	dc38      	bgt.n	801f28e <_printf_float+0x346>
 801f21c:	2300      	movs	r3, #0
 801f21e:	9305      	str	r3, [sp, #20]
 801f220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f224:	f104 021a 	add.w	r2, r4, #26
 801f228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f22a:	9905      	ldr	r1, [sp, #20]
 801f22c:	9304      	str	r3, [sp, #16]
 801f22e:	eba3 0309 	sub.w	r3, r3, r9
 801f232:	428b      	cmp	r3, r1
 801f234:	dc33      	bgt.n	801f29e <_printf_float+0x356>
 801f236:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f23a:	429a      	cmp	r2, r3
 801f23c:	db3c      	blt.n	801f2b8 <_printf_float+0x370>
 801f23e:	6823      	ldr	r3, [r4, #0]
 801f240:	07da      	lsls	r2, r3, #31
 801f242:	d439      	bmi.n	801f2b8 <_printf_float+0x370>
 801f244:	9a08      	ldr	r2, [sp, #32]
 801f246:	9b04      	ldr	r3, [sp, #16]
 801f248:	9907      	ldr	r1, [sp, #28]
 801f24a:	1ad3      	subs	r3, r2, r3
 801f24c:	eba2 0901 	sub.w	r9, r2, r1
 801f250:	4599      	cmp	r9, r3
 801f252:	bfa8      	it	ge
 801f254:	4699      	movge	r9, r3
 801f256:	f1b9 0f00 	cmp.w	r9, #0
 801f25a:	dc35      	bgt.n	801f2c8 <_printf_float+0x380>
 801f25c:	f04f 0800 	mov.w	r8, #0
 801f260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f264:	f104 0a1a 	add.w	sl, r4, #26
 801f268:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f26c:	1a9b      	subs	r3, r3, r2
 801f26e:	eba3 0309 	sub.w	r3, r3, r9
 801f272:	4543      	cmp	r3, r8
 801f274:	f77f af75 	ble.w	801f162 <_printf_float+0x21a>
 801f278:	2301      	movs	r3, #1
 801f27a:	4652      	mov	r2, sl
 801f27c:	4631      	mov	r1, r6
 801f27e:	4628      	mov	r0, r5
 801f280:	47b8      	blx	r7
 801f282:	3001      	adds	r0, #1
 801f284:	f43f aeae 	beq.w	801efe4 <_printf_float+0x9c>
 801f288:	f108 0801 	add.w	r8, r8, #1
 801f28c:	e7ec      	b.n	801f268 <_printf_float+0x320>
 801f28e:	4613      	mov	r3, r2
 801f290:	4631      	mov	r1, r6
 801f292:	4642      	mov	r2, r8
 801f294:	4628      	mov	r0, r5
 801f296:	47b8      	blx	r7
 801f298:	3001      	adds	r0, #1
 801f29a:	d1bf      	bne.n	801f21c <_printf_float+0x2d4>
 801f29c:	e6a2      	b.n	801efe4 <_printf_float+0x9c>
 801f29e:	2301      	movs	r3, #1
 801f2a0:	4631      	mov	r1, r6
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	9204      	str	r2, [sp, #16]
 801f2a6:	47b8      	blx	r7
 801f2a8:	3001      	adds	r0, #1
 801f2aa:	f43f ae9b 	beq.w	801efe4 <_printf_float+0x9c>
 801f2ae:	9b05      	ldr	r3, [sp, #20]
 801f2b0:	9a04      	ldr	r2, [sp, #16]
 801f2b2:	3301      	adds	r3, #1
 801f2b4:	9305      	str	r3, [sp, #20]
 801f2b6:	e7b7      	b.n	801f228 <_printf_float+0x2e0>
 801f2b8:	4653      	mov	r3, sl
 801f2ba:	465a      	mov	r2, fp
 801f2bc:	4631      	mov	r1, r6
 801f2be:	4628      	mov	r0, r5
 801f2c0:	47b8      	blx	r7
 801f2c2:	3001      	adds	r0, #1
 801f2c4:	d1be      	bne.n	801f244 <_printf_float+0x2fc>
 801f2c6:	e68d      	b.n	801efe4 <_printf_float+0x9c>
 801f2c8:	9a04      	ldr	r2, [sp, #16]
 801f2ca:	464b      	mov	r3, r9
 801f2cc:	4442      	add	r2, r8
 801f2ce:	4631      	mov	r1, r6
 801f2d0:	4628      	mov	r0, r5
 801f2d2:	47b8      	blx	r7
 801f2d4:	3001      	adds	r0, #1
 801f2d6:	d1c1      	bne.n	801f25c <_printf_float+0x314>
 801f2d8:	e684      	b.n	801efe4 <_printf_float+0x9c>
 801f2da:	9a08      	ldr	r2, [sp, #32]
 801f2dc:	2a01      	cmp	r2, #1
 801f2de:	dc01      	bgt.n	801f2e4 <_printf_float+0x39c>
 801f2e0:	07db      	lsls	r3, r3, #31
 801f2e2:	d537      	bpl.n	801f354 <_printf_float+0x40c>
 801f2e4:	2301      	movs	r3, #1
 801f2e6:	4642      	mov	r2, r8
 801f2e8:	4631      	mov	r1, r6
 801f2ea:	4628      	mov	r0, r5
 801f2ec:	47b8      	blx	r7
 801f2ee:	3001      	adds	r0, #1
 801f2f0:	f43f ae78 	beq.w	801efe4 <_printf_float+0x9c>
 801f2f4:	4653      	mov	r3, sl
 801f2f6:	465a      	mov	r2, fp
 801f2f8:	4631      	mov	r1, r6
 801f2fa:	4628      	mov	r0, r5
 801f2fc:	47b8      	blx	r7
 801f2fe:	3001      	adds	r0, #1
 801f300:	f43f ae70 	beq.w	801efe4 <_printf_float+0x9c>
 801f304:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f308:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f310:	d01b      	beq.n	801f34a <_printf_float+0x402>
 801f312:	9b08      	ldr	r3, [sp, #32]
 801f314:	f108 0201 	add.w	r2, r8, #1
 801f318:	3b01      	subs	r3, #1
 801f31a:	4631      	mov	r1, r6
 801f31c:	4628      	mov	r0, r5
 801f31e:	47b8      	blx	r7
 801f320:	3001      	adds	r0, #1
 801f322:	d10e      	bne.n	801f342 <_printf_float+0x3fa>
 801f324:	e65e      	b.n	801efe4 <_printf_float+0x9c>
 801f326:	2301      	movs	r3, #1
 801f328:	464a      	mov	r2, r9
 801f32a:	4631      	mov	r1, r6
 801f32c:	4628      	mov	r0, r5
 801f32e:	47b8      	blx	r7
 801f330:	3001      	adds	r0, #1
 801f332:	f43f ae57 	beq.w	801efe4 <_printf_float+0x9c>
 801f336:	f108 0801 	add.w	r8, r8, #1
 801f33a:	9b08      	ldr	r3, [sp, #32]
 801f33c:	3b01      	subs	r3, #1
 801f33e:	4543      	cmp	r3, r8
 801f340:	dcf1      	bgt.n	801f326 <_printf_float+0x3de>
 801f342:	9b04      	ldr	r3, [sp, #16]
 801f344:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f348:	e6db      	b.n	801f102 <_printf_float+0x1ba>
 801f34a:	f04f 0800 	mov.w	r8, #0
 801f34e:	f104 091a 	add.w	r9, r4, #26
 801f352:	e7f2      	b.n	801f33a <_printf_float+0x3f2>
 801f354:	2301      	movs	r3, #1
 801f356:	4642      	mov	r2, r8
 801f358:	e7df      	b.n	801f31a <_printf_float+0x3d2>
 801f35a:	2301      	movs	r3, #1
 801f35c:	464a      	mov	r2, r9
 801f35e:	4631      	mov	r1, r6
 801f360:	4628      	mov	r0, r5
 801f362:	47b8      	blx	r7
 801f364:	3001      	adds	r0, #1
 801f366:	f43f ae3d 	beq.w	801efe4 <_printf_float+0x9c>
 801f36a:	f108 0801 	add.w	r8, r8, #1
 801f36e:	68e3      	ldr	r3, [r4, #12]
 801f370:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f372:	1a5b      	subs	r3, r3, r1
 801f374:	4543      	cmp	r3, r8
 801f376:	dcf0      	bgt.n	801f35a <_printf_float+0x412>
 801f378:	e6f7      	b.n	801f16a <_printf_float+0x222>
 801f37a:	f04f 0800 	mov.w	r8, #0
 801f37e:	f104 0919 	add.w	r9, r4, #25
 801f382:	e7f4      	b.n	801f36e <_printf_float+0x426>

0801f384 <_printf_common>:
 801f384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f388:	4616      	mov	r6, r2
 801f38a:	4699      	mov	r9, r3
 801f38c:	688a      	ldr	r2, [r1, #8]
 801f38e:	690b      	ldr	r3, [r1, #16]
 801f390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f394:	4293      	cmp	r3, r2
 801f396:	bfb8      	it	lt
 801f398:	4613      	movlt	r3, r2
 801f39a:	6033      	str	r3, [r6, #0]
 801f39c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f3a0:	4607      	mov	r7, r0
 801f3a2:	460c      	mov	r4, r1
 801f3a4:	b10a      	cbz	r2, 801f3aa <_printf_common+0x26>
 801f3a6:	3301      	adds	r3, #1
 801f3a8:	6033      	str	r3, [r6, #0]
 801f3aa:	6823      	ldr	r3, [r4, #0]
 801f3ac:	0699      	lsls	r1, r3, #26
 801f3ae:	bf42      	ittt	mi
 801f3b0:	6833      	ldrmi	r3, [r6, #0]
 801f3b2:	3302      	addmi	r3, #2
 801f3b4:	6033      	strmi	r3, [r6, #0]
 801f3b6:	6825      	ldr	r5, [r4, #0]
 801f3b8:	f015 0506 	ands.w	r5, r5, #6
 801f3bc:	d106      	bne.n	801f3cc <_printf_common+0x48>
 801f3be:	f104 0a19 	add.w	sl, r4, #25
 801f3c2:	68e3      	ldr	r3, [r4, #12]
 801f3c4:	6832      	ldr	r2, [r6, #0]
 801f3c6:	1a9b      	subs	r3, r3, r2
 801f3c8:	42ab      	cmp	r3, r5
 801f3ca:	dc26      	bgt.n	801f41a <_printf_common+0x96>
 801f3cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f3d0:	1e13      	subs	r3, r2, #0
 801f3d2:	6822      	ldr	r2, [r4, #0]
 801f3d4:	bf18      	it	ne
 801f3d6:	2301      	movne	r3, #1
 801f3d8:	0692      	lsls	r2, r2, #26
 801f3da:	d42b      	bmi.n	801f434 <_printf_common+0xb0>
 801f3dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f3e0:	4649      	mov	r1, r9
 801f3e2:	4638      	mov	r0, r7
 801f3e4:	47c0      	blx	r8
 801f3e6:	3001      	adds	r0, #1
 801f3e8:	d01e      	beq.n	801f428 <_printf_common+0xa4>
 801f3ea:	6823      	ldr	r3, [r4, #0]
 801f3ec:	68e5      	ldr	r5, [r4, #12]
 801f3ee:	6832      	ldr	r2, [r6, #0]
 801f3f0:	f003 0306 	and.w	r3, r3, #6
 801f3f4:	2b04      	cmp	r3, #4
 801f3f6:	bf08      	it	eq
 801f3f8:	1aad      	subeq	r5, r5, r2
 801f3fa:	68a3      	ldr	r3, [r4, #8]
 801f3fc:	6922      	ldr	r2, [r4, #16]
 801f3fe:	bf0c      	ite	eq
 801f400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f404:	2500      	movne	r5, #0
 801f406:	4293      	cmp	r3, r2
 801f408:	bfc4      	itt	gt
 801f40a:	1a9b      	subgt	r3, r3, r2
 801f40c:	18ed      	addgt	r5, r5, r3
 801f40e:	2600      	movs	r6, #0
 801f410:	341a      	adds	r4, #26
 801f412:	42b5      	cmp	r5, r6
 801f414:	d11a      	bne.n	801f44c <_printf_common+0xc8>
 801f416:	2000      	movs	r0, #0
 801f418:	e008      	b.n	801f42c <_printf_common+0xa8>
 801f41a:	2301      	movs	r3, #1
 801f41c:	4652      	mov	r2, sl
 801f41e:	4649      	mov	r1, r9
 801f420:	4638      	mov	r0, r7
 801f422:	47c0      	blx	r8
 801f424:	3001      	adds	r0, #1
 801f426:	d103      	bne.n	801f430 <_printf_common+0xac>
 801f428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f430:	3501      	adds	r5, #1
 801f432:	e7c6      	b.n	801f3c2 <_printf_common+0x3e>
 801f434:	18e1      	adds	r1, r4, r3
 801f436:	1c5a      	adds	r2, r3, #1
 801f438:	2030      	movs	r0, #48	; 0x30
 801f43a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f43e:	4422      	add	r2, r4
 801f440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f448:	3302      	adds	r3, #2
 801f44a:	e7c7      	b.n	801f3dc <_printf_common+0x58>
 801f44c:	2301      	movs	r3, #1
 801f44e:	4622      	mov	r2, r4
 801f450:	4649      	mov	r1, r9
 801f452:	4638      	mov	r0, r7
 801f454:	47c0      	blx	r8
 801f456:	3001      	adds	r0, #1
 801f458:	d0e6      	beq.n	801f428 <_printf_common+0xa4>
 801f45a:	3601      	adds	r6, #1
 801f45c:	e7d9      	b.n	801f412 <_printf_common+0x8e>
	...

0801f460 <_printf_i>:
 801f460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f464:	460c      	mov	r4, r1
 801f466:	4691      	mov	r9, r2
 801f468:	7e27      	ldrb	r7, [r4, #24]
 801f46a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f46c:	2f78      	cmp	r7, #120	; 0x78
 801f46e:	4680      	mov	r8, r0
 801f470:	469a      	mov	sl, r3
 801f472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f476:	d807      	bhi.n	801f488 <_printf_i+0x28>
 801f478:	2f62      	cmp	r7, #98	; 0x62
 801f47a:	d80a      	bhi.n	801f492 <_printf_i+0x32>
 801f47c:	2f00      	cmp	r7, #0
 801f47e:	f000 80d8 	beq.w	801f632 <_printf_i+0x1d2>
 801f482:	2f58      	cmp	r7, #88	; 0x58
 801f484:	f000 80a3 	beq.w	801f5ce <_printf_i+0x16e>
 801f488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f48c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f490:	e03a      	b.n	801f508 <_printf_i+0xa8>
 801f492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f496:	2b15      	cmp	r3, #21
 801f498:	d8f6      	bhi.n	801f488 <_printf_i+0x28>
 801f49a:	a001      	add	r0, pc, #4	; (adr r0, 801f4a0 <_printf_i+0x40>)
 801f49c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f4a0:	0801f4f9 	.word	0x0801f4f9
 801f4a4:	0801f50d 	.word	0x0801f50d
 801f4a8:	0801f489 	.word	0x0801f489
 801f4ac:	0801f489 	.word	0x0801f489
 801f4b0:	0801f489 	.word	0x0801f489
 801f4b4:	0801f489 	.word	0x0801f489
 801f4b8:	0801f50d 	.word	0x0801f50d
 801f4bc:	0801f489 	.word	0x0801f489
 801f4c0:	0801f489 	.word	0x0801f489
 801f4c4:	0801f489 	.word	0x0801f489
 801f4c8:	0801f489 	.word	0x0801f489
 801f4cc:	0801f619 	.word	0x0801f619
 801f4d0:	0801f53d 	.word	0x0801f53d
 801f4d4:	0801f5fb 	.word	0x0801f5fb
 801f4d8:	0801f489 	.word	0x0801f489
 801f4dc:	0801f489 	.word	0x0801f489
 801f4e0:	0801f63b 	.word	0x0801f63b
 801f4e4:	0801f489 	.word	0x0801f489
 801f4e8:	0801f53d 	.word	0x0801f53d
 801f4ec:	0801f489 	.word	0x0801f489
 801f4f0:	0801f489 	.word	0x0801f489
 801f4f4:	0801f603 	.word	0x0801f603
 801f4f8:	680b      	ldr	r3, [r1, #0]
 801f4fa:	1d1a      	adds	r2, r3, #4
 801f4fc:	681b      	ldr	r3, [r3, #0]
 801f4fe:	600a      	str	r2, [r1, #0]
 801f500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f508:	2301      	movs	r3, #1
 801f50a:	e0a3      	b.n	801f654 <_printf_i+0x1f4>
 801f50c:	6825      	ldr	r5, [r4, #0]
 801f50e:	6808      	ldr	r0, [r1, #0]
 801f510:	062e      	lsls	r6, r5, #24
 801f512:	f100 0304 	add.w	r3, r0, #4
 801f516:	d50a      	bpl.n	801f52e <_printf_i+0xce>
 801f518:	6805      	ldr	r5, [r0, #0]
 801f51a:	600b      	str	r3, [r1, #0]
 801f51c:	2d00      	cmp	r5, #0
 801f51e:	da03      	bge.n	801f528 <_printf_i+0xc8>
 801f520:	232d      	movs	r3, #45	; 0x2d
 801f522:	426d      	negs	r5, r5
 801f524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f528:	485e      	ldr	r0, [pc, #376]	; (801f6a4 <_printf_i+0x244>)
 801f52a:	230a      	movs	r3, #10
 801f52c:	e019      	b.n	801f562 <_printf_i+0x102>
 801f52e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f532:	6805      	ldr	r5, [r0, #0]
 801f534:	600b      	str	r3, [r1, #0]
 801f536:	bf18      	it	ne
 801f538:	b22d      	sxthne	r5, r5
 801f53a:	e7ef      	b.n	801f51c <_printf_i+0xbc>
 801f53c:	680b      	ldr	r3, [r1, #0]
 801f53e:	6825      	ldr	r5, [r4, #0]
 801f540:	1d18      	adds	r0, r3, #4
 801f542:	6008      	str	r0, [r1, #0]
 801f544:	0628      	lsls	r0, r5, #24
 801f546:	d501      	bpl.n	801f54c <_printf_i+0xec>
 801f548:	681d      	ldr	r5, [r3, #0]
 801f54a:	e002      	b.n	801f552 <_printf_i+0xf2>
 801f54c:	0669      	lsls	r1, r5, #25
 801f54e:	d5fb      	bpl.n	801f548 <_printf_i+0xe8>
 801f550:	881d      	ldrh	r5, [r3, #0]
 801f552:	4854      	ldr	r0, [pc, #336]	; (801f6a4 <_printf_i+0x244>)
 801f554:	2f6f      	cmp	r7, #111	; 0x6f
 801f556:	bf0c      	ite	eq
 801f558:	2308      	moveq	r3, #8
 801f55a:	230a      	movne	r3, #10
 801f55c:	2100      	movs	r1, #0
 801f55e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f562:	6866      	ldr	r6, [r4, #4]
 801f564:	60a6      	str	r6, [r4, #8]
 801f566:	2e00      	cmp	r6, #0
 801f568:	bfa2      	ittt	ge
 801f56a:	6821      	ldrge	r1, [r4, #0]
 801f56c:	f021 0104 	bicge.w	r1, r1, #4
 801f570:	6021      	strge	r1, [r4, #0]
 801f572:	b90d      	cbnz	r5, 801f578 <_printf_i+0x118>
 801f574:	2e00      	cmp	r6, #0
 801f576:	d04d      	beq.n	801f614 <_printf_i+0x1b4>
 801f578:	4616      	mov	r6, r2
 801f57a:	fbb5 f1f3 	udiv	r1, r5, r3
 801f57e:	fb03 5711 	mls	r7, r3, r1, r5
 801f582:	5dc7      	ldrb	r7, [r0, r7]
 801f584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f588:	462f      	mov	r7, r5
 801f58a:	42bb      	cmp	r3, r7
 801f58c:	460d      	mov	r5, r1
 801f58e:	d9f4      	bls.n	801f57a <_printf_i+0x11a>
 801f590:	2b08      	cmp	r3, #8
 801f592:	d10b      	bne.n	801f5ac <_printf_i+0x14c>
 801f594:	6823      	ldr	r3, [r4, #0]
 801f596:	07df      	lsls	r7, r3, #31
 801f598:	d508      	bpl.n	801f5ac <_printf_i+0x14c>
 801f59a:	6923      	ldr	r3, [r4, #16]
 801f59c:	6861      	ldr	r1, [r4, #4]
 801f59e:	4299      	cmp	r1, r3
 801f5a0:	bfde      	ittt	le
 801f5a2:	2330      	movle	r3, #48	; 0x30
 801f5a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f5a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801f5ac:	1b92      	subs	r2, r2, r6
 801f5ae:	6122      	str	r2, [r4, #16]
 801f5b0:	f8cd a000 	str.w	sl, [sp]
 801f5b4:	464b      	mov	r3, r9
 801f5b6:	aa03      	add	r2, sp, #12
 801f5b8:	4621      	mov	r1, r4
 801f5ba:	4640      	mov	r0, r8
 801f5bc:	f7ff fee2 	bl	801f384 <_printf_common>
 801f5c0:	3001      	adds	r0, #1
 801f5c2:	d14c      	bne.n	801f65e <_printf_i+0x1fe>
 801f5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f5c8:	b004      	add	sp, #16
 801f5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5ce:	4835      	ldr	r0, [pc, #212]	; (801f6a4 <_printf_i+0x244>)
 801f5d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f5d4:	6823      	ldr	r3, [r4, #0]
 801f5d6:	680e      	ldr	r6, [r1, #0]
 801f5d8:	061f      	lsls	r7, r3, #24
 801f5da:	f856 5b04 	ldr.w	r5, [r6], #4
 801f5de:	600e      	str	r6, [r1, #0]
 801f5e0:	d514      	bpl.n	801f60c <_printf_i+0x1ac>
 801f5e2:	07d9      	lsls	r1, r3, #31
 801f5e4:	bf44      	itt	mi
 801f5e6:	f043 0320 	orrmi.w	r3, r3, #32
 801f5ea:	6023      	strmi	r3, [r4, #0]
 801f5ec:	b91d      	cbnz	r5, 801f5f6 <_printf_i+0x196>
 801f5ee:	6823      	ldr	r3, [r4, #0]
 801f5f0:	f023 0320 	bic.w	r3, r3, #32
 801f5f4:	6023      	str	r3, [r4, #0]
 801f5f6:	2310      	movs	r3, #16
 801f5f8:	e7b0      	b.n	801f55c <_printf_i+0xfc>
 801f5fa:	6823      	ldr	r3, [r4, #0]
 801f5fc:	f043 0320 	orr.w	r3, r3, #32
 801f600:	6023      	str	r3, [r4, #0]
 801f602:	2378      	movs	r3, #120	; 0x78
 801f604:	4828      	ldr	r0, [pc, #160]	; (801f6a8 <_printf_i+0x248>)
 801f606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f60a:	e7e3      	b.n	801f5d4 <_printf_i+0x174>
 801f60c:	065e      	lsls	r6, r3, #25
 801f60e:	bf48      	it	mi
 801f610:	b2ad      	uxthmi	r5, r5
 801f612:	e7e6      	b.n	801f5e2 <_printf_i+0x182>
 801f614:	4616      	mov	r6, r2
 801f616:	e7bb      	b.n	801f590 <_printf_i+0x130>
 801f618:	680b      	ldr	r3, [r1, #0]
 801f61a:	6826      	ldr	r6, [r4, #0]
 801f61c:	6960      	ldr	r0, [r4, #20]
 801f61e:	1d1d      	adds	r5, r3, #4
 801f620:	600d      	str	r5, [r1, #0]
 801f622:	0635      	lsls	r5, r6, #24
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	d501      	bpl.n	801f62c <_printf_i+0x1cc>
 801f628:	6018      	str	r0, [r3, #0]
 801f62a:	e002      	b.n	801f632 <_printf_i+0x1d2>
 801f62c:	0671      	lsls	r1, r6, #25
 801f62e:	d5fb      	bpl.n	801f628 <_printf_i+0x1c8>
 801f630:	8018      	strh	r0, [r3, #0]
 801f632:	2300      	movs	r3, #0
 801f634:	6123      	str	r3, [r4, #16]
 801f636:	4616      	mov	r6, r2
 801f638:	e7ba      	b.n	801f5b0 <_printf_i+0x150>
 801f63a:	680b      	ldr	r3, [r1, #0]
 801f63c:	1d1a      	adds	r2, r3, #4
 801f63e:	600a      	str	r2, [r1, #0]
 801f640:	681e      	ldr	r6, [r3, #0]
 801f642:	6862      	ldr	r2, [r4, #4]
 801f644:	2100      	movs	r1, #0
 801f646:	4630      	mov	r0, r6
 801f648:	f7e0 fe52 	bl	80002f0 <memchr>
 801f64c:	b108      	cbz	r0, 801f652 <_printf_i+0x1f2>
 801f64e:	1b80      	subs	r0, r0, r6
 801f650:	6060      	str	r0, [r4, #4]
 801f652:	6863      	ldr	r3, [r4, #4]
 801f654:	6123      	str	r3, [r4, #16]
 801f656:	2300      	movs	r3, #0
 801f658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f65c:	e7a8      	b.n	801f5b0 <_printf_i+0x150>
 801f65e:	6923      	ldr	r3, [r4, #16]
 801f660:	4632      	mov	r2, r6
 801f662:	4649      	mov	r1, r9
 801f664:	4640      	mov	r0, r8
 801f666:	47d0      	blx	sl
 801f668:	3001      	adds	r0, #1
 801f66a:	d0ab      	beq.n	801f5c4 <_printf_i+0x164>
 801f66c:	6823      	ldr	r3, [r4, #0]
 801f66e:	079b      	lsls	r3, r3, #30
 801f670:	d413      	bmi.n	801f69a <_printf_i+0x23a>
 801f672:	68e0      	ldr	r0, [r4, #12]
 801f674:	9b03      	ldr	r3, [sp, #12]
 801f676:	4298      	cmp	r0, r3
 801f678:	bfb8      	it	lt
 801f67a:	4618      	movlt	r0, r3
 801f67c:	e7a4      	b.n	801f5c8 <_printf_i+0x168>
 801f67e:	2301      	movs	r3, #1
 801f680:	4632      	mov	r2, r6
 801f682:	4649      	mov	r1, r9
 801f684:	4640      	mov	r0, r8
 801f686:	47d0      	blx	sl
 801f688:	3001      	adds	r0, #1
 801f68a:	d09b      	beq.n	801f5c4 <_printf_i+0x164>
 801f68c:	3501      	adds	r5, #1
 801f68e:	68e3      	ldr	r3, [r4, #12]
 801f690:	9903      	ldr	r1, [sp, #12]
 801f692:	1a5b      	subs	r3, r3, r1
 801f694:	42ab      	cmp	r3, r5
 801f696:	dcf2      	bgt.n	801f67e <_printf_i+0x21e>
 801f698:	e7eb      	b.n	801f672 <_printf_i+0x212>
 801f69a:	2500      	movs	r5, #0
 801f69c:	f104 0619 	add.w	r6, r4, #25
 801f6a0:	e7f5      	b.n	801f68e <_printf_i+0x22e>
 801f6a2:	bf00      	nop
 801f6a4:	08027ef6 	.word	0x08027ef6
 801f6a8:	08027f07 	.word	0x08027f07

0801f6ac <_scanf_float>:
 801f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b0:	b087      	sub	sp, #28
 801f6b2:	4617      	mov	r7, r2
 801f6b4:	9303      	str	r3, [sp, #12]
 801f6b6:	688b      	ldr	r3, [r1, #8]
 801f6b8:	1e5a      	subs	r2, r3, #1
 801f6ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f6be:	bf83      	ittte	hi
 801f6c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f6c4:	195b      	addhi	r3, r3, r5
 801f6c6:	9302      	strhi	r3, [sp, #8]
 801f6c8:	2300      	movls	r3, #0
 801f6ca:	bf86      	itte	hi
 801f6cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f6d0:	608b      	strhi	r3, [r1, #8]
 801f6d2:	9302      	strls	r3, [sp, #8]
 801f6d4:	680b      	ldr	r3, [r1, #0]
 801f6d6:	468b      	mov	fp, r1
 801f6d8:	2500      	movs	r5, #0
 801f6da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f6de:	f84b 3b1c 	str.w	r3, [fp], #28
 801f6e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f6e6:	4680      	mov	r8, r0
 801f6e8:	460c      	mov	r4, r1
 801f6ea:	465e      	mov	r6, fp
 801f6ec:	46aa      	mov	sl, r5
 801f6ee:	46a9      	mov	r9, r5
 801f6f0:	9501      	str	r5, [sp, #4]
 801f6f2:	68a2      	ldr	r2, [r4, #8]
 801f6f4:	b152      	cbz	r2, 801f70c <_scanf_float+0x60>
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	781b      	ldrb	r3, [r3, #0]
 801f6fa:	2b4e      	cmp	r3, #78	; 0x4e
 801f6fc:	d864      	bhi.n	801f7c8 <_scanf_float+0x11c>
 801f6fe:	2b40      	cmp	r3, #64	; 0x40
 801f700:	d83c      	bhi.n	801f77c <_scanf_float+0xd0>
 801f702:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f706:	b2c8      	uxtb	r0, r1
 801f708:	280e      	cmp	r0, #14
 801f70a:	d93a      	bls.n	801f782 <_scanf_float+0xd6>
 801f70c:	f1b9 0f00 	cmp.w	r9, #0
 801f710:	d003      	beq.n	801f71a <_scanf_float+0x6e>
 801f712:	6823      	ldr	r3, [r4, #0]
 801f714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f718:	6023      	str	r3, [r4, #0]
 801f71a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f71e:	f1ba 0f01 	cmp.w	sl, #1
 801f722:	f200 8113 	bhi.w	801f94c <_scanf_float+0x2a0>
 801f726:	455e      	cmp	r6, fp
 801f728:	f200 8105 	bhi.w	801f936 <_scanf_float+0x28a>
 801f72c:	2501      	movs	r5, #1
 801f72e:	4628      	mov	r0, r5
 801f730:	b007      	add	sp, #28
 801f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f736:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f73a:	2a0d      	cmp	r2, #13
 801f73c:	d8e6      	bhi.n	801f70c <_scanf_float+0x60>
 801f73e:	a101      	add	r1, pc, #4	; (adr r1, 801f744 <_scanf_float+0x98>)
 801f740:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f744:	0801f883 	.word	0x0801f883
 801f748:	0801f70d 	.word	0x0801f70d
 801f74c:	0801f70d 	.word	0x0801f70d
 801f750:	0801f70d 	.word	0x0801f70d
 801f754:	0801f8e3 	.word	0x0801f8e3
 801f758:	0801f8bb 	.word	0x0801f8bb
 801f75c:	0801f70d 	.word	0x0801f70d
 801f760:	0801f70d 	.word	0x0801f70d
 801f764:	0801f891 	.word	0x0801f891
 801f768:	0801f70d 	.word	0x0801f70d
 801f76c:	0801f70d 	.word	0x0801f70d
 801f770:	0801f70d 	.word	0x0801f70d
 801f774:	0801f70d 	.word	0x0801f70d
 801f778:	0801f849 	.word	0x0801f849
 801f77c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f780:	e7db      	b.n	801f73a <_scanf_float+0x8e>
 801f782:	290e      	cmp	r1, #14
 801f784:	d8c2      	bhi.n	801f70c <_scanf_float+0x60>
 801f786:	a001      	add	r0, pc, #4	; (adr r0, 801f78c <_scanf_float+0xe0>)
 801f788:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f78c:	0801f83b 	.word	0x0801f83b
 801f790:	0801f70d 	.word	0x0801f70d
 801f794:	0801f83b 	.word	0x0801f83b
 801f798:	0801f8cf 	.word	0x0801f8cf
 801f79c:	0801f70d 	.word	0x0801f70d
 801f7a0:	0801f7e9 	.word	0x0801f7e9
 801f7a4:	0801f825 	.word	0x0801f825
 801f7a8:	0801f825 	.word	0x0801f825
 801f7ac:	0801f825 	.word	0x0801f825
 801f7b0:	0801f825 	.word	0x0801f825
 801f7b4:	0801f825 	.word	0x0801f825
 801f7b8:	0801f825 	.word	0x0801f825
 801f7bc:	0801f825 	.word	0x0801f825
 801f7c0:	0801f825 	.word	0x0801f825
 801f7c4:	0801f825 	.word	0x0801f825
 801f7c8:	2b6e      	cmp	r3, #110	; 0x6e
 801f7ca:	d809      	bhi.n	801f7e0 <_scanf_float+0x134>
 801f7cc:	2b60      	cmp	r3, #96	; 0x60
 801f7ce:	d8b2      	bhi.n	801f736 <_scanf_float+0x8a>
 801f7d0:	2b54      	cmp	r3, #84	; 0x54
 801f7d2:	d077      	beq.n	801f8c4 <_scanf_float+0x218>
 801f7d4:	2b59      	cmp	r3, #89	; 0x59
 801f7d6:	d199      	bne.n	801f70c <_scanf_float+0x60>
 801f7d8:	2d07      	cmp	r5, #7
 801f7da:	d197      	bne.n	801f70c <_scanf_float+0x60>
 801f7dc:	2508      	movs	r5, #8
 801f7de:	e029      	b.n	801f834 <_scanf_float+0x188>
 801f7e0:	2b74      	cmp	r3, #116	; 0x74
 801f7e2:	d06f      	beq.n	801f8c4 <_scanf_float+0x218>
 801f7e4:	2b79      	cmp	r3, #121	; 0x79
 801f7e6:	e7f6      	b.n	801f7d6 <_scanf_float+0x12a>
 801f7e8:	6821      	ldr	r1, [r4, #0]
 801f7ea:	05c8      	lsls	r0, r1, #23
 801f7ec:	d51a      	bpl.n	801f824 <_scanf_float+0x178>
 801f7ee:	9b02      	ldr	r3, [sp, #8]
 801f7f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f7f4:	6021      	str	r1, [r4, #0]
 801f7f6:	f109 0901 	add.w	r9, r9, #1
 801f7fa:	b11b      	cbz	r3, 801f804 <_scanf_float+0x158>
 801f7fc:	3b01      	subs	r3, #1
 801f7fe:	3201      	adds	r2, #1
 801f800:	9302      	str	r3, [sp, #8]
 801f802:	60a2      	str	r2, [r4, #8]
 801f804:	68a3      	ldr	r3, [r4, #8]
 801f806:	3b01      	subs	r3, #1
 801f808:	60a3      	str	r3, [r4, #8]
 801f80a:	6923      	ldr	r3, [r4, #16]
 801f80c:	3301      	adds	r3, #1
 801f80e:	6123      	str	r3, [r4, #16]
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	3b01      	subs	r3, #1
 801f814:	2b00      	cmp	r3, #0
 801f816:	607b      	str	r3, [r7, #4]
 801f818:	f340 8084 	ble.w	801f924 <_scanf_float+0x278>
 801f81c:	683b      	ldr	r3, [r7, #0]
 801f81e:	3301      	adds	r3, #1
 801f820:	603b      	str	r3, [r7, #0]
 801f822:	e766      	b.n	801f6f2 <_scanf_float+0x46>
 801f824:	eb1a 0f05 	cmn.w	sl, r5
 801f828:	f47f af70 	bne.w	801f70c <_scanf_float+0x60>
 801f82c:	6822      	ldr	r2, [r4, #0]
 801f82e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f832:	6022      	str	r2, [r4, #0]
 801f834:	f806 3b01 	strb.w	r3, [r6], #1
 801f838:	e7e4      	b.n	801f804 <_scanf_float+0x158>
 801f83a:	6822      	ldr	r2, [r4, #0]
 801f83c:	0610      	lsls	r0, r2, #24
 801f83e:	f57f af65 	bpl.w	801f70c <_scanf_float+0x60>
 801f842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f846:	e7f4      	b.n	801f832 <_scanf_float+0x186>
 801f848:	f1ba 0f00 	cmp.w	sl, #0
 801f84c:	d10e      	bne.n	801f86c <_scanf_float+0x1c0>
 801f84e:	f1b9 0f00 	cmp.w	r9, #0
 801f852:	d10e      	bne.n	801f872 <_scanf_float+0x1c6>
 801f854:	6822      	ldr	r2, [r4, #0]
 801f856:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f85a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f85e:	d108      	bne.n	801f872 <_scanf_float+0x1c6>
 801f860:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f864:	6022      	str	r2, [r4, #0]
 801f866:	f04f 0a01 	mov.w	sl, #1
 801f86a:	e7e3      	b.n	801f834 <_scanf_float+0x188>
 801f86c:	f1ba 0f02 	cmp.w	sl, #2
 801f870:	d055      	beq.n	801f91e <_scanf_float+0x272>
 801f872:	2d01      	cmp	r5, #1
 801f874:	d002      	beq.n	801f87c <_scanf_float+0x1d0>
 801f876:	2d04      	cmp	r5, #4
 801f878:	f47f af48 	bne.w	801f70c <_scanf_float+0x60>
 801f87c:	3501      	adds	r5, #1
 801f87e:	b2ed      	uxtb	r5, r5
 801f880:	e7d8      	b.n	801f834 <_scanf_float+0x188>
 801f882:	f1ba 0f01 	cmp.w	sl, #1
 801f886:	f47f af41 	bne.w	801f70c <_scanf_float+0x60>
 801f88a:	f04f 0a02 	mov.w	sl, #2
 801f88e:	e7d1      	b.n	801f834 <_scanf_float+0x188>
 801f890:	b97d      	cbnz	r5, 801f8b2 <_scanf_float+0x206>
 801f892:	f1b9 0f00 	cmp.w	r9, #0
 801f896:	f47f af3c 	bne.w	801f712 <_scanf_float+0x66>
 801f89a:	6822      	ldr	r2, [r4, #0]
 801f89c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f8a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f8a4:	f47f af39 	bne.w	801f71a <_scanf_float+0x6e>
 801f8a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f8ac:	6022      	str	r2, [r4, #0]
 801f8ae:	2501      	movs	r5, #1
 801f8b0:	e7c0      	b.n	801f834 <_scanf_float+0x188>
 801f8b2:	2d03      	cmp	r5, #3
 801f8b4:	d0e2      	beq.n	801f87c <_scanf_float+0x1d0>
 801f8b6:	2d05      	cmp	r5, #5
 801f8b8:	e7de      	b.n	801f878 <_scanf_float+0x1cc>
 801f8ba:	2d02      	cmp	r5, #2
 801f8bc:	f47f af26 	bne.w	801f70c <_scanf_float+0x60>
 801f8c0:	2503      	movs	r5, #3
 801f8c2:	e7b7      	b.n	801f834 <_scanf_float+0x188>
 801f8c4:	2d06      	cmp	r5, #6
 801f8c6:	f47f af21 	bne.w	801f70c <_scanf_float+0x60>
 801f8ca:	2507      	movs	r5, #7
 801f8cc:	e7b2      	b.n	801f834 <_scanf_float+0x188>
 801f8ce:	6822      	ldr	r2, [r4, #0]
 801f8d0:	0591      	lsls	r1, r2, #22
 801f8d2:	f57f af1b 	bpl.w	801f70c <_scanf_float+0x60>
 801f8d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f8da:	6022      	str	r2, [r4, #0]
 801f8dc:	f8cd 9004 	str.w	r9, [sp, #4]
 801f8e0:	e7a8      	b.n	801f834 <_scanf_float+0x188>
 801f8e2:	6822      	ldr	r2, [r4, #0]
 801f8e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f8e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f8ec:	d006      	beq.n	801f8fc <_scanf_float+0x250>
 801f8ee:	0550      	lsls	r0, r2, #21
 801f8f0:	f57f af0c 	bpl.w	801f70c <_scanf_float+0x60>
 801f8f4:	f1b9 0f00 	cmp.w	r9, #0
 801f8f8:	f43f af0f 	beq.w	801f71a <_scanf_float+0x6e>
 801f8fc:	0591      	lsls	r1, r2, #22
 801f8fe:	bf58      	it	pl
 801f900:	9901      	ldrpl	r1, [sp, #4]
 801f902:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f906:	bf58      	it	pl
 801f908:	eba9 0101 	subpl.w	r1, r9, r1
 801f90c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f910:	bf58      	it	pl
 801f912:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f916:	6022      	str	r2, [r4, #0]
 801f918:	f04f 0900 	mov.w	r9, #0
 801f91c:	e78a      	b.n	801f834 <_scanf_float+0x188>
 801f91e:	f04f 0a03 	mov.w	sl, #3
 801f922:	e787      	b.n	801f834 <_scanf_float+0x188>
 801f924:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f928:	4639      	mov	r1, r7
 801f92a:	4640      	mov	r0, r8
 801f92c:	4798      	blx	r3
 801f92e:	2800      	cmp	r0, #0
 801f930:	f43f aedf 	beq.w	801f6f2 <_scanf_float+0x46>
 801f934:	e6ea      	b.n	801f70c <_scanf_float+0x60>
 801f936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f93a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f93e:	463a      	mov	r2, r7
 801f940:	4640      	mov	r0, r8
 801f942:	4798      	blx	r3
 801f944:	6923      	ldr	r3, [r4, #16]
 801f946:	3b01      	subs	r3, #1
 801f948:	6123      	str	r3, [r4, #16]
 801f94a:	e6ec      	b.n	801f726 <_scanf_float+0x7a>
 801f94c:	1e6b      	subs	r3, r5, #1
 801f94e:	2b06      	cmp	r3, #6
 801f950:	d825      	bhi.n	801f99e <_scanf_float+0x2f2>
 801f952:	2d02      	cmp	r5, #2
 801f954:	d836      	bhi.n	801f9c4 <_scanf_float+0x318>
 801f956:	455e      	cmp	r6, fp
 801f958:	f67f aee8 	bls.w	801f72c <_scanf_float+0x80>
 801f95c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f960:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f964:	463a      	mov	r2, r7
 801f966:	4640      	mov	r0, r8
 801f968:	4798      	blx	r3
 801f96a:	6923      	ldr	r3, [r4, #16]
 801f96c:	3b01      	subs	r3, #1
 801f96e:	6123      	str	r3, [r4, #16]
 801f970:	e7f1      	b.n	801f956 <_scanf_float+0x2aa>
 801f972:	9802      	ldr	r0, [sp, #8]
 801f974:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f978:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f97c:	9002      	str	r0, [sp, #8]
 801f97e:	463a      	mov	r2, r7
 801f980:	4640      	mov	r0, r8
 801f982:	4798      	blx	r3
 801f984:	6923      	ldr	r3, [r4, #16]
 801f986:	3b01      	subs	r3, #1
 801f988:	6123      	str	r3, [r4, #16]
 801f98a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f98e:	fa5f fa8a 	uxtb.w	sl, sl
 801f992:	f1ba 0f02 	cmp.w	sl, #2
 801f996:	d1ec      	bne.n	801f972 <_scanf_float+0x2c6>
 801f998:	3d03      	subs	r5, #3
 801f99a:	b2ed      	uxtb	r5, r5
 801f99c:	1b76      	subs	r6, r6, r5
 801f99e:	6823      	ldr	r3, [r4, #0]
 801f9a0:	05da      	lsls	r2, r3, #23
 801f9a2:	d52f      	bpl.n	801fa04 <_scanf_float+0x358>
 801f9a4:	055b      	lsls	r3, r3, #21
 801f9a6:	d510      	bpl.n	801f9ca <_scanf_float+0x31e>
 801f9a8:	455e      	cmp	r6, fp
 801f9aa:	f67f aebf 	bls.w	801f72c <_scanf_float+0x80>
 801f9ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f9b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f9b6:	463a      	mov	r2, r7
 801f9b8:	4640      	mov	r0, r8
 801f9ba:	4798      	blx	r3
 801f9bc:	6923      	ldr	r3, [r4, #16]
 801f9be:	3b01      	subs	r3, #1
 801f9c0:	6123      	str	r3, [r4, #16]
 801f9c2:	e7f1      	b.n	801f9a8 <_scanf_float+0x2fc>
 801f9c4:	46aa      	mov	sl, r5
 801f9c6:	9602      	str	r6, [sp, #8]
 801f9c8:	e7df      	b.n	801f98a <_scanf_float+0x2de>
 801f9ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f9ce:	6923      	ldr	r3, [r4, #16]
 801f9d0:	2965      	cmp	r1, #101	; 0x65
 801f9d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801f9d6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801f9da:	6123      	str	r3, [r4, #16]
 801f9dc:	d00c      	beq.n	801f9f8 <_scanf_float+0x34c>
 801f9de:	2945      	cmp	r1, #69	; 0x45
 801f9e0:	d00a      	beq.n	801f9f8 <_scanf_float+0x34c>
 801f9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f9e6:	463a      	mov	r2, r7
 801f9e8:	4640      	mov	r0, r8
 801f9ea:	4798      	blx	r3
 801f9ec:	6923      	ldr	r3, [r4, #16]
 801f9ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f9f2:	3b01      	subs	r3, #1
 801f9f4:	1eb5      	subs	r5, r6, #2
 801f9f6:	6123      	str	r3, [r4, #16]
 801f9f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f9fc:	463a      	mov	r2, r7
 801f9fe:	4640      	mov	r0, r8
 801fa00:	4798      	blx	r3
 801fa02:	462e      	mov	r6, r5
 801fa04:	6825      	ldr	r5, [r4, #0]
 801fa06:	f015 0510 	ands.w	r5, r5, #16
 801fa0a:	d14d      	bne.n	801faa8 <_scanf_float+0x3fc>
 801fa0c:	7035      	strb	r5, [r6, #0]
 801fa0e:	6823      	ldr	r3, [r4, #0]
 801fa10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801fa14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa18:	d11a      	bne.n	801fa50 <_scanf_float+0x3a4>
 801fa1a:	9b01      	ldr	r3, [sp, #4]
 801fa1c:	454b      	cmp	r3, r9
 801fa1e:	eba3 0209 	sub.w	r2, r3, r9
 801fa22:	d122      	bne.n	801fa6a <_scanf_float+0x3be>
 801fa24:	2200      	movs	r2, #0
 801fa26:	4659      	mov	r1, fp
 801fa28:	4640      	mov	r0, r8
 801fa2a:	f000 ff4b 	bl	80208c4 <_strtod_r>
 801fa2e:	9b03      	ldr	r3, [sp, #12]
 801fa30:	6821      	ldr	r1, [r4, #0]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	f011 0f02 	tst.w	r1, #2
 801fa38:	f103 0204 	add.w	r2, r3, #4
 801fa3c:	d020      	beq.n	801fa80 <_scanf_float+0x3d4>
 801fa3e:	9903      	ldr	r1, [sp, #12]
 801fa40:	600a      	str	r2, [r1, #0]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	ed83 0b00 	vstr	d0, [r3]
 801fa48:	68e3      	ldr	r3, [r4, #12]
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	60e3      	str	r3, [r4, #12]
 801fa4e:	e66e      	b.n	801f72e <_scanf_float+0x82>
 801fa50:	9b04      	ldr	r3, [sp, #16]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d0e6      	beq.n	801fa24 <_scanf_float+0x378>
 801fa56:	9905      	ldr	r1, [sp, #20]
 801fa58:	230a      	movs	r3, #10
 801fa5a:	462a      	mov	r2, r5
 801fa5c:	3101      	adds	r1, #1
 801fa5e:	4640      	mov	r0, r8
 801fa60:	f000 ffba 	bl	80209d8 <_strtol_r>
 801fa64:	9b04      	ldr	r3, [sp, #16]
 801fa66:	9e05      	ldr	r6, [sp, #20]
 801fa68:	1ac2      	subs	r2, r0, r3
 801fa6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801fa6e:	429e      	cmp	r6, r3
 801fa70:	bf28      	it	cs
 801fa72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801fa76:	490d      	ldr	r1, [pc, #52]	; (801faac <_scanf_float+0x400>)
 801fa78:	4630      	mov	r0, r6
 801fa7a:	f000 f8ff 	bl	801fc7c <siprintf>
 801fa7e:	e7d1      	b.n	801fa24 <_scanf_float+0x378>
 801fa80:	f011 0f04 	tst.w	r1, #4
 801fa84:	9903      	ldr	r1, [sp, #12]
 801fa86:	600a      	str	r2, [r1, #0]
 801fa88:	d1db      	bne.n	801fa42 <_scanf_float+0x396>
 801fa8a:	eeb4 0b40 	vcmp.f64	d0, d0
 801fa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa92:	681e      	ldr	r6, [r3, #0]
 801fa94:	d705      	bvc.n	801faa2 <_scanf_float+0x3f6>
 801fa96:	4806      	ldr	r0, [pc, #24]	; (801fab0 <_scanf_float+0x404>)
 801fa98:	f000 f8ea 	bl	801fc70 <nanf>
 801fa9c:	ed86 0a00 	vstr	s0, [r6]
 801faa0:	e7d2      	b.n	801fa48 <_scanf_float+0x39c>
 801faa2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801faa6:	e7f9      	b.n	801fa9c <_scanf_float+0x3f0>
 801faa8:	2500      	movs	r5, #0
 801faaa:	e640      	b.n	801f72e <_scanf_float+0x82>
 801faac:	08027f18 	.word	0x08027f18
 801fab0:	08028023 	.word	0x08028023

0801fab4 <iprintf>:
 801fab4:	b40f      	push	{r0, r1, r2, r3}
 801fab6:	4b0a      	ldr	r3, [pc, #40]	; (801fae0 <iprintf+0x2c>)
 801fab8:	b513      	push	{r0, r1, r4, lr}
 801faba:	681c      	ldr	r4, [r3, #0]
 801fabc:	b124      	cbz	r4, 801fac8 <iprintf+0x14>
 801fabe:	69a3      	ldr	r3, [r4, #24]
 801fac0:	b913      	cbnz	r3, 801fac8 <iprintf+0x14>
 801fac2:	4620      	mov	r0, r4
 801fac4:	f001 ff96 	bl	80219f4 <__sinit>
 801fac8:	ab05      	add	r3, sp, #20
 801faca:	9a04      	ldr	r2, [sp, #16]
 801facc:	68a1      	ldr	r1, [r4, #8]
 801face:	9301      	str	r3, [sp, #4]
 801fad0:	4620      	mov	r0, r4
 801fad2:	f003 fa87 	bl	8022fe4 <_vfiprintf_r>
 801fad6:	b002      	add	sp, #8
 801fad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fadc:	b004      	add	sp, #16
 801fade:	4770      	bx	lr
 801fae0:	24003448 	.word	0x24003448

0801fae4 <_puts_r>:
 801fae4:	b570      	push	{r4, r5, r6, lr}
 801fae6:	460e      	mov	r6, r1
 801fae8:	4605      	mov	r5, r0
 801faea:	b118      	cbz	r0, 801faf4 <_puts_r+0x10>
 801faec:	6983      	ldr	r3, [r0, #24]
 801faee:	b90b      	cbnz	r3, 801faf4 <_puts_r+0x10>
 801faf0:	f001 ff80 	bl	80219f4 <__sinit>
 801faf4:	69ab      	ldr	r3, [r5, #24]
 801faf6:	68ac      	ldr	r4, [r5, #8]
 801faf8:	b913      	cbnz	r3, 801fb00 <_puts_r+0x1c>
 801fafa:	4628      	mov	r0, r5
 801fafc:	f001 ff7a 	bl	80219f4 <__sinit>
 801fb00:	4b2c      	ldr	r3, [pc, #176]	; (801fbb4 <_puts_r+0xd0>)
 801fb02:	429c      	cmp	r4, r3
 801fb04:	d120      	bne.n	801fb48 <_puts_r+0x64>
 801fb06:	686c      	ldr	r4, [r5, #4]
 801fb08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb0a:	07db      	lsls	r3, r3, #31
 801fb0c:	d405      	bmi.n	801fb1a <_puts_r+0x36>
 801fb0e:	89a3      	ldrh	r3, [r4, #12]
 801fb10:	0598      	lsls	r0, r3, #22
 801fb12:	d402      	bmi.n	801fb1a <_puts_r+0x36>
 801fb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb16:	f002 fb90 	bl	802223a <__retarget_lock_acquire_recursive>
 801fb1a:	89a3      	ldrh	r3, [r4, #12]
 801fb1c:	0719      	lsls	r1, r3, #28
 801fb1e:	d51d      	bpl.n	801fb5c <_puts_r+0x78>
 801fb20:	6923      	ldr	r3, [r4, #16]
 801fb22:	b1db      	cbz	r3, 801fb5c <_puts_r+0x78>
 801fb24:	3e01      	subs	r6, #1
 801fb26:	68a3      	ldr	r3, [r4, #8]
 801fb28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fb2c:	3b01      	subs	r3, #1
 801fb2e:	60a3      	str	r3, [r4, #8]
 801fb30:	bb39      	cbnz	r1, 801fb82 <_puts_r+0x9e>
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	da38      	bge.n	801fba8 <_puts_r+0xc4>
 801fb36:	4622      	mov	r2, r4
 801fb38:	210a      	movs	r1, #10
 801fb3a:	4628      	mov	r0, r5
 801fb3c:	f000 ff4e 	bl	80209dc <__swbuf_r>
 801fb40:	3001      	adds	r0, #1
 801fb42:	d011      	beq.n	801fb68 <_puts_r+0x84>
 801fb44:	250a      	movs	r5, #10
 801fb46:	e011      	b.n	801fb6c <_puts_r+0x88>
 801fb48:	4b1b      	ldr	r3, [pc, #108]	; (801fbb8 <_puts_r+0xd4>)
 801fb4a:	429c      	cmp	r4, r3
 801fb4c:	d101      	bne.n	801fb52 <_puts_r+0x6e>
 801fb4e:	68ac      	ldr	r4, [r5, #8]
 801fb50:	e7da      	b.n	801fb08 <_puts_r+0x24>
 801fb52:	4b1a      	ldr	r3, [pc, #104]	; (801fbbc <_puts_r+0xd8>)
 801fb54:	429c      	cmp	r4, r3
 801fb56:	bf08      	it	eq
 801fb58:	68ec      	ldreq	r4, [r5, #12]
 801fb5a:	e7d5      	b.n	801fb08 <_puts_r+0x24>
 801fb5c:	4621      	mov	r1, r4
 801fb5e:	4628      	mov	r0, r5
 801fb60:	f000 ff8e 	bl	8020a80 <__swsetup_r>
 801fb64:	2800      	cmp	r0, #0
 801fb66:	d0dd      	beq.n	801fb24 <_puts_r+0x40>
 801fb68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801fb6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb6e:	07da      	lsls	r2, r3, #31
 801fb70:	d405      	bmi.n	801fb7e <_puts_r+0x9a>
 801fb72:	89a3      	ldrh	r3, [r4, #12]
 801fb74:	059b      	lsls	r3, r3, #22
 801fb76:	d402      	bmi.n	801fb7e <_puts_r+0x9a>
 801fb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb7a:	f002 fb5f 	bl	802223c <__retarget_lock_release_recursive>
 801fb7e:	4628      	mov	r0, r5
 801fb80:	bd70      	pop	{r4, r5, r6, pc}
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	da04      	bge.n	801fb90 <_puts_r+0xac>
 801fb86:	69a2      	ldr	r2, [r4, #24]
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	dc06      	bgt.n	801fb9a <_puts_r+0xb6>
 801fb8c:	290a      	cmp	r1, #10
 801fb8e:	d004      	beq.n	801fb9a <_puts_r+0xb6>
 801fb90:	6823      	ldr	r3, [r4, #0]
 801fb92:	1c5a      	adds	r2, r3, #1
 801fb94:	6022      	str	r2, [r4, #0]
 801fb96:	7019      	strb	r1, [r3, #0]
 801fb98:	e7c5      	b.n	801fb26 <_puts_r+0x42>
 801fb9a:	4622      	mov	r2, r4
 801fb9c:	4628      	mov	r0, r5
 801fb9e:	f000 ff1d 	bl	80209dc <__swbuf_r>
 801fba2:	3001      	adds	r0, #1
 801fba4:	d1bf      	bne.n	801fb26 <_puts_r+0x42>
 801fba6:	e7df      	b.n	801fb68 <_puts_r+0x84>
 801fba8:	6823      	ldr	r3, [r4, #0]
 801fbaa:	250a      	movs	r5, #10
 801fbac:	1c5a      	adds	r2, r3, #1
 801fbae:	6022      	str	r2, [r4, #0]
 801fbb0:	701d      	strb	r5, [r3, #0]
 801fbb2:	e7db      	b.n	801fb6c <_puts_r+0x88>
 801fbb4:	080280c4 	.word	0x080280c4
 801fbb8:	080280e4 	.word	0x080280e4
 801fbbc:	080280a4 	.word	0x080280a4

0801fbc0 <puts>:
 801fbc0:	4b02      	ldr	r3, [pc, #8]	; (801fbcc <puts+0xc>)
 801fbc2:	4601      	mov	r1, r0
 801fbc4:	6818      	ldr	r0, [r3, #0]
 801fbc6:	f7ff bf8d 	b.w	801fae4 <_puts_r>
 801fbca:	bf00      	nop
 801fbcc:	24003448 	.word	0x24003448

0801fbd0 <rand>:
 801fbd0:	4b17      	ldr	r3, [pc, #92]	; (801fc30 <rand+0x60>)
 801fbd2:	b510      	push	{r4, lr}
 801fbd4:	681c      	ldr	r4, [r3, #0]
 801fbd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fbd8:	b9b3      	cbnz	r3, 801fc08 <rand+0x38>
 801fbda:	2018      	movs	r0, #24
 801fbdc:	f7ff f834 	bl	801ec48 <malloc>
 801fbe0:	63a0      	str	r0, [r4, #56]	; 0x38
 801fbe2:	b928      	cbnz	r0, 801fbf0 <rand+0x20>
 801fbe4:	4602      	mov	r2, r0
 801fbe6:	4b13      	ldr	r3, [pc, #76]	; (801fc34 <rand+0x64>)
 801fbe8:	4813      	ldr	r0, [pc, #76]	; (801fc38 <rand+0x68>)
 801fbea:	214e      	movs	r1, #78	; 0x4e
 801fbec:	f000 ffb6 	bl	8020b5c <__assert_func>
 801fbf0:	4a12      	ldr	r2, [pc, #72]	; (801fc3c <rand+0x6c>)
 801fbf2:	4b13      	ldr	r3, [pc, #76]	; (801fc40 <rand+0x70>)
 801fbf4:	e9c0 2300 	strd	r2, r3, [r0]
 801fbf8:	4b12      	ldr	r3, [pc, #72]	; (801fc44 <rand+0x74>)
 801fbfa:	6083      	str	r3, [r0, #8]
 801fbfc:	230b      	movs	r3, #11
 801fbfe:	8183      	strh	r3, [r0, #12]
 801fc00:	2201      	movs	r2, #1
 801fc02:	2300      	movs	r3, #0
 801fc04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fc08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fc0a:	480f      	ldr	r0, [pc, #60]	; (801fc48 <rand+0x78>)
 801fc0c:	690a      	ldr	r2, [r1, #16]
 801fc0e:	694b      	ldr	r3, [r1, #20]
 801fc10:	4c0e      	ldr	r4, [pc, #56]	; (801fc4c <rand+0x7c>)
 801fc12:	4350      	muls	r0, r2
 801fc14:	fb04 0003 	mla	r0, r4, r3, r0
 801fc18:	fba2 3404 	umull	r3, r4, r2, r4
 801fc1c:	1c5a      	adds	r2, r3, #1
 801fc1e:	4404      	add	r4, r0
 801fc20:	f144 0000 	adc.w	r0, r4, #0
 801fc24:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801fc28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fc2c:	bd10      	pop	{r4, pc}
 801fc2e:	bf00      	nop
 801fc30:	24003448 	.word	0x24003448
 801fc34:	08027f1d 	.word	0x08027f1d
 801fc38:	08027f34 	.word	0x08027f34
 801fc3c:	abcd330e 	.word	0xabcd330e
 801fc40:	e66d1234 	.word	0xe66d1234
 801fc44:	0005deec 	.word	0x0005deec
 801fc48:	5851f42d 	.word	0x5851f42d
 801fc4c:	4c957f2d 	.word	0x4c957f2d

0801fc50 <_sbrk_r>:
 801fc50:	b538      	push	{r3, r4, r5, lr}
 801fc52:	4d06      	ldr	r5, [pc, #24]	; (801fc6c <_sbrk_r+0x1c>)
 801fc54:	2300      	movs	r3, #0
 801fc56:	4604      	mov	r4, r0
 801fc58:	4608      	mov	r0, r1
 801fc5a:	602b      	str	r3, [r5, #0]
 801fc5c:	f7e3 fc12 	bl	8003484 <_sbrk>
 801fc60:	1c43      	adds	r3, r0, #1
 801fc62:	d102      	bne.n	801fc6a <_sbrk_r+0x1a>
 801fc64:	682b      	ldr	r3, [r5, #0]
 801fc66:	b103      	cbz	r3, 801fc6a <_sbrk_r+0x1a>
 801fc68:	6023      	str	r3, [r4, #0]
 801fc6a:	bd38      	pop	{r3, r4, r5, pc}
 801fc6c:	2400b244 	.word	0x2400b244

0801fc70 <nanf>:
 801fc70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fc78 <nanf+0x8>
 801fc74:	4770      	bx	lr
 801fc76:	bf00      	nop
 801fc78:	7fc00000 	.word	0x7fc00000

0801fc7c <siprintf>:
 801fc7c:	b40e      	push	{r1, r2, r3}
 801fc7e:	b500      	push	{lr}
 801fc80:	b09c      	sub	sp, #112	; 0x70
 801fc82:	ab1d      	add	r3, sp, #116	; 0x74
 801fc84:	9002      	str	r0, [sp, #8]
 801fc86:	9006      	str	r0, [sp, #24]
 801fc88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fc8c:	4809      	ldr	r0, [pc, #36]	; (801fcb4 <siprintf+0x38>)
 801fc8e:	9107      	str	r1, [sp, #28]
 801fc90:	9104      	str	r1, [sp, #16]
 801fc92:	4909      	ldr	r1, [pc, #36]	; (801fcb8 <siprintf+0x3c>)
 801fc94:	f853 2b04 	ldr.w	r2, [r3], #4
 801fc98:	9105      	str	r1, [sp, #20]
 801fc9a:	6800      	ldr	r0, [r0, #0]
 801fc9c:	9301      	str	r3, [sp, #4]
 801fc9e:	a902      	add	r1, sp, #8
 801fca0:	f003 f876 	bl	8022d90 <_svfiprintf_r>
 801fca4:	9b02      	ldr	r3, [sp, #8]
 801fca6:	2200      	movs	r2, #0
 801fca8:	701a      	strb	r2, [r3, #0]
 801fcaa:	b01c      	add	sp, #112	; 0x70
 801fcac:	f85d eb04 	ldr.w	lr, [sp], #4
 801fcb0:	b003      	add	sp, #12
 801fcb2:	4770      	bx	lr
 801fcb4:	24003448 	.word	0x24003448
 801fcb8:	ffff0208 	.word	0xffff0208

0801fcbc <strncmp>:
 801fcbc:	b510      	push	{r4, lr}
 801fcbe:	b16a      	cbz	r2, 801fcdc <strncmp+0x20>
 801fcc0:	3901      	subs	r1, #1
 801fcc2:	1884      	adds	r4, r0, r2
 801fcc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fcc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fccc:	4293      	cmp	r3, r2
 801fcce:	d103      	bne.n	801fcd8 <strncmp+0x1c>
 801fcd0:	42a0      	cmp	r0, r4
 801fcd2:	d001      	beq.n	801fcd8 <strncmp+0x1c>
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d1f5      	bne.n	801fcc4 <strncmp+0x8>
 801fcd8:	1a98      	subs	r0, r3, r2
 801fcda:	bd10      	pop	{r4, pc}
 801fcdc:	4610      	mov	r0, r2
 801fcde:	e7fc      	b.n	801fcda <strncmp+0x1e>

0801fce0 <sulp>:
 801fce0:	b570      	push	{r4, r5, r6, lr}
 801fce2:	4604      	mov	r4, r0
 801fce4:	460d      	mov	r5, r1
 801fce6:	4616      	mov	r6, r2
 801fce8:	ec45 4b10 	vmov	d0, r4, r5
 801fcec:	f002 fe96 	bl	8022a1c <__ulp>
 801fcf0:	b17e      	cbz	r6, 801fd12 <sulp+0x32>
 801fcf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801fcf6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	dd09      	ble.n	801fd12 <sulp+0x32>
 801fcfe:	051b      	lsls	r3, r3, #20
 801fd00:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801fd04:	2000      	movs	r0, #0
 801fd06:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801fd0a:	ec41 0b17 	vmov	d7, r0, r1
 801fd0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fd12:	bd70      	pop	{r4, r5, r6, pc}
 801fd14:	0000      	movs	r0, r0
	...

0801fd18 <_strtod_l>:
 801fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd1c:	ed2d 8b0c 	vpush	{d8-d13}
 801fd20:	b09d      	sub	sp, #116	; 0x74
 801fd22:	461f      	mov	r7, r3
 801fd24:	2300      	movs	r3, #0
 801fd26:	9318      	str	r3, [sp, #96]	; 0x60
 801fd28:	4ba6      	ldr	r3, [pc, #664]	; (801ffc4 <_strtod_l+0x2ac>)
 801fd2a:	9213      	str	r2, [sp, #76]	; 0x4c
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	9308      	str	r3, [sp, #32]
 801fd30:	4604      	mov	r4, r0
 801fd32:	4618      	mov	r0, r3
 801fd34:	468a      	mov	sl, r1
 801fd36:	f7e0 fad3 	bl	80002e0 <strlen>
 801fd3a:	f04f 0800 	mov.w	r8, #0
 801fd3e:	4605      	mov	r5, r0
 801fd40:	f04f 0900 	mov.w	r9, #0
 801fd44:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801fd48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd4a:	781a      	ldrb	r2, [r3, #0]
 801fd4c:	2a2b      	cmp	r2, #43	; 0x2b
 801fd4e:	d04d      	beq.n	801fdec <_strtod_l+0xd4>
 801fd50:	d83a      	bhi.n	801fdc8 <_strtod_l+0xb0>
 801fd52:	2a0d      	cmp	r2, #13
 801fd54:	d833      	bhi.n	801fdbe <_strtod_l+0xa6>
 801fd56:	2a08      	cmp	r2, #8
 801fd58:	d833      	bhi.n	801fdc2 <_strtod_l+0xaa>
 801fd5a:	2a00      	cmp	r2, #0
 801fd5c:	d03d      	beq.n	801fdda <_strtod_l+0xc2>
 801fd5e:	2300      	movs	r3, #0
 801fd60:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801fd64:	7833      	ldrb	r3, [r6, #0]
 801fd66:	2b30      	cmp	r3, #48	; 0x30
 801fd68:	f040 80b6 	bne.w	801fed8 <_strtod_l+0x1c0>
 801fd6c:	7873      	ldrb	r3, [r6, #1]
 801fd6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fd72:	2b58      	cmp	r3, #88	; 0x58
 801fd74:	d16d      	bne.n	801fe52 <_strtod_l+0x13a>
 801fd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd78:	9301      	str	r3, [sp, #4]
 801fd7a:	ab18      	add	r3, sp, #96	; 0x60
 801fd7c:	9702      	str	r7, [sp, #8]
 801fd7e:	9300      	str	r3, [sp, #0]
 801fd80:	4a91      	ldr	r2, [pc, #580]	; (801ffc8 <_strtod_l+0x2b0>)
 801fd82:	ab19      	add	r3, sp, #100	; 0x64
 801fd84:	a917      	add	r1, sp, #92	; 0x5c
 801fd86:	4620      	mov	r0, r4
 801fd88:	f001 ff4a 	bl	8021c20 <__gethex>
 801fd8c:	f010 0507 	ands.w	r5, r0, #7
 801fd90:	4607      	mov	r7, r0
 801fd92:	d005      	beq.n	801fda0 <_strtod_l+0x88>
 801fd94:	2d06      	cmp	r5, #6
 801fd96:	d12b      	bne.n	801fdf0 <_strtod_l+0xd8>
 801fd98:	3601      	adds	r6, #1
 801fd9a:	2300      	movs	r3, #0
 801fd9c:	9617      	str	r6, [sp, #92]	; 0x5c
 801fd9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fda0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	f040 856e 	bne.w	8020884 <_strtod_l+0xb6c>
 801fda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdaa:	b1e3      	cbz	r3, 801fde6 <_strtod_l+0xce>
 801fdac:	ec49 8b17 	vmov	d7, r8, r9
 801fdb0:	eeb1 0b47 	vneg.f64	d0, d7
 801fdb4:	b01d      	add	sp, #116	; 0x74
 801fdb6:	ecbd 8b0c 	vpop	{d8-d13}
 801fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdbe:	2a20      	cmp	r2, #32
 801fdc0:	d1cd      	bne.n	801fd5e <_strtod_l+0x46>
 801fdc2:	3301      	adds	r3, #1
 801fdc4:	9317      	str	r3, [sp, #92]	; 0x5c
 801fdc6:	e7bf      	b.n	801fd48 <_strtod_l+0x30>
 801fdc8:	2a2d      	cmp	r2, #45	; 0x2d
 801fdca:	d1c8      	bne.n	801fd5e <_strtod_l+0x46>
 801fdcc:	2201      	movs	r2, #1
 801fdce:	920b      	str	r2, [sp, #44]	; 0x2c
 801fdd0:	1c5a      	adds	r2, r3, #1
 801fdd2:	9217      	str	r2, [sp, #92]	; 0x5c
 801fdd4:	785b      	ldrb	r3, [r3, #1]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d1c3      	bne.n	801fd62 <_strtod_l+0x4a>
 801fdda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fddc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	f040 854d 	bne.w	8020880 <_strtod_l+0xb68>
 801fde6:	ec49 8b10 	vmov	d0, r8, r9
 801fdea:	e7e3      	b.n	801fdb4 <_strtod_l+0x9c>
 801fdec:	2200      	movs	r2, #0
 801fdee:	e7ee      	b.n	801fdce <_strtod_l+0xb6>
 801fdf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fdf2:	b13a      	cbz	r2, 801fe04 <_strtod_l+0xec>
 801fdf4:	2135      	movs	r1, #53	; 0x35
 801fdf6:	a81a      	add	r0, sp, #104	; 0x68
 801fdf8:	f002 ff1c 	bl	8022c34 <__copybits>
 801fdfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fdfe:	4620      	mov	r0, r4
 801fe00:	f002 fae0 	bl	80223c4 <_Bfree>
 801fe04:	3d01      	subs	r5, #1
 801fe06:	2d05      	cmp	r5, #5
 801fe08:	d807      	bhi.n	801fe1a <_strtod_l+0x102>
 801fe0a:	e8df f005 	tbb	[pc, r5]
 801fe0e:	0b0e      	.short	0x0b0e
 801fe10:	030e1d18 	.word	0x030e1d18
 801fe14:	f04f 0900 	mov.w	r9, #0
 801fe18:	46c8      	mov	r8, r9
 801fe1a:	073b      	lsls	r3, r7, #28
 801fe1c:	d5c0      	bpl.n	801fda0 <_strtod_l+0x88>
 801fe1e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801fe22:	e7bd      	b.n	801fda0 <_strtod_l+0x88>
 801fe24:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801fe28:	e7f7      	b.n	801fe1a <_strtod_l+0x102>
 801fe2a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801fe2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fe30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801fe34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801fe38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801fe3c:	e7ed      	b.n	801fe1a <_strtod_l+0x102>
 801fe3e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801ffcc <_strtod_l+0x2b4>
 801fe42:	f04f 0800 	mov.w	r8, #0
 801fe46:	e7e8      	b.n	801fe1a <_strtod_l+0x102>
 801fe48:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801fe4c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801fe50:	e7e3      	b.n	801fe1a <_strtod_l+0x102>
 801fe52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe54:	1c5a      	adds	r2, r3, #1
 801fe56:	9217      	str	r2, [sp, #92]	; 0x5c
 801fe58:	785b      	ldrb	r3, [r3, #1]
 801fe5a:	2b30      	cmp	r3, #48	; 0x30
 801fe5c:	d0f9      	beq.n	801fe52 <_strtod_l+0x13a>
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d09e      	beq.n	801fda0 <_strtod_l+0x88>
 801fe62:	2301      	movs	r3, #1
 801fe64:	9306      	str	r3, [sp, #24]
 801fe66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe68:	930c      	str	r3, [sp, #48]	; 0x30
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	9304      	str	r3, [sp, #16]
 801fe6e:	930a      	str	r3, [sp, #40]	; 0x28
 801fe70:	461e      	mov	r6, r3
 801fe72:	220a      	movs	r2, #10
 801fe74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fe76:	f890 b000 	ldrb.w	fp, [r0]
 801fe7a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801fe7e:	b2d9      	uxtb	r1, r3
 801fe80:	2909      	cmp	r1, #9
 801fe82:	d92b      	bls.n	801fedc <_strtod_l+0x1c4>
 801fe84:	9908      	ldr	r1, [sp, #32]
 801fe86:	462a      	mov	r2, r5
 801fe88:	f7ff ff18 	bl	801fcbc <strncmp>
 801fe8c:	2800      	cmp	r0, #0
 801fe8e:	d035      	beq.n	801fefc <_strtod_l+0x1e4>
 801fe90:	2000      	movs	r0, #0
 801fe92:	465a      	mov	r2, fp
 801fe94:	4633      	mov	r3, r6
 801fe96:	4683      	mov	fp, r0
 801fe98:	4601      	mov	r1, r0
 801fe9a:	2a65      	cmp	r2, #101	; 0x65
 801fe9c:	d001      	beq.n	801fea2 <_strtod_l+0x18a>
 801fe9e:	2a45      	cmp	r2, #69	; 0x45
 801fea0:	d118      	bne.n	801fed4 <_strtod_l+0x1bc>
 801fea2:	b91b      	cbnz	r3, 801feac <_strtod_l+0x194>
 801fea4:	9b06      	ldr	r3, [sp, #24]
 801fea6:	4303      	orrs	r3, r0
 801fea8:	d097      	beq.n	801fdda <_strtod_l+0xc2>
 801feaa:	2300      	movs	r3, #0
 801feac:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801feb0:	f10a 0201 	add.w	r2, sl, #1
 801feb4:	9217      	str	r2, [sp, #92]	; 0x5c
 801feb6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801feba:	2a2b      	cmp	r2, #43	; 0x2b
 801febc:	d077      	beq.n	801ffae <_strtod_l+0x296>
 801febe:	2a2d      	cmp	r2, #45	; 0x2d
 801fec0:	d07d      	beq.n	801ffbe <_strtod_l+0x2a6>
 801fec2:	f04f 0e00 	mov.w	lr, #0
 801fec6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801feca:	2d09      	cmp	r5, #9
 801fecc:	f240 8084 	bls.w	801ffd8 <_strtod_l+0x2c0>
 801fed0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801fed4:	2500      	movs	r5, #0
 801fed6:	e09f      	b.n	8020018 <_strtod_l+0x300>
 801fed8:	2300      	movs	r3, #0
 801feda:	e7c3      	b.n	801fe64 <_strtod_l+0x14c>
 801fedc:	2e08      	cmp	r6, #8
 801fede:	bfd5      	itete	le
 801fee0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801fee2:	9904      	ldrgt	r1, [sp, #16]
 801fee4:	fb02 3301 	mlale	r3, r2, r1, r3
 801fee8:	fb02 3301 	mlagt	r3, r2, r1, r3
 801feec:	f100 0001 	add.w	r0, r0, #1
 801fef0:	bfd4      	ite	le
 801fef2:	930a      	strle	r3, [sp, #40]	; 0x28
 801fef4:	9304      	strgt	r3, [sp, #16]
 801fef6:	3601      	adds	r6, #1
 801fef8:	9017      	str	r0, [sp, #92]	; 0x5c
 801fefa:	e7bb      	b.n	801fe74 <_strtod_l+0x15c>
 801fefc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fefe:	195a      	adds	r2, r3, r5
 801ff00:	9217      	str	r2, [sp, #92]	; 0x5c
 801ff02:	5d5a      	ldrb	r2, [r3, r5]
 801ff04:	b3ae      	cbz	r6, 801ff72 <_strtod_l+0x25a>
 801ff06:	4683      	mov	fp, r0
 801ff08:	4633      	mov	r3, r6
 801ff0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801ff0e:	2909      	cmp	r1, #9
 801ff10:	d912      	bls.n	801ff38 <_strtod_l+0x220>
 801ff12:	2101      	movs	r1, #1
 801ff14:	e7c1      	b.n	801fe9a <_strtod_l+0x182>
 801ff16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff18:	1c5a      	adds	r2, r3, #1
 801ff1a:	9217      	str	r2, [sp, #92]	; 0x5c
 801ff1c:	785a      	ldrb	r2, [r3, #1]
 801ff1e:	3001      	adds	r0, #1
 801ff20:	2a30      	cmp	r2, #48	; 0x30
 801ff22:	d0f8      	beq.n	801ff16 <_strtod_l+0x1fe>
 801ff24:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ff28:	2b08      	cmp	r3, #8
 801ff2a:	f200 84b0 	bhi.w	802088e <_strtod_l+0xb76>
 801ff2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff30:	930c      	str	r3, [sp, #48]	; 0x30
 801ff32:	4683      	mov	fp, r0
 801ff34:	2000      	movs	r0, #0
 801ff36:	4603      	mov	r3, r0
 801ff38:	3a30      	subs	r2, #48	; 0x30
 801ff3a:	f100 0101 	add.w	r1, r0, #1
 801ff3e:	d012      	beq.n	801ff66 <_strtod_l+0x24e>
 801ff40:	448b      	add	fp, r1
 801ff42:	eb00 0c03 	add.w	ip, r0, r3
 801ff46:	4619      	mov	r1, r3
 801ff48:	250a      	movs	r5, #10
 801ff4a:	4561      	cmp	r1, ip
 801ff4c:	d113      	bne.n	801ff76 <_strtod_l+0x25e>
 801ff4e:	1819      	adds	r1, r3, r0
 801ff50:	2908      	cmp	r1, #8
 801ff52:	f103 0301 	add.w	r3, r3, #1
 801ff56:	4403      	add	r3, r0
 801ff58:	dc1d      	bgt.n	801ff96 <_strtod_l+0x27e>
 801ff5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ff5c:	210a      	movs	r1, #10
 801ff5e:	fb01 2200 	mla	r2, r1, r0, r2
 801ff62:	920a      	str	r2, [sp, #40]	; 0x28
 801ff64:	2100      	movs	r1, #0
 801ff66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ff68:	1c50      	adds	r0, r2, #1
 801ff6a:	9017      	str	r0, [sp, #92]	; 0x5c
 801ff6c:	7852      	ldrb	r2, [r2, #1]
 801ff6e:	4608      	mov	r0, r1
 801ff70:	e7cb      	b.n	801ff0a <_strtod_l+0x1f2>
 801ff72:	4630      	mov	r0, r6
 801ff74:	e7d4      	b.n	801ff20 <_strtod_l+0x208>
 801ff76:	2908      	cmp	r1, #8
 801ff78:	dc04      	bgt.n	801ff84 <_strtod_l+0x26c>
 801ff7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ff7c:	436f      	muls	r7, r5
 801ff7e:	970a      	str	r7, [sp, #40]	; 0x28
 801ff80:	3101      	adds	r1, #1
 801ff82:	e7e2      	b.n	801ff4a <_strtod_l+0x232>
 801ff84:	f101 0e01 	add.w	lr, r1, #1
 801ff88:	f1be 0f10 	cmp.w	lr, #16
 801ff8c:	bfde      	ittt	le
 801ff8e:	9f04      	ldrle	r7, [sp, #16]
 801ff90:	436f      	mulle	r7, r5
 801ff92:	9704      	strle	r7, [sp, #16]
 801ff94:	e7f4      	b.n	801ff80 <_strtod_l+0x268>
 801ff96:	2b10      	cmp	r3, #16
 801ff98:	bfdf      	itttt	le
 801ff9a:	9804      	ldrle	r0, [sp, #16]
 801ff9c:	210a      	movle	r1, #10
 801ff9e:	fb01 2200 	mlale	r2, r1, r0, r2
 801ffa2:	9204      	strle	r2, [sp, #16]
 801ffa4:	e7de      	b.n	801ff64 <_strtod_l+0x24c>
 801ffa6:	f04f 0b00 	mov.w	fp, #0
 801ffaa:	2101      	movs	r1, #1
 801ffac:	e77a      	b.n	801fea4 <_strtod_l+0x18c>
 801ffae:	f04f 0e00 	mov.w	lr, #0
 801ffb2:	f10a 0202 	add.w	r2, sl, #2
 801ffb6:	9217      	str	r2, [sp, #92]	; 0x5c
 801ffb8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801ffbc:	e783      	b.n	801fec6 <_strtod_l+0x1ae>
 801ffbe:	f04f 0e01 	mov.w	lr, #1
 801ffc2:	e7f6      	b.n	801ffb2 <_strtod_l+0x29a>
 801ffc4:	08028170 	.word	0x08028170
 801ffc8:	08027f94 	.word	0x08027f94
 801ffcc:	7ff00000 	.word	0x7ff00000
 801ffd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ffd2:	1c55      	adds	r5, r2, #1
 801ffd4:	9517      	str	r5, [sp, #92]	; 0x5c
 801ffd6:	7852      	ldrb	r2, [r2, #1]
 801ffd8:	2a30      	cmp	r2, #48	; 0x30
 801ffda:	d0f9      	beq.n	801ffd0 <_strtod_l+0x2b8>
 801ffdc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801ffe0:	2d08      	cmp	r5, #8
 801ffe2:	f63f af77 	bhi.w	801fed4 <_strtod_l+0x1bc>
 801ffe6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801ffea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ffec:	9208      	str	r2, [sp, #32]
 801ffee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fff0:	1c55      	adds	r5, r2, #1
 801fff2:	9517      	str	r5, [sp, #92]	; 0x5c
 801fff4:	7852      	ldrb	r2, [r2, #1]
 801fff6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801fffa:	2f09      	cmp	r7, #9
 801fffc:	d937      	bls.n	802006e <_strtod_l+0x356>
 801fffe:	9f08      	ldr	r7, [sp, #32]
 8020000:	1bed      	subs	r5, r5, r7
 8020002:	2d08      	cmp	r5, #8
 8020004:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8020008:	dc02      	bgt.n	8020010 <_strtod_l+0x2f8>
 802000a:	4565      	cmp	r5, ip
 802000c:	bfa8      	it	ge
 802000e:	4665      	movge	r5, ip
 8020010:	f1be 0f00 	cmp.w	lr, #0
 8020014:	d000      	beq.n	8020018 <_strtod_l+0x300>
 8020016:	426d      	negs	r5, r5
 8020018:	2b00      	cmp	r3, #0
 802001a:	d14f      	bne.n	80200bc <_strtod_l+0x3a4>
 802001c:	9b06      	ldr	r3, [sp, #24]
 802001e:	4303      	orrs	r3, r0
 8020020:	f47f aebe 	bne.w	801fda0 <_strtod_l+0x88>
 8020024:	2900      	cmp	r1, #0
 8020026:	f47f aed8 	bne.w	801fdda <_strtod_l+0xc2>
 802002a:	2a69      	cmp	r2, #105	; 0x69
 802002c:	d027      	beq.n	802007e <_strtod_l+0x366>
 802002e:	dc24      	bgt.n	802007a <_strtod_l+0x362>
 8020030:	2a49      	cmp	r2, #73	; 0x49
 8020032:	d024      	beq.n	802007e <_strtod_l+0x366>
 8020034:	2a4e      	cmp	r2, #78	; 0x4e
 8020036:	f47f aed0 	bne.w	801fdda <_strtod_l+0xc2>
 802003a:	499b      	ldr	r1, [pc, #620]	; (80202a8 <_strtod_l+0x590>)
 802003c:	a817      	add	r0, sp, #92	; 0x5c
 802003e:	f002 f847 	bl	80220d0 <__match>
 8020042:	2800      	cmp	r0, #0
 8020044:	f43f aec9 	beq.w	801fdda <_strtod_l+0xc2>
 8020048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802004a:	781b      	ldrb	r3, [r3, #0]
 802004c:	2b28      	cmp	r3, #40	; 0x28
 802004e:	d12d      	bne.n	80200ac <_strtod_l+0x394>
 8020050:	4996      	ldr	r1, [pc, #600]	; (80202ac <_strtod_l+0x594>)
 8020052:	aa1a      	add	r2, sp, #104	; 0x68
 8020054:	a817      	add	r0, sp, #92	; 0x5c
 8020056:	f002 f84f 	bl	80220f8 <__hexnan>
 802005a:	2805      	cmp	r0, #5
 802005c:	d126      	bne.n	80200ac <_strtod_l+0x394>
 802005e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020060:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8020064:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8020068:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802006c:	e698      	b.n	801fda0 <_strtod_l+0x88>
 802006e:	250a      	movs	r5, #10
 8020070:	fb05 250c 	mla	r5, r5, ip, r2
 8020074:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8020078:	e7b9      	b.n	801ffee <_strtod_l+0x2d6>
 802007a:	2a6e      	cmp	r2, #110	; 0x6e
 802007c:	e7db      	b.n	8020036 <_strtod_l+0x31e>
 802007e:	498c      	ldr	r1, [pc, #560]	; (80202b0 <_strtod_l+0x598>)
 8020080:	a817      	add	r0, sp, #92	; 0x5c
 8020082:	f002 f825 	bl	80220d0 <__match>
 8020086:	2800      	cmp	r0, #0
 8020088:	f43f aea7 	beq.w	801fdda <_strtod_l+0xc2>
 802008c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802008e:	4989      	ldr	r1, [pc, #548]	; (80202b4 <_strtod_l+0x59c>)
 8020090:	3b01      	subs	r3, #1
 8020092:	a817      	add	r0, sp, #92	; 0x5c
 8020094:	9317      	str	r3, [sp, #92]	; 0x5c
 8020096:	f002 f81b 	bl	80220d0 <__match>
 802009a:	b910      	cbnz	r0, 80200a2 <_strtod_l+0x38a>
 802009c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802009e:	3301      	adds	r3, #1
 80200a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80200a2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80202c8 <_strtod_l+0x5b0>
 80200a6:	f04f 0800 	mov.w	r8, #0
 80200aa:	e679      	b.n	801fda0 <_strtod_l+0x88>
 80200ac:	4882      	ldr	r0, [pc, #520]	; (80202b8 <_strtod_l+0x5a0>)
 80200ae:	f003 f8cb 	bl	8023248 <nan>
 80200b2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80200b6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80200ba:	e671      	b.n	801fda0 <_strtod_l+0x88>
 80200bc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80200c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80200c4:	eba5 020b 	sub.w	r2, r5, fp
 80200c8:	2e00      	cmp	r6, #0
 80200ca:	bf08      	it	eq
 80200cc:	461e      	moveq	r6, r3
 80200ce:	2b10      	cmp	r3, #16
 80200d0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80200d4:	9206      	str	r2, [sp, #24]
 80200d6:	461a      	mov	r2, r3
 80200d8:	bfa8      	it	ge
 80200da:	2210      	movge	r2, #16
 80200dc:	2b09      	cmp	r3, #9
 80200de:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80200e2:	dd0e      	ble.n	8020102 <_strtod_l+0x3ea>
 80200e4:	4975      	ldr	r1, [pc, #468]	; (80202bc <_strtod_l+0x5a4>)
 80200e6:	eddd 7a04 	vldr	s15, [sp, #16]
 80200ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80200ee:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80200f2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80200f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80200fa:	eea5 7b06 	vfma.f64	d7, d5, d6
 80200fe:	ec59 8b17 	vmov	r8, r9, d7
 8020102:	2b0f      	cmp	r3, #15
 8020104:	dc37      	bgt.n	8020176 <_strtod_l+0x45e>
 8020106:	9906      	ldr	r1, [sp, #24]
 8020108:	2900      	cmp	r1, #0
 802010a:	f43f ae49 	beq.w	801fda0 <_strtod_l+0x88>
 802010e:	dd23      	ble.n	8020158 <_strtod_l+0x440>
 8020110:	2916      	cmp	r1, #22
 8020112:	dc0b      	bgt.n	802012c <_strtod_l+0x414>
 8020114:	4b69      	ldr	r3, [pc, #420]	; (80202bc <_strtod_l+0x5a4>)
 8020116:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802011a:	ed93 7b00 	vldr	d7, [r3]
 802011e:	ec49 8b16 	vmov	d6, r8, r9
 8020122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020126:	ec59 8b17 	vmov	r8, r9, d7
 802012a:	e639      	b.n	801fda0 <_strtod_l+0x88>
 802012c:	9806      	ldr	r0, [sp, #24]
 802012e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8020132:	4281      	cmp	r1, r0
 8020134:	db1f      	blt.n	8020176 <_strtod_l+0x45e>
 8020136:	4a61      	ldr	r2, [pc, #388]	; (80202bc <_strtod_l+0x5a4>)
 8020138:	f1c3 030f 	rsb	r3, r3, #15
 802013c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8020140:	ed91 7b00 	vldr	d7, [r1]
 8020144:	ec49 8b16 	vmov	d6, r8, r9
 8020148:	1ac3      	subs	r3, r0, r3
 802014a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802014e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020152:	ed92 6b00 	vldr	d6, [r2]
 8020156:	e7e4      	b.n	8020122 <_strtod_l+0x40a>
 8020158:	9906      	ldr	r1, [sp, #24]
 802015a:	3116      	adds	r1, #22
 802015c:	db0b      	blt.n	8020176 <_strtod_l+0x45e>
 802015e:	4b57      	ldr	r3, [pc, #348]	; (80202bc <_strtod_l+0x5a4>)
 8020160:	ebab 0505 	sub.w	r5, fp, r5
 8020164:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8020168:	ed95 7b00 	vldr	d7, [r5]
 802016c:	ec49 8b16 	vmov	d6, r8, r9
 8020170:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8020174:	e7d7      	b.n	8020126 <_strtod_l+0x40e>
 8020176:	9906      	ldr	r1, [sp, #24]
 8020178:	1a9a      	subs	r2, r3, r2
 802017a:	440a      	add	r2, r1
 802017c:	2a00      	cmp	r2, #0
 802017e:	dd74      	ble.n	802026a <_strtod_l+0x552>
 8020180:	f012 000f 	ands.w	r0, r2, #15
 8020184:	d00a      	beq.n	802019c <_strtod_l+0x484>
 8020186:	494d      	ldr	r1, [pc, #308]	; (80202bc <_strtod_l+0x5a4>)
 8020188:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802018c:	ed91 7b00 	vldr	d7, [r1]
 8020190:	ec49 8b16 	vmov	d6, r8, r9
 8020194:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020198:	ec59 8b17 	vmov	r8, r9, d7
 802019c:	f032 020f 	bics.w	r2, r2, #15
 80201a0:	d04f      	beq.n	8020242 <_strtod_l+0x52a>
 80201a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80201a6:	dd22      	ble.n	80201ee <_strtod_l+0x4d6>
 80201a8:	2500      	movs	r5, #0
 80201aa:	462e      	mov	r6, r5
 80201ac:	950a      	str	r5, [sp, #40]	; 0x28
 80201ae:	462f      	mov	r7, r5
 80201b0:	2322      	movs	r3, #34	; 0x22
 80201b2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80202c8 <_strtod_l+0x5b0>
 80201b6:	6023      	str	r3, [r4, #0]
 80201b8:	f04f 0800 	mov.w	r8, #0
 80201bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201be:	2b00      	cmp	r3, #0
 80201c0:	f43f adee 	beq.w	801fda0 <_strtod_l+0x88>
 80201c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80201c6:	4620      	mov	r0, r4
 80201c8:	f002 f8fc 	bl	80223c4 <_Bfree>
 80201cc:	4639      	mov	r1, r7
 80201ce:	4620      	mov	r0, r4
 80201d0:	f002 f8f8 	bl	80223c4 <_Bfree>
 80201d4:	4631      	mov	r1, r6
 80201d6:	4620      	mov	r0, r4
 80201d8:	f002 f8f4 	bl	80223c4 <_Bfree>
 80201dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80201de:	4620      	mov	r0, r4
 80201e0:	f002 f8f0 	bl	80223c4 <_Bfree>
 80201e4:	4629      	mov	r1, r5
 80201e6:	4620      	mov	r0, r4
 80201e8:	f002 f8ec 	bl	80223c4 <_Bfree>
 80201ec:	e5d8      	b.n	801fda0 <_strtod_l+0x88>
 80201ee:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80201f2:	2000      	movs	r0, #0
 80201f4:	4f32      	ldr	r7, [pc, #200]	; (80202c0 <_strtod_l+0x5a8>)
 80201f6:	1112      	asrs	r2, r2, #4
 80201f8:	4601      	mov	r1, r0
 80201fa:	2a01      	cmp	r2, #1
 80201fc:	dc24      	bgt.n	8020248 <_strtod_l+0x530>
 80201fe:	b108      	cbz	r0, 8020204 <_strtod_l+0x4ec>
 8020200:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8020204:	4a2e      	ldr	r2, [pc, #184]	; (80202c0 <_strtod_l+0x5a8>)
 8020206:	482f      	ldr	r0, [pc, #188]	; (80202c4 <_strtod_l+0x5ac>)
 8020208:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802020c:	ed91 7b00 	vldr	d7, [r1]
 8020210:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8020214:	ec49 8b16 	vmov	d6, r8, r9
 8020218:	ee27 7b06 	vmul.f64	d7, d7, d6
 802021c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020220:	9905      	ldr	r1, [sp, #20]
 8020222:	4a29      	ldr	r2, [pc, #164]	; (80202c8 <_strtod_l+0x5b0>)
 8020224:	400a      	ands	r2, r1
 8020226:	4282      	cmp	r2, r0
 8020228:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802022c:	d8bc      	bhi.n	80201a8 <_strtod_l+0x490>
 802022e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8020232:	4282      	cmp	r2, r0
 8020234:	bf86      	itte	hi
 8020236:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80202cc <_strtod_l+0x5b4>
 802023a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 802023e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8020242:	2200      	movs	r2, #0
 8020244:	9204      	str	r2, [sp, #16]
 8020246:	e07f      	b.n	8020348 <_strtod_l+0x630>
 8020248:	f012 0f01 	tst.w	r2, #1
 802024c:	d00a      	beq.n	8020264 <_strtod_l+0x54c>
 802024e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8020252:	ed90 7b00 	vldr	d7, [r0]
 8020256:	ed9d 6b04 	vldr	d6, [sp, #16]
 802025a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802025e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020262:	2001      	movs	r0, #1
 8020264:	3101      	adds	r1, #1
 8020266:	1052      	asrs	r2, r2, #1
 8020268:	e7c7      	b.n	80201fa <_strtod_l+0x4e2>
 802026a:	d0ea      	beq.n	8020242 <_strtod_l+0x52a>
 802026c:	4252      	negs	r2, r2
 802026e:	f012 000f 	ands.w	r0, r2, #15
 8020272:	d00a      	beq.n	802028a <_strtod_l+0x572>
 8020274:	4911      	ldr	r1, [pc, #68]	; (80202bc <_strtod_l+0x5a4>)
 8020276:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802027a:	ed91 7b00 	vldr	d7, [r1]
 802027e:	ec49 8b16 	vmov	d6, r8, r9
 8020282:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8020286:	ec59 8b17 	vmov	r8, r9, d7
 802028a:	1112      	asrs	r2, r2, #4
 802028c:	d0d9      	beq.n	8020242 <_strtod_l+0x52a>
 802028e:	2a1f      	cmp	r2, #31
 8020290:	dd1e      	ble.n	80202d0 <_strtod_l+0x5b8>
 8020292:	2500      	movs	r5, #0
 8020294:	462e      	mov	r6, r5
 8020296:	950a      	str	r5, [sp, #40]	; 0x28
 8020298:	462f      	mov	r7, r5
 802029a:	2322      	movs	r3, #34	; 0x22
 802029c:	f04f 0800 	mov.w	r8, #0
 80202a0:	f04f 0900 	mov.w	r9, #0
 80202a4:	6023      	str	r3, [r4, #0]
 80202a6:	e789      	b.n	80201bc <_strtod_l+0x4a4>
 80202a8:	08027ef1 	.word	0x08027ef1
 80202ac:	08027fa8 	.word	0x08027fa8
 80202b0:	08027ee9 	.word	0x08027ee9
 80202b4:	08028027 	.word	0x08028027
 80202b8:	08028023 	.word	0x08028023
 80202bc:	08028210 	.word	0x08028210
 80202c0:	080281e8 	.word	0x080281e8
 80202c4:	7ca00000 	.word	0x7ca00000
 80202c8:	7ff00000 	.word	0x7ff00000
 80202cc:	7fefffff 	.word	0x7fefffff
 80202d0:	f012 0110 	ands.w	r1, r2, #16
 80202d4:	bf18      	it	ne
 80202d6:	216a      	movne	r1, #106	; 0x6a
 80202d8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80202dc:	9104      	str	r1, [sp, #16]
 80202de:	49c0      	ldr	r1, [pc, #768]	; (80205e0 <_strtod_l+0x8c8>)
 80202e0:	2000      	movs	r0, #0
 80202e2:	07d7      	lsls	r7, r2, #31
 80202e4:	d508      	bpl.n	80202f8 <_strtod_l+0x5e0>
 80202e6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80202ea:	ed91 7b00 	vldr	d7, [r1]
 80202ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80202f2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80202f6:	2001      	movs	r0, #1
 80202f8:	1052      	asrs	r2, r2, #1
 80202fa:	f101 0108 	add.w	r1, r1, #8
 80202fe:	d1f0      	bne.n	80202e2 <_strtod_l+0x5ca>
 8020300:	b108      	cbz	r0, 8020306 <_strtod_l+0x5ee>
 8020302:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8020306:	9a04      	ldr	r2, [sp, #16]
 8020308:	b1ba      	cbz	r2, 802033a <_strtod_l+0x622>
 802030a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802030e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8020312:	2a00      	cmp	r2, #0
 8020314:	4649      	mov	r1, r9
 8020316:	dd10      	ble.n	802033a <_strtod_l+0x622>
 8020318:	2a1f      	cmp	r2, #31
 802031a:	f340 8132 	ble.w	8020582 <_strtod_l+0x86a>
 802031e:	2a34      	cmp	r2, #52	; 0x34
 8020320:	bfde      	ittt	le
 8020322:	3a20      	suble	r2, #32
 8020324:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8020328:	fa00 f202 	lslle.w	r2, r0, r2
 802032c:	f04f 0800 	mov.w	r8, #0
 8020330:	bfcc      	ite	gt
 8020332:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8020336:	ea02 0901 	andle.w	r9, r2, r1
 802033a:	ec49 8b17 	vmov	d7, r8, r9
 802033e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020346:	d0a4      	beq.n	8020292 <_strtod_l+0x57a>
 8020348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802034a:	9200      	str	r2, [sp, #0]
 802034c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802034e:	4632      	mov	r2, r6
 8020350:	4620      	mov	r0, r4
 8020352:	f002 f8a3 	bl	802249c <__s2b>
 8020356:	900a      	str	r0, [sp, #40]	; 0x28
 8020358:	2800      	cmp	r0, #0
 802035a:	f43f af25 	beq.w	80201a8 <_strtod_l+0x490>
 802035e:	9b06      	ldr	r3, [sp, #24]
 8020360:	ebab 0505 	sub.w	r5, fp, r5
 8020364:	2b00      	cmp	r3, #0
 8020366:	bfb4      	ite	lt
 8020368:	462b      	movlt	r3, r5
 802036a:	2300      	movge	r3, #0
 802036c:	930c      	str	r3, [sp, #48]	; 0x30
 802036e:	9b06      	ldr	r3, [sp, #24]
 8020370:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80205c8 <_strtod_l+0x8b0>
 8020374:	ed9f ab96 	vldr	d10, [pc, #600]	; 80205d0 <_strtod_l+0x8b8>
 8020378:	ed9f bb97 	vldr	d11, [pc, #604]	; 80205d8 <_strtod_l+0x8c0>
 802037c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020380:	2500      	movs	r5, #0
 8020382:	9312      	str	r3, [sp, #72]	; 0x48
 8020384:	462e      	mov	r6, r5
 8020386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020388:	4620      	mov	r0, r4
 802038a:	6859      	ldr	r1, [r3, #4]
 802038c:	f001 ffda 	bl	8022344 <_Balloc>
 8020390:	4607      	mov	r7, r0
 8020392:	2800      	cmp	r0, #0
 8020394:	f43f af0c 	beq.w	80201b0 <_strtod_l+0x498>
 8020398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802039a:	691a      	ldr	r2, [r3, #16]
 802039c:	3202      	adds	r2, #2
 802039e:	f103 010c 	add.w	r1, r3, #12
 80203a2:	0092      	lsls	r2, r2, #2
 80203a4:	300c      	adds	r0, #12
 80203a6:	f7fe fc65 	bl	801ec74 <memcpy>
 80203aa:	ec49 8b10 	vmov	d0, r8, r9
 80203ae:	aa1a      	add	r2, sp, #104	; 0x68
 80203b0:	a919      	add	r1, sp, #100	; 0x64
 80203b2:	4620      	mov	r0, r4
 80203b4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80203b8:	f002 fbac 	bl	8022b14 <__d2b>
 80203bc:	9018      	str	r0, [sp, #96]	; 0x60
 80203be:	2800      	cmp	r0, #0
 80203c0:	f43f aef6 	beq.w	80201b0 <_strtod_l+0x498>
 80203c4:	2101      	movs	r1, #1
 80203c6:	4620      	mov	r0, r4
 80203c8:	f002 f902 	bl	80225d0 <__i2b>
 80203cc:	4606      	mov	r6, r0
 80203ce:	2800      	cmp	r0, #0
 80203d0:	f43f aeee 	beq.w	80201b0 <_strtod_l+0x498>
 80203d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80203d8:	2b00      	cmp	r3, #0
 80203da:	bfab      	itete	ge
 80203dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80203de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80203e0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80203e4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80203e8:	bfac      	ite	ge
 80203ea:	eb03 0b02 	addge.w	fp, r3, r2
 80203ee:	eba2 0a03 	sublt.w	sl, r2, r3
 80203f2:	9a04      	ldr	r2, [sp, #16]
 80203f4:	1a9b      	subs	r3, r3, r2
 80203f6:	440b      	add	r3, r1
 80203f8:	4a7a      	ldr	r2, [pc, #488]	; (80205e4 <_strtod_l+0x8cc>)
 80203fa:	3b01      	subs	r3, #1
 80203fc:	4293      	cmp	r3, r2
 80203fe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8020402:	f280 80d1 	bge.w	80205a8 <_strtod_l+0x890>
 8020406:	1ad2      	subs	r2, r2, r3
 8020408:	2a1f      	cmp	r2, #31
 802040a:	eba1 0102 	sub.w	r1, r1, r2
 802040e:	f04f 0001 	mov.w	r0, #1
 8020412:	f300 80bd 	bgt.w	8020590 <_strtod_l+0x878>
 8020416:	fa00 f302 	lsl.w	r3, r0, r2
 802041a:	930e      	str	r3, [sp, #56]	; 0x38
 802041c:	2300      	movs	r3, #0
 802041e:	930d      	str	r3, [sp, #52]	; 0x34
 8020420:	eb0b 0301 	add.w	r3, fp, r1
 8020424:	9a04      	ldr	r2, [sp, #16]
 8020426:	459b      	cmp	fp, r3
 8020428:	448a      	add	sl, r1
 802042a:	4492      	add	sl, r2
 802042c:	465a      	mov	r2, fp
 802042e:	bfa8      	it	ge
 8020430:	461a      	movge	r2, r3
 8020432:	4552      	cmp	r2, sl
 8020434:	bfa8      	it	ge
 8020436:	4652      	movge	r2, sl
 8020438:	2a00      	cmp	r2, #0
 802043a:	bfc2      	ittt	gt
 802043c:	1a9b      	subgt	r3, r3, r2
 802043e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8020442:	ebab 0b02 	subgt.w	fp, fp, r2
 8020446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020448:	2a00      	cmp	r2, #0
 802044a:	dd18      	ble.n	802047e <_strtod_l+0x766>
 802044c:	4631      	mov	r1, r6
 802044e:	4620      	mov	r0, r4
 8020450:	9315      	str	r3, [sp, #84]	; 0x54
 8020452:	f002 f979 	bl	8022748 <__pow5mult>
 8020456:	4606      	mov	r6, r0
 8020458:	2800      	cmp	r0, #0
 802045a:	f43f aea9 	beq.w	80201b0 <_strtod_l+0x498>
 802045e:	4601      	mov	r1, r0
 8020460:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020462:	4620      	mov	r0, r4
 8020464:	f002 f8ca 	bl	80225fc <__multiply>
 8020468:	9014      	str	r0, [sp, #80]	; 0x50
 802046a:	2800      	cmp	r0, #0
 802046c:	f43f aea0 	beq.w	80201b0 <_strtod_l+0x498>
 8020470:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020472:	4620      	mov	r0, r4
 8020474:	f001 ffa6 	bl	80223c4 <_Bfree>
 8020478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802047a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802047c:	9218      	str	r2, [sp, #96]	; 0x60
 802047e:	2b00      	cmp	r3, #0
 8020480:	f300 8097 	bgt.w	80205b2 <_strtod_l+0x89a>
 8020484:	9b06      	ldr	r3, [sp, #24]
 8020486:	2b00      	cmp	r3, #0
 8020488:	dd08      	ble.n	802049c <_strtod_l+0x784>
 802048a:	4639      	mov	r1, r7
 802048c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802048e:	4620      	mov	r0, r4
 8020490:	f002 f95a 	bl	8022748 <__pow5mult>
 8020494:	4607      	mov	r7, r0
 8020496:	2800      	cmp	r0, #0
 8020498:	f43f ae8a 	beq.w	80201b0 <_strtod_l+0x498>
 802049c:	f1ba 0f00 	cmp.w	sl, #0
 80204a0:	dd08      	ble.n	80204b4 <_strtod_l+0x79c>
 80204a2:	4639      	mov	r1, r7
 80204a4:	4652      	mov	r2, sl
 80204a6:	4620      	mov	r0, r4
 80204a8:	f002 f9a8 	bl	80227fc <__lshift>
 80204ac:	4607      	mov	r7, r0
 80204ae:	2800      	cmp	r0, #0
 80204b0:	f43f ae7e 	beq.w	80201b0 <_strtod_l+0x498>
 80204b4:	f1bb 0f00 	cmp.w	fp, #0
 80204b8:	dd08      	ble.n	80204cc <_strtod_l+0x7b4>
 80204ba:	4631      	mov	r1, r6
 80204bc:	465a      	mov	r2, fp
 80204be:	4620      	mov	r0, r4
 80204c0:	f002 f99c 	bl	80227fc <__lshift>
 80204c4:	4606      	mov	r6, r0
 80204c6:	2800      	cmp	r0, #0
 80204c8:	f43f ae72 	beq.w	80201b0 <_strtod_l+0x498>
 80204cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80204ce:	463a      	mov	r2, r7
 80204d0:	4620      	mov	r0, r4
 80204d2:	f002 fa1b 	bl	802290c <__mdiff>
 80204d6:	4605      	mov	r5, r0
 80204d8:	2800      	cmp	r0, #0
 80204da:	f43f ae69 	beq.w	80201b0 <_strtod_l+0x498>
 80204de:	2300      	movs	r3, #0
 80204e0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80204e4:	60c3      	str	r3, [r0, #12]
 80204e6:	4631      	mov	r1, r6
 80204e8:	f002 f9f4 	bl	80228d4 <__mcmp>
 80204ec:	2800      	cmp	r0, #0
 80204ee:	da7f      	bge.n	80205f0 <_strtod_l+0x8d8>
 80204f0:	ea5a 0308 	orrs.w	r3, sl, r8
 80204f4:	f040 80a5 	bne.w	8020642 <_strtod_l+0x92a>
 80204f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	f040 80a0 	bne.w	8020642 <_strtod_l+0x92a>
 8020502:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020506:	0d1b      	lsrs	r3, r3, #20
 8020508:	051b      	lsls	r3, r3, #20
 802050a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802050e:	f240 8098 	bls.w	8020642 <_strtod_l+0x92a>
 8020512:	696b      	ldr	r3, [r5, #20]
 8020514:	b91b      	cbnz	r3, 802051e <_strtod_l+0x806>
 8020516:	692b      	ldr	r3, [r5, #16]
 8020518:	2b01      	cmp	r3, #1
 802051a:	f340 8092 	ble.w	8020642 <_strtod_l+0x92a>
 802051e:	4629      	mov	r1, r5
 8020520:	2201      	movs	r2, #1
 8020522:	4620      	mov	r0, r4
 8020524:	f002 f96a 	bl	80227fc <__lshift>
 8020528:	4631      	mov	r1, r6
 802052a:	4605      	mov	r5, r0
 802052c:	f002 f9d2 	bl	80228d4 <__mcmp>
 8020530:	2800      	cmp	r0, #0
 8020532:	f340 8086 	ble.w	8020642 <_strtod_l+0x92a>
 8020536:	9904      	ldr	r1, [sp, #16]
 8020538:	4a2b      	ldr	r2, [pc, #172]	; (80205e8 <_strtod_l+0x8d0>)
 802053a:	464b      	mov	r3, r9
 802053c:	2900      	cmp	r1, #0
 802053e:	f000 80a1 	beq.w	8020684 <_strtod_l+0x96c>
 8020542:	ea02 0109 	and.w	r1, r2, r9
 8020546:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802054a:	f300 809b 	bgt.w	8020684 <_strtod_l+0x96c>
 802054e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020552:	f77f aea2 	ble.w	802029a <_strtod_l+0x582>
 8020556:	4a25      	ldr	r2, [pc, #148]	; (80205ec <_strtod_l+0x8d4>)
 8020558:	2300      	movs	r3, #0
 802055a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 802055e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8020562:	ec49 8b17 	vmov	d7, r8, r9
 8020566:	ee27 7b06 	vmul.f64	d7, d7, d6
 802056a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802056e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8020572:	4313      	orrs	r3, r2
 8020574:	bf08      	it	eq
 8020576:	2322      	moveq	r3, #34	; 0x22
 8020578:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802057c:	bf08      	it	eq
 802057e:	6023      	streq	r3, [r4, #0]
 8020580:	e620      	b.n	80201c4 <_strtod_l+0x4ac>
 8020582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020586:	fa01 f202 	lsl.w	r2, r1, r2
 802058a:	ea02 0808 	and.w	r8, r2, r8
 802058e:	e6d4      	b.n	802033a <_strtod_l+0x622>
 8020590:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8020594:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8020598:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802059c:	33e2      	adds	r3, #226	; 0xe2
 802059e:	fa00 f303 	lsl.w	r3, r0, r3
 80205a2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80205a6:	e73b      	b.n	8020420 <_strtod_l+0x708>
 80205a8:	2000      	movs	r0, #0
 80205aa:	2301      	movs	r3, #1
 80205ac:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80205b0:	e736      	b.n	8020420 <_strtod_l+0x708>
 80205b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80205b4:	461a      	mov	r2, r3
 80205b6:	4620      	mov	r0, r4
 80205b8:	f002 f920 	bl	80227fc <__lshift>
 80205bc:	9018      	str	r0, [sp, #96]	; 0x60
 80205be:	2800      	cmp	r0, #0
 80205c0:	f47f af60 	bne.w	8020484 <_strtod_l+0x76c>
 80205c4:	e5f4      	b.n	80201b0 <_strtod_l+0x498>
 80205c6:	bf00      	nop
 80205c8:	94a03595 	.word	0x94a03595
 80205cc:	3fcfffff 	.word	0x3fcfffff
 80205d0:	94a03595 	.word	0x94a03595
 80205d4:	3fdfffff 	.word	0x3fdfffff
 80205d8:	35afe535 	.word	0x35afe535
 80205dc:	3fe00000 	.word	0x3fe00000
 80205e0:	08027fc0 	.word	0x08027fc0
 80205e4:	fffffc02 	.word	0xfffffc02
 80205e8:	7ff00000 	.word	0x7ff00000
 80205ec:	39500000 	.word	0x39500000
 80205f0:	46cb      	mov	fp, r9
 80205f2:	d165      	bne.n	80206c0 <_strtod_l+0x9a8>
 80205f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80205f8:	f1ba 0f00 	cmp.w	sl, #0
 80205fc:	d02a      	beq.n	8020654 <_strtod_l+0x93c>
 80205fe:	4aaa      	ldr	r2, [pc, #680]	; (80208a8 <_strtod_l+0xb90>)
 8020600:	4293      	cmp	r3, r2
 8020602:	d12b      	bne.n	802065c <_strtod_l+0x944>
 8020604:	9b04      	ldr	r3, [sp, #16]
 8020606:	4641      	mov	r1, r8
 8020608:	b1fb      	cbz	r3, 802064a <_strtod_l+0x932>
 802060a:	4aa8      	ldr	r2, [pc, #672]	; (80208ac <_strtod_l+0xb94>)
 802060c:	ea09 0202 	and.w	r2, r9, r2
 8020610:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020618:	d81a      	bhi.n	8020650 <_strtod_l+0x938>
 802061a:	0d12      	lsrs	r2, r2, #20
 802061c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020620:	fa00 f303 	lsl.w	r3, r0, r3
 8020624:	4299      	cmp	r1, r3
 8020626:	d119      	bne.n	802065c <_strtod_l+0x944>
 8020628:	4ba1      	ldr	r3, [pc, #644]	; (80208b0 <_strtod_l+0xb98>)
 802062a:	459b      	cmp	fp, r3
 802062c:	d102      	bne.n	8020634 <_strtod_l+0x91c>
 802062e:	3101      	adds	r1, #1
 8020630:	f43f adbe 	beq.w	80201b0 <_strtod_l+0x498>
 8020634:	4b9d      	ldr	r3, [pc, #628]	; (80208ac <_strtod_l+0xb94>)
 8020636:	ea0b 0303 	and.w	r3, fp, r3
 802063a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802063e:	f04f 0800 	mov.w	r8, #0
 8020642:	9b04      	ldr	r3, [sp, #16]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d186      	bne.n	8020556 <_strtod_l+0x83e>
 8020648:	e5bc      	b.n	80201c4 <_strtod_l+0x4ac>
 802064a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802064e:	e7e9      	b.n	8020624 <_strtod_l+0x90c>
 8020650:	4603      	mov	r3, r0
 8020652:	e7e7      	b.n	8020624 <_strtod_l+0x90c>
 8020654:	ea53 0308 	orrs.w	r3, r3, r8
 8020658:	f43f af6d 	beq.w	8020536 <_strtod_l+0x81e>
 802065c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802065e:	b1db      	cbz	r3, 8020698 <_strtod_l+0x980>
 8020660:	ea13 0f0b 	tst.w	r3, fp
 8020664:	d0ed      	beq.n	8020642 <_strtod_l+0x92a>
 8020666:	9a04      	ldr	r2, [sp, #16]
 8020668:	4640      	mov	r0, r8
 802066a:	4649      	mov	r1, r9
 802066c:	f1ba 0f00 	cmp.w	sl, #0
 8020670:	d016      	beq.n	80206a0 <_strtod_l+0x988>
 8020672:	f7ff fb35 	bl	801fce0 <sulp>
 8020676:	ed9d 7b08 	vldr	d7, [sp, #32]
 802067a:	ee37 7b00 	vadd.f64	d7, d7, d0
 802067e:	ec59 8b17 	vmov	r8, r9, d7
 8020682:	e7de      	b.n	8020642 <_strtod_l+0x92a>
 8020684:	4013      	ands	r3, r2
 8020686:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802068a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802068e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8020692:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020696:	e7d4      	b.n	8020642 <_strtod_l+0x92a>
 8020698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802069a:	ea13 0f08 	tst.w	r3, r8
 802069e:	e7e1      	b.n	8020664 <_strtod_l+0x94c>
 80206a0:	f7ff fb1e 	bl	801fce0 <sulp>
 80206a4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80206a8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80206ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80206b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80206b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206b8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80206bc:	d1c1      	bne.n	8020642 <_strtod_l+0x92a>
 80206be:	e5ec      	b.n	802029a <_strtod_l+0x582>
 80206c0:	4631      	mov	r1, r6
 80206c2:	4628      	mov	r0, r5
 80206c4:	f002 fa82 	bl	8022bcc <__ratio>
 80206c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80206cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80206d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206d4:	d867      	bhi.n	80207a6 <_strtod_l+0xa8e>
 80206d6:	f1ba 0f00 	cmp.w	sl, #0
 80206da:	d044      	beq.n	8020766 <_strtod_l+0xa4e>
 80206dc:	4b75      	ldr	r3, [pc, #468]	; (80208b4 <_strtod_l+0xb9c>)
 80206de:	2200      	movs	r2, #0
 80206e0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80206e4:	4971      	ldr	r1, [pc, #452]	; (80208ac <_strtod_l+0xb94>)
 80206e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80208c0 <_strtod_l+0xba8>
 80206ea:	ea0b 0001 	and.w	r0, fp, r1
 80206ee:	4560      	cmp	r0, ip
 80206f0:	900d      	str	r0, [sp, #52]	; 0x34
 80206f2:	f040 808b 	bne.w	802080c <_strtod_l+0xaf4>
 80206f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80206fa:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80206fe:	ec49 8b10 	vmov	d0, r8, r9
 8020702:	ec43 2b1c 	vmov	d12, r2, r3
 8020706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802070a:	f002 f987 	bl	8022a1c <__ulp>
 802070e:	ec49 8b1d 	vmov	d13, r8, r9
 8020712:	eeac db00 	vfma.f64	d13, d12, d0
 8020716:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 802071a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802071c:	4963      	ldr	r1, [pc, #396]	; (80208ac <_strtod_l+0xb94>)
 802071e:	4a66      	ldr	r2, [pc, #408]	; (80208b8 <_strtod_l+0xba0>)
 8020720:	4019      	ands	r1, r3
 8020722:	4291      	cmp	r1, r2
 8020724:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8020728:	d947      	bls.n	80207ba <_strtod_l+0xaa2>
 802072a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802072c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020730:	4293      	cmp	r3, r2
 8020732:	d103      	bne.n	802073c <_strtod_l+0xa24>
 8020734:	9b08      	ldr	r3, [sp, #32]
 8020736:	3301      	adds	r3, #1
 8020738:	f43f ad3a 	beq.w	80201b0 <_strtod_l+0x498>
 802073c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80208b0 <_strtod_l+0xb98>
 8020740:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020744:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020746:	4620      	mov	r0, r4
 8020748:	f001 fe3c 	bl	80223c4 <_Bfree>
 802074c:	4639      	mov	r1, r7
 802074e:	4620      	mov	r0, r4
 8020750:	f001 fe38 	bl	80223c4 <_Bfree>
 8020754:	4631      	mov	r1, r6
 8020756:	4620      	mov	r0, r4
 8020758:	f001 fe34 	bl	80223c4 <_Bfree>
 802075c:	4629      	mov	r1, r5
 802075e:	4620      	mov	r0, r4
 8020760:	f001 fe30 	bl	80223c4 <_Bfree>
 8020764:	e60f      	b.n	8020386 <_strtod_l+0x66e>
 8020766:	f1b8 0f00 	cmp.w	r8, #0
 802076a:	d112      	bne.n	8020792 <_strtod_l+0xa7a>
 802076c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020770:	b9b3      	cbnz	r3, 80207a0 <_strtod_l+0xa88>
 8020772:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8020776:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802077e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8020782:	d401      	bmi.n	8020788 <_strtod_l+0xa70>
 8020784:	ee20 8b08 	vmul.f64	d8, d0, d8
 8020788:	eeb1 7b48 	vneg.f64	d7, d8
 802078c:	ec53 2b17 	vmov	r2, r3, d7
 8020790:	e7a8      	b.n	80206e4 <_strtod_l+0x9cc>
 8020792:	f1b8 0f01 	cmp.w	r8, #1
 8020796:	d103      	bne.n	80207a0 <_strtod_l+0xa88>
 8020798:	f1b9 0f00 	cmp.w	r9, #0
 802079c:	f43f ad7d 	beq.w	802029a <_strtod_l+0x582>
 80207a0:	4b46      	ldr	r3, [pc, #280]	; (80208bc <_strtod_l+0xba4>)
 80207a2:	2200      	movs	r2, #0
 80207a4:	e79c      	b.n	80206e0 <_strtod_l+0x9c8>
 80207a6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80207aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80207ae:	f1ba 0f00 	cmp.w	sl, #0
 80207b2:	d0e9      	beq.n	8020788 <_strtod_l+0xa70>
 80207b4:	ec53 2b18 	vmov	r2, r3, d8
 80207b8:	e794      	b.n	80206e4 <_strtod_l+0x9cc>
 80207ba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80207be:	9b04      	ldr	r3, [sp, #16]
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d1bf      	bne.n	8020744 <_strtod_l+0xa2c>
 80207c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80207c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80207ca:	0d1b      	lsrs	r3, r3, #20
 80207cc:	051b      	lsls	r3, r3, #20
 80207ce:	429a      	cmp	r2, r3
 80207d0:	d1b8      	bne.n	8020744 <_strtod_l+0xa2c>
 80207d2:	ec51 0b18 	vmov	r0, r1, d8
 80207d6:	f7df ffaf 	bl	8000738 <__aeabi_d2lz>
 80207da:	f7df ff67 	bl	80006ac <__aeabi_l2d>
 80207de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80207e2:	ec41 0b17 	vmov	d7, r0, r1
 80207e6:	ea43 0308 	orr.w	r3, r3, r8
 80207ea:	ea53 030a 	orrs.w	r3, r3, sl
 80207ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80207f2:	d03e      	beq.n	8020872 <_strtod_l+0xb5a>
 80207f4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80207f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207fc:	f53f ace2 	bmi.w	80201c4 <_strtod_l+0x4ac>
 8020800:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8020804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020808:	dd9c      	ble.n	8020744 <_strtod_l+0xa2c>
 802080a:	e4db      	b.n	80201c4 <_strtod_l+0x4ac>
 802080c:	9904      	ldr	r1, [sp, #16]
 802080e:	b301      	cbz	r1, 8020852 <_strtod_l+0xb3a>
 8020810:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020812:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8020816:	d81c      	bhi.n	8020852 <_strtod_l+0xb3a>
 8020818:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80208a0 <_strtod_l+0xb88>
 802081c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8020820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020824:	d811      	bhi.n	802084a <_strtod_l+0xb32>
 8020826:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802082a:	ee18 3a10 	vmov	r3, s16
 802082e:	2b01      	cmp	r3, #1
 8020830:	bf38      	it	cc
 8020832:	2301      	movcc	r3, #1
 8020834:	ee08 3a10 	vmov	s16, r3
 8020838:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 802083c:	f1ba 0f00 	cmp.w	sl, #0
 8020840:	d114      	bne.n	802086c <_strtod_l+0xb54>
 8020842:	eeb1 7b48 	vneg.f64	d7, d8
 8020846:	ec53 2b17 	vmov	r2, r3, d7
 802084a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802084c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8020850:	1a0b      	subs	r3, r1, r0
 8020852:	ed9d 0b08 	vldr	d0, [sp, #32]
 8020856:	ec43 2b1c 	vmov	d12, r2, r3
 802085a:	f002 f8df 	bl	8022a1c <__ulp>
 802085e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8020862:	eeac 7b00 	vfma.f64	d7, d12, d0
 8020866:	ec59 8b17 	vmov	r8, r9, d7
 802086a:	e7a8      	b.n	80207be <_strtod_l+0xaa6>
 802086c:	ec53 2b18 	vmov	r2, r3, d8
 8020870:	e7eb      	b.n	802084a <_strtod_l+0xb32>
 8020872:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8020876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802087a:	f57f af63 	bpl.w	8020744 <_strtod_l+0xa2c>
 802087e:	e4a1      	b.n	80201c4 <_strtod_l+0x4ac>
 8020880:	2300      	movs	r3, #0
 8020882:	930b      	str	r3, [sp, #44]	; 0x2c
 8020884:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020888:	6013      	str	r3, [r2, #0]
 802088a:	f7ff ba8d 	b.w	801fda8 <_strtod_l+0x90>
 802088e:	2a65      	cmp	r2, #101	; 0x65
 8020890:	f43f ab89 	beq.w	801ffa6 <_strtod_l+0x28e>
 8020894:	2a45      	cmp	r2, #69	; 0x45
 8020896:	f43f ab86 	beq.w	801ffa6 <_strtod_l+0x28e>
 802089a:	2101      	movs	r1, #1
 802089c:	f7ff bbbe 	b.w	802001c <_strtod_l+0x304>
 80208a0:	ffc00000 	.word	0xffc00000
 80208a4:	41dfffff 	.word	0x41dfffff
 80208a8:	000fffff 	.word	0x000fffff
 80208ac:	7ff00000 	.word	0x7ff00000
 80208b0:	7fefffff 	.word	0x7fefffff
 80208b4:	3ff00000 	.word	0x3ff00000
 80208b8:	7c9fffff 	.word	0x7c9fffff
 80208bc:	bff00000 	.word	0xbff00000
 80208c0:	7fe00000 	.word	0x7fe00000

080208c4 <_strtod_r>:
 80208c4:	4b01      	ldr	r3, [pc, #4]	; (80208cc <_strtod_r+0x8>)
 80208c6:	f7ff ba27 	b.w	801fd18 <_strtod_l>
 80208ca:	bf00      	nop
 80208cc:	240034b0 	.word	0x240034b0

080208d0 <_strtol_l.isra.0>:
 80208d0:	2b01      	cmp	r3, #1
 80208d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208d6:	d001      	beq.n	80208dc <_strtol_l.isra.0+0xc>
 80208d8:	2b24      	cmp	r3, #36	; 0x24
 80208da:	d906      	bls.n	80208ea <_strtol_l.isra.0+0x1a>
 80208dc:	f000 ff6a 	bl	80217b4 <__errno>
 80208e0:	2316      	movs	r3, #22
 80208e2:	6003      	str	r3, [r0, #0]
 80208e4:	2000      	movs	r0, #0
 80208e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208ea:	4f3a      	ldr	r7, [pc, #232]	; (80209d4 <_strtol_l.isra.0+0x104>)
 80208ec:	468e      	mov	lr, r1
 80208ee:	4676      	mov	r6, lr
 80208f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80208f4:	5de5      	ldrb	r5, [r4, r7]
 80208f6:	f015 0508 	ands.w	r5, r5, #8
 80208fa:	d1f8      	bne.n	80208ee <_strtol_l.isra.0+0x1e>
 80208fc:	2c2d      	cmp	r4, #45	; 0x2d
 80208fe:	d134      	bne.n	802096a <_strtol_l.isra.0+0x9a>
 8020900:	f89e 4000 	ldrb.w	r4, [lr]
 8020904:	f04f 0801 	mov.w	r8, #1
 8020908:	f106 0e02 	add.w	lr, r6, #2
 802090c:	2b00      	cmp	r3, #0
 802090e:	d05c      	beq.n	80209ca <_strtol_l.isra.0+0xfa>
 8020910:	2b10      	cmp	r3, #16
 8020912:	d10c      	bne.n	802092e <_strtol_l.isra.0+0x5e>
 8020914:	2c30      	cmp	r4, #48	; 0x30
 8020916:	d10a      	bne.n	802092e <_strtol_l.isra.0+0x5e>
 8020918:	f89e 4000 	ldrb.w	r4, [lr]
 802091c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020920:	2c58      	cmp	r4, #88	; 0x58
 8020922:	d14d      	bne.n	80209c0 <_strtol_l.isra.0+0xf0>
 8020924:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020928:	2310      	movs	r3, #16
 802092a:	f10e 0e02 	add.w	lr, lr, #2
 802092e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020932:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8020936:	2600      	movs	r6, #0
 8020938:	fbbc f9f3 	udiv	r9, ip, r3
 802093c:	4635      	mov	r5, r6
 802093e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020942:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020946:	2f09      	cmp	r7, #9
 8020948:	d818      	bhi.n	802097c <_strtol_l.isra.0+0xac>
 802094a:	463c      	mov	r4, r7
 802094c:	42a3      	cmp	r3, r4
 802094e:	dd24      	ble.n	802099a <_strtol_l.isra.0+0xca>
 8020950:	2e00      	cmp	r6, #0
 8020952:	db1f      	blt.n	8020994 <_strtol_l.isra.0+0xc4>
 8020954:	45a9      	cmp	r9, r5
 8020956:	d31d      	bcc.n	8020994 <_strtol_l.isra.0+0xc4>
 8020958:	d101      	bne.n	802095e <_strtol_l.isra.0+0x8e>
 802095a:	45a2      	cmp	sl, r4
 802095c:	db1a      	blt.n	8020994 <_strtol_l.isra.0+0xc4>
 802095e:	fb05 4503 	mla	r5, r5, r3, r4
 8020962:	2601      	movs	r6, #1
 8020964:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020968:	e7eb      	b.n	8020942 <_strtol_l.isra.0+0x72>
 802096a:	2c2b      	cmp	r4, #43	; 0x2b
 802096c:	bf08      	it	eq
 802096e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020972:	46a8      	mov	r8, r5
 8020974:	bf08      	it	eq
 8020976:	f106 0e02 	addeq.w	lr, r6, #2
 802097a:	e7c7      	b.n	802090c <_strtol_l.isra.0+0x3c>
 802097c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020980:	2f19      	cmp	r7, #25
 8020982:	d801      	bhi.n	8020988 <_strtol_l.isra.0+0xb8>
 8020984:	3c37      	subs	r4, #55	; 0x37
 8020986:	e7e1      	b.n	802094c <_strtol_l.isra.0+0x7c>
 8020988:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802098c:	2f19      	cmp	r7, #25
 802098e:	d804      	bhi.n	802099a <_strtol_l.isra.0+0xca>
 8020990:	3c57      	subs	r4, #87	; 0x57
 8020992:	e7db      	b.n	802094c <_strtol_l.isra.0+0x7c>
 8020994:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8020998:	e7e4      	b.n	8020964 <_strtol_l.isra.0+0x94>
 802099a:	2e00      	cmp	r6, #0
 802099c:	da05      	bge.n	80209aa <_strtol_l.isra.0+0xda>
 802099e:	2322      	movs	r3, #34	; 0x22
 80209a0:	6003      	str	r3, [r0, #0]
 80209a2:	4665      	mov	r5, ip
 80209a4:	b942      	cbnz	r2, 80209b8 <_strtol_l.isra.0+0xe8>
 80209a6:	4628      	mov	r0, r5
 80209a8:	e79d      	b.n	80208e6 <_strtol_l.isra.0+0x16>
 80209aa:	f1b8 0f00 	cmp.w	r8, #0
 80209ae:	d000      	beq.n	80209b2 <_strtol_l.isra.0+0xe2>
 80209b0:	426d      	negs	r5, r5
 80209b2:	2a00      	cmp	r2, #0
 80209b4:	d0f7      	beq.n	80209a6 <_strtol_l.isra.0+0xd6>
 80209b6:	b10e      	cbz	r6, 80209bc <_strtol_l.isra.0+0xec>
 80209b8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80209bc:	6011      	str	r1, [r2, #0]
 80209be:	e7f2      	b.n	80209a6 <_strtol_l.isra.0+0xd6>
 80209c0:	2430      	movs	r4, #48	; 0x30
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d1b3      	bne.n	802092e <_strtol_l.isra.0+0x5e>
 80209c6:	2308      	movs	r3, #8
 80209c8:	e7b1      	b.n	802092e <_strtol_l.isra.0+0x5e>
 80209ca:	2c30      	cmp	r4, #48	; 0x30
 80209cc:	d0a4      	beq.n	8020918 <_strtol_l.isra.0+0x48>
 80209ce:	230a      	movs	r3, #10
 80209d0:	e7ad      	b.n	802092e <_strtol_l.isra.0+0x5e>
 80209d2:	bf00      	nop
 80209d4:	08027ddd 	.word	0x08027ddd

080209d8 <_strtol_r>:
 80209d8:	f7ff bf7a 	b.w	80208d0 <_strtol_l.isra.0>

080209dc <__swbuf_r>:
 80209dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209de:	460e      	mov	r6, r1
 80209e0:	4614      	mov	r4, r2
 80209e2:	4605      	mov	r5, r0
 80209e4:	b118      	cbz	r0, 80209ee <__swbuf_r+0x12>
 80209e6:	6983      	ldr	r3, [r0, #24]
 80209e8:	b90b      	cbnz	r3, 80209ee <__swbuf_r+0x12>
 80209ea:	f001 f803 	bl	80219f4 <__sinit>
 80209ee:	4b21      	ldr	r3, [pc, #132]	; (8020a74 <__swbuf_r+0x98>)
 80209f0:	429c      	cmp	r4, r3
 80209f2:	d12b      	bne.n	8020a4c <__swbuf_r+0x70>
 80209f4:	686c      	ldr	r4, [r5, #4]
 80209f6:	69a3      	ldr	r3, [r4, #24]
 80209f8:	60a3      	str	r3, [r4, #8]
 80209fa:	89a3      	ldrh	r3, [r4, #12]
 80209fc:	071a      	lsls	r2, r3, #28
 80209fe:	d52f      	bpl.n	8020a60 <__swbuf_r+0x84>
 8020a00:	6923      	ldr	r3, [r4, #16]
 8020a02:	b36b      	cbz	r3, 8020a60 <__swbuf_r+0x84>
 8020a04:	6923      	ldr	r3, [r4, #16]
 8020a06:	6820      	ldr	r0, [r4, #0]
 8020a08:	1ac0      	subs	r0, r0, r3
 8020a0a:	6963      	ldr	r3, [r4, #20]
 8020a0c:	b2f6      	uxtb	r6, r6
 8020a0e:	4283      	cmp	r3, r0
 8020a10:	4637      	mov	r7, r6
 8020a12:	dc04      	bgt.n	8020a1e <__swbuf_r+0x42>
 8020a14:	4621      	mov	r1, r4
 8020a16:	4628      	mov	r0, r5
 8020a18:	f000 ff58 	bl	80218cc <_fflush_r>
 8020a1c:	bb30      	cbnz	r0, 8020a6c <__swbuf_r+0x90>
 8020a1e:	68a3      	ldr	r3, [r4, #8]
 8020a20:	3b01      	subs	r3, #1
 8020a22:	60a3      	str	r3, [r4, #8]
 8020a24:	6823      	ldr	r3, [r4, #0]
 8020a26:	1c5a      	adds	r2, r3, #1
 8020a28:	6022      	str	r2, [r4, #0]
 8020a2a:	701e      	strb	r6, [r3, #0]
 8020a2c:	6963      	ldr	r3, [r4, #20]
 8020a2e:	3001      	adds	r0, #1
 8020a30:	4283      	cmp	r3, r0
 8020a32:	d004      	beq.n	8020a3e <__swbuf_r+0x62>
 8020a34:	89a3      	ldrh	r3, [r4, #12]
 8020a36:	07db      	lsls	r3, r3, #31
 8020a38:	d506      	bpl.n	8020a48 <__swbuf_r+0x6c>
 8020a3a:	2e0a      	cmp	r6, #10
 8020a3c:	d104      	bne.n	8020a48 <__swbuf_r+0x6c>
 8020a3e:	4621      	mov	r1, r4
 8020a40:	4628      	mov	r0, r5
 8020a42:	f000 ff43 	bl	80218cc <_fflush_r>
 8020a46:	b988      	cbnz	r0, 8020a6c <__swbuf_r+0x90>
 8020a48:	4638      	mov	r0, r7
 8020a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a4c:	4b0a      	ldr	r3, [pc, #40]	; (8020a78 <__swbuf_r+0x9c>)
 8020a4e:	429c      	cmp	r4, r3
 8020a50:	d101      	bne.n	8020a56 <__swbuf_r+0x7a>
 8020a52:	68ac      	ldr	r4, [r5, #8]
 8020a54:	e7cf      	b.n	80209f6 <__swbuf_r+0x1a>
 8020a56:	4b09      	ldr	r3, [pc, #36]	; (8020a7c <__swbuf_r+0xa0>)
 8020a58:	429c      	cmp	r4, r3
 8020a5a:	bf08      	it	eq
 8020a5c:	68ec      	ldreq	r4, [r5, #12]
 8020a5e:	e7ca      	b.n	80209f6 <__swbuf_r+0x1a>
 8020a60:	4621      	mov	r1, r4
 8020a62:	4628      	mov	r0, r5
 8020a64:	f000 f80c 	bl	8020a80 <__swsetup_r>
 8020a68:	2800      	cmp	r0, #0
 8020a6a:	d0cb      	beq.n	8020a04 <__swbuf_r+0x28>
 8020a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020a70:	e7ea      	b.n	8020a48 <__swbuf_r+0x6c>
 8020a72:	bf00      	nop
 8020a74:	080280c4 	.word	0x080280c4
 8020a78:	080280e4 	.word	0x080280e4
 8020a7c:	080280a4 	.word	0x080280a4

08020a80 <__swsetup_r>:
 8020a80:	4b32      	ldr	r3, [pc, #200]	; (8020b4c <__swsetup_r+0xcc>)
 8020a82:	b570      	push	{r4, r5, r6, lr}
 8020a84:	681d      	ldr	r5, [r3, #0]
 8020a86:	4606      	mov	r6, r0
 8020a88:	460c      	mov	r4, r1
 8020a8a:	b125      	cbz	r5, 8020a96 <__swsetup_r+0x16>
 8020a8c:	69ab      	ldr	r3, [r5, #24]
 8020a8e:	b913      	cbnz	r3, 8020a96 <__swsetup_r+0x16>
 8020a90:	4628      	mov	r0, r5
 8020a92:	f000 ffaf 	bl	80219f4 <__sinit>
 8020a96:	4b2e      	ldr	r3, [pc, #184]	; (8020b50 <__swsetup_r+0xd0>)
 8020a98:	429c      	cmp	r4, r3
 8020a9a:	d10f      	bne.n	8020abc <__swsetup_r+0x3c>
 8020a9c:	686c      	ldr	r4, [r5, #4]
 8020a9e:	89a3      	ldrh	r3, [r4, #12]
 8020aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020aa4:	0719      	lsls	r1, r3, #28
 8020aa6:	d42c      	bmi.n	8020b02 <__swsetup_r+0x82>
 8020aa8:	06dd      	lsls	r5, r3, #27
 8020aaa:	d411      	bmi.n	8020ad0 <__swsetup_r+0x50>
 8020aac:	2309      	movs	r3, #9
 8020aae:	6033      	str	r3, [r6, #0]
 8020ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020ab4:	81a3      	strh	r3, [r4, #12]
 8020ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020aba:	e03e      	b.n	8020b3a <__swsetup_r+0xba>
 8020abc:	4b25      	ldr	r3, [pc, #148]	; (8020b54 <__swsetup_r+0xd4>)
 8020abe:	429c      	cmp	r4, r3
 8020ac0:	d101      	bne.n	8020ac6 <__swsetup_r+0x46>
 8020ac2:	68ac      	ldr	r4, [r5, #8]
 8020ac4:	e7eb      	b.n	8020a9e <__swsetup_r+0x1e>
 8020ac6:	4b24      	ldr	r3, [pc, #144]	; (8020b58 <__swsetup_r+0xd8>)
 8020ac8:	429c      	cmp	r4, r3
 8020aca:	bf08      	it	eq
 8020acc:	68ec      	ldreq	r4, [r5, #12]
 8020ace:	e7e6      	b.n	8020a9e <__swsetup_r+0x1e>
 8020ad0:	0758      	lsls	r0, r3, #29
 8020ad2:	d512      	bpl.n	8020afa <__swsetup_r+0x7a>
 8020ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020ad6:	b141      	cbz	r1, 8020aea <__swsetup_r+0x6a>
 8020ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020adc:	4299      	cmp	r1, r3
 8020ade:	d002      	beq.n	8020ae6 <__swsetup_r+0x66>
 8020ae0:	4630      	mov	r0, r6
 8020ae2:	f7fe f8f7 	bl	801ecd4 <_free_r>
 8020ae6:	2300      	movs	r3, #0
 8020ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8020aea:	89a3      	ldrh	r3, [r4, #12]
 8020aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020af0:	81a3      	strh	r3, [r4, #12]
 8020af2:	2300      	movs	r3, #0
 8020af4:	6063      	str	r3, [r4, #4]
 8020af6:	6923      	ldr	r3, [r4, #16]
 8020af8:	6023      	str	r3, [r4, #0]
 8020afa:	89a3      	ldrh	r3, [r4, #12]
 8020afc:	f043 0308 	orr.w	r3, r3, #8
 8020b00:	81a3      	strh	r3, [r4, #12]
 8020b02:	6923      	ldr	r3, [r4, #16]
 8020b04:	b94b      	cbnz	r3, 8020b1a <__swsetup_r+0x9a>
 8020b06:	89a3      	ldrh	r3, [r4, #12]
 8020b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b10:	d003      	beq.n	8020b1a <__swsetup_r+0x9a>
 8020b12:	4621      	mov	r1, r4
 8020b14:	4630      	mov	r0, r6
 8020b16:	f001 fbb7 	bl	8022288 <__smakebuf_r>
 8020b1a:	89a0      	ldrh	r0, [r4, #12]
 8020b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020b20:	f010 0301 	ands.w	r3, r0, #1
 8020b24:	d00a      	beq.n	8020b3c <__swsetup_r+0xbc>
 8020b26:	2300      	movs	r3, #0
 8020b28:	60a3      	str	r3, [r4, #8]
 8020b2a:	6963      	ldr	r3, [r4, #20]
 8020b2c:	425b      	negs	r3, r3
 8020b2e:	61a3      	str	r3, [r4, #24]
 8020b30:	6923      	ldr	r3, [r4, #16]
 8020b32:	b943      	cbnz	r3, 8020b46 <__swsetup_r+0xc6>
 8020b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020b38:	d1ba      	bne.n	8020ab0 <__swsetup_r+0x30>
 8020b3a:	bd70      	pop	{r4, r5, r6, pc}
 8020b3c:	0781      	lsls	r1, r0, #30
 8020b3e:	bf58      	it	pl
 8020b40:	6963      	ldrpl	r3, [r4, #20]
 8020b42:	60a3      	str	r3, [r4, #8]
 8020b44:	e7f4      	b.n	8020b30 <__swsetup_r+0xb0>
 8020b46:	2000      	movs	r0, #0
 8020b48:	e7f7      	b.n	8020b3a <__swsetup_r+0xba>
 8020b4a:	bf00      	nop
 8020b4c:	24003448 	.word	0x24003448
 8020b50:	080280c4 	.word	0x080280c4
 8020b54:	080280e4 	.word	0x080280e4
 8020b58:	080280a4 	.word	0x080280a4

08020b5c <__assert_func>:
 8020b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020b5e:	4614      	mov	r4, r2
 8020b60:	461a      	mov	r2, r3
 8020b62:	4b09      	ldr	r3, [pc, #36]	; (8020b88 <__assert_func+0x2c>)
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	4605      	mov	r5, r0
 8020b68:	68d8      	ldr	r0, [r3, #12]
 8020b6a:	b14c      	cbz	r4, 8020b80 <__assert_func+0x24>
 8020b6c:	4b07      	ldr	r3, [pc, #28]	; (8020b8c <__assert_func+0x30>)
 8020b6e:	9100      	str	r1, [sp, #0]
 8020b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020b74:	4906      	ldr	r1, [pc, #24]	; (8020b90 <__assert_func+0x34>)
 8020b76:	462b      	mov	r3, r5
 8020b78:	f000 ffba 	bl	8021af0 <fiprintf>
 8020b7c:	f002 fbce 	bl	802331c <abort>
 8020b80:	4b04      	ldr	r3, [pc, #16]	; (8020b94 <__assert_func+0x38>)
 8020b82:	461c      	mov	r4, r3
 8020b84:	e7f3      	b.n	8020b6e <__assert_func+0x12>
 8020b86:	bf00      	nop
 8020b88:	24003448 	.word	0x24003448
 8020b8c:	08027fe8 	.word	0x08027fe8
 8020b90:	08027ff5 	.word	0x08027ff5
 8020b94:	08028023 	.word	0x08028023

08020b98 <quorem>:
 8020b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b9c:	6903      	ldr	r3, [r0, #16]
 8020b9e:	690c      	ldr	r4, [r1, #16]
 8020ba0:	42a3      	cmp	r3, r4
 8020ba2:	4607      	mov	r7, r0
 8020ba4:	f2c0 8081 	blt.w	8020caa <quorem+0x112>
 8020ba8:	3c01      	subs	r4, #1
 8020baa:	f101 0814 	add.w	r8, r1, #20
 8020bae:	f100 0514 	add.w	r5, r0, #20
 8020bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020bb6:	9301      	str	r3, [sp, #4]
 8020bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020bc0:	3301      	adds	r3, #1
 8020bc2:	429a      	cmp	r2, r3
 8020bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8020bd0:	d331      	bcc.n	8020c36 <quorem+0x9e>
 8020bd2:	f04f 0e00 	mov.w	lr, #0
 8020bd6:	4640      	mov	r0, r8
 8020bd8:	46ac      	mov	ip, r5
 8020bda:	46f2      	mov	sl, lr
 8020bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8020be0:	b293      	uxth	r3, r2
 8020be2:	fb06 e303 	mla	r3, r6, r3, lr
 8020be6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	ebaa 0303 	sub.w	r3, sl, r3
 8020bf0:	0c12      	lsrs	r2, r2, #16
 8020bf2:	f8dc a000 	ldr.w	sl, [ip]
 8020bf6:	fb06 e202 	mla	r2, r6, r2, lr
 8020bfa:	fa13 f38a 	uxtah	r3, r3, sl
 8020bfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020c02:	fa1f fa82 	uxth.w	sl, r2
 8020c06:	f8dc 2000 	ldr.w	r2, [ip]
 8020c0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020c0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020c12:	b29b      	uxth	r3, r3
 8020c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020c18:	4581      	cmp	r9, r0
 8020c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8020c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020c22:	d2db      	bcs.n	8020bdc <quorem+0x44>
 8020c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8020c28:	b92b      	cbnz	r3, 8020c36 <quorem+0x9e>
 8020c2a:	9b01      	ldr	r3, [sp, #4]
 8020c2c:	3b04      	subs	r3, #4
 8020c2e:	429d      	cmp	r5, r3
 8020c30:	461a      	mov	r2, r3
 8020c32:	d32e      	bcc.n	8020c92 <quorem+0xfa>
 8020c34:	613c      	str	r4, [r7, #16]
 8020c36:	4638      	mov	r0, r7
 8020c38:	f001 fe4c 	bl	80228d4 <__mcmp>
 8020c3c:	2800      	cmp	r0, #0
 8020c3e:	db24      	blt.n	8020c8a <quorem+0xf2>
 8020c40:	3601      	adds	r6, #1
 8020c42:	4628      	mov	r0, r5
 8020c44:	f04f 0c00 	mov.w	ip, #0
 8020c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8020c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8020c50:	b293      	uxth	r3, r2
 8020c52:	ebac 0303 	sub.w	r3, ip, r3
 8020c56:	0c12      	lsrs	r2, r2, #16
 8020c58:	fa13 f38e 	uxtah	r3, r3, lr
 8020c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020c64:	b29b      	uxth	r3, r3
 8020c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020c6a:	45c1      	cmp	r9, r8
 8020c6c:	f840 3b04 	str.w	r3, [r0], #4
 8020c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020c74:	d2e8      	bcs.n	8020c48 <quorem+0xb0>
 8020c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020c7e:	b922      	cbnz	r2, 8020c8a <quorem+0xf2>
 8020c80:	3b04      	subs	r3, #4
 8020c82:	429d      	cmp	r5, r3
 8020c84:	461a      	mov	r2, r3
 8020c86:	d30a      	bcc.n	8020c9e <quorem+0x106>
 8020c88:	613c      	str	r4, [r7, #16]
 8020c8a:	4630      	mov	r0, r6
 8020c8c:	b003      	add	sp, #12
 8020c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c92:	6812      	ldr	r2, [r2, #0]
 8020c94:	3b04      	subs	r3, #4
 8020c96:	2a00      	cmp	r2, #0
 8020c98:	d1cc      	bne.n	8020c34 <quorem+0x9c>
 8020c9a:	3c01      	subs	r4, #1
 8020c9c:	e7c7      	b.n	8020c2e <quorem+0x96>
 8020c9e:	6812      	ldr	r2, [r2, #0]
 8020ca0:	3b04      	subs	r3, #4
 8020ca2:	2a00      	cmp	r2, #0
 8020ca4:	d1f0      	bne.n	8020c88 <quorem+0xf0>
 8020ca6:	3c01      	subs	r4, #1
 8020ca8:	e7eb      	b.n	8020c82 <quorem+0xea>
 8020caa:	2000      	movs	r0, #0
 8020cac:	e7ee      	b.n	8020c8c <quorem+0xf4>
	...

08020cb0 <_dtoa_r>:
 8020cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cb4:	ec59 8b10 	vmov	r8, r9, d0
 8020cb8:	b095      	sub	sp, #84	; 0x54
 8020cba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020cbc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8020cbe:	9107      	str	r1, [sp, #28]
 8020cc0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8020cc4:	4606      	mov	r6, r0
 8020cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8020cc8:	9310      	str	r3, [sp, #64]	; 0x40
 8020cca:	b975      	cbnz	r5, 8020cea <_dtoa_r+0x3a>
 8020ccc:	2010      	movs	r0, #16
 8020cce:	f7fd ffbb 	bl	801ec48 <malloc>
 8020cd2:	4602      	mov	r2, r0
 8020cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8020cd6:	b920      	cbnz	r0, 8020ce2 <_dtoa_r+0x32>
 8020cd8:	4bab      	ldr	r3, [pc, #684]	; (8020f88 <_dtoa_r+0x2d8>)
 8020cda:	21ea      	movs	r1, #234	; 0xea
 8020cdc:	48ab      	ldr	r0, [pc, #684]	; (8020f8c <_dtoa_r+0x2dc>)
 8020cde:	f7ff ff3d 	bl	8020b5c <__assert_func>
 8020ce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020ce6:	6005      	str	r5, [r0, #0]
 8020ce8:	60c5      	str	r5, [r0, #12]
 8020cea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020cec:	6819      	ldr	r1, [r3, #0]
 8020cee:	b151      	cbz	r1, 8020d06 <_dtoa_r+0x56>
 8020cf0:	685a      	ldr	r2, [r3, #4]
 8020cf2:	604a      	str	r2, [r1, #4]
 8020cf4:	2301      	movs	r3, #1
 8020cf6:	4093      	lsls	r3, r2
 8020cf8:	608b      	str	r3, [r1, #8]
 8020cfa:	4630      	mov	r0, r6
 8020cfc:	f001 fb62 	bl	80223c4 <_Bfree>
 8020d00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020d02:	2200      	movs	r2, #0
 8020d04:	601a      	str	r2, [r3, #0]
 8020d06:	f1b9 0300 	subs.w	r3, r9, #0
 8020d0a:	bfbb      	ittet	lt
 8020d0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020d10:	9303      	strlt	r3, [sp, #12]
 8020d12:	2300      	movge	r3, #0
 8020d14:	2201      	movlt	r2, #1
 8020d16:	bfac      	ite	ge
 8020d18:	6023      	strge	r3, [r4, #0]
 8020d1a:	6022      	strlt	r2, [r4, #0]
 8020d1c:	4b9c      	ldr	r3, [pc, #624]	; (8020f90 <_dtoa_r+0x2e0>)
 8020d1e:	9c03      	ldr	r4, [sp, #12]
 8020d20:	43a3      	bics	r3, r4
 8020d22:	d11a      	bne.n	8020d5a <_dtoa_r+0xaa>
 8020d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d26:	f242 730f 	movw	r3, #9999	; 0x270f
 8020d2a:	6013      	str	r3, [r2, #0]
 8020d2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8020d30:	ea53 0308 	orrs.w	r3, r3, r8
 8020d34:	f000 8512 	beq.w	802175c <_dtoa_r+0xaac>
 8020d38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020d3a:	b953      	cbnz	r3, 8020d52 <_dtoa_r+0xa2>
 8020d3c:	4b95      	ldr	r3, [pc, #596]	; (8020f94 <_dtoa_r+0x2e4>)
 8020d3e:	e01f      	b.n	8020d80 <_dtoa_r+0xd0>
 8020d40:	4b95      	ldr	r3, [pc, #596]	; (8020f98 <_dtoa_r+0x2e8>)
 8020d42:	9300      	str	r3, [sp, #0]
 8020d44:	3308      	adds	r3, #8
 8020d46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020d48:	6013      	str	r3, [r2, #0]
 8020d4a:	9800      	ldr	r0, [sp, #0]
 8020d4c:	b015      	add	sp, #84	; 0x54
 8020d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d52:	4b90      	ldr	r3, [pc, #576]	; (8020f94 <_dtoa_r+0x2e4>)
 8020d54:	9300      	str	r3, [sp, #0]
 8020d56:	3303      	adds	r3, #3
 8020d58:	e7f5      	b.n	8020d46 <_dtoa_r+0x96>
 8020d5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020d5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020d6a:	d10b      	bne.n	8020d84 <_dtoa_r+0xd4>
 8020d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d6e:	2301      	movs	r3, #1
 8020d70:	6013      	str	r3, [r2, #0]
 8020d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	f000 84ee 	beq.w	8021756 <_dtoa_r+0xaa6>
 8020d7a:	4888      	ldr	r0, [pc, #544]	; (8020f9c <_dtoa_r+0x2ec>)
 8020d7c:	6018      	str	r0, [r3, #0]
 8020d7e:	1e43      	subs	r3, r0, #1
 8020d80:	9300      	str	r3, [sp, #0]
 8020d82:	e7e2      	b.n	8020d4a <_dtoa_r+0x9a>
 8020d84:	a913      	add	r1, sp, #76	; 0x4c
 8020d86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020d8a:	aa12      	add	r2, sp, #72	; 0x48
 8020d8c:	4630      	mov	r0, r6
 8020d8e:	f001 fec1 	bl	8022b14 <__d2b>
 8020d92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8020d96:	4605      	mov	r5, r0
 8020d98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020d9a:	2900      	cmp	r1, #0
 8020d9c:	d047      	beq.n	8020e2e <_dtoa_r+0x17e>
 8020d9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020da0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020da4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020da8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8020dac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020db0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8020db4:	2400      	movs	r4, #0
 8020db6:	ec43 2b16 	vmov	d6, r2, r3
 8020dba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8020dbe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8020f70 <_dtoa_r+0x2c0>
 8020dc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8020dc6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8020f78 <_dtoa_r+0x2c8>
 8020dca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8020dce:	eeb0 7b46 	vmov.f64	d7, d6
 8020dd2:	ee06 1a90 	vmov	s13, r1
 8020dd6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8020dda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8020f80 <_dtoa_r+0x2d0>
 8020dde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8020de2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8020de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8020dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dee:	ee16 ba90 	vmov	fp, s13
 8020df2:	9411      	str	r4, [sp, #68]	; 0x44
 8020df4:	d508      	bpl.n	8020e08 <_dtoa_r+0x158>
 8020df6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8020dfa:	eeb4 6b47 	vcmp.f64	d6, d7
 8020dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e02:	bf18      	it	ne
 8020e04:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8020e08:	f1bb 0f16 	cmp.w	fp, #22
 8020e0c:	d832      	bhi.n	8020e74 <_dtoa_r+0x1c4>
 8020e0e:	4b64      	ldr	r3, [pc, #400]	; (8020fa0 <_dtoa_r+0x2f0>)
 8020e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020e14:	ed93 7b00 	vldr	d7, [r3]
 8020e18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8020e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e24:	d501      	bpl.n	8020e2a <_dtoa_r+0x17a>
 8020e26:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	e023      	b.n	8020e76 <_dtoa_r+0x1c6>
 8020e2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020e30:	4401      	add	r1, r0
 8020e32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8020e36:	2b20      	cmp	r3, #32
 8020e38:	bfc3      	ittte	gt
 8020e3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020e3e:	fa04 f303 	lslgt.w	r3, r4, r3
 8020e42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8020e46:	f1c3 0320 	rsble	r3, r3, #32
 8020e4a:	bfc6      	itte	gt
 8020e4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8020e50:	ea43 0308 	orrgt.w	r3, r3, r8
 8020e54:	fa08 f303 	lslle.w	r3, r8, r3
 8020e58:	ee07 3a90 	vmov	s15, r3
 8020e5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020e60:	3901      	subs	r1, #1
 8020e62:	ed8d 7b00 	vstr	d7, [sp]
 8020e66:	9c01      	ldr	r4, [sp, #4]
 8020e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8020e70:	2401      	movs	r4, #1
 8020e72:	e7a0      	b.n	8020db6 <_dtoa_r+0x106>
 8020e74:	2301      	movs	r3, #1
 8020e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e78:	1a43      	subs	r3, r0, r1
 8020e7a:	1e5a      	subs	r2, r3, #1
 8020e7c:	bf45      	ittet	mi
 8020e7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8020e82:	9305      	strmi	r3, [sp, #20]
 8020e84:	2300      	movpl	r3, #0
 8020e86:	2300      	movmi	r3, #0
 8020e88:	9206      	str	r2, [sp, #24]
 8020e8a:	bf54      	ite	pl
 8020e8c:	9305      	strpl	r3, [sp, #20]
 8020e8e:	9306      	strmi	r3, [sp, #24]
 8020e90:	f1bb 0f00 	cmp.w	fp, #0
 8020e94:	db18      	blt.n	8020ec8 <_dtoa_r+0x218>
 8020e96:	9b06      	ldr	r3, [sp, #24]
 8020e98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8020e9c:	445b      	add	r3, fp
 8020e9e:	9306      	str	r3, [sp, #24]
 8020ea0:	2300      	movs	r3, #0
 8020ea2:	9a07      	ldr	r2, [sp, #28]
 8020ea4:	2a09      	cmp	r2, #9
 8020ea6:	d849      	bhi.n	8020f3c <_dtoa_r+0x28c>
 8020ea8:	2a05      	cmp	r2, #5
 8020eaa:	bfc4      	itt	gt
 8020eac:	3a04      	subgt	r2, #4
 8020eae:	9207      	strgt	r2, [sp, #28]
 8020eb0:	9a07      	ldr	r2, [sp, #28]
 8020eb2:	f1a2 0202 	sub.w	r2, r2, #2
 8020eb6:	bfcc      	ite	gt
 8020eb8:	2400      	movgt	r4, #0
 8020eba:	2401      	movle	r4, #1
 8020ebc:	2a03      	cmp	r2, #3
 8020ebe:	d848      	bhi.n	8020f52 <_dtoa_r+0x2a2>
 8020ec0:	e8df f002 	tbb	[pc, r2]
 8020ec4:	3a2c2e0b 	.word	0x3a2c2e0b
 8020ec8:	9b05      	ldr	r3, [sp, #20]
 8020eca:	2200      	movs	r2, #0
 8020ecc:	eba3 030b 	sub.w	r3, r3, fp
 8020ed0:	9305      	str	r3, [sp, #20]
 8020ed2:	920e      	str	r2, [sp, #56]	; 0x38
 8020ed4:	f1cb 0300 	rsb	r3, fp, #0
 8020ed8:	e7e3      	b.n	8020ea2 <_dtoa_r+0x1f2>
 8020eda:	2200      	movs	r2, #0
 8020edc:	9208      	str	r2, [sp, #32]
 8020ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ee0:	2a00      	cmp	r2, #0
 8020ee2:	dc39      	bgt.n	8020f58 <_dtoa_r+0x2a8>
 8020ee4:	f04f 0a01 	mov.w	sl, #1
 8020ee8:	46d1      	mov	r9, sl
 8020eea:	4652      	mov	r2, sl
 8020eec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8020ef0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8020ef2:	2100      	movs	r1, #0
 8020ef4:	6079      	str	r1, [r7, #4]
 8020ef6:	2004      	movs	r0, #4
 8020ef8:	f100 0c14 	add.w	ip, r0, #20
 8020efc:	4594      	cmp	ip, r2
 8020efe:	6879      	ldr	r1, [r7, #4]
 8020f00:	d92f      	bls.n	8020f62 <_dtoa_r+0x2b2>
 8020f02:	4630      	mov	r0, r6
 8020f04:	930c      	str	r3, [sp, #48]	; 0x30
 8020f06:	f001 fa1d 	bl	8022344 <_Balloc>
 8020f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f0c:	9000      	str	r0, [sp, #0]
 8020f0e:	4602      	mov	r2, r0
 8020f10:	2800      	cmp	r0, #0
 8020f12:	d149      	bne.n	8020fa8 <_dtoa_r+0x2f8>
 8020f14:	4b23      	ldr	r3, [pc, #140]	; (8020fa4 <_dtoa_r+0x2f4>)
 8020f16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020f1a:	e6df      	b.n	8020cdc <_dtoa_r+0x2c>
 8020f1c:	2201      	movs	r2, #1
 8020f1e:	e7dd      	b.n	8020edc <_dtoa_r+0x22c>
 8020f20:	2200      	movs	r2, #0
 8020f22:	9208      	str	r2, [sp, #32]
 8020f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f26:	eb0b 0a02 	add.w	sl, fp, r2
 8020f2a:	f10a 0901 	add.w	r9, sl, #1
 8020f2e:	464a      	mov	r2, r9
 8020f30:	2a01      	cmp	r2, #1
 8020f32:	bfb8      	it	lt
 8020f34:	2201      	movlt	r2, #1
 8020f36:	e7db      	b.n	8020ef0 <_dtoa_r+0x240>
 8020f38:	2201      	movs	r2, #1
 8020f3a:	e7f2      	b.n	8020f22 <_dtoa_r+0x272>
 8020f3c:	2401      	movs	r4, #1
 8020f3e:	2200      	movs	r2, #0
 8020f40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8020f44:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020f48:	2100      	movs	r1, #0
 8020f4a:	46d1      	mov	r9, sl
 8020f4c:	2212      	movs	r2, #18
 8020f4e:	9109      	str	r1, [sp, #36]	; 0x24
 8020f50:	e7ce      	b.n	8020ef0 <_dtoa_r+0x240>
 8020f52:	2201      	movs	r2, #1
 8020f54:	9208      	str	r2, [sp, #32]
 8020f56:	e7f5      	b.n	8020f44 <_dtoa_r+0x294>
 8020f58:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8020f5c:	46d1      	mov	r9, sl
 8020f5e:	4652      	mov	r2, sl
 8020f60:	e7c6      	b.n	8020ef0 <_dtoa_r+0x240>
 8020f62:	3101      	adds	r1, #1
 8020f64:	6079      	str	r1, [r7, #4]
 8020f66:	0040      	lsls	r0, r0, #1
 8020f68:	e7c6      	b.n	8020ef8 <_dtoa_r+0x248>
 8020f6a:	bf00      	nop
 8020f6c:	f3af 8000 	nop.w
 8020f70:	636f4361 	.word	0x636f4361
 8020f74:	3fd287a7 	.word	0x3fd287a7
 8020f78:	8b60c8b3 	.word	0x8b60c8b3
 8020f7c:	3fc68a28 	.word	0x3fc68a28
 8020f80:	509f79fb 	.word	0x509f79fb
 8020f84:	3fd34413 	.word	0x3fd34413
 8020f88:	08027f1d 	.word	0x08027f1d
 8020f8c:	08028031 	.word	0x08028031
 8020f90:	7ff00000 	.word	0x7ff00000
 8020f94:	0802802d 	.word	0x0802802d
 8020f98:	08028024 	.word	0x08028024
 8020f9c:	08027ef5 	.word	0x08027ef5
 8020fa0:	08028210 	.word	0x08028210
 8020fa4:	08028090 	.word	0x08028090
 8020fa8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8020faa:	9900      	ldr	r1, [sp, #0]
 8020fac:	6011      	str	r1, [r2, #0]
 8020fae:	f1b9 0f0e 	cmp.w	r9, #14
 8020fb2:	d872      	bhi.n	802109a <_dtoa_r+0x3ea>
 8020fb4:	2c00      	cmp	r4, #0
 8020fb6:	d070      	beq.n	802109a <_dtoa_r+0x3ea>
 8020fb8:	f1bb 0f00 	cmp.w	fp, #0
 8020fbc:	f340 80a6 	ble.w	802110c <_dtoa_r+0x45c>
 8020fc0:	49ca      	ldr	r1, [pc, #808]	; (80212ec <_dtoa_r+0x63c>)
 8020fc2:	f00b 020f 	and.w	r2, fp, #15
 8020fc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8020fca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8020fce:	ed92 7b00 	vldr	d7, [r2]
 8020fd2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8020fd6:	f000 808d 	beq.w	80210f4 <_dtoa_r+0x444>
 8020fda:	4ac5      	ldr	r2, [pc, #788]	; (80212f0 <_dtoa_r+0x640>)
 8020fdc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8020fe0:	ed92 6b08 	vldr	d6, [r2, #32]
 8020fe4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8020fe8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8020fec:	f001 010f 	and.w	r1, r1, #15
 8020ff0:	2203      	movs	r2, #3
 8020ff2:	48bf      	ldr	r0, [pc, #764]	; (80212f0 <_dtoa_r+0x640>)
 8020ff4:	2900      	cmp	r1, #0
 8020ff6:	d17f      	bne.n	80210f8 <_dtoa_r+0x448>
 8020ff8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8020ffc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021000:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021004:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021006:	2900      	cmp	r1, #0
 8021008:	f000 80b2 	beq.w	8021170 <_dtoa_r+0x4c0>
 802100c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021014:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802101c:	f140 80a8 	bpl.w	8021170 <_dtoa_r+0x4c0>
 8021020:	f1b9 0f00 	cmp.w	r9, #0
 8021024:	f000 80a4 	beq.w	8021170 <_dtoa_r+0x4c0>
 8021028:	f1ba 0f00 	cmp.w	sl, #0
 802102c:	dd31      	ble.n	8021092 <_dtoa_r+0x3e2>
 802102e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021032:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021036:	ed8d 7b02 	vstr	d7, [sp, #8]
 802103a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 802103e:	3201      	adds	r2, #1
 8021040:	4650      	mov	r0, sl
 8021042:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021046:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802104a:	ee07 2a90 	vmov	s15, r2
 802104e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021052:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021056:	ed8d 5b02 	vstr	d5, [sp, #8]
 802105a:	9c03      	ldr	r4, [sp, #12]
 802105c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8021060:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8021064:	2800      	cmp	r0, #0
 8021066:	f040 8086 	bne.w	8021176 <_dtoa_r+0x4c6>
 802106a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802106e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021072:	ec42 1b17 	vmov	d7, r1, r2
 8021076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802107e:	f300 8272 	bgt.w	8021566 <_dtoa_r+0x8b6>
 8021082:	eeb1 7b47 	vneg.f64	d7, d7
 8021086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802108e:	f100 8267 	bmi.w	8021560 <_dtoa_r+0x8b0>
 8021092:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8021096:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802109a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802109c:	2a00      	cmp	r2, #0
 802109e:	f2c0 8129 	blt.w	80212f4 <_dtoa_r+0x644>
 80210a2:	f1bb 0f0e 	cmp.w	fp, #14
 80210a6:	f300 8125 	bgt.w	80212f4 <_dtoa_r+0x644>
 80210aa:	4b90      	ldr	r3, [pc, #576]	; (80212ec <_dtoa_r+0x63c>)
 80210ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80210b0:	ed93 6b00 	vldr	d6, [r3]
 80210b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	f280 80c3 	bge.w	8021242 <_dtoa_r+0x592>
 80210bc:	f1b9 0f00 	cmp.w	r9, #0
 80210c0:	f300 80bf 	bgt.w	8021242 <_dtoa_r+0x592>
 80210c4:	f040 824c 	bne.w	8021560 <_dtoa_r+0x8b0>
 80210c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80210cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80210d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80210d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80210d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210dc:	464c      	mov	r4, r9
 80210de:	464f      	mov	r7, r9
 80210e0:	f280 8222 	bge.w	8021528 <_dtoa_r+0x878>
 80210e4:	f8dd 8000 	ldr.w	r8, [sp]
 80210e8:	2331      	movs	r3, #49	; 0x31
 80210ea:	f808 3b01 	strb.w	r3, [r8], #1
 80210ee:	f10b 0b01 	add.w	fp, fp, #1
 80210f2:	e21e      	b.n	8021532 <_dtoa_r+0x882>
 80210f4:	2202      	movs	r2, #2
 80210f6:	e77c      	b.n	8020ff2 <_dtoa_r+0x342>
 80210f8:	07cc      	lsls	r4, r1, #31
 80210fa:	d504      	bpl.n	8021106 <_dtoa_r+0x456>
 80210fc:	ed90 6b00 	vldr	d6, [r0]
 8021100:	3201      	adds	r2, #1
 8021102:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021106:	1049      	asrs	r1, r1, #1
 8021108:	3008      	adds	r0, #8
 802110a:	e773      	b.n	8020ff4 <_dtoa_r+0x344>
 802110c:	d02e      	beq.n	802116c <_dtoa_r+0x4bc>
 802110e:	f1cb 0100 	rsb	r1, fp, #0
 8021112:	4a76      	ldr	r2, [pc, #472]	; (80212ec <_dtoa_r+0x63c>)
 8021114:	f001 000f 	and.w	r0, r1, #15
 8021118:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802111c:	ed92 7b00 	vldr	d7, [r2]
 8021120:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8021124:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021128:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802112c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8021130:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8021134:	486e      	ldr	r0, [pc, #440]	; (80212f0 <_dtoa_r+0x640>)
 8021136:	1109      	asrs	r1, r1, #4
 8021138:	2400      	movs	r4, #0
 802113a:	2202      	movs	r2, #2
 802113c:	b939      	cbnz	r1, 802114e <_dtoa_r+0x49e>
 802113e:	2c00      	cmp	r4, #0
 8021140:	f43f af60 	beq.w	8021004 <_dtoa_r+0x354>
 8021144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802114c:	e75a      	b.n	8021004 <_dtoa_r+0x354>
 802114e:	07cf      	lsls	r7, r1, #31
 8021150:	d509      	bpl.n	8021166 <_dtoa_r+0x4b6>
 8021152:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8021156:	ed90 7b00 	vldr	d7, [r0]
 802115a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802115e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021162:	3201      	adds	r2, #1
 8021164:	2401      	movs	r4, #1
 8021166:	1049      	asrs	r1, r1, #1
 8021168:	3008      	adds	r0, #8
 802116a:	e7e7      	b.n	802113c <_dtoa_r+0x48c>
 802116c:	2202      	movs	r2, #2
 802116e:	e749      	b.n	8021004 <_dtoa_r+0x354>
 8021170:	465f      	mov	r7, fp
 8021172:	4648      	mov	r0, r9
 8021174:	e765      	b.n	8021042 <_dtoa_r+0x392>
 8021176:	ec42 1b17 	vmov	d7, r1, r2
 802117a:	4a5c      	ldr	r2, [pc, #368]	; (80212ec <_dtoa_r+0x63c>)
 802117c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021180:	ed12 4b02 	vldr	d4, [r2, #-8]
 8021184:	9a00      	ldr	r2, [sp, #0]
 8021186:	1814      	adds	r4, r2, r0
 8021188:	9a08      	ldr	r2, [sp, #32]
 802118a:	b352      	cbz	r2, 80211e2 <_dtoa_r+0x532>
 802118c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8021190:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021194:	f8dd 8000 	ldr.w	r8, [sp]
 8021198:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802119c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80211a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80211a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80211a8:	ee14 2a90 	vmov	r2, s9
 80211ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80211b0:	3230      	adds	r2, #48	; 0x30
 80211b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80211b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80211ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211be:	f808 2b01 	strb.w	r2, [r8], #1
 80211c2:	d439      	bmi.n	8021238 <_dtoa_r+0x588>
 80211c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80211c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80211cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211d0:	d472      	bmi.n	80212b8 <_dtoa_r+0x608>
 80211d2:	45a0      	cmp	r8, r4
 80211d4:	f43f af5d 	beq.w	8021092 <_dtoa_r+0x3e2>
 80211d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80211dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80211e0:	e7e0      	b.n	80211a4 <_dtoa_r+0x4f4>
 80211e2:	f8dd 8000 	ldr.w	r8, [sp]
 80211e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80211ea:	4621      	mov	r1, r4
 80211ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80211f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80211f4:	ee14 2a90 	vmov	r2, s9
 80211f8:	3230      	adds	r2, #48	; 0x30
 80211fa:	f808 2b01 	strb.w	r2, [r8], #1
 80211fe:	45a0      	cmp	r8, r4
 8021200:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021204:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021208:	d118      	bne.n	802123c <_dtoa_r+0x58c>
 802120a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802120e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021212:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802121a:	dc4d      	bgt.n	80212b8 <_dtoa_r+0x608>
 802121c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021220:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021228:	f57f af33 	bpl.w	8021092 <_dtoa_r+0x3e2>
 802122c:	4688      	mov	r8, r1
 802122e:	3901      	subs	r1, #1
 8021230:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021234:	2b30      	cmp	r3, #48	; 0x30
 8021236:	d0f9      	beq.n	802122c <_dtoa_r+0x57c>
 8021238:	46bb      	mov	fp, r7
 802123a:	e02a      	b.n	8021292 <_dtoa_r+0x5e2>
 802123c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021240:	e7d6      	b.n	80211f0 <_dtoa_r+0x540>
 8021242:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021246:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802124a:	f8dd 8000 	ldr.w	r8, [sp]
 802124e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8021252:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8021256:	ee15 3a10 	vmov	r3, s10
 802125a:	3330      	adds	r3, #48	; 0x30
 802125c:	f808 3b01 	strb.w	r3, [r8], #1
 8021260:	9b00      	ldr	r3, [sp, #0]
 8021262:	eba8 0303 	sub.w	r3, r8, r3
 8021266:	4599      	cmp	r9, r3
 8021268:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802126c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021270:	d133      	bne.n	80212da <_dtoa_r+0x62a>
 8021272:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021276:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802127e:	dc1a      	bgt.n	80212b6 <_dtoa_r+0x606>
 8021280:	eeb4 7b46 	vcmp.f64	d7, d6
 8021284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021288:	d103      	bne.n	8021292 <_dtoa_r+0x5e2>
 802128a:	ee15 3a10 	vmov	r3, s10
 802128e:	07d9      	lsls	r1, r3, #31
 8021290:	d411      	bmi.n	80212b6 <_dtoa_r+0x606>
 8021292:	4629      	mov	r1, r5
 8021294:	4630      	mov	r0, r6
 8021296:	f001 f895 	bl	80223c4 <_Bfree>
 802129a:	2300      	movs	r3, #0
 802129c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802129e:	f888 3000 	strb.w	r3, [r8]
 80212a2:	f10b 0301 	add.w	r3, fp, #1
 80212a6:	6013      	str	r3, [r2, #0]
 80212a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	f43f ad4d 	beq.w	8020d4a <_dtoa_r+0x9a>
 80212b0:	f8c3 8000 	str.w	r8, [r3]
 80212b4:	e549      	b.n	8020d4a <_dtoa_r+0x9a>
 80212b6:	465f      	mov	r7, fp
 80212b8:	4643      	mov	r3, r8
 80212ba:	4698      	mov	r8, r3
 80212bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80212c0:	2a39      	cmp	r2, #57	; 0x39
 80212c2:	d106      	bne.n	80212d2 <_dtoa_r+0x622>
 80212c4:	9a00      	ldr	r2, [sp, #0]
 80212c6:	429a      	cmp	r2, r3
 80212c8:	d1f7      	bne.n	80212ba <_dtoa_r+0x60a>
 80212ca:	9900      	ldr	r1, [sp, #0]
 80212cc:	2230      	movs	r2, #48	; 0x30
 80212ce:	3701      	adds	r7, #1
 80212d0:	700a      	strb	r2, [r1, #0]
 80212d2:	781a      	ldrb	r2, [r3, #0]
 80212d4:	3201      	adds	r2, #1
 80212d6:	701a      	strb	r2, [r3, #0]
 80212d8:	e7ae      	b.n	8021238 <_dtoa_r+0x588>
 80212da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80212de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80212e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212e6:	d1b2      	bne.n	802124e <_dtoa_r+0x59e>
 80212e8:	e7d3      	b.n	8021292 <_dtoa_r+0x5e2>
 80212ea:	bf00      	nop
 80212ec:	08028210 	.word	0x08028210
 80212f0:	080281e8 	.word	0x080281e8
 80212f4:	9908      	ldr	r1, [sp, #32]
 80212f6:	2900      	cmp	r1, #0
 80212f8:	f000 80d1 	beq.w	802149e <_dtoa_r+0x7ee>
 80212fc:	9907      	ldr	r1, [sp, #28]
 80212fe:	2901      	cmp	r1, #1
 8021300:	f300 80b4 	bgt.w	802146c <_dtoa_r+0x7bc>
 8021304:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021306:	2900      	cmp	r1, #0
 8021308:	f000 80ac 	beq.w	8021464 <_dtoa_r+0x7b4>
 802130c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021310:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021314:	461c      	mov	r4, r3
 8021316:	930a      	str	r3, [sp, #40]	; 0x28
 8021318:	9b05      	ldr	r3, [sp, #20]
 802131a:	4413      	add	r3, r2
 802131c:	9305      	str	r3, [sp, #20]
 802131e:	9b06      	ldr	r3, [sp, #24]
 8021320:	2101      	movs	r1, #1
 8021322:	4413      	add	r3, r2
 8021324:	4630      	mov	r0, r6
 8021326:	9306      	str	r3, [sp, #24]
 8021328:	f001 f952 	bl	80225d0 <__i2b>
 802132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802132e:	4607      	mov	r7, r0
 8021330:	f1b8 0f00 	cmp.w	r8, #0
 8021334:	dd0d      	ble.n	8021352 <_dtoa_r+0x6a2>
 8021336:	9a06      	ldr	r2, [sp, #24]
 8021338:	2a00      	cmp	r2, #0
 802133a:	dd0a      	ble.n	8021352 <_dtoa_r+0x6a2>
 802133c:	4542      	cmp	r2, r8
 802133e:	9905      	ldr	r1, [sp, #20]
 8021340:	bfa8      	it	ge
 8021342:	4642      	movge	r2, r8
 8021344:	1a89      	subs	r1, r1, r2
 8021346:	9105      	str	r1, [sp, #20]
 8021348:	9906      	ldr	r1, [sp, #24]
 802134a:	eba8 0802 	sub.w	r8, r8, r2
 802134e:	1a8a      	subs	r2, r1, r2
 8021350:	9206      	str	r2, [sp, #24]
 8021352:	b303      	cbz	r3, 8021396 <_dtoa_r+0x6e6>
 8021354:	9a08      	ldr	r2, [sp, #32]
 8021356:	2a00      	cmp	r2, #0
 8021358:	f000 80a6 	beq.w	80214a8 <_dtoa_r+0x7f8>
 802135c:	2c00      	cmp	r4, #0
 802135e:	dd13      	ble.n	8021388 <_dtoa_r+0x6d8>
 8021360:	4639      	mov	r1, r7
 8021362:	4622      	mov	r2, r4
 8021364:	4630      	mov	r0, r6
 8021366:	930c      	str	r3, [sp, #48]	; 0x30
 8021368:	f001 f9ee 	bl	8022748 <__pow5mult>
 802136c:	462a      	mov	r2, r5
 802136e:	4601      	mov	r1, r0
 8021370:	4607      	mov	r7, r0
 8021372:	4630      	mov	r0, r6
 8021374:	f001 f942 	bl	80225fc <__multiply>
 8021378:	4629      	mov	r1, r5
 802137a:	900a      	str	r0, [sp, #40]	; 0x28
 802137c:	4630      	mov	r0, r6
 802137e:	f001 f821 	bl	80223c4 <_Bfree>
 8021382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021386:	4615      	mov	r5, r2
 8021388:	1b1a      	subs	r2, r3, r4
 802138a:	d004      	beq.n	8021396 <_dtoa_r+0x6e6>
 802138c:	4629      	mov	r1, r5
 802138e:	4630      	mov	r0, r6
 8021390:	f001 f9da 	bl	8022748 <__pow5mult>
 8021394:	4605      	mov	r5, r0
 8021396:	2101      	movs	r1, #1
 8021398:	4630      	mov	r0, r6
 802139a:	f001 f919 	bl	80225d0 <__i2b>
 802139e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	4604      	mov	r4, r0
 80213a4:	f340 8082 	ble.w	80214ac <_dtoa_r+0x7fc>
 80213a8:	461a      	mov	r2, r3
 80213aa:	4601      	mov	r1, r0
 80213ac:	4630      	mov	r0, r6
 80213ae:	f001 f9cb 	bl	8022748 <__pow5mult>
 80213b2:	9b07      	ldr	r3, [sp, #28]
 80213b4:	2b01      	cmp	r3, #1
 80213b6:	4604      	mov	r4, r0
 80213b8:	dd7b      	ble.n	80214b2 <_dtoa_r+0x802>
 80213ba:	2300      	movs	r3, #0
 80213bc:	930a      	str	r3, [sp, #40]	; 0x28
 80213be:	6922      	ldr	r2, [r4, #16]
 80213c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80213c4:	6910      	ldr	r0, [r2, #16]
 80213c6:	f001 f8b3 	bl	8022530 <__hi0bits>
 80213ca:	f1c0 0020 	rsb	r0, r0, #32
 80213ce:	9b06      	ldr	r3, [sp, #24]
 80213d0:	4418      	add	r0, r3
 80213d2:	f010 001f 	ands.w	r0, r0, #31
 80213d6:	f000 808d 	beq.w	80214f4 <_dtoa_r+0x844>
 80213da:	f1c0 0220 	rsb	r2, r0, #32
 80213de:	2a04      	cmp	r2, #4
 80213e0:	f340 8086 	ble.w	80214f0 <_dtoa_r+0x840>
 80213e4:	f1c0 001c 	rsb	r0, r0, #28
 80213e8:	9b05      	ldr	r3, [sp, #20]
 80213ea:	4403      	add	r3, r0
 80213ec:	9305      	str	r3, [sp, #20]
 80213ee:	9b06      	ldr	r3, [sp, #24]
 80213f0:	4403      	add	r3, r0
 80213f2:	4480      	add	r8, r0
 80213f4:	9306      	str	r3, [sp, #24]
 80213f6:	9b05      	ldr	r3, [sp, #20]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	dd05      	ble.n	8021408 <_dtoa_r+0x758>
 80213fc:	4629      	mov	r1, r5
 80213fe:	461a      	mov	r2, r3
 8021400:	4630      	mov	r0, r6
 8021402:	f001 f9fb 	bl	80227fc <__lshift>
 8021406:	4605      	mov	r5, r0
 8021408:	9b06      	ldr	r3, [sp, #24]
 802140a:	2b00      	cmp	r3, #0
 802140c:	dd05      	ble.n	802141a <_dtoa_r+0x76a>
 802140e:	4621      	mov	r1, r4
 8021410:	461a      	mov	r2, r3
 8021412:	4630      	mov	r0, r6
 8021414:	f001 f9f2 	bl	80227fc <__lshift>
 8021418:	4604      	mov	r4, r0
 802141a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802141c:	2b00      	cmp	r3, #0
 802141e:	d06b      	beq.n	80214f8 <_dtoa_r+0x848>
 8021420:	4621      	mov	r1, r4
 8021422:	4628      	mov	r0, r5
 8021424:	f001 fa56 	bl	80228d4 <__mcmp>
 8021428:	2800      	cmp	r0, #0
 802142a:	da65      	bge.n	80214f8 <_dtoa_r+0x848>
 802142c:	2300      	movs	r3, #0
 802142e:	4629      	mov	r1, r5
 8021430:	220a      	movs	r2, #10
 8021432:	4630      	mov	r0, r6
 8021434:	f000 ffe8 	bl	8022408 <__multadd>
 8021438:	9b08      	ldr	r3, [sp, #32]
 802143a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802143e:	4605      	mov	r5, r0
 8021440:	2b00      	cmp	r3, #0
 8021442:	f000 8192 	beq.w	802176a <_dtoa_r+0xaba>
 8021446:	4639      	mov	r1, r7
 8021448:	2300      	movs	r3, #0
 802144a:	220a      	movs	r2, #10
 802144c:	4630      	mov	r0, r6
 802144e:	f000 ffdb 	bl	8022408 <__multadd>
 8021452:	f1ba 0f00 	cmp.w	sl, #0
 8021456:	4607      	mov	r7, r0
 8021458:	f300 808e 	bgt.w	8021578 <_dtoa_r+0x8c8>
 802145c:	9b07      	ldr	r3, [sp, #28]
 802145e:	2b02      	cmp	r3, #2
 8021460:	dc51      	bgt.n	8021506 <_dtoa_r+0x856>
 8021462:	e089      	b.n	8021578 <_dtoa_r+0x8c8>
 8021464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021466:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802146a:	e751      	b.n	8021310 <_dtoa_r+0x660>
 802146c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021470:	42a3      	cmp	r3, r4
 8021472:	bfbf      	itttt	lt
 8021474:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8021476:	1ae3      	sublt	r3, r4, r3
 8021478:	18d2      	addlt	r2, r2, r3
 802147a:	4613      	movlt	r3, r2
 802147c:	bfb7      	itett	lt
 802147e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021480:	1b1c      	subge	r4, r3, r4
 8021482:	4623      	movlt	r3, r4
 8021484:	2400      	movlt	r4, #0
 8021486:	f1b9 0f00 	cmp.w	r9, #0
 802148a:	bfb5      	itete	lt
 802148c:	9a05      	ldrlt	r2, [sp, #20]
 802148e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8021492:	eba2 0809 	sublt.w	r8, r2, r9
 8021496:	464a      	movge	r2, r9
 8021498:	bfb8      	it	lt
 802149a:	2200      	movlt	r2, #0
 802149c:	e73b      	b.n	8021316 <_dtoa_r+0x666>
 802149e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80214a2:	9f08      	ldr	r7, [sp, #32]
 80214a4:	461c      	mov	r4, r3
 80214a6:	e743      	b.n	8021330 <_dtoa_r+0x680>
 80214a8:	461a      	mov	r2, r3
 80214aa:	e76f      	b.n	802138c <_dtoa_r+0x6dc>
 80214ac:	9b07      	ldr	r3, [sp, #28]
 80214ae:	2b01      	cmp	r3, #1
 80214b0:	dc18      	bgt.n	80214e4 <_dtoa_r+0x834>
 80214b2:	9b02      	ldr	r3, [sp, #8]
 80214b4:	b9b3      	cbnz	r3, 80214e4 <_dtoa_r+0x834>
 80214b6:	9b03      	ldr	r3, [sp, #12]
 80214b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80214bc:	b9a2      	cbnz	r2, 80214e8 <_dtoa_r+0x838>
 80214be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80214c2:	0d12      	lsrs	r2, r2, #20
 80214c4:	0512      	lsls	r2, r2, #20
 80214c6:	b18a      	cbz	r2, 80214ec <_dtoa_r+0x83c>
 80214c8:	9b05      	ldr	r3, [sp, #20]
 80214ca:	3301      	adds	r3, #1
 80214cc:	9305      	str	r3, [sp, #20]
 80214ce:	9b06      	ldr	r3, [sp, #24]
 80214d0:	3301      	adds	r3, #1
 80214d2:	9306      	str	r3, [sp, #24]
 80214d4:	2301      	movs	r3, #1
 80214d6:	930a      	str	r3, [sp, #40]	; 0x28
 80214d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214da:	2b00      	cmp	r3, #0
 80214dc:	f47f af6f 	bne.w	80213be <_dtoa_r+0x70e>
 80214e0:	2001      	movs	r0, #1
 80214e2:	e774      	b.n	80213ce <_dtoa_r+0x71e>
 80214e4:	2300      	movs	r3, #0
 80214e6:	e7f6      	b.n	80214d6 <_dtoa_r+0x826>
 80214e8:	9b02      	ldr	r3, [sp, #8]
 80214ea:	e7f4      	b.n	80214d6 <_dtoa_r+0x826>
 80214ec:	920a      	str	r2, [sp, #40]	; 0x28
 80214ee:	e7f3      	b.n	80214d8 <_dtoa_r+0x828>
 80214f0:	d081      	beq.n	80213f6 <_dtoa_r+0x746>
 80214f2:	4610      	mov	r0, r2
 80214f4:	301c      	adds	r0, #28
 80214f6:	e777      	b.n	80213e8 <_dtoa_r+0x738>
 80214f8:	f1b9 0f00 	cmp.w	r9, #0
 80214fc:	dc37      	bgt.n	802156e <_dtoa_r+0x8be>
 80214fe:	9b07      	ldr	r3, [sp, #28]
 8021500:	2b02      	cmp	r3, #2
 8021502:	dd34      	ble.n	802156e <_dtoa_r+0x8be>
 8021504:	46ca      	mov	sl, r9
 8021506:	f1ba 0f00 	cmp.w	sl, #0
 802150a:	d10d      	bne.n	8021528 <_dtoa_r+0x878>
 802150c:	4621      	mov	r1, r4
 802150e:	4653      	mov	r3, sl
 8021510:	2205      	movs	r2, #5
 8021512:	4630      	mov	r0, r6
 8021514:	f000 ff78 	bl	8022408 <__multadd>
 8021518:	4601      	mov	r1, r0
 802151a:	4604      	mov	r4, r0
 802151c:	4628      	mov	r0, r5
 802151e:	f001 f9d9 	bl	80228d4 <__mcmp>
 8021522:	2800      	cmp	r0, #0
 8021524:	f73f adde 	bgt.w	80210e4 <_dtoa_r+0x434>
 8021528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802152a:	f8dd 8000 	ldr.w	r8, [sp]
 802152e:	ea6f 0b03 	mvn.w	fp, r3
 8021532:	f04f 0900 	mov.w	r9, #0
 8021536:	4621      	mov	r1, r4
 8021538:	4630      	mov	r0, r6
 802153a:	f000 ff43 	bl	80223c4 <_Bfree>
 802153e:	2f00      	cmp	r7, #0
 8021540:	f43f aea7 	beq.w	8021292 <_dtoa_r+0x5e2>
 8021544:	f1b9 0f00 	cmp.w	r9, #0
 8021548:	d005      	beq.n	8021556 <_dtoa_r+0x8a6>
 802154a:	45b9      	cmp	r9, r7
 802154c:	d003      	beq.n	8021556 <_dtoa_r+0x8a6>
 802154e:	4649      	mov	r1, r9
 8021550:	4630      	mov	r0, r6
 8021552:	f000 ff37 	bl	80223c4 <_Bfree>
 8021556:	4639      	mov	r1, r7
 8021558:	4630      	mov	r0, r6
 802155a:	f000 ff33 	bl	80223c4 <_Bfree>
 802155e:	e698      	b.n	8021292 <_dtoa_r+0x5e2>
 8021560:	2400      	movs	r4, #0
 8021562:	4627      	mov	r7, r4
 8021564:	e7e0      	b.n	8021528 <_dtoa_r+0x878>
 8021566:	46bb      	mov	fp, r7
 8021568:	4604      	mov	r4, r0
 802156a:	4607      	mov	r7, r0
 802156c:	e5ba      	b.n	80210e4 <_dtoa_r+0x434>
 802156e:	9b08      	ldr	r3, [sp, #32]
 8021570:	46ca      	mov	sl, r9
 8021572:	2b00      	cmp	r3, #0
 8021574:	f000 8100 	beq.w	8021778 <_dtoa_r+0xac8>
 8021578:	f1b8 0f00 	cmp.w	r8, #0
 802157c:	dd05      	ble.n	802158a <_dtoa_r+0x8da>
 802157e:	4639      	mov	r1, r7
 8021580:	4642      	mov	r2, r8
 8021582:	4630      	mov	r0, r6
 8021584:	f001 f93a 	bl	80227fc <__lshift>
 8021588:	4607      	mov	r7, r0
 802158a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802158c:	2b00      	cmp	r3, #0
 802158e:	d05d      	beq.n	802164c <_dtoa_r+0x99c>
 8021590:	6879      	ldr	r1, [r7, #4]
 8021592:	4630      	mov	r0, r6
 8021594:	f000 fed6 	bl	8022344 <_Balloc>
 8021598:	4680      	mov	r8, r0
 802159a:	b928      	cbnz	r0, 80215a8 <_dtoa_r+0x8f8>
 802159c:	4b82      	ldr	r3, [pc, #520]	; (80217a8 <_dtoa_r+0xaf8>)
 802159e:	4602      	mov	r2, r0
 80215a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80215a4:	f7ff bb9a 	b.w	8020cdc <_dtoa_r+0x2c>
 80215a8:	693a      	ldr	r2, [r7, #16]
 80215aa:	3202      	adds	r2, #2
 80215ac:	0092      	lsls	r2, r2, #2
 80215ae:	f107 010c 	add.w	r1, r7, #12
 80215b2:	300c      	adds	r0, #12
 80215b4:	f7fd fb5e 	bl	801ec74 <memcpy>
 80215b8:	2201      	movs	r2, #1
 80215ba:	4641      	mov	r1, r8
 80215bc:	4630      	mov	r0, r6
 80215be:	f001 f91d 	bl	80227fc <__lshift>
 80215c2:	9b00      	ldr	r3, [sp, #0]
 80215c4:	3301      	adds	r3, #1
 80215c6:	9305      	str	r3, [sp, #20]
 80215c8:	9b00      	ldr	r3, [sp, #0]
 80215ca:	4453      	add	r3, sl
 80215cc:	9309      	str	r3, [sp, #36]	; 0x24
 80215ce:	9b02      	ldr	r3, [sp, #8]
 80215d0:	f003 0301 	and.w	r3, r3, #1
 80215d4:	46b9      	mov	r9, r7
 80215d6:	9308      	str	r3, [sp, #32]
 80215d8:	4607      	mov	r7, r0
 80215da:	9b05      	ldr	r3, [sp, #20]
 80215dc:	4621      	mov	r1, r4
 80215de:	3b01      	subs	r3, #1
 80215e0:	4628      	mov	r0, r5
 80215e2:	9302      	str	r3, [sp, #8]
 80215e4:	f7ff fad8 	bl	8020b98 <quorem>
 80215e8:	4603      	mov	r3, r0
 80215ea:	3330      	adds	r3, #48	; 0x30
 80215ec:	9006      	str	r0, [sp, #24]
 80215ee:	4649      	mov	r1, r9
 80215f0:	4628      	mov	r0, r5
 80215f2:	930a      	str	r3, [sp, #40]	; 0x28
 80215f4:	f001 f96e 	bl	80228d4 <__mcmp>
 80215f8:	463a      	mov	r2, r7
 80215fa:	4682      	mov	sl, r0
 80215fc:	4621      	mov	r1, r4
 80215fe:	4630      	mov	r0, r6
 8021600:	f001 f984 	bl	802290c <__mdiff>
 8021604:	68c2      	ldr	r2, [r0, #12]
 8021606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021608:	4680      	mov	r8, r0
 802160a:	bb0a      	cbnz	r2, 8021650 <_dtoa_r+0x9a0>
 802160c:	4601      	mov	r1, r0
 802160e:	4628      	mov	r0, r5
 8021610:	f001 f960 	bl	80228d4 <__mcmp>
 8021614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021616:	4602      	mov	r2, r0
 8021618:	4641      	mov	r1, r8
 802161a:	4630      	mov	r0, r6
 802161c:	920e      	str	r2, [sp, #56]	; 0x38
 802161e:	930a      	str	r3, [sp, #40]	; 0x28
 8021620:	f000 fed0 	bl	80223c4 <_Bfree>
 8021624:	9b07      	ldr	r3, [sp, #28]
 8021626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021628:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802162c:	ea43 0102 	orr.w	r1, r3, r2
 8021630:	9b08      	ldr	r3, [sp, #32]
 8021632:	430b      	orrs	r3, r1
 8021634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021636:	d10d      	bne.n	8021654 <_dtoa_r+0x9a4>
 8021638:	2b39      	cmp	r3, #57	; 0x39
 802163a:	d029      	beq.n	8021690 <_dtoa_r+0x9e0>
 802163c:	f1ba 0f00 	cmp.w	sl, #0
 8021640:	dd01      	ble.n	8021646 <_dtoa_r+0x996>
 8021642:	9b06      	ldr	r3, [sp, #24]
 8021644:	3331      	adds	r3, #49	; 0x31
 8021646:	9a02      	ldr	r2, [sp, #8]
 8021648:	7013      	strb	r3, [r2, #0]
 802164a:	e774      	b.n	8021536 <_dtoa_r+0x886>
 802164c:	4638      	mov	r0, r7
 802164e:	e7b8      	b.n	80215c2 <_dtoa_r+0x912>
 8021650:	2201      	movs	r2, #1
 8021652:	e7e1      	b.n	8021618 <_dtoa_r+0x968>
 8021654:	f1ba 0f00 	cmp.w	sl, #0
 8021658:	db06      	blt.n	8021668 <_dtoa_r+0x9b8>
 802165a:	9907      	ldr	r1, [sp, #28]
 802165c:	ea41 0a0a 	orr.w	sl, r1, sl
 8021660:	9908      	ldr	r1, [sp, #32]
 8021662:	ea5a 0101 	orrs.w	r1, sl, r1
 8021666:	d120      	bne.n	80216aa <_dtoa_r+0x9fa>
 8021668:	2a00      	cmp	r2, #0
 802166a:	ddec      	ble.n	8021646 <_dtoa_r+0x996>
 802166c:	4629      	mov	r1, r5
 802166e:	2201      	movs	r2, #1
 8021670:	4630      	mov	r0, r6
 8021672:	9305      	str	r3, [sp, #20]
 8021674:	f001 f8c2 	bl	80227fc <__lshift>
 8021678:	4621      	mov	r1, r4
 802167a:	4605      	mov	r5, r0
 802167c:	f001 f92a 	bl	80228d4 <__mcmp>
 8021680:	2800      	cmp	r0, #0
 8021682:	9b05      	ldr	r3, [sp, #20]
 8021684:	dc02      	bgt.n	802168c <_dtoa_r+0x9dc>
 8021686:	d1de      	bne.n	8021646 <_dtoa_r+0x996>
 8021688:	07da      	lsls	r2, r3, #31
 802168a:	d5dc      	bpl.n	8021646 <_dtoa_r+0x996>
 802168c:	2b39      	cmp	r3, #57	; 0x39
 802168e:	d1d8      	bne.n	8021642 <_dtoa_r+0x992>
 8021690:	9a02      	ldr	r2, [sp, #8]
 8021692:	2339      	movs	r3, #57	; 0x39
 8021694:	7013      	strb	r3, [r2, #0]
 8021696:	4643      	mov	r3, r8
 8021698:	4698      	mov	r8, r3
 802169a:	3b01      	subs	r3, #1
 802169c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80216a0:	2a39      	cmp	r2, #57	; 0x39
 80216a2:	d051      	beq.n	8021748 <_dtoa_r+0xa98>
 80216a4:	3201      	adds	r2, #1
 80216a6:	701a      	strb	r2, [r3, #0]
 80216a8:	e745      	b.n	8021536 <_dtoa_r+0x886>
 80216aa:	2a00      	cmp	r2, #0
 80216ac:	dd03      	ble.n	80216b6 <_dtoa_r+0xa06>
 80216ae:	2b39      	cmp	r3, #57	; 0x39
 80216b0:	d0ee      	beq.n	8021690 <_dtoa_r+0x9e0>
 80216b2:	3301      	adds	r3, #1
 80216b4:	e7c7      	b.n	8021646 <_dtoa_r+0x996>
 80216b6:	9a05      	ldr	r2, [sp, #20]
 80216b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80216ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80216be:	428a      	cmp	r2, r1
 80216c0:	d02b      	beq.n	802171a <_dtoa_r+0xa6a>
 80216c2:	4629      	mov	r1, r5
 80216c4:	2300      	movs	r3, #0
 80216c6:	220a      	movs	r2, #10
 80216c8:	4630      	mov	r0, r6
 80216ca:	f000 fe9d 	bl	8022408 <__multadd>
 80216ce:	45b9      	cmp	r9, r7
 80216d0:	4605      	mov	r5, r0
 80216d2:	f04f 0300 	mov.w	r3, #0
 80216d6:	f04f 020a 	mov.w	r2, #10
 80216da:	4649      	mov	r1, r9
 80216dc:	4630      	mov	r0, r6
 80216de:	d107      	bne.n	80216f0 <_dtoa_r+0xa40>
 80216e0:	f000 fe92 	bl	8022408 <__multadd>
 80216e4:	4681      	mov	r9, r0
 80216e6:	4607      	mov	r7, r0
 80216e8:	9b05      	ldr	r3, [sp, #20]
 80216ea:	3301      	adds	r3, #1
 80216ec:	9305      	str	r3, [sp, #20]
 80216ee:	e774      	b.n	80215da <_dtoa_r+0x92a>
 80216f0:	f000 fe8a 	bl	8022408 <__multadd>
 80216f4:	4639      	mov	r1, r7
 80216f6:	4681      	mov	r9, r0
 80216f8:	2300      	movs	r3, #0
 80216fa:	220a      	movs	r2, #10
 80216fc:	4630      	mov	r0, r6
 80216fe:	f000 fe83 	bl	8022408 <__multadd>
 8021702:	4607      	mov	r7, r0
 8021704:	e7f0      	b.n	80216e8 <_dtoa_r+0xa38>
 8021706:	f1ba 0f00 	cmp.w	sl, #0
 802170a:	9a00      	ldr	r2, [sp, #0]
 802170c:	bfcc      	ite	gt
 802170e:	46d0      	movgt	r8, sl
 8021710:	f04f 0801 	movle.w	r8, #1
 8021714:	4490      	add	r8, r2
 8021716:	f04f 0900 	mov.w	r9, #0
 802171a:	4629      	mov	r1, r5
 802171c:	2201      	movs	r2, #1
 802171e:	4630      	mov	r0, r6
 8021720:	9302      	str	r3, [sp, #8]
 8021722:	f001 f86b 	bl	80227fc <__lshift>
 8021726:	4621      	mov	r1, r4
 8021728:	4605      	mov	r5, r0
 802172a:	f001 f8d3 	bl	80228d4 <__mcmp>
 802172e:	2800      	cmp	r0, #0
 8021730:	dcb1      	bgt.n	8021696 <_dtoa_r+0x9e6>
 8021732:	d102      	bne.n	802173a <_dtoa_r+0xa8a>
 8021734:	9b02      	ldr	r3, [sp, #8]
 8021736:	07db      	lsls	r3, r3, #31
 8021738:	d4ad      	bmi.n	8021696 <_dtoa_r+0x9e6>
 802173a:	4643      	mov	r3, r8
 802173c:	4698      	mov	r8, r3
 802173e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021742:	2a30      	cmp	r2, #48	; 0x30
 8021744:	d0fa      	beq.n	802173c <_dtoa_r+0xa8c>
 8021746:	e6f6      	b.n	8021536 <_dtoa_r+0x886>
 8021748:	9a00      	ldr	r2, [sp, #0]
 802174a:	429a      	cmp	r2, r3
 802174c:	d1a4      	bne.n	8021698 <_dtoa_r+0x9e8>
 802174e:	f10b 0b01 	add.w	fp, fp, #1
 8021752:	2331      	movs	r3, #49	; 0x31
 8021754:	e778      	b.n	8021648 <_dtoa_r+0x998>
 8021756:	4b15      	ldr	r3, [pc, #84]	; (80217ac <_dtoa_r+0xafc>)
 8021758:	f7ff bb12 	b.w	8020d80 <_dtoa_r+0xd0>
 802175c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802175e:	2b00      	cmp	r3, #0
 8021760:	f47f aaee 	bne.w	8020d40 <_dtoa_r+0x90>
 8021764:	4b12      	ldr	r3, [pc, #72]	; (80217b0 <_dtoa_r+0xb00>)
 8021766:	f7ff bb0b 	b.w	8020d80 <_dtoa_r+0xd0>
 802176a:	f1ba 0f00 	cmp.w	sl, #0
 802176e:	dc03      	bgt.n	8021778 <_dtoa_r+0xac8>
 8021770:	9b07      	ldr	r3, [sp, #28]
 8021772:	2b02      	cmp	r3, #2
 8021774:	f73f aec7 	bgt.w	8021506 <_dtoa_r+0x856>
 8021778:	f8dd 8000 	ldr.w	r8, [sp]
 802177c:	4621      	mov	r1, r4
 802177e:	4628      	mov	r0, r5
 8021780:	f7ff fa0a 	bl	8020b98 <quorem>
 8021784:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021788:	f808 3b01 	strb.w	r3, [r8], #1
 802178c:	9a00      	ldr	r2, [sp, #0]
 802178e:	eba8 0202 	sub.w	r2, r8, r2
 8021792:	4592      	cmp	sl, r2
 8021794:	ddb7      	ble.n	8021706 <_dtoa_r+0xa56>
 8021796:	4629      	mov	r1, r5
 8021798:	2300      	movs	r3, #0
 802179a:	220a      	movs	r2, #10
 802179c:	4630      	mov	r0, r6
 802179e:	f000 fe33 	bl	8022408 <__multadd>
 80217a2:	4605      	mov	r5, r0
 80217a4:	e7ea      	b.n	802177c <_dtoa_r+0xacc>
 80217a6:	bf00      	nop
 80217a8:	08028090 	.word	0x08028090
 80217ac:	08027ef4 	.word	0x08027ef4
 80217b0:	08028024 	.word	0x08028024

080217b4 <__errno>:
 80217b4:	4b01      	ldr	r3, [pc, #4]	; (80217bc <__errno+0x8>)
 80217b6:	6818      	ldr	r0, [r3, #0]
 80217b8:	4770      	bx	lr
 80217ba:	bf00      	nop
 80217bc:	24003448 	.word	0x24003448

080217c0 <__sflush_r>:
 80217c0:	898a      	ldrh	r2, [r1, #12]
 80217c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217c6:	4605      	mov	r5, r0
 80217c8:	0710      	lsls	r0, r2, #28
 80217ca:	460c      	mov	r4, r1
 80217cc:	d458      	bmi.n	8021880 <__sflush_r+0xc0>
 80217ce:	684b      	ldr	r3, [r1, #4]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	dc05      	bgt.n	80217e0 <__sflush_r+0x20>
 80217d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	dc02      	bgt.n	80217e0 <__sflush_r+0x20>
 80217da:	2000      	movs	r0, #0
 80217dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80217e2:	2e00      	cmp	r6, #0
 80217e4:	d0f9      	beq.n	80217da <__sflush_r+0x1a>
 80217e6:	2300      	movs	r3, #0
 80217e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80217ec:	682f      	ldr	r7, [r5, #0]
 80217ee:	602b      	str	r3, [r5, #0]
 80217f0:	d032      	beq.n	8021858 <__sflush_r+0x98>
 80217f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80217f4:	89a3      	ldrh	r3, [r4, #12]
 80217f6:	075a      	lsls	r2, r3, #29
 80217f8:	d505      	bpl.n	8021806 <__sflush_r+0x46>
 80217fa:	6863      	ldr	r3, [r4, #4]
 80217fc:	1ac0      	subs	r0, r0, r3
 80217fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021800:	b10b      	cbz	r3, 8021806 <__sflush_r+0x46>
 8021802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021804:	1ac0      	subs	r0, r0, r3
 8021806:	2300      	movs	r3, #0
 8021808:	4602      	mov	r2, r0
 802180a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802180c:	6a21      	ldr	r1, [r4, #32]
 802180e:	4628      	mov	r0, r5
 8021810:	47b0      	blx	r6
 8021812:	1c43      	adds	r3, r0, #1
 8021814:	89a3      	ldrh	r3, [r4, #12]
 8021816:	d106      	bne.n	8021826 <__sflush_r+0x66>
 8021818:	6829      	ldr	r1, [r5, #0]
 802181a:	291d      	cmp	r1, #29
 802181c:	d82c      	bhi.n	8021878 <__sflush_r+0xb8>
 802181e:	4a2a      	ldr	r2, [pc, #168]	; (80218c8 <__sflush_r+0x108>)
 8021820:	40ca      	lsrs	r2, r1
 8021822:	07d6      	lsls	r6, r2, #31
 8021824:	d528      	bpl.n	8021878 <__sflush_r+0xb8>
 8021826:	2200      	movs	r2, #0
 8021828:	6062      	str	r2, [r4, #4]
 802182a:	04d9      	lsls	r1, r3, #19
 802182c:	6922      	ldr	r2, [r4, #16]
 802182e:	6022      	str	r2, [r4, #0]
 8021830:	d504      	bpl.n	802183c <__sflush_r+0x7c>
 8021832:	1c42      	adds	r2, r0, #1
 8021834:	d101      	bne.n	802183a <__sflush_r+0x7a>
 8021836:	682b      	ldr	r3, [r5, #0]
 8021838:	b903      	cbnz	r3, 802183c <__sflush_r+0x7c>
 802183a:	6560      	str	r0, [r4, #84]	; 0x54
 802183c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802183e:	602f      	str	r7, [r5, #0]
 8021840:	2900      	cmp	r1, #0
 8021842:	d0ca      	beq.n	80217da <__sflush_r+0x1a>
 8021844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021848:	4299      	cmp	r1, r3
 802184a:	d002      	beq.n	8021852 <__sflush_r+0x92>
 802184c:	4628      	mov	r0, r5
 802184e:	f7fd fa41 	bl	801ecd4 <_free_r>
 8021852:	2000      	movs	r0, #0
 8021854:	6360      	str	r0, [r4, #52]	; 0x34
 8021856:	e7c1      	b.n	80217dc <__sflush_r+0x1c>
 8021858:	6a21      	ldr	r1, [r4, #32]
 802185a:	2301      	movs	r3, #1
 802185c:	4628      	mov	r0, r5
 802185e:	47b0      	blx	r6
 8021860:	1c41      	adds	r1, r0, #1
 8021862:	d1c7      	bne.n	80217f4 <__sflush_r+0x34>
 8021864:	682b      	ldr	r3, [r5, #0]
 8021866:	2b00      	cmp	r3, #0
 8021868:	d0c4      	beq.n	80217f4 <__sflush_r+0x34>
 802186a:	2b1d      	cmp	r3, #29
 802186c:	d001      	beq.n	8021872 <__sflush_r+0xb2>
 802186e:	2b16      	cmp	r3, #22
 8021870:	d101      	bne.n	8021876 <__sflush_r+0xb6>
 8021872:	602f      	str	r7, [r5, #0]
 8021874:	e7b1      	b.n	80217da <__sflush_r+0x1a>
 8021876:	89a3      	ldrh	r3, [r4, #12]
 8021878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802187c:	81a3      	strh	r3, [r4, #12]
 802187e:	e7ad      	b.n	80217dc <__sflush_r+0x1c>
 8021880:	690f      	ldr	r7, [r1, #16]
 8021882:	2f00      	cmp	r7, #0
 8021884:	d0a9      	beq.n	80217da <__sflush_r+0x1a>
 8021886:	0793      	lsls	r3, r2, #30
 8021888:	680e      	ldr	r6, [r1, #0]
 802188a:	bf08      	it	eq
 802188c:	694b      	ldreq	r3, [r1, #20]
 802188e:	600f      	str	r7, [r1, #0]
 8021890:	bf18      	it	ne
 8021892:	2300      	movne	r3, #0
 8021894:	eba6 0807 	sub.w	r8, r6, r7
 8021898:	608b      	str	r3, [r1, #8]
 802189a:	f1b8 0f00 	cmp.w	r8, #0
 802189e:	dd9c      	ble.n	80217da <__sflush_r+0x1a>
 80218a0:	6a21      	ldr	r1, [r4, #32]
 80218a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80218a4:	4643      	mov	r3, r8
 80218a6:	463a      	mov	r2, r7
 80218a8:	4628      	mov	r0, r5
 80218aa:	47b0      	blx	r6
 80218ac:	2800      	cmp	r0, #0
 80218ae:	dc06      	bgt.n	80218be <__sflush_r+0xfe>
 80218b0:	89a3      	ldrh	r3, [r4, #12]
 80218b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80218b6:	81a3      	strh	r3, [r4, #12]
 80218b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80218bc:	e78e      	b.n	80217dc <__sflush_r+0x1c>
 80218be:	4407      	add	r7, r0
 80218c0:	eba8 0800 	sub.w	r8, r8, r0
 80218c4:	e7e9      	b.n	802189a <__sflush_r+0xda>
 80218c6:	bf00      	nop
 80218c8:	20400001 	.word	0x20400001

080218cc <_fflush_r>:
 80218cc:	b538      	push	{r3, r4, r5, lr}
 80218ce:	690b      	ldr	r3, [r1, #16]
 80218d0:	4605      	mov	r5, r0
 80218d2:	460c      	mov	r4, r1
 80218d4:	b913      	cbnz	r3, 80218dc <_fflush_r+0x10>
 80218d6:	2500      	movs	r5, #0
 80218d8:	4628      	mov	r0, r5
 80218da:	bd38      	pop	{r3, r4, r5, pc}
 80218dc:	b118      	cbz	r0, 80218e6 <_fflush_r+0x1a>
 80218de:	6983      	ldr	r3, [r0, #24]
 80218e0:	b90b      	cbnz	r3, 80218e6 <_fflush_r+0x1a>
 80218e2:	f000 f887 	bl	80219f4 <__sinit>
 80218e6:	4b14      	ldr	r3, [pc, #80]	; (8021938 <_fflush_r+0x6c>)
 80218e8:	429c      	cmp	r4, r3
 80218ea:	d11b      	bne.n	8021924 <_fflush_r+0x58>
 80218ec:	686c      	ldr	r4, [r5, #4]
 80218ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d0ef      	beq.n	80218d6 <_fflush_r+0xa>
 80218f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80218f8:	07d0      	lsls	r0, r2, #31
 80218fa:	d404      	bmi.n	8021906 <_fflush_r+0x3a>
 80218fc:	0599      	lsls	r1, r3, #22
 80218fe:	d402      	bmi.n	8021906 <_fflush_r+0x3a>
 8021900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021902:	f000 fc9a 	bl	802223a <__retarget_lock_acquire_recursive>
 8021906:	4628      	mov	r0, r5
 8021908:	4621      	mov	r1, r4
 802190a:	f7ff ff59 	bl	80217c0 <__sflush_r>
 802190e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021910:	07da      	lsls	r2, r3, #31
 8021912:	4605      	mov	r5, r0
 8021914:	d4e0      	bmi.n	80218d8 <_fflush_r+0xc>
 8021916:	89a3      	ldrh	r3, [r4, #12]
 8021918:	059b      	lsls	r3, r3, #22
 802191a:	d4dd      	bmi.n	80218d8 <_fflush_r+0xc>
 802191c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802191e:	f000 fc8d 	bl	802223c <__retarget_lock_release_recursive>
 8021922:	e7d9      	b.n	80218d8 <_fflush_r+0xc>
 8021924:	4b05      	ldr	r3, [pc, #20]	; (802193c <_fflush_r+0x70>)
 8021926:	429c      	cmp	r4, r3
 8021928:	d101      	bne.n	802192e <_fflush_r+0x62>
 802192a:	68ac      	ldr	r4, [r5, #8]
 802192c:	e7df      	b.n	80218ee <_fflush_r+0x22>
 802192e:	4b04      	ldr	r3, [pc, #16]	; (8021940 <_fflush_r+0x74>)
 8021930:	429c      	cmp	r4, r3
 8021932:	bf08      	it	eq
 8021934:	68ec      	ldreq	r4, [r5, #12]
 8021936:	e7da      	b.n	80218ee <_fflush_r+0x22>
 8021938:	080280c4 	.word	0x080280c4
 802193c:	080280e4 	.word	0x080280e4
 8021940:	080280a4 	.word	0x080280a4

08021944 <std>:
 8021944:	2300      	movs	r3, #0
 8021946:	b510      	push	{r4, lr}
 8021948:	4604      	mov	r4, r0
 802194a:	e9c0 3300 	strd	r3, r3, [r0]
 802194e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021952:	6083      	str	r3, [r0, #8]
 8021954:	8181      	strh	r1, [r0, #12]
 8021956:	6643      	str	r3, [r0, #100]	; 0x64
 8021958:	81c2      	strh	r2, [r0, #14]
 802195a:	6183      	str	r3, [r0, #24]
 802195c:	4619      	mov	r1, r3
 802195e:	2208      	movs	r2, #8
 8021960:	305c      	adds	r0, #92	; 0x5c
 8021962:	f7fd f9af 	bl	801ecc4 <memset>
 8021966:	4b05      	ldr	r3, [pc, #20]	; (802197c <std+0x38>)
 8021968:	6263      	str	r3, [r4, #36]	; 0x24
 802196a:	4b05      	ldr	r3, [pc, #20]	; (8021980 <std+0x3c>)
 802196c:	62a3      	str	r3, [r4, #40]	; 0x28
 802196e:	4b05      	ldr	r3, [pc, #20]	; (8021984 <std+0x40>)
 8021970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021972:	4b05      	ldr	r3, [pc, #20]	; (8021988 <std+0x44>)
 8021974:	6224      	str	r4, [r4, #32]
 8021976:	6323      	str	r3, [r4, #48]	; 0x30
 8021978:	bd10      	pop	{r4, pc}
 802197a:	bf00      	nop
 802197c:	08023259 	.word	0x08023259
 8021980:	0802327b 	.word	0x0802327b
 8021984:	080232b3 	.word	0x080232b3
 8021988:	080232d7 	.word	0x080232d7

0802198c <_cleanup_r>:
 802198c:	4901      	ldr	r1, [pc, #4]	; (8021994 <_cleanup_r+0x8>)
 802198e:	f000 b8c1 	b.w	8021b14 <_fwalk_reent>
 8021992:	bf00      	nop
 8021994:	080218cd 	.word	0x080218cd

08021998 <__sfmoreglue>:
 8021998:	b570      	push	{r4, r5, r6, lr}
 802199a:	1e4a      	subs	r2, r1, #1
 802199c:	2568      	movs	r5, #104	; 0x68
 802199e:	4355      	muls	r5, r2
 80219a0:	460e      	mov	r6, r1
 80219a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80219a6:	f7fd f9e5 	bl	801ed74 <_malloc_r>
 80219aa:	4604      	mov	r4, r0
 80219ac:	b140      	cbz	r0, 80219c0 <__sfmoreglue+0x28>
 80219ae:	2100      	movs	r1, #0
 80219b0:	e9c0 1600 	strd	r1, r6, [r0]
 80219b4:	300c      	adds	r0, #12
 80219b6:	60a0      	str	r0, [r4, #8]
 80219b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80219bc:	f7fd f982 	bl	801ecc4 <memset>
 80219c0:	4620      	mov	r0, r4
 80219c2:	bd70      	pop	{r4, r5, r6, pc}

080219c4 <__sfp_lock_acquire>:
 80219c4:	4801      	ldr	r0, [pc, #4]	; (80219cc <__sfp_lock_acquire+0x8>)
 80219c6:	f000 bc38 	b.w	802223a <__retarget_lock_acquire_recursive>
 80219ca:	bf00      	nop
 80219cc:	2400b250 	.word	0x2400b250

080219d0 <__sfp_lock_release>:
 80219d0:	4801      	ldr	r0, [pc, #4]	; (80219d8 <__sfp_lock_release+0x8>)
 80219d2:	f000 bc33 	b.w	802223c <__retarget_lock_release_recursive>
 80219d6:	bf00      	nop
 80219d8:	2400b250 	.word	0x2400b250

080219dc <__sinit_lock_acquire>:
 80219dc:	4801      	ldr	r0, [pc, #4]	; (80219e4 <__sinit_lock_acquire+0x8>)
 80219de:	f000 bc2c 	b.w	802223a <__retarget_lock_acquire_recursive>
 80219e2:	bf00      	nop
 80219e4:	2400b24b 	.word	0x2400b24b

080219e8 <__sinit_lock_release>:
 80219e8:	4801      	ldr	r0, [pc, #4]	; (80219f0 <__sinit_lock_release+0x8>)
 80219ea:	f000 bc27 	b.w	802223c <__retarget_lock_release_recursive>
 80219ee:	bf00      	nop
 80219f0:	2400b24b 	.word	0x2400b24b

080219f4 <__sinit>:
 80219f4:	b510      	push	{r4, lr}
 80219f6:	4604      	mov	r4, r0
 80219f8:	f7ff fff0 	bl	80219dc <__sinit_lock_acquire>
 80219fc:	69a3      	ldr	r3, [r4, #24]
 80219fe:	b11b      	cbz	r3, 8021a08 <__sinit+0x14>
 8021a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a04:	f7ff bff0 	b.w	80219e8 <__sinit_lock_release>
 8021a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8021a0e:	4b13      	ldr	r3, [pc, #76]	; (8021a5c <__sinit+0x68>)
 8021a10:	4a13      	ldr	r2, [pc, #76]	; (8021a60 <__sinit+0x6c>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8021a16:	42a3      	cmp	r3, r4
 8021a18:	bf04      	itt	eq
 8021a1a:	2301      	moveq	r3, #1
 8021a1c:	61a3      	streq	r3, [r4, #24]
 8021a1e:	4620      	mov	r0, r4
 8021a20:	f000 f820 	bl	8021a64 <__sfp>
 8021a24:	6060      	str	r0, [r4, #4]
 8021a26:	4620      	mov	r0, r4
 8021a28:	f000 f81c 	bl	8021a64 <__sfp>
 8021a2c:	60a0      	str	r0, [r4, #8]
 8021a2e:	4620      	mov	r0, r4
 8021a30:	f000 f818 	bl	8021a64 <__sfp>
 8021a34:	2200      	movs	r2, #0
 8021a36:	60e0      	str	r0, [r4, #12]
 8021a38:	2104      	movs	r1, #4
 8021a3a:	6860      	ldr	r0, [r4, #4]
 8021a3c:	f7ff ff82 	bl	8021944 <std>
 8021a40:	68a0      	ldr	r0, [r4, #8]
 8021a42:	2201      	movs	r2, #1
 8021a44:	2109      	movs	r1, #9
 8021a46:	f7ff ff7d 	bl	8021944 <std>
 8021a4a:	68e0      	ldr	r0, [r4, #12]
 8021a4c:	2202      	movs	r2, #2
 8021a4e:	2112      	movs	r1, #18
 8021a50:	f7ff ff78 	bl	8021944 <std>
 8021a54:	2301      	movs	r3, #1
 8021a56:	61a3      	str	r3, [r4, #24]
 8021a58:	e7d2      	b.n	8021a00 <__sinit+0xc>
 8021a5a:	bf00      	nop
 8021a5c:	08027ee0 	.word	0x08027ee0
 8021a60:	0802198d 	.word	0x0802198d

08021a64 <__sfp>:
 8021a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a66:	4607      	mov	r7, r0
 8021a68:	f7ff ffac 	bl	80219c4 <__sfp_lock_acquire>
 8021a6c:	4b1e      	ldr	r3, [pc, #120]	; (8021ae8 <__sfp+0x84>)
 8021a6e:	681e      	ldr	r6, [r3, #0]
 8021a70:	69b3      	ldr	r3, [r6, #24]
 8021a72:	b913      	cbnz	r3, 8021a7a <__sfp+0x16>
 8021a74:	4630      	mov	r0, r6
 8021a76:	f7ff ffbd 	bl	80219f4 <__sinit>
 8021a7a:	3648      	adds	r6, #72	; 0x48
 8021a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021a80:	3b01      	subs	r3, #1
 8021a82:	d503      	bpl.n	8021a8c <__sfp+0x28>
 8021a84:	6833      	ldr	r3, [r6, #0]
 8021a86:	b30b      	cbz	r3, 8021acc <__sfp+0x68>
 8021a88:	6836      	ldr	r6, [r6, #0]
 8021a8a:	e7f7      	b.n	8021a7c <__sfp+0x18>
 8021a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021a90:	b9d5      	cbnz	r5, 8021ac8 <__sfp+0x64>
 8021a92:	4b16      	ldr	r3, [pc, #88]	; (8021aec <__sfp+0x88>)
 8021a94:	60e3      	str	r3, [r4, #12]
 8021a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8021a9c:	f000 fbcc 	bl	8022238 <__retarget_lock_init_recursive>
 8021aa0:	f7ff ff96 	bl	80219d0 <__sfp_lock_release>
 8021aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021aac:	6025      	str	r5, [r4, #0]
 8021aae:	61a5      	str	r5, [r4, #24]
 8021ab0:	2208      	movs	r2, #8
 8021ab2:	4629      	mov	r1, r5
 8021ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ab8:	f7fd f904 	bl	801ecc4 <memset>
 8021abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ac8:	3468      	adds	r4, #104	; 0x68
 8021aca:	e7d9      	b.n	8021a80 <__sfp+0x1c>
 8021acc:	2104      	movs	r1, #4
 8021ace:	4638      	mov	r0, r7
 8021ad0:	f7ff ff62 	bl	8021998 <__sfmoreglue>
 8021ad4:	4604      	mov	r4, r0
 8021ad6:	6030      	str	r0, [r6, #0]
 8021ad8:	2800      	cmp	r0, #0
 8021ada:	d1d5      	bne.n	8021a88 <__sfp+0x24>
 8021adc:	f7ff ff78 	bl	80219d0 <__sfp_lock_release>
 8021ae0:	230c      	movs	r3, #12
 8021ae2:	603b      	str	r3, [r7, #0]
 8021ae4:	e7ee      	b.n	8021ac4 <__sfp+0x60>
 8021ae6:	bf00      	nop
 8021ae8:	08027ee0 	.word	0x08027ee0
 8021aec:	ffff0001 	.word	0xffff0001

08021af0 <fiprintf>:
 8021af0:	b40e      	push	{r1, r2, r3}
 8021af2:	b503      	push	{r0, r1, lr}
 8021af4:	4601      	mov	r1, r0
 8021af6:	ab03      	add	r3, sp, #12
 8021af8:	4805      	ldr	r0, [pc, #20]	; (8021b10 <fiprintf+0x20>)
 8021afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8021afe:	6800      	ldr	r0, [r0, #0]
 8021b00:	9301      	str	r3, [sp, #4]
 8021b02:	f001 fa6f 	bl	8022fe4 <_vfiprintf_r>
 8021b06:	b002      	add	sp, #8
 8021b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b0c:	b003      	add	sp, #12
 8021b0e:	4770      	bx	lr
 8021b10:	24003448 	.word	0x24003448

08021b14 <_fwalk_reent>:
 8021b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b18:	4606      	mov	r6, r0
 8021b1a:	4688      	mov	r8, r1
 8021b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021b20:	2700      	movs	r7, #0
 8021b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021b26:	f1b9 0901 	subs.w	r9, r9, #1
 8021b2a:	d505      	bpl.n	8021b38 <_fwalk_reent+0x24>
 8021b2c:	6824      	ldr	r4, [r4, #0]
 8021b2e:	2c00      	cmp	r4, #0
 8021b30:	d1f7      	bne.n	8021b22 <_fwalk_reent+0xe>
 8021b32:	4638      	mov	r0, r7
 8021b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b38:	89ab      	ldrh	r3, [r5, #12]
 8021b3a:	2b01      	cmp	r3, #1
 8021b3c:	d907      	bls.n	8021b4e <_fwalk_reent+0x3a>
 8021b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021b42:	3301      	adds	r3, #1
 8021b44:	d003      	beq.n	8021b4e <_fwalk_reent+0x3a>
 8021b46:	4629      	mov	r1, r5
 8021b48:	4630      	mov	r0, r6
 8021b4a:	47c0      	blx	r8
 8021b4c:	4307      	orrs	r7, r0
 8021b4e:	3568      	adds	r5, #104	; 0x68
 8021b50:	e7e9      	b.n	8021b26 <_fwalk_reent+0x12>

08021b52 <rshift>:
 8021b52:	6903      	ldr	r3, [r0, #16]
 8021b54:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b5c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021b60:	f100 0414 	add.w	r4, r0, #20
 8021b64:	dd45      	ble.n	8021bf2 <rshift+0xa0>
 8021b66:	f011 011f 	ands.w	r1, r1, #31
 8021b6a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021b6e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021b72:	d10c      	bne.n	8021b8e <rshift+0x3c>
 8021b74:	f100 0710 	add.w	r7, r0, #16
 8021b78:	4629      	mov	r1, r5
 8021b7a:	42b1      	cmp	r1, r6
 8021b7c:	d334      	bcc.n	8021be8 <rshift+0x96>
 8021b7e:	1a9b      	subs	r3, r3, r2
 8021b80:	009b      	lsls	r3, r3, #2
 8021b82:	1eea      	subs	r2, r5, #3
 8021b84:	4296      	cmp	r6, r2
 8021b86:	bf38      	it	cc
 8021b88:	2300      	movcc	r3, #0
 8021b8a:	4423      	add	r3, r4
 8021b8c:	e015      	b.n	8021bba <rshift+0x68>
 8021b8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021b92:	f1c1 0820 	rsb	r8, r1, #32
 8021b96:	40cf      	lsrs	r7, r1
 8021b98:	f105 0e04 	add.w	lr, r5, #4
 8021b9c:	46a1      	mov	r9, r4
 8021b9e:	4576      	cmp	r6, lr
 8021ba0:	46f4      	mov	ip, lr
 8021ba2:	d815      	bhi.n	8021bd0 <rshift+0x7e>
 8021ba4:	1a9b      	subs	r3, r3, r2
 8021ba6:	009a      	lsls	r2, r3, #2
 8021ba8:	3a04      	subs	r2, #4
 8021baa:	3501      	adds	r5, #1
 8021bac:	42ae      	cmp	r6, r5
 8021bae:	bf38      	it	cc
 8021bb0:	2200      	movcc	r2, #0
 8021bb2:	18a3      	adds	r3, r4, r2
 8021bb4:	50a7      	str	r7, [r4, r2]
 8021bb6:	b107      	cbz	r7, 8021bba <rshift+0x68>
 8021bb8:	3304      	adds	r3, #4
 8021bba:	1b1a      	subs	r2, r3, r4
 8021bbc:	42a3      	cmp	r3, r4
 8021bbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021bc2:	bf08      	it	eq
 8021bc4:	2300      	moveq	r3, #0
 8021bc6:	6102      	str	r2, [r0, #16]
 8021bc8:	bf08      	it	eq
 8021bca:	6143      	streq	r3, [r0, #20]
 8021bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021bd0:	f8dc c000 	ldr.w	ip, [ip]
 8021bd4:	fa0c fc08 	lsl.w	ip, ip, r8
 8021bd8:	ea4c 0707 	orr.w	r7, ip, r7
 8021bdc:	f849 7b04 	str.w	r7, [r9], #4
 8021be0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021be4:	40cf      	lsrs	r7, r1
 8021be6:	e7da      	b.n	8021b9e <rshift+0x4c>
 8021be8:	f851 cb04 	ldr.w	ip, [r1], #4
 8021bec:	f847 cf04 	str.w	ip, [r7, #4]!
 8021bf0:	e7c3      	b.n	8021b7a <rshift+0x28>
 8021bf2:	4623      	mov	r3, r4
 8021bf4:	e7e1      	b.n	8021bba <rshift+0x68>

08021bf6 <__hexdig_fun>:
 8021bf6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021bfa:	2b09      	cmp	r3, #9
 8021bfc:	d802      	bhi.n	8021c04 <__hexdig_fun+0xe>
 8021bfe:	3820      	subs	r0, #32
 8021c00:	b2c0      	uxtb	r0, r0
 8021c02:	4770      	bx	lr
 8021c04:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021c08:	2b05      	cmp	r3, #5
 8021c0a:	d801      	bhi.n	8021c10 <__hexdig_fun+0x1a>
 8021c0c:	3847      	subs	r0, #71	; 0x47
 8021c0e:	e7f7      	b.n	8021c00 <__hexdig_fun+0xa>
 8021c10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021c14:	2b05      	cmp	r3, #5
 8021c16:	d801      	bhi.n	8021c1c <__hexdig_fun+0x26>
 8021c18:	3827      	subs	r0, #39	; 0x27
 8021c1a:	e7f1      	b.n	8021c00 <__hexdig_fun+0xa>
 8021c1c:	2000      	movs	r0, #0
 8021c1e:	4770      	bx	lr

08021c20 <__gethex>:
 8021c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c24:	ed2d 8b02 	vpush	{d8}
 8021c28:	b089      	sub	sp, #36	; 0x24
 8021c2a:	ee08 0a10 	vmov	s16, r0
 8021c2e:	9304      	str	r3, [sp, #16]
 8021c30:	4bbc      	ldr	r3, [pc, #752]	; (8021f24 <__gethex+0x304>)
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	9301      	str	r3, [sp, #4]
 8021c36:	4618      	mov	r0, r3
 8021c38:	468b      	mov	fp, r1
 8021c3a:	4690      	mov	r8, r2
 8021c3c:	f7de fb50 	bl	80002e0 <strlen>
 8021c40:	9b01      	ldr	r3, [sp, #4]
 8021c42:	f8db 2000 	ldr.w	r2, [fp]
 8021c46:	4403      	add	r3, r0
 8021c48:	4682      	mov	sl, r0
 8021c4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021c4e:	9305      	str	r3, [sp, #20]
 8021c50:	1c93      	adds	r3, r2, #2
 8021c52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021c56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021c5a:	32fe      	adds	r2, #254	; 0xfe
 8021c5c:	18d1      	adds	r1, r2, r3
 8021c5e:	461f      	mov	r7, r3
 8021c60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021c64:	9100      	str	r1, [sp, #0]
 8021c66:	2830      	cmp	r0, #48	; 0x30
 8021c68:	d0f8      	beq.n	8021c5c <__gethex+0x3c>
 8021c6a:	f7ff ffc4 	bl	8021bf6 <__hexdig_fun>
 8021c6e:	4604      	mov	r4, r0
 8021c70:	2800      	cmp	r0, #0
 8021c72:	d13a      	bne.n	8021cea <__gethex+0xca>
 8021c74:	9901      	ldr	r1, [sp, #4]
 8021c76:	4652      	mov	r2, sl
 8021c78:	4638      	mov	r0, r7
 8021c7a:	f7fe f81f 	bl	801fcbc <strncmp>
 8021c7e:	4605      	mov	r5, r0
 8021c80:	2800      	cmp	r0, #0
 8021c82:	d168      	bne.n	8021d56 <__gethex+0x136>
 8021c84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021c88:	eb07 060a 	add.w	r6, r7, sl
 8021c8c:	f7ff ffb3 	bl	8021bf6 <__hexdig_fun>
 8021c90:	2800      	cmp	r0, #0
 8021c92:	d062      	beq.n	8021d5a <__gethex+0x13a>
 8021c94:	4633      	mov	r3, r6
 8021c96:	7818      	ldrb	r0, [r3, #0]
 8021c98:	2830      	cmp	r0, #48	; 0x30
 8021c9a:	461f      	mov	r7, r3
 8021c9c:	f103 0301 	add.w	r3, r3, #1
 8021ca0:	d0f9      	beq.n	8021c96 <__gethex+0x76>
 8021ca2:	f7ff ffa8 	bl	8021bf6 <__hexdig_fun>
 8021ca6:	2301      	movs	r3, #1
 8021ca8:	fab0 f480 	clz	r4, r0
 8021cac:	0964      	lsrs	r4, r4, #5
 8021cae:	4635      	mov	r5, r6
 8021cb0:	9300      	str	r3, [sp, #0]
 8021cb2:	463a      	mov	r2, r7
 8021cb4:	4616      	mov	r6, r2
 8021cb6:	3201      	adds	r2, #1
 8021cb8:	7830      	ldrb	r0, [r6, #0]
 8021cba:	f7ff ff9c 	bl	8021bf6 <__hexdig_fun>
 8021cbe:	2800      	cmp	r0, #0
 8021cc0:	d1f8      	bne.n	8021cb4 <__gethex+0x94>
 8021cc2:	9901      	ldr	r1, [sp, #4]
 8021cc4:	4652      	mov	r2, sl
 8021cc6:	4630      	mov	r0, r6
 8021cc8:	f7fd fff8 	bl	801fcbc <strncmp>
 8021ccc:	b980      	cbnz	r0, 8021cf0 <__gethex+0xd0>
 8021cce:	b94d      	cbnz	r5, 8021ce4 <__gethex+0xc4>
 8021cd0:	eb06 050a 	add.w	r5, r6, sl
 8021cd4:	462a      	mov	r2, r5
 8021cd6:	4616      	mov	r6, r2
 8021cd8:	3201      	adds	r2, #1
 8021cda:	7830      	ldrb	r0, [r6, #0]
 8021cdc:	f7ff ff8b 	bl	8021bf6 <__hexdig_fun>
 8021ce0:	2800      	cmp	r0, #0
 8021ce2:	d1f8      	bne.n	8021cd6 <__gethex+0xb6>
 8021ce4:	1bad      	subs	r5, r5, r6
 8021ce6:	00ad      	lsls	r5, r5, #2
 8021ce8:	e004      	b.n	8021cf4 <__gethex+0xd4>
 8021cea:	2400      	movs	r4, #0
 8021cec:	4625      	mov	r5, r4
 8021cee:	e7e0      	b.n	8021cb2 <__gethex+0x92>
 8021cf0:	2d00      	cmp	r5, #0
 8021cf2:	d1f7      	bne.n	8021ce4 <__gethex+0xc4>
 8021cf4:	7833      	ldrb	r3, [r6, #0]
 8021cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021cfa:	2b50      	cmp	r3, #80	; 0x50
 8021cfc:	d13b      	bne.n	8021d76 <__gethex+0x156>
 8021cfe:	7873      	ldrb	r3, [r6, #1]
 8021d00:	2b2b      	cmp	r3, #43	; 0x2b
 8021d02:	d02c      	beq.n	8021d5e <__gethex+0x13e>
 8021d04:	2b2d      	cmp	r3, #45	; 0x2d
 8021d06:	d02e      	beq.n	8021d66 <__gethex+0x146>
 8021d08:	1c71      	adds	r1, r6, #1
 8021d0a:	f04f 0900 	mov.w	r9, #0
 8021d0e:	7808      	ldrb	r0, [r1, #0]
 8021d10:	f7ff ff71 	bl	8021bf6 <__hexdig_fun>
 8021d14:	1e43      	subs	r3, r0, #1
 8021d16:	b2db      	uxtb	r3, r3
 8021d18:	2b18      	cmp	r3, #24
 8021d1a:	d82c      	bhi.n	8021d76 <__gethex+0x156>
 8021d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8021d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021d24:	f7ff ff67 	bl	8021bf6 <__hexdig_fun>
 8021d28:	1e43      	subs	r3, r0, #1
 8021d2a:	b2db      	uxtb	r3, r3
 8021d2c:	2b18      	cmp	r3, #24
 8021d2e:	d91d      	bls.n	8021d6c <__gethex+0x14c>
 8021d30:	f1b9 0f00 	cmp.w	r9, #0
 8021d34:	d000      	beq.n	8021d38 <__gethex+0x118>
 8021d36:	4252      	negs	r2, r2
 8021d38:	4415      	add	r5, r2
 8021d3a:	f8cb 1000 	str.w	r1, [fp]
 8021d3e:	b1e4      	cbz	r4, 8021d7a <__gethex+0x15a>
 8021d40:	9b00      	ldr	r3, [sp, #0]
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	bf14      	ite	ne
 8021d46:	2700      	movne	r7, #0
 8021d48:	2706      	moveq	r7, #6
 8021d4a:	4638      	mov	r0, r7
 8021d4c:	b009      	add	sp, #36	; 0x24
 8021d4e:	ecbd 8b02 	vpop	{d8}
 8021d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d56:	463e      	mov	r6, r7
 8021d58:	4625      	mov	r5, r4
 8021d5a:	2401      	movs	r4, #1
 8021d5c:	e7ca      	b.n	8021cf4 <__gethex+0xd4>
 8021d5e:	f04f 0900 	mov.w	r9, #0
 8021d62:	1cb1      	adds	r1, r6, #2
 8021d64:	e7d3      	b.n	8021d0e <__gethex+0xee>
 8021d66:	f04f 0901 	mov.w	r9, #1
 8021d6a:	e7fa      	b.n	8021d62 <__gethex+0x142>
 8021d6c:	230a      	movs	r3, #10
 8021d6e:	fb03 0202 	mla	r2, r3, r2, r0
 8021d72:	3a10      	subs	r2, #16
 8021d74:	e7d4      	b.n	8021d20 <__gethex+0x100>
 8021d76:	4631      	mov	r1, r6
 8021d78:	e7df      	b.n	8021d3a <__gethex+0x11a>
 8021d7a:	1bf3      	subs	r3, r6, r7
 8021d7c:	3b01      	subs	r3, #1
 8021d7e:	4621      	mov	r1, r4
 8021d80:	2b07      	cmp	r3, #7
 8021d82:	dc0b      	bgt.n	8021d9c <__gethex+0x17c>
 8021d84:	ee18 0a10 	vmov	r0, s16
 8021d88:	f000 fadc 	bl	8022344 <_Balloc>
 8021d8c:	4604      	mov	r4, r0
 8021d8e:	b940      	cbnz	r0, 8021da2 <__gethex+0x182>
 8021d90:	4b65      	ldr	r3, [pc, #404]	; (8021f28 <__gethex+0x308>)
 8021d92:	4602      	mov	r2, r0
 8021d94:	21de      	movs	r1, #222	; 0xde
 8021d96:	4865      	ldr	r0, [pc, #404]	; (8021f2c <__gethex+0x30c>)
 8021d98:	f7fe fee0 	bl	8020b5c <__assert_func>
 8021d9c:	3101      	adds	r1, #1
 8021d9e:	105b      	asrs	r3, r3, #1
 8021da0:	e7ee      	b.n	8021d80 <__gethex+0x160>
 8021da2:	f100 0914 	add.w	r9, r0, #20
 8021da6:	f04f 0b00 	mov.w	fp, #0
 8021daa:	f1ca 0301 	rsb	r3, sl, #1
 8021dae:	f8cd 9008 	str.w	r9, [sp, #8]
 8021db2:	f8cd b000 	str.w	fp, [sp]
 8021db6:	9306      	str	r3, [sp, #24]
 8021db8:	42b7      	cmp	r7, r6
 8021dba:	d340      	bcc.n	8021e3e <__gethex+0x21e>
 8021dbc:	9802      	ldr	r0, [sp, #8]
 8021dbe:	9b00      	ldr	r3, [sp, #0]
 8021dc0:	f840 3b04 	str.w	r3, [r0], #4
 8021dc4:	eba0 0009 	sub.w	r0, r0, r9
 8021dc8:	1080      	asrs	r0, r0, #2
 8021dca:	0146      	lsls	r6, r0, #5
 8021dcc:	6120      	str	r0, [r4, #16]
 8021dce:	4618      	mov	r0, r3
 8021dd0:	f000 fbae 	bl	8022530 <__hi0bits>
 8021dd4:	1a30      	subs	r0, r6, r0
 8021dd6:	f8d8 6000 	ldr.w	r6, [r8]
 8021dda:	42b0      	cmp	r0, r6
 8021ddc:	dd63      	ble.n	8021ea6 <__gethex+0x286>
 8021dde:	1b87      	subs	r7, r0, r6
 8021de0:	4639      	mov	r1, r7
 8021de2:	4620      	mov	r0, r4
 8021de4:	f000 ff49 	bl	8022c7a <__any_on>
 8021de8:	4682      	mov	sl, r0
 8021dea:	b1a8      	cbz	r0, 8021e18 <__gethex+0x1f8>
 8021dec:	1e7b      	subs	r3, r7, #1
 8021dee:	1159      	asrs	r1, r3, #5
 8021df0:	f003 021f 	and.w	r2, r3, #31
 8021df4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021df8:	f04f 0a01 	mov.w	sl, #1
 8021dfc:	fa0a f202 	lsl.w	r2, sl, r2
 8021e00:	420a      	tst	r2, r1
 8021e02:	d009      	beq.n	8021e18 <__gethex+0x1f8>
 8021e04:	4553      	cmp	r3, sl
 8021e06:	dd05      	ble.n	8021e14 <__gethex+0x1f4>
 8021e08:	1eb9      	subs	r1, r7, #2
 8021e0a:	4620      	mov	r0, r4
 8021e0c:	f000 ff35 	bl	8022c7a <__any_on>
 8021e10:	2800      	cmp	r0, #0
 8021e12:	d145      	bne.n	8021ea0 <__gethex+0x280>
 8021e14:	f04f 0a02 	mov.w	sl, #2
 8021e18:	4639      	mov	r1, r7
 8021e1a:	4620      	mov	r0, r4
 8021e1c:	f7ff fe99 	bl	8021b52 <rshift>
 8021e20:	443d      	add	r5, r7
 8021e22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021e26:	42ab      	cmp	r3, r5
 8021e28:	da4c      	bge.n	8021ec4 <__gethex+0x2a4>
 8021e2a:	ee18 0a10 	vmov	r0, s16
 8021e2e:	4621      	mov	r1, r4
 8021e30:	f000 fac8 	bl	80223c4 <_Bfree>
 8021e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e36:	2300      	movs	r3, #0
 8021e38:	6013      	str	r3, [r2, #0]
 8021e3a:	27a3      	movs	r7, #163	; 0xa3
 8021e3c:	e785      	b.n	8021d4a <__gethex+0x12a>
 8021e3e:	1e73      	subs	r3, r6, #1
 8021e40:	9a05      	ldr	r2, [sp, #20]
 8021e42:	9303      	str	r3, [sp, #12]
 8021e44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021e48:	4293      	cmp	r3, r2
 8021e4a:	d019      	beq.n	8021e80 <__gethex+0x260>
 8021e4c:	f1bb 0f20 	cmp.w	fp, #32
 8021e50:	d107      	bne.n	8021e62 <__gethex+0x242>
 8021e52:	9b02      	ldr	r3, [sp, #8]
 8021e54:	9a00      	ldr	r2, [sp, #0]
 8021e56:	f843 2b04 	str.w	r2, [r3], #4
 8021e5a:	9302      	str	r3, [sp, #8]
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	9300      	str	r3, [sp, #0]
 8021e60:	469b      	mov	fp, r3
 8021e62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8021e66:	f7ff fec6 	bl	8021bf6 <__hexdig_fun>
 8021e6a:	9b00      	ldr	r3, [sp, #0]
 8021e6c:	f000 000f 	and.w	r0, r0, #15
 8021e70:	fa00 f00b 	lsl.w	r0, r0, fp
 8021e74:	4303      	orrs	r3, r0
 8021e76:	9300      	str	r3, [sp, #0]
 8021e78:	f10b 0b04 	add.w	fp, fp, #4
 8021e7c:	9b03      	ldr	r3, [sp, #12]
 8021e7e:	e00d      	b.n	8021e9c <__gethex+0x27c>
 8021e80:	9b03      	ldr	r3, [sp, #12]
 8021e82:	9a06      	ldr	r2, [sp, #24]
 8021e84:	4413      	add	r3, r2
 8021e86:	42bb      	cmp	r3, r7
 8021e88:	d3e0      	bcc.n	8021e4c <__gethex+0x22c>
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	9901      	ldr	r1, [sp, #4]
 8021e8e:	9307      	str	r3, [sp, #28]
 8021e90:	4652      	mov	r2, sl
 8021e92:	f7fd ff13 	bl	801fcbc <strncmp>
 8021e96:	9b07      	ldr	r3, [sp, #28]
 8021e98:	2800      	cmp	r0, #0
 8021e9a:	d1d7      	bne.n	8021e4c <__gethex+0x22c>
 8021e9c:	461e      	mov	r6, r3
 8021e9e:	e78b      	b.n	8021db8 <__gethex+0x198>
 8021ea0:	f04f 0a03 	mov.w	sl, #3
 8021ea4:	e7b8      	b.n	8021e18 <__gethex+0x1f8>
 8021ea6:	da0a      	bge.n	8021ebe <__gethex+0x29e>
 8021ea8:	1a37      	subs	r7, r6, r0
 8021eaa:	4621      	mov	r1, r4
 8021eac:	ee18 0a10 	vmov	r0, s16
 8021eb0:	463a      	mov	r2, r7
 8021eb2:	f000 fca3 	bl	80227fc <__lshift>
 8021eb6:	1bed      	subs	r5, r5, r7
 8021eb8:	4604      	mov	r4, r0
 8021eba:	f100 0914 	add.w	r9, r0, #20
 8021ebe:	f04f 0a00 	mov.w	sl, #0
 8021ec2:	e7ae      	b.n	8021e22 <__gethex+0x202>
 8021ec4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021ec8:	42a8      	cmp	r0, r5
 8021eca:	dd72      	ble.n	8021fb2 <__gethex+0x392>
 8021ecc:	1b45      	subs	r5, r0, r5
 8021ece:	42ae      	cmp	r6, r5
 8021ed0:	dc36      	bgt.n	8021f40 <__gethex+0x320>
 8021ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021ed6:	2b02      	cmp	r3, #2
 8021ed8:	d02a      	beq.n	8021f30 <__gethex+0x310>
 8021eda:	2b03      	cmp	r3, #3
 8021edc:	d02c      	beq.n	8021f38 <__gethex+0x318>
 8021ede:	2b01      	cmp	r3, #1
 8021ee0:	d115      	bne.n	8021f0e <__gethex+0x2ee>
 8021ee2:	42ae      	cmp	r6, r5
 8021ee4:	d113      	bne.n	8021f0e <__gethex+0x2ee>
 8021ee6:	2e01      	cmp	r6, #1
 8021ee8:	d10b      	bne.n	8021f02 <__gethex+0x2e2>
 8021eea:	9a04      	ldr	r2, [sp, #16]
 8021eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021ef0:	6013      	str	r3, [r2, #0]
 8021ef2:	2301      	movs	r3, #1
 8021ef4:	6123      	str	r3, [r4, #16]
 8021ef6:	f8c9 3000 	str.w	r3, [r9]
 8021efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021efc:	2762      	movs	r7, #98	; 0x62
 8021efe:	601c      	str	r4, [r3, #0]
 8021f00:	e723      	b.n	8021d4a <__gethex+0x12a>
 8021f02:	1e71      	subs	r1, r6, #1
 8021f04:	4620      	mov	r0, r4
 8021f06:	f000 feb8 	bl	8022c7a <__any_on>
 8021f0a:	2800      	cmp	r0, #0
 8021f0c:	d1ed      	bne.n	8021eea <__gethex+0x2ca>
 8021f0e:	ee18 0a10 	vmov	r0, s16
 8021f12:	4621      	mov	r1, r4
 8021f14:	f000 fa56 	bl	80223c4 <_Bfree>
 8021f18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	6013      	str	r3, [r2, #0]
 8021f1e:	2750      	movs	r7, #80	; 0x50
 8021f20:	e713      	b.n	8021d4a <__gethex+0x12a>
 8021f22:	bf00      	nop
 8021f24:	08028170 	.word	0x08028170
 8021f28:	08028090 	.word	0x08028090
 8021f2c:	08028104 	.word	0x08028104
 8021f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d1eb      	bne.n	8021f0e <__gethex+0x2ee>
 8021f36:	e7d8      	b.n	8021eea <__gethex+0x2ca>
 8021f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d1d5      	bne.n	8021eea <__gethex+0x2ca>
 8021f3e:	e7e6      	b.n	8021f0e <__gethex+0x2ee>
 8021f40:	1e6f      	subs	r7, r5, #1
 8021f42:	f1ba 0f00 	cmp.w	sl, #0
 8021f46:	d131      	bne.n	8021fac <__gethex+0x38c>
 8021f48:	b127      	cbz	r7, 8021f54 <__gethex+0x334>
 8021f4a:	4639      	mov	r1, r7
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	f000 fe94 	bl	8022c7a <__any_on>
 8021f52:	4682      	mov	sl, r0
 8021f54:	117b      	asrs	r3, r7, #5
 8021f56:	2101      	movs	r1, #1
 8021f58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021f5c:	f007 071f 	and.w	r7, r7, #31
 8021f60:	fa01 f707 	lsl.w	r7, r1, r7
 8021f64:	421f      	tst	r7, r3
 8021f66:	4629      	mov	r1, r5
 8021f68:	4620      	mov	r0, r4
 8021f6a:	bf18      	it	ne
 8021f6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8021f70:	1b76      	subs	r6, r6, r5
 8021f72:	f7ff fdee 	bl	8021b52 <rshift>
 8021f76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021f7a:	2702      	movs	r7, #2
 8021f7c:	f1ba 0f00 	cmp.w	sl, #0
 8021f80:	d048      	beq.n	8022014 <__gethex+0x3f4>
 8021f82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021f86:	2b02      	cmp	r3, #2
 8021f88:	d015      	beq.n	8021fb6 <__gethex+0x396>
 8021f8a:	2b03      	cmp	r3, #3
 8021f8c:	d017      	beq.n	8021fbe <__gethex+0x39e>
 8021f8e:	2b01      	cmp	r3, #1
 8021f90:	d109      	bne.n	8021fa6 <__gethex+0x386>
 8021f92:	f01a 0f02 	tst.w	sl, #2
 8021f96:	d006      	beq.n	8021fa6 <__gethex+0x386>
 8021f98:	f8d9 0000 	ldr.w	r0, [r9]
 8021f9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8021fa0:	f01a 0f01 	tst.w	sl, #1
 8021fa4:	d10e      	bne.n	8021fc4 <__gethex+0x3a4>
 8021fa6:	f047 0710 	orr.w	r7, r7, #16
 8021faa:	e033      	b.n	8022014 <__gethex+0x3f4>
 8021fac:	f04f 0a01 	mov.w	sl, #1
 8021fb0:	e7d0      	b.n	8021f54 <__gethex+0x334>
 8021fb2:	2701      	movs	r7, #1
 8021fb4:	e7e2      	b.n	8021f7c <__gethex+0x35c>
 8021fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021fb8:	f1c3 0301 	rsb	r3, r3, #1
 8021fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8021fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021fc0:	2b00      	cmp	r3, #0
 8021fc2:	d0f0      	beq.n	8021fa6 <__gethex+0x386>
 8021fc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021fc8:	f104 0314 	add.w	r3, r4, #20
 8021fcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021fd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021fd4:	f04f 0c00 	mov.w	ip, #0
 8021fd8:	4618      	mov	r0, r3
 8021fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8021fde:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8021fe2:	d01c      	beq.n	802201e <__gethex+0x3fe>
 8021fe4:	3201      	adds	r2, #1
 8021fe6:	6002      	str	r2, [r0, #0]
 8021fe8:	2f02      	cmp	r7, #2
 8021fea:	f104 0314 	add.w	r3, r4, #20
 8021fee:	d13f      	bne.n	8022070 <__gethex+0x450>
 8021ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8021ff4:	3a01      	subs	r2, #1
 8021ff6:	42b2      	cmp	r2, r6
 8021ff8:	d10a      	bne.n	8022010 <__gethex+0x3f0>
 8021ffa:	1171      	asrs	r1, r6, #5
 8021ffc:	2201      	movs	r2, #1
 8021ffe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022002:	f006 061f 	and.w	r6, r6, #31
 8022006:	fa02 f606 	lsl.w	r6, r2, r6
 802200a:	421e      	tst	r6, r3
 802200c:	bf18      	it	ne
 802200e:	4617      	movne	r7, r2
 8022010:	f047 0720 	orr.w	r7, r7, #32
 8022014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022016:	601c      	str	r4, [r3, #0]
 8022018:	9b04      	ldr	r3, [sp, #16]
 802201a:	601d      	str	r5, [r3, #0]
 802201c:	e695      	b.n	8021d4a <__gethex+0x12a>
 802201e:	4299      	cmp	r1, r3
 8022020:	f843 cc04 	str.w	ip, [r3, #-4]
 8022024:	d8d8      	bhi.n	8021fd8 <__gethex+0x3b8>
 8022026:	68a3      	ldr	r3, [r4, #8]
 8022028:	459b      	cmp	fp, r3
 802202a:	db19      	blt.n	8022060 <__gethex+0x440>
 802202c:	6861      	ldr	r1, [r4, #4]
 802202e:	ee18 0a10 	vmov	r0, s16
 8022032:	3101      	adds	r1, #1
 8022034:	f000 f986 	bl	8022344 <_Balloc>
 8022038:	4681      	mov	r9, r0
 802203a:	b918      	cbnz	r0, 8022044 <__gethex+0x424>
 802203c:	4b1a      	ldr	r3, [pc, #104]	; (80220a8 <__gethex+0x488>)
 802203e:	4602      	mov	r2, r0
 8022040:	2184      	movs	r1, #132	; 0x84
 8022042:	e6a8      	b.n	8021d96 <__gethex+0x176>
 8022044:	6922      	ldr	r2, [r4, #16]
 8022046:	3202      	adds	r2, #2
 8022048:	f104 010c 	add.w	r1, r4, #12
 802204c:	0092      	lsls	r2, r2, #2
 802204e:	300c      	adds	r0, #12
 8022050:	f7fc fe10 	bl	801ec74 <memcpy>
 8022054:	4621      	mov	r1, r4
 8022056:	ee18 0a10 	vmov	r0, s16
 802205a:	f000 f9b3 	bl	80223c4 <_Bfree>
 802205e:	464c      	mov	r4, r9
 8022060:	6923      	ldr	r3, [r4, #16]
 8022062:	1c5a      	adds	r2, r3, #1
 8022064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022068:	6122      	str	r2, [r4, #16]
 802206a:	2201      	movs	r2, #1
 802206c:	615a      	str	r2, [r3, #20]
 802206e:	e7bb      	b.n	8021fe8 <__gethex+0x3c8>
 8022070:	6922      	ldr	r2, [r4, #16]
 8022072:	455a      	cmp	r2, fp
 8022074:	dd0b      	ble.n	802208e <__gethex+0x46e>
 8022076:	2101      	movs	r1, #1
 8022078:	4620      	mov	r0, r4
 802207a:	f7ff fd6a 	bl	8021b52 <rshift>
 802207e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022082:	3501      	adds	r5, #1
 8022084:	42ab      	cmp	r3, r5
 8022086:	f6ff aed0 	blt.w	8021e2a <__gethex+0x20a>
 802208a:	2701      	movs	r7, #1
 802208c:	e7c0      	b.n	8022010 <__gethex+0x3f0>
 802208e:	f016 061f 	ands.w	r6, r6, #31
 8022092:	d0fa      	beq.n	802208a <__gethex+0x46a>
 8022094:	449a      	add	sl, r3
 8022096:	f1c6 0620 	rsb	r6, r6, #32
 802209a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802209e:	f000 fa47 	bl	8022530 <__hi0bits>
 80220a2:	42b0      	cmp	r0, r6
 80220a4:	dbe7      	blt.n	8022076 <__gethex+0x456>
 80220a6:	e7f0      	b.n	802208a <__gethex+0x46a>
 80220a8:	08028090 	.word	0x08028090

080220ac <L_shift>:
 80220ac:	f1c2 0208 	rsb	r2, r2, #8
 80220b0:	0092      	lsls	r2, r2, #2
 80220b2:	b570      	push	{r4, r5, r6, lr}
 80220b4:	f1c2 0620 	rsb	r6, r2, #32
 80220b8:	6843      	ldr	r3, [r0, #4]
 80220ba:	6804      	ldr	r4, [r0, #0]
 80220bc:	fa03 f506 	lsl.w	r5, r3, r6
 80220c0:	432c      	orrs	r4, r5
 80220c2:	40d3      	lsrs	r3, r2
 80220c4:	6004      	str	r4, [r0, #0]
 80220c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80220ca:	4288      	cmp	r0, r1
 80220cc:	d3f4      	bcc.n	80220b8 <L_shift+0xc>
 80220ce:	bd70      	pop	{r4, r5, r6, pc}

080220d0 <__match>:
 80220d0:	b530      	push	{r4, r5, lr}
 80220d2:	6803      	ldr	r3, [r0, #0]
 80220d4:	3301      	adds	r3, #1
 80220d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80220da:	b914      	cbnz	r4, 80220e2 <__match+0x12>
 80220dc:	6003      	str	r3, [r0, #0]
 80220de:	2001      	movs	r0, #1
 80220e0:	bd30      	pop	{r4, r5, pc}
 80220e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80220ea:	2d19      	cmp	r5, #25
 80220ec:	bf98      	it	ls
 80220ee:	3220      	addls	r2, #32
 80220f0:	42a2      	cmp	r2, r4
 80220f2:	d0f0      	beq.n	80220d6 <__match+0x6>
 80220f4:	2000      	movs	r0, #0
 80220f6:	e7f3      	b.n	80220e0 <__match+0x10>

080220f8 <__hexnan>:
 80220f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220fc:	680b      	ldr	r3, [r1, #0]
 80220fe:	6801      	ldr	r1, [r0, #0]
 8022100:	115e      	asrs	r6, r3, #5
 8022102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022106:	f013 031f 	ands.w	r3, r3, #31
 802210a:	b087      	sub	sp, #28
 802210c:	bf18      	it	ne
 802210e:	3604      	addne	r6, #4
 8022110:	2500      	movs	r5, #0
 8022112:	1f37      	subs	r7, r6, #4
 8022114:	4682      	mov	sl, r0
 8022116:	4690      	mov	r8, r2
 8022118:	9301      	str	r3, [sp, #4]
 802211a:	f846 5c04 	str.w	r5, [r6, #-4]
 802211e:	46b9      	mov	r9, r7
 8022120:	463c      	mov	r4, r7
 8022122:	9502      	str	r5, [sp, #8]
 8022124:	46ab      	mov	fp, r5
 8022126:	784a      	ldrb	r2, [r1, #1]
 8022128:	1c4b      	adds	r3, r1, #1
 802212a:	9303      	str	r3, [sp, #12]
 802212c:	b342      	cbz	r2, 8022180 <__hexnan+0x88>
 802212e:	4610      	mov	r0, r2
 8022130:	9105      	str	r1, [sp, #20]
 8022132:	9204      	str	r2, [sp, #16]
 8022134:	f7ff fd5f 	bl	8021bf6 <__hexdig_fun>
 8022138:	2800      	cmp	r0, #0
 802213a:	d14f      	bne.n	80221dc <__hexnan+0xe4>
 802213c:	9a04      	ldr	r2, [sp, #16]
 802213e:	9905      	ldr	r1, [sp, #20]
 8022140:	2a20      	cmp	r2, #32
 8022142:	d818      	bhi.n	8022176 <__hexnan+0x7e>
 8022144:	9b02      	ldr	r3, [sp, #8]
 8022146:	459b      	cmp	fp, r3
 8022148:	dd13      	ble.n	8022172 <__hexnan+0x7a>
 802214a:	454c      	cmp	r4, r9
 802214c:	d206      	bcs.n	802215c <__hexnan+0x64>
 802214e:	2d07      	cmp	r5, #7
 8022150:	dc04      	bgt.n	802215c <__hexnan+0x64>
 8022152:	462a      	mov	r2, r5
 8022154:	4649      	mov	r1, r9
 8022156:	4620      	mov	r0, r4
 8022158:	f7ff ffa8 	bl	80220ac <L_shift>
 802215c:	4544      	cmp	r4, r8
 802215e:	d950      	bls.n	8022202 <__hexnan+0x10a>
 8022160:	2300      	movs	r3, #0
 8022162:	f1a4 0904 	sub.w	r9, r4, #4
 8022166:	f844 3c04 	str.w	r3, [r4, #-4]
 802216a:	f8cd b008 	str.w	fp, [sp, #8]
 802216e:	464c      	mov	r4, r9
 8022170:	461d      	mov	r5, r3
 8022172:	9903      	ldr	r1, [sp, #12]
 8022174:	e7d7      	b.n	8022126 <__hexnan+0x2e>
 8022176:	2a29      	cmp	r2, #41	; 0x29
 8022178:	d156      	bne.n	8022228 <__hexnan+0x130>
 802217a:	3102      	adds	r1, #2
 802217c:	f8ca 1000 	str.w	r1, [sl]
 8022180:	f1bb 0f00 	cmp.w	fp, #0
 8022184:	d050      	beq.n	8022228 <__hexnan+0x130>
 8022186:	454c      	cmp	r4, r9
 8022188:	d206      	bcs.n	8022198 <__hexnan+0xa0>
 802218a:	2d07      	cmp	r5, #7
 802218c:	dc04      	bgt.n	8022198 <__hexnan+0xa0>
 802218e:	462a      	mov	r2, r5
 8022190:	4649      	mov	r1, r9
 8022192:	4620      	mov	r0, r4
 8022194:	f7ff ff8a 	bl	80220ac <L_shift>
 8022198:	4544      	cmp	r4, r8
 802219a:	d934      	bls.n	8022206 <__hexnan+0x10e>
 802219c:	f1a8 0204 	sub.w	r2, r8, #4
 80221a0:	4623      	mov	r3, r4
 80221a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80221a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80221aa:	429f      	cmp	r7, r3
 80221ac:	d2f9      	bcs.n	80221a2 <__hexnan+0xaa>
 80221ae:	1b3b      	subs	r3, r7, r4
 80221b0:	f023 0303 	bic.w	r3, r3, #3
 80221b4:	3304      	adds	r3, #4
 80221b6:	3401      	adds	r4, #1
 80221b8:	3e03      	subs	r6, #3
 80221ba:	42b4      	cmp	r4, r6
 80221bc:	bf88      	it	hi
 80221be:	2304      	movhi	r3, #4
 80221c0:	4443      	add	r3, r8
 80221c2:	2200      	movs	r2, #0
 80221c4:	f843 2b04 	str.w	r2, [r3], #4
 80221c8:	429f      	cmp	r7, r3
 80221ca:	d2fb      	bcs.n	80221c4 <__hexnan+0xcc>
 80221cc:	683b      	ldr	r3, [r7, #0]
 80221ce:	b91b      	cbnz	r3, 80221d8 <__hexnan+0xe0>
 80221d0:	4547      	cmp	r7, r8
 80221d2:	d127      	bne.n	8022224 <__hexnan+0x12c>
 80221d4:	2301      	movs	r3, #1
 80221d6:	603b      	str	r3, [r7, #0]
 80221d8:	2005      	movs	r0, #5
 80221da:	e026      	b.n	802222a <__hexnan+0x132>
 80221dc:	3501      	adds	r5, #1
 80221de:	2d08      	cmp	r5, #8
 80221e0:	f10b 0b01 	add.w	fp, fp, #1
 80221e4:	dd06      	ble.n	80221f4 <__hexnan+0xfc>
 80221e6:	4544      	cmp	r4, r8
 80221e8:	d9c3      	bls.n	8022172 <__hexnan+0x7a>
 80221ea:	2300      	movs	r3, #0
 80221ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80221f0:	2501      	movs	r5, #1
 80221f2:	3c04      	subs	r4, #4
 80221f4:	6822      	ldr	r2, [r4, #0]
 80221f6:	f000 000f 	and.w	r0, r0, #15
 80221fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80221fe:	6022      	str	r2, [r4, #0]
 8022200:	e7b7      	b.n	8022172 <__hexnan+0x7a>
 8022202:	2508      	movs	r5, #8
 8022204:	e7b5      	b.n	8022172 <__hexnan+0x7a>
 8022206:	9b01      	ldr	r3, [sp, #4]
 8022208:	2b00      	cmp	r3, #0
 802220a:	d0df      	beq.n	80221cc <__hexnan+0xd4>
 802220c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022210:	f1c3 0320 	rsb	r3, r3, #32
 8022214:	fa22 f303 	lsr.w	r3, r2, r3
 8022218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802221c:	401a      	ands	r2, r3
 802221e:	f846 2c04 	str.w	r2, [r6, #-4]
 8022222:	e7d3      	b.n	80221cc <__hexnan+0xd4>
 8022224:	3f04      	subs	r7, #4
 8022226:	e7d1      	b.n	80221cc <__hexnan+0xd4>
 8022228:	2004      	movs	r0, #4
 802222a:	b007      	add	sp, #28
 802222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022230 <_localeconv_r>:
 8022230:	4800      	ldr	r0, [pc, #0]	; (8022234 <_localeconv_r+0x4>)
 8022232:	4770      	bx	lr
 8022234:	240035a0 	.word	0x240035a0

08022238 <__retarget_lock_init_recursive>:
 8022238:	4770      	bx	lr

0802223a <__retarget_lock_acquire_recursive>:
 802223a:	4770      	bx	lr

0802223c <__retarget_lock_release_recursive>:
 802223c:	4770      	bx	lr

0802223e <__swhatbuf_r>:
 802223e:	b570      	push	{r4, r5, r6, lr}
 8022240:	460e      	mov	r6, r1
 8022242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022246:	2900      	cmp	r1, #0
 8022248:	b096      	sub	sp, #88	; 0x58
 802224a:	4614      	mov	r4, r2
 802224c:	461d      	mov	r5, r3
 802224e:	da07      	bge.n	8022260 <__swhatbuf_r+0x22>
 8022250:	2300      	movs	r3, #0
 8022252:	602b      	str	r3, [r5, #0]
 8022254:	89b3      	ldrh	r3, [r6, #12]
 8022256:	061a      	lsls	r2, r3, #24
 8022258:	d410      	bmi.n	802227c <__swhatbuf_r+0x3e>
 802225a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802225e:	e00e      	b.n	802227e <__swhatbuf_r+0x40>
 8022260:	466a      	mov	r2, sp
 8022262:	f001 f873 	bl	802334c <_fstat_r>
 8022266:	2800      	cmp	r0, #0
 8022268:	dbf2      	blt.n	8022250 <__swhatbuf_r+0x12>
 802226a:	9a01      	ldr	r2, [sp, #4]
 802226c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022274:	425a      	negs	r2, r3
 8022276:	415a      	adcs	r2, r3
 8022278:	602a      	str	r2, [r5, #0]
 802227a:	e7ee      	b.n	802225a <__swhatbuf_r+0x1c>
 802227c:	2340      	movs	r3, #64	; 0x40
 802227e:	2000      	movs	r0, #0
 8022280:	6023      	str	r3, [r4, #0]
 8022282:	b016      	add	sp, #88	; 0x58
 8022284:	bd70      	pop	{r4, r5, r6, pc}
	...

08022288 <__smakebuf_r>:
 8022288:	898b      	ldrh	r3, [r1, #12]
 802228a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802228c:	079d      	lsls	r5, r3, #30
 802228e:	4606      	mov	r6, r0
 8022290:	460c      	mov	r4, r1
 8022292:	d507      	bpl.n	80222a4 <__smakebuf_r+0x1c>
 8022294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022298:	6023      	str	r3, [r4, #0]
 802229a:	6123      	str	r3, [r4, #16]
 802229c:	2301      	movs	r3, #1
 802229e:	6163      	str	r3, [r4, #20]
 80222a0:	b002      	add	sp, #8
 80222a2:	bd70      	pop	{r4, r5, r6, pc}
 80222a4:	ab01      	add	r3, sp, #4
 80222a6:	466a      	mov	r2, sp
 80222a8:	f7ff ffc9 	bl	802223e <__swhatbuf_r>
 80222ac:	9900      	ldr	r1, [sp, #0]
 80222ae:	4605      	mov	r5, r0
 80222b0:	4630      	mov	r0, r6
 80222b2:	f7fc fd5f 	bl	801ed74 <_malloc_r>
 80222b6:	b948      	cbnz	r0, 80222cc <__smakebuf_r+0x44>
 80222b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80222bc:	059a      	lsls	r2, r3, #22
 80222be:	d4ef      	bmi.n	80222a0 <__smakebuf_r+0x18>
 80222c0:	f023 0303 	bic.w	r3, r3, #3
 80222c4:	f043 0302 	orr.w	r3, r3, #2
 80222c8:	81a3      	strh	r3, [r4, #12]
 80222ca:	e7e3      	b.n	8022294 <__smakebuf_r+0xc>
 80222cc:	4b0d      	ldr	r3, [pc, #52]	; (8022304 <__smakebuf_r+0x7c>)
 80222ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80222d0:	89a3      	ldrh	r3, [r4, #12]
 80222d2:	6020      	str	r0, [r4, #0]
 80222d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80222d8:	81a3      	strh	r3, [r4, #12]
 80222da:	9b00      	ldr	r3, [sp, #0]
 80222dc:	6163      	str	r3, [r4, #20]
 80222de:	9b01      	ldr	r3, [sp, #4]
 80222e0:	6120      	str	r0, [r4, #16]
 80222e2:	b15b      	cbz	r3, 80222fc <__smakebuf_r+0x74>
 80222e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80222e8:	4630      	mov	r0, r6
 80222ea:	f001 f841 	bl	8023370 <_isatty_r>
 80222ee:	b128      	cbz	r0, 80222fc <__smakebuf_r+0x74>
 80222f0:	89a3      	ldrh	r3, [r4, #12]
 80222f2:	f023 0303 	bic.w	r3, r3, #3
 80222f6:	f043 0301 	orr.w	r3, r3, #1
 80222fa:	81a3      	strh	r3, [r4, #12]
 80222fc:	89a0      	ldrh	r0, [r4, #12]
 80222fe:	4305      	orrs	r5, r0
 8022300:	81a5      	strh	r5, [r4, #12]
 8022302:	e7cd      	b.n	80222a0 <__smakebuf_r+0x18>
 8022304:	0802198d 	.word	0x0802198d

08022308 <__ascii_mbtowc>:
 8022308:	b082      	sub	sp, #8
 802230a:	b901      	cbnz	r1, 802230e <__ascii_mbtowc+0x6>
 802230c:	a901      	add	r1, sp, #4
 802230e:	b142      	cbz	r2, 8022322 <__ascii_mbtowc+0x1a>
 8022310:	b14b      	cbz	r3, 8022326 <__ascii_mbtowc+0x1e>
 8022312:	7813      	ldrb	r3, [r2, #0]
 8022314:	600b      	str	r3, [r1, #0]
 8022316:	7812      	ldrb	r2, [r2, #0]
 8022318:	1e10      	subs	r0, r2, #0
 802231a:	bf18      	it	ne
 802231c:	2001      	movne	r0, #1
 802231e:	b002      	add	sp, #8
 8022320:	4770      	bx	lr
 8022322:	4610      	mov	r0, r2
 8022324:	e7fb      	b.n	802231e <__ascii_mbtowc+0x16>
 8022326:	f06f 0001 	mvn.w	r0, #1
 802232a:	e7f8      	b.n	802231e <__ascii_mbtowc+0x16>

0802232c <__malloc_lock>:
 802232c:	4801      	ldr	r0, [pc, #4]	; (8022334 <__malloc_lock+0x8>)
 802232e:	f7ff bf84 	b.w	802223a <__retarget_lock_acquire_recursive>
 8022332:	bf00      	nop
 8022334:	2400b24c 	.word	0x2400b24c

08022338 <__malloc_unlock>:
 8022338:	4801      	ldr	r0, [pc, #4]	; (8022340 <__malloc_unlock+0x8>)
 802233a:	f7ff bf7f 	b.w	802223c <__retarget_lock_release_recursive>
 802233e:	bf00      	nop
 8022340:	2400b24c 	.word	0x2400b24c

08022344 <_Balloc>:
 8022344:	b570      	push	{r4, r5, r6, lr}
 8022346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022348:	4604      	mov	r4, r0
 802234a:	460d      	mov	r5, r1
 802234c:	b976      	cbnz	r6, 802236c <_Balloc+0x28>
 802234e:	2010      	movs	r0, #16
 8022350:	f7fc fc7a 	bl	801ec48 <malloc>
 8022354:	4602      	mov	r2, r0
 8022356:	6260      	str	r0, [r4, #36]	; 0x24
 8022358:	b920      	cbnz	r0, 8022364 <_Balloc+0x20>
 802235a:	4b18      	ldr	r3, [pc, #96]	; (80223bc <_Balloc+0x78>)
 802235c:	4818      	ldr	r0, [pc, #96]	; (80223c0 <_Balloc+0x7c>)
 802235e:	2166      	movs	r1, #102	; 0x66
 8022360:	f7fe fbfc 	bl	8020b5c <__assert_func>
 8022364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022368:	6006      	str	r6, [r0, #0]
 802236a:	60c6      	str	r6, [r0, #12]
 802236c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802236e:	68f3      	ldr	r3, [r6, #12]
 8022370:	b183      	cbz	r3, 8022394 <_Balloc+0x50>
 8022372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022374:	68db      	ldr	r3, [r3, #12]
 8022376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802237a:	b9b8      	cbnz	r0, 80223ac <_Balloc+0x68>
 802237c:	2101      	movs	r1, #1
 802237e:	fa01 f605 	lsl.w	r6, r1, r5
 8022382:	1d72      	adds	r2, r6, #5
 8022384:	0092      	lsls	r2, r2, #2
 8022386:	4620      	mov	r0, r4
 8022388:	f000 fc98 	bl	8022cbc <_calloc_r>
 802238c:	b160      	cbz	r0, 80223a8 <_Balloc+0x64>
 802238e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022392:	e00e      	b.n	80223b2 <_Balloc+0x6e>
 8022394:	2221      	movs	r2, #33	; 0x21
 8022396:	2104      	movs	r1, #4
 8022398:	4620      	mov	r0, r4
 802239a:	f000 fc8f 	bl	8022cbc <_calloc_r>
 802239e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80223a0:	60f0      	str	r0, [r6, #12]
 80223a2:	68db      	ldr	r3, [r3, #12]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d1e4      	bne.n	8022372 <_Balloc+0x2e>
 80223a8:	2000      	movs	r0, #0
 80223aa:	bd70      	pop	{r4, r5, r6, pc}
 80223ac:	6802      	ldr	r2, [r0, #0]
 80223ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80223b2:	2300      	movs	r3, #0
 80223b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80223b8:	e7f7      	b.n	80223aa <_Balloc+0x66>
 80223ba:	bf00      	nop
 80223bc:	08027f1d 	.word	0x08027f1d
 80223c0:	08028184 	.word	0x08028184

080223c4 <_Bfree>:
 80223c4:	b570      	push	{r4, r5, r6, lr}
 80223c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80223c8:	4605      	mov	r5, r0
 80223ca:	460c      	mov	r4, r1
 80223cc:	b976      	cbnz	r6, 80223ec <_Bfree+0x28>
 80223ce:	2010      	movs	r0, #16
 80223d0:	f7fc fc3a 	bl	801ec48 <malloc>
 80223d4:	4602      	mov	r2, r0
 80223d6:	6268      	str	r0, [r5, #36]	; 0x24
 80223d8:	b920      	cbnz	r0, 80223e4 <_Bfree+0x20>
 80223da:	4b09      	ldr	r3, [pc, #36]	; (8022400 <_Bfree+0x3c>)
 80223dc:	4809      	ldr	r0, [pc, #36]	; (8022404 <_Bfree+0x40>)
 80223de:	218a      	movs	r1, #138	; 0x8a
 80223e0:	f7fe fbbc 	bl	8020b5c <__assert_func>
 80223e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80223e8:	6006      	str	r6, [r0, #0]
 80223ea:	60c6      	str	r6, [r0, #12]
 80223ec:	b13c      	cbz	r4, 80223fe <_Bfree+0x3a>
 80223ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80223f0:	6862      	ldr	r2, [r4, #4]
 80223f2:	68db      	ldr	r3, [r3, #12]
 80223f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80223f8:	6021      	str	r1, [r4, #0]
 80223fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80223fe:	bd70      	pop	{r4, r5, r6, pc}
 8022400:	08027f1d 	.word	0x08027f1d
 8022404:	08028184 	.word	0x08028184

08022408 <__multadd>:
 8022408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802240c:	690e      	ldr	r6, [r1, #16]
 802240e:	4607      	mov	r7, r0
 8022410:	4698      	mov	r8, r3
 8022412:	460c      	mov	r4, r1
 8022414:	f101 0014 	add.w	r0, r1, #20
 8022418:	2300      	movs	r3, #0
 802241a:	6805      	ldr	r5, [r0, #0]
 802241c:	b2a9      	uxth	r1, r5
 802241e:	fb02 8101 	mla	r1, r2, r1, r8
 8022422:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8022426:	0c2d      	lsrs	r5, r5, #16
 8022428:	fb02 c505 	mla	r5, r2, r5, ip
 802242c:	b289      	uxth	r1, r1
 802242e:	3301      	adds	r3, #1
 8022430:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022434:	429e      	cmp	r6, r3
 8022436:	f840 1b04 	str.w	r1, [r0], #4
 802243a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802243e:	dcec      	bgt.n	802241a <__multadd+0x12>
 8022440:	f1b8 0f00 	cmp.w	r8, #0
 8022444:	d022      	beq.n	802248c <__multadd+0x84>
 8022446:	68a3      	ldr	r3, [r4, #8]
 8022448:	42b3      	cmp	r3, r6
 802244a:	dc19      	bgt.n	8022480 <__multadd+0x78>
 802244c:	6861      	ldr	r1, [r4, #4]
 802244e:	4638      	mov	r0, r7
 8022450:	3101      	adds	r1, #1
 8022452:	f7ff ff77 	bl	8022344 <_Balloc>
 8022456:	4605      	mov	r5, r0
 8022458:	b928      	cbnz	r0, 8022466 <__multadd+0x5e>
 802245a:	4602      	mov	r2, r0
 802245c:	4b0d      	ldr	r3, [pc, #52]	; (8022494 <__multadd+0x8c>)
 802245e:	480e      	ldr	r0, [pc, #56]	; (8022498 <__multadd+0x90>)
 8022460:	21b5      	movs	r1, #181	; 0xb5
 8022462:	f7fe fb7b 	bl	8020b5c <__assert_func>
 8022466:	6922      	ldr	r2, [r4, #16]
 8022468:	3202      	adds	r2, #2
 802246a:	f104 010c 	add.w	r1, r4, #12
 802246e:	0092      	lsls	r2, r2, #2
 8022470:	300c      	adds	r0, #12
 8022472:	f7fc fbff 	bl	801ec74 <memcpy>
 8022476:	4621      	mov	r1, r4
 8022478:	4638      	mov	r0, r7
 802247a:	f7ff ffa3 	bl	80223c4 <_Bfree>
 802247e:	462c      	mov	r4, r5
 8022480:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8022484:	3601      	adds	r6, #1
 8022486:	f8c3 8014 	str.w	r8, [r3, #20]
 802248a:	6126      	str	r6, [r4, #16]
 802248c:	4620      	mov	r0, r4
 802248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022492:	bf00      	nop
 8022494:	08028090 	.word	0x08028090
 8022498:	08028184 	.word	0x08028184

0802249c <__s2b>:
 802249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224a0:	460c      	mov	r4, r1
 80224a2:	4615      	mov	r5, r2
 80224a4:	461f      	mov	r7, r3
 80224a6:	2209      	movs	r2, #9
 80224a8:	3308      	adds	r3, #8
 80224aa:	4606      	mov	r6, r0
 80224ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80224b0:	2100      	movs	r1, #0
 80224b2:	2201      	movs	r2, #1
 80224b4:	429a      	cmp	r2, r3
 80224b6:	db09      	blt.n	80224cc <__s2b+0x30>
 80224b8:	4630      	mov	r0, r6
 80224ba:	f7ff ff43 	bl	8022344 <_Balloc>
 80224be:	b940      	cbnz	r0, 80224d2 <__s2b+0x36>
 80224c0:	4602      	mov	r2, r0
 80224c2:	4b19      	ldr	r3, [pc, #100]	; (8022528 <__s2b+0x8c>)
 80224c4:	4819      	ldr	r0, [pc, #100]	; (802252c <__s2b+0x90>)
 80224c6:	21ce      	movs	r1, #206	; 0xce
 80224c8:	f7fe fb48 	bl	8020b5c <__assert_func>
 80224cc:	0052      	lsls	r2, r2, #1
 80224ce:	3101      	adds	r1, #1
 80224d0:	e7f0      	b.n	80224b4 <__s2b+0x18>
 80224d2:	9b08      	ldr	r3, [sp, #32]
 80224d4:	6143      	str	r3, [r0, #20]
 80224d6:	2d09      	cmp	r5, #9
 80224d8:	f04f 0301 	mov.w	r3, #1
 80224dc:	6103      	str	r3, [r0, #16]
 80224de:	dd16      	ble.n	802250e <__s2b+0x72>
 80224e0:	f104 0909 	add.w	r9, r4, #9
 80224e4:	46c8      	mov	r8, r9
 80224e6:	442c      	add	r4, r5
 80224e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80224ec:	4601      	mov	r1, r0
 80224ee:	3b30      	subs	r3, #48	; 0x30
 80224f0:	220a      	movs	r2, #10
 80224f2:	4630      	mov	r0, r6
 80224f4:	f7ff ff88 	bl	8022408 <__multadd>
 80224f8:	45a0      	cmp	r8, r4
 80224fa:	d1f5      	bne.n	80224e8 <__s2b+0x4c>
 80224fc:	f1a5 0408 	sub.w	r4, r5, #8
 8022500:	444c      	add	r4, r9
 8022502:	1b2d      	subs	r5, r5, r4
 8022504:	1963      	adds	r3, r4, r5
 8022506:	42bb      	cmp	r3, r7
 8022508:	db04      	blt.n	8022514 <__s2b+0x78>
 802250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802250e:	340a      	adds	r4, #10
 8022510:	2509      	movs	r5, #9
 8022512:	e7f6      	b.n	8022502 <__s2b+0x66>
 8022514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022518:	4601      	mov	r1, r0
 802251a:	3b30      	subs	r3, #48	; 0x30
 802251c:	220a      	movs	r2, #10
 802251e:	4630      	mov	r0, r6
 8022520:	f7ff ff72 	bl	8022408 <__multadd>
 8022524:	e7ee      	b.n	8022504 <__s2b+0x68>
 8022526:	bf00      	nop
 8022528:	08028090 	.word	0x08028090
 802252c:	08028184 	.word	0x08028184

08022530 <__hi0bits>:
 8022530:	0c03      	lsrs	r3, r0, #16
 8022532:	041b      	lsls	r3, r3, #16
 8022534:	b9d3      	cbnz	r3, 802256c <__hi0bits+0x3c>
 8022536:	0400      	lsls	r0, r0, #16
 8022538:	2310      	movs	r3, #16
 802253a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802253e:	bf04      	itt	eq
 8022540:	0200      	lsleq	r0, r0, #8
 8022542:	3308      	addeq	r3, #8
 8022544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022548:	bf04      	itt	eq
 802254a:	0100      	lsleq	r0, r0, #4
 802254c:	3304      	addeq	r3, #4
 802254e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022552:	bf04      	itt	eq
 8022554:	0080      	lsleq	r0, r0, #2
 8022556:	3302      	addeq	r3, #2
 8022558:	2800      	cmp	r0, #0
 802255a:	db05      	blt.n	8022568 <__hi0bits+0x38>
 802255c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022560:	f103 0301 	add.w	r3, r3, #1
 8022564:	bf08      	it	eq
 8022566:	2320      	moveq	r3, #32
 8022568:	4618      	mov	r0, r3
 802256a:	4770      	bx	lr
 802256c:	2300      	movs	r3, #0
 802256e:	e7e4      	b.n	802253a <__hi0bits+0xa>

08022570 <__lo0bits>:
 8022570:	6803      	ldr	r3, [r0, #0]
 8022572:	f013 0207 	ands.w	r2, r3, #7
 8022576:	4601      	mov	r1, r0
 8022578:	d00b      	beq.n	8022592 <__lo0bits+0x22>
 802257a:	07da      	lsls	r2, r3, #31
 802257c:	d424      	bmi.n	80225c8 <__lo0bits+0x58>
 802257e:	0798      	lsls	r0, r3, #30
 8022580:	bf49      	itett	mi
 8022582:	085b      	lsrmi	r3, r3, #1
 8022584:	089b      	lsrpl	r3, r3, #2
 8022586:	2001      	movmi	r0, #1
 8022588:	600b      	strmi	r3, [r1, #0]
 802258a:	bf5c      	itt	pl
 802258c:	600b      	strpl	r3, [r1, #0]
 802258e:	2002      	movpl	r0, #2
 8022590:	4770      	bx	lr
 8022592:	b298      	uxth	r0, r3
 8022594:	b9b0      	cbnz	r0, 80225c4 <__lo0bits+0x54>
 8022596:	0c1b      	lsrs	r3, r3, #16
 8022598:	2010      	movs	r0, #16
 802259a:	f013 0fff 	tst.w	r3, #255	; 0xff
 802259e:	bf04      	itt	eq
 80225a0:	0a1b      	lsreq	r3, r3, #8
 80225a2:	3008      	addeq	r0, #8
 80225a4:	071a      	lsls	r2, r3, #28
 80225a6:	bf04      	itt	eq
 80225a8:	091b      	lsreq	r3, r3, #4
 80225aa:	3004      	addeq	r0, #4
 80225ac:	079a      	lsls	r2, r3, #30
 80225ae:	bf04      	itt	eq
 80225b0:	089b      	lsreq	r3, r3, #2
 80225b2:	3002      	addeq	r0, #2
 80225b4:	07da      	lsls	r2, r3, #31
 80225b6:	d403      	bmi.n	80225c0 <__lo0bits+0x50>
 80225b8:	085b      	lsrs	r3, r3, #1
 80225ba:	f100 0001 	add.w	r0, r0, #1
 80225be:	d005      	beq.n	80225cc <__lo0bits+0x5c>
 80225c0:	600b      	str	r3, [r1, #0]
 80225c2:	4770      	bx	lr
 80225c4:	4610      	mov	r0, r2
 80225c6:	e7e8      	b.n	802259a <__lo0bits+0x2a>
 80225c8:	2000      	movs	r0, #0
 80225ca:	4770      	bx	lr
 80225cc:	2020      	movs	r0, #32
 80225ce:	4770      	bx	lr

080225d0 <__i2b>:
 80225d0:	b510      	push	{r4, lr}
 80225d2:	460c      	mov	r4, r1
 80225d4:	2101      	movs	r1, #1
 80225d6:	f7ff feb5 	bl	8022344 <_Balloc>
 80225da:	4602      	mov	r2, r0
 80225dc:	b928      	cbnz	r0, 80225ea <__i2b+0x1a>
 80225de:	4b05      	ldr	r3, [pc, #20]	; (80225f4 <__i2b+0x24>)
 80225e0:	4805      	ldr	r0, [pc, #20]	; (80225f8 <__i2b+0x28>)
 80225e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80225e6:	f7fe fab9 	bl	8020b5c <__assert_func>
 80225ea:	2301      	movs	r3, #1
 80225ec:	6144      	str	r4, [r0, #20]
 80225ee:	6103      	str	r3, [r0, #16]
 80225f0:	bd10      	pop	{r4, pc}
 80225f2:	bf00      	nop
 80225f4:	08028090 	.word	0x08028090
 80225f8:	08028184 	.word	0x08028184

080225fc <__multiply>:
 80225fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022600:	4614      	mov	r4, r2
 8022602:	690a      	ldr	r2, [r1, #16]
 8022604:	6923      	ldr	r3, [r4, #16]
 8022606:	429a      	cmp	r2, r3
 8022608:	bfb8      	it	lt
 802260a:	460b      	movlt	r3, r1
 802260c:	460d      	mov	r5, r1
 802260e:	bfbc      	itt	lt
 8022610:	4625      	movlt	r5, r4
 8022612:	461c      	movlt	r4, r3
 8022614:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8022618:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802261c:	68ab      	ldr	r3, [r5, #8]
 802261e:	6869      	ldr	r1, [r5, #4]
 8022620:	eb0a 0709 	add.w	r7, sl, r9
 8022624:	42bb      	cmp	r3, r7
 8022626:	b085      	sub	sp, #20
 8022628:	bfb8      	it	lt
 802262a:	3101      	addlt	r1, #1
 802262c:	f7ff fe8a 	bl	8022344 <_Balloc>
 8022630:	b930      	cbnz	r0, 8022640 <__multiply+0x44>
 8022632:	4602      	mov	r2, r0
 8022634:	4b42      	ldr	r3, [pc, #264]	; (8022740 <__multiply+0x144>)
 8022636:	4843      	ldr	r0, [pc, #268]	; (8022744 <__multiply+0x148>)
 8022638:	f240 115d 	movw	r1, #349	; 0x15d
 802263c:	f7fe fa8e 	bl	8020b5c <__assert_func>
 8022640:	f100 0614 	add.w	r6, r0, #20
 8022644:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8022648:	4633      	mov	r3, r6
 802264a:	2200      	movs	r2, #0
 802264c:	4543      	cmp	r3, r8
 802264e:	d31e      	bcc.n	802268e <__multiply+0x92>
 8022650:	f105 0c14 	add.w	ip, r5, #20
 8022654:	f104 0314 	add.w	r3, r4, #20
 8022658:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802265c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8022660:	9202      	str	r2, [sp, #8]
 8022662:	ebac 0205 	sub.w	r2, ip, r5
 8022666:	3a15      	subs	r2, #21
 8022668:	f022 0203 	bic.w	r2, r2, #3
 802266c:	3204      	adds	r2, #4
 802266e:	f105 0115 	add.w	r1, r5, #21
 8022672:	458c      	cmp	ip, r1
 8022674:	bf38      	it	cc
 8022676:	2204      	movcc	r2, #4
 8022678:	9201      	str	r2, [sp, #4]
 802267a:	9a02      	ldr	r2, [sp, #8]
 802267c:	9303      	str	r3, [sp, #12]
 802267e:	429a      	cmp	r2, r3
 8022680:	d808      	bhi.n	8022694 <__multiply+0x98>
 8022682:	2f00      	cmp	r7, #0
 8022684:	dc55      	bgt.n	8022732 <__multiply+0x136>
 8022686:	6107      	str	r7, [r0, #16]
 8022688:	b005      	add	sp, #20
 802268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802268e:	f843 2b04 	str.w	r2, [r3], #4
 8022692:	e7db      	b.n	802264c <__multiply+0x50>
 8022694:	f8b3 a000 	ldrh.w	sl, [r3]
 8022698:	f1ba 0f00 	cmp.w	sl, #0
 802269c:	d020      	beq.n	80226e0 <__multiply+0xe4>
 802269e:	f105 0e14 	add.w	lr, r5, #20
 80226a2:	46b1      	mov	r9, r6
 80226a4:	2200      	movs	r2, #0
 80226a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80226aa:	f8d9 b000 	ldr.w	fp, [r9]
 80226ae:	b2a1      	uxth	r1, r4
 80226b0:	fa1f fb8b 	uxth.w	fp, fp
 80226b4:	fb0a b101 	mla	r1, sl, r1, fp
 80226b8:	4411      	add	r1, r2
 80226ba:	f8d9 2000 	ldr.w	r2, [r9]
 80226be:	0c24      	lsrs	r4, r4, #16
 80226c0:	0c12      	lsrs	r2, r2, #16
 80226c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80226c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80226ca:	b289      	uxth	r1, r1
 80226cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80226d0:	45f4      	cmp	ip, lr
 80226d2:	f849 1b04 	str.w	r1, [r9], #4
 80226d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80226da:	d8e4      	bhi.n	80226a6 <__multiply+0xaa>
 80226dc:	9901      	ldr	r1, [sp, #4]
 80226de:	5072      	str	r2, [r6, r1]
 80226e0:	9a03      	ldr	r2, [sp, #12]
 80226e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80226e6:	3304      	adds	r3, #4
 80226e8:	f1b9 0f00 	cmp.w	r9, #0
 80226ec:	d01f      	beq.n	802272e <__multiply+0x132>
 80226ee:	6834      	ldr	r4, [r6, #0]
 80226f0:	f105 0114 	add.w	r1, r5, #20
 80226f4:	46b6      	mov	lr, r6
 80226f6:	f04f 0a00 	mov.w	sl, #0
 80226fa:	880a      	ldrh	r2, [r1, #0]
 80226fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022700:	fb09 b202 	mla	r2, r9, r2, fp
 8022704:	4492      	add	sl, r2
 8022706:	b2a4      	uxth	r4, r4
 8022708:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802270c:	f84e 4b04 	str.w	r4, [lr], #4
 8022710:	f851 4b04 	ldr.w	r4, [r1], #4
 8022714:	f8be 2000 	ldrh.w	r2, [lr]
 8022718:	0c24      	lsrs	r4, r4, #16
 802271a:	fb09 2404 	mla	r4, r9, r4, r2
 802271e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022722:	458c      	cmp	ip, r1
 8022724:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022728:	d8e7      	bhi.n	80226fa <__multiply+0xfe>
 802272a:	9a01      	ldr	r2, [sp, #4]
 802272c:	50b4      	str	r4, [r6, r2]
 802272e:	3604      	adds	r6, #4
 8022730:	e7a3      	b.n	802267a <__multiply+0x7e>
 8022732:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022736:	2b00      	cmp	r3, #0
 8022738:	d1a5      	bne.n	8022686 <__multiply+0x8a>
 802273a:	3f01      	subs	r7, #1
 802273c:	e7a1      	b.n	8022682 <__multiply+0x86>
 802273e:	bf00      	nop
 8022740:	08028090 	.word	0x08028090
 8022744:	08028184 	.word	0x08028184

08022748 <__pow5mult>:
 8022748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802274c:	4615      	mov	r5, r2
 802274e:	f012 0203 	ands.w	r2, r2, #3
 8022752:	4606      	mov	r6, r0
 8022754:	460f      	mov	r7, r1
 8022756:	d007      	beq.n	8022768 <__pow5mult+0x20>
 8022758:	4c25      	ldr	r4, [pc, #148]	; (80227f0 <__pow5mult+0xa8>)
 802275a:	3a01      	subs	r2, #1
 802275c:	2300      	movs	r3, #0
 802275e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022762:	f7ff fe51 	bl	8022408 <__multadd>
 8022766:	4607      	mov	r7, r0
 8022768:	10ad      	asrs	r5, r5, #2
 802276a:	d03d      	beq.n	80227e8 <__pow5mult+0xa0>
 802276c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802276e:	b97c      	cbnz	r4, 8022790 <__pow5mult+0x48>
 8022770:	2010      	movs	r0, #16
 8022772:	f7fc fa69 	bl	801ec48 <malloc>
 8022776:	4602      	mov	r2, r0
 8022778:	6270      	str	r0, [r6, #36]	; 0x24
 802277a:	b928      	cbnz	r0, 8022788 <__pow5mult+0x40>
 802277c:	4b1d      	ldr	r3, [pc, #116]	; (80227f4 <__pow5mult+0xac>)
 802277e:	481e      	ldr	r0, [pc, #120]	; (80227f8 <__pow5mult+0xb0>)
 8022780:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022784:	f7fe f9ea 	bl	8020b5c <__assert_func>
 8022788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802278c:	6004      	str	r4, [r0, #0]
 802278e:	60c4      	str	r4, [r0, #12]
 8022790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022798:	b94c      	cbnz	r4, 80227ae <__pow5mult+0x66>
 802279a:	f240 2171 	movw	r1, #625	; 0x271
 802279e:	4630      	mov	r0, r6
 80227a0:	f7ff ff16 	bl	80225d0 <__i2b>
 80227a4:	2300      	movs	r3, #0
 80227a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80227aa:	4604      	mov	r4, r0
 80227ac:	6003      	str	r3, [r0, #0]
 80227ae:	f04f 0900 	mov.w	r9, #0
 80227b2:	07eb      	lsls	r3, r5, #31
 80227b4:	d50a      	bpl.n	80227cc <__pow5mult+0x84>
 80227b6:	4639      	mov	r1, r7
 80227b8:	4622      	mov	r2, r4
 80227ba:	4630      	mov	r0, r6
 80227bc:	f7ff ff1e 	bl	80225fc <__multiply>
 80227c0:	4639      	mov	r1, r7
 80227c2:	4680      	mov	r8, r0
 80227c4:	4630      	mov	r0, r6
 80227c6:	f7ff fdfd 	bl	80223c4 <_Bfree>
 80227ca:	4647      	mov	r7, r8
 80227cc:	106d      	asrs	r5, r5, #1
 80227ce:	d00b      	beq.n	80227e8 <__pow5mult+0xa0>
 80227d0:	6820      	ldr	r0, [r4, #0]
 80227d2:	b938      	cbnz	r0, 80227e4 <__pow5mult+0x9c>
 80227d4:	4622      	mov	r2, r4
 80227d6:	4621      	mov	r1, r4
 80227d8:	4630      	mov	r0, r6
 80227da:	f7ff ff0f 	bl	80225fc <__multiply>
 80227de:	6020      	str	r0, [r4, #0]
 80227e0:	f8c0 9000 	str.w	r9, [r0]
 80227e4:	4604      	mov	r4, r0
 80227e6:	e7e4      	b.n	80227b2 <__pow5mult+0x6a>
 80227e8:	4638      	mov	r0, r7
 80227ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80227ee:	bf00      	nop
 80227f0:	080282d8 	.word	0x080282d8
 80227f4:	08027f1d 	.word	0x08027f1d
 80227f8:	08028184 	.word	0x08028184

080227fc <__lshift>:
 80227fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022800:	460c      	mov	r4, r1
 8022802:	6849      	ldr	r1, [r1, #4]
 8022804:	6923      	ldr	r3, [r4, #16]
 8022806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802280a:	68a3      	ldr	r3, [r4, #8]
 802280c:	4607      	mov	r7, r0
 802280e:	4691      	mov	r9, r2
 8022810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022814:	f108 0601 	add.w	r6, r8, #1
 8022818:	42b3      	cmp	r3, r6
 802281a:	db0b      	blt.n	8022834 <__lshift+0x38>
 802281c:	4638      	mov	r0, r7
 802281e:	f7ff fd91 	bl	8022344 <_Balloc>
 8022822:	4605      	mov	r5, r0
 8022824:	b948      	cbnz	r0, 802283a <__lshift+0x3e>
 8022826:	4602      	mov	r2, r0
 8022828:	4b28      	ldr	r3, [pc, #160]	; (80228cc <__lshift+0xd0>)
 802282a:	4829      	ldr	r0, [pc, #164]	; (80228d0 <__lshift+0xd4>)
 802282c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022830:	f7fe f994 	bl	8020b5c <__assert_func>
 8022834:	3101      	adds	r1, #1
 8022836:	005b      	lsls	r3, r3, #1
 8022838:	e7ee      	b.n	8022818 <__lshift+0x1c>
 802283a:	2300      	movs	r3, #0
 802283c:	f100 0114 	add.w	r1, r0, #20
 8022840:	f100 0210 	add.w	r2, r0, #16
 8022844:	4618      	mov	r0, r3
 8022846:	4553      	cmp	r3, sl
 8022848:	db33      	blt.n	80228b2 <__lshift+0xb6>
 802284a:	6920      	ldr	r0, [r4, #16]
 802284c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022850:	f104 0314 	add.w	r3, r4, #20
 8022854:	f019 091f 	ands.w	r9, r9, #31
 8022858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802285c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022860:	d02b      	beq.n	80228ba <__lshift+0xbe>
 8022862:	f1c9 0e20 	rsb	lr, r9, #32
 8022866:	468a      	mov	sl, r1
 8022868:	2200      	movs	r2, #0
 802286a:	6818      	ldr	r0, [r3, #0]
 802286c:	fa00 f009 	lsl.w	r0, r0, r9
 8022870:	4302      	orrs	r2, r0
 8022872:	f84a 2b04 	str.w	r2, [sl], #4
 8022876:	f853 2b04 	ldr.w	r2, [r3], #4
 802287a:	459c      	cmp	ip, r3
 802287c:	fa22 f20e 	lsr.w	r2, r2, lr
 8022880:	d8f3      	bhi.n	802286a <__lshift+0x6e>
 8022882:	ebac 0304 	sub.w	r3, ip, r4
 8022886:	3b15      	subs	r3, #21
 8022888:	f023 0303 	bic.w	r3, r3, #3
 802288c:	3304      	adds	r3, #4
 802288e:	f104 0015 	add.w	r0, r4, #21
 8022892:	4584      	cmp	ip, r0
 8022894:	bf38      	it	cc
 8022896:	2304      	movcc	r3, #4
 8022898:	50ca      	str	r2, [r1, r3]
 802289a:	b10a      	cbz	r2, 80228a0 <__lshift+0xa4>
 802289c:	f108 0602 	add.w	r6, r8, #2
 80228a0:	3e01      	subs	r6, #1
 80228a2:	4638      	mov	r0, r7
 80228a4:	612e      	str	r6, [r5, #16]
 80228a6:	4621      	mov	r1, r4
 80228a8:	f7ff fd8c 	bl	80223c4 <_Bfree>
 80228ac:	4628      	mov	r0, r5
 80228ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80228b6:	3301      	adds	r3, #1
 80228b8:	e7c5      	b.n	8022846 <__lshift+0x4a>
 80228ba:	3904      	subs	r1, #4
 80228bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80228c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80228c4:	459c      	cmp	ip, r3
 80228c6:	d8f9      	bhi.n	80228bc <__lshift+0xc0>
 80228c8:	e7ea      	b.n	80228a0 <__lshift+0xa4>
 80228ca:	bf00      	nop
 80228cc:	08028090 	.word	0x08028090
 80228d0:	08028184 	.word	0x08028184

080228d4 <__mcmp>:
 80228d4:	b530      	push	{r4, r5, lr}
 80228d6:	6902      	ldr	r2, [r0, #16]
 80228d8:	690c      	ldr	r4, [r1, #16]
 80228da:	1b12      	subs	r2, r2, r4
 80228dc:	d10e      	bne.n	80228fc <__mcmp+0x28>
 80228de:	f100 0314 	add.w	r3, r0, #20
 80228e2:	3114      	adds	r1, #20
 80228e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80228e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80228ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80228f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80228f4:	42a5      	cmp	r5, r4
 80228f6:	d003      	beq.n	8022900 <__mcmp+0x2c>
 80228f8:	d305      	bcc.n	8022906 <__mcmp+0x32>
 80228fa:	2201      	movs	r2, #1
 80228fc:	4610      	mov	r0, r2
 80228fe:	bd30      	pop	{r4, r5, pc}
 8022900:	4283      	cmp	r3, r0
 8022902:	d3f3      	bcc.n	80228ec <__mcmp+0x18>
 8022904:	e7fa      	b.n	80228fc <__mcmp+0x28>
 8022906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802290a:	e7f7      	b.n	80228fc <__mcmp+0x28>

0802290c <__mdiff>:
 802290c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022910:	460c      	mov	r4, r1
 8022912:	4606      	mov	r6, r0
 8022914:	4611      	mov	r1, r2
 8022916:	4620      	mov	r0, r4
 8022918:	4617      	mov	r7, r2
 802291a:	f7ff ffdb 	bl	80228d4 <__mcmp>
 802291e:	1e05      	subs	r5, r0, #0
 8022920:	d110      	bne.n	8022944 <__mdiff+0x38>
 8022922:	4629      	mov	r1, r5
 8022924:	4630      	mov	r0, r6
 8022926:	f7ff fd0d 	bl	8022344 <_Balloc>
 802292a:	b930      	cbnz	r0, 802293a <__mdiff+0x2e>
 802292c:	4b39      	ldr	r3, [pc, #228]	; (8022a14 <__mdiff+0x108>)
 802292e:	4602      	mov	r2, r0
 8022930:	f240 2132 	movw	r1, #562	; 0x232
 8022934:	4838      	ldr	r0, [pc, #224]	; (8022a18 <__mdiff+0x10c>)
 8022936:	f7fe f911 	bl	8020b5c <__assert_func>
 802293a:	2301      	movs	r3, #1
 802293c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022944:	bfa4      	itt	ge
 8022946:	463b      	movge	r3, r7
 8022948:	4627      	movge	r7, r4
 802294a:	4630      	mov	r0, r6
 802294c:	6879      	ldr	r1, [r7, #4]
 802294e:	bfa6      	itte	ge
 8022950:	461c      	movge	r4, r3
 8022952:	2500      	movge	r5, #0
 8022954:	2501      	movlt	r5, #1
 8022956:	f7ff fcf5 	bl	8022344 <_Balloc>
 802295a:	b920      	cbnz	r0, 8022966 <__mdiff+0x5a>
 802295c:	4b2d      	ldr	r3, [pc, #180]	; (8022a14 <__mdiff+0x108>)
 802295e:	4602      	mov	r2, r0
 8022960:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022964:	e7e6      	b.n	8022934 <__mdiff+0x28>
 8022966:	693e      	ldr	r6, [r7, #16]
 8022968:	60c5      	str	r5, [r0, #12]
 802296a:	6925      	ldr	r5, [r4, #16]
 802296c:	f107 0114 	add.w	r1, r7, #20
 8022970:	f104 0914 	add.w	r9, r4, #20
 8022974:	f100 0e14 	add.w	lr, r0, #20
 8022978:	f107 0210 	add.w	r2, r7, #16
 802297c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022980:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022984:	46f2      	mov	sl, lr
 8022986:	2700      	movs	r7, #0
 8022988:	f859 3b04 	ldr.w	r3, [r9], #4
 802298c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022990:	fa1f f883 	uxth.w	r8, r3
 8022994:	fa17 f78b 	uxtah	r7, r7, fp
 8022998:	0c1b      	lsrs	r3, r3, #16
 802299a:	eba7 0808 	sub.w	r8, r7, r8
 802299e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80229a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80229a6:	fa1f f888 	uxth.w	r8, r8
 80229aa:	141f      	asrs	r7, r3, #16
 80229ac:	454d      	cmp	r5, r9
 80229ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80229b2:	f84a 3b04 	str.w	r3, [sl], #4
 80229b6:	d8e7      	bhi.n	8022988 <__mdiff+0x7c>
 80229b8:	1b2b      	subs	r3, r5, r4
 80229ba:	3b15      	subs	r3, #21
 80229bc:	f023 0303 	bic.w	r3, r3, #3
 80229c0:	3304      	adds	r3, #4
 80229c2:	3415      	adds	r4, #21
 80229c4:	42a5      	cmp	r5, r4
 80229c6:	bf38      	it	cc
 80229c8:	2304      	movcc	r3, #4
 80229ca:	4419      	add	r1, r3
 80229cc:	4473      	add	r3, lr
 80229ce:	469e      	mov	lr, r3
 80229d0:	460d      	mov	r5, r1
 80229d2:	4565      	cmp	r5, ip
 80229d4:	d30e      	bcc.n	80229f4 <__mdiff+0xe8>
 80229d6:	f10c 0203 	add.w	r2, ip, #3
 80229da:	1a52      	subs	r2, r2, r1
 80229dc:	f022 0203 	bic.w	r2, r2, #3
 80229e0:	3903      	subs	r1, #3
 80229e2:	458c      	cmp	ip, r1
 80229e4:	bf38      	it	cc
 80229e6:	2200      	movcc	r2, #0
 80229e8:	441a      	add	r2, r3
 80229ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80229ee:	b17b      	cbz	r3, 8022a10 <__mdiff+0x104>
 80229f0:	6106      	str	r6, [r0, #16]
 80229f2:	e7a5      	b.n	8022940 <__mdiff+0x34>
 80229f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80229f8:	fa17 f488 	uxtah	r4, r7, r8
 80229fc:	1422      	asrs	r2, r4, #16
 80229fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022a02:	b2a4      	uxth	r4, r4
 8022a04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022a08:	f84e 4b04 	str.w	r4, [lr], #4
 8022a0c:	1417      	asrs	r7, r2, #16
 8022a0e:	e7e0      	b.n	80229d2 <__mdiff+0xc6>
 8022a10:	3e01      	subs	r6, #1
 8022a12:	e7ea      	b.n	80229ea <__mdiff+0xde>
 8022a14:	08028090 	.word	0x08028090
 8022a18:	08028184 	.word	0x08028184

08022a1c <__ulp>:
 8022a1c:	b082      	sub	sp, #8
 8022a1e:	ed8d 0b00 	vstr	d0, [sp]
 8022a22:	9b01      	ldr	r3, [sp, #4]
 8022a24:	4912      	ldr	r1, [pc, #72]	; (8022a70 <__ulp+0x54>)
 8022a26:	4019      	ands	r1, r3
 8022a28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022a2c:	2900      	cmp	r1, #0
 8022a2e:	dd05      	ble.n	8022a3c <__ulp+0x20>
 8022a30:	2200      	movs	r2, #0
 8022a32:	460b      	mov	r3, r1
 8022a34:	ec43 2b10 	vmov	d0, r2, r3
 8022a38:	b002      	add	sp, #8
 8022a3a:	4770      	bx	lr
 8022a3c:	4249      	negs	r1, r1
 8022a3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022a42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8022a46:	f04f 0200 	mov.w	r2, #0
 8022a4a:	f04f 0300 	mov.w	r3, #0
 8022a4e:	da04      	bge.n	8022a5a <__ulp+0x3e>
 8022a50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022a54:	fa41 f300 	asr.w	r3, r1, r0
 8022a58:	e7ec      	b.n	8022a34 <__ulp+0x18>
 8022a5a:	f1a0 0114 	sub.w	r1, r0, #20
 8022a5e:	291e      	cmp	r1, #30
 8022a60:	bfda      	itte	le
 8022a62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8022a66:	fa20 f101 	lsrle.w	r1, r0, r1
 8022a6a:	2101      	movgt	r1, #1
 8022a6c:	460a      	mov	r2, r1
 8022a6e:	e7e1      	b.n	8022a34 <__ulp+0x18>
 8022a70:	7ff00000 	.word	0x7ff00000

08022a74 <__b2d>:
 8022a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a76:	6905      	ldr	r5, [r0, #16]
 8022a78:	f100 0714 	add.w	r7, r0, #20
 8022a7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022a80:	1f2e      	subs	r6, r5, #4
 8022a82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022a86:	4620      	mov	r0, r4
 8022a88:	f7ff fd52 	bl	8022530 <__hi0bits>
 8022a8c:	f1c0 0320 	rsb	r3, r0, #32
 8022a90:	280a      	cmp	r0, #10
 8022a92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022b10 <__b2d+0x9c>
 8022a96:	600b      	str	r3, [r1, #0]
 8022a98:	dc14      	bgt.n	8022ac4 <__b2d+0x50>
 8022a9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8022a9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8022aa2:	42b7      	cmp	r7, r6
 8022aa4:	ea41 030c 	orr.w	r3, r1, ip
 8022aa8:	bf34      	ite	cc
 8022aaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022aae:	2100      	movcs	r1, #0
 8022ab0:	3015      	adds	r0, #21
 8022ab2:	fa04 f000 	lsl.w	r0, r4, r0
 8022ab6:	fa21 f10e 	lsr.w	r1, r1, lr
 8022aba:	ea40 0201 	orr.w	r2, r0, r1
 8022abe:	ec43 2b10 	vmov	d0, r2, r3
 8022ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ac4:	42b7      	cmp	r7, r6
 8022ac6:	bf3a      	itte	cc
 8022ac8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022acc:	f1a5 0608 	subcc.w	r6, r5, #8
 8022ad0:	2100      	movcs	r1, #0
 8022ad2:	380b      	subs	r0, #11
 8022ad4:	d017      	beq.n	8022b06 <__b2d+0x92>
 8022ad6:	f1c0 0c20 	rsb	ip, r0, #32
 8022ada:	fa04 f500 	lsl.w	r5, r4, r0
 8022ade:	42be      	cmp	r6, r7
 8022ae0:	fa21 f40c 	lsr.w	r4, r1, ip
 8022ae4:	ea45 0504 	orr.w	r5, r5, r4
 8022ae8:	bf8c      	ite	hi
 8022aea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022aee:	2400      	movls	r4, #0
 8022af0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022af4:	fa01 f000 	lsl.w	r0, r1, r0
 8022af8:	fa24 f40c 	lsr.w	r4, r4, ip
 8022afc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022b00:	ea40 0204 	orr.w	r2, r0, r4
 8022b04:	e7db      	b.n	8022abe <__b2d+0x4a>
 8022b06:	ea44 030c 	orr.w	r3, r4, ip
 8022b0a:	460a      	mov	r2, r1
 8022b0c:	e7d7      	b.n	8022abe <__b2d+0x4a>
 8022b0e:	bf00      	nop
 8022b10:	3ff00000 	.word	0x3ff00000

08022b14 <__d2b>:
 8022b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022b18:	4689      	mov	r9, r1
 8022b1a:	2101      	movs	r1, #1
 8022b1c:	ec57 6b10 	vmov	r6, r7, d0
 8022b20:	4690      	mov	r8, r2
 8022b22:	f7ff fc0f 	bl	8022344 <_Balloc>
 8022b26:	4604      	mov	r4, r0
 8022b28:	b930      	cbnz	r0, 8022b38 <__d2b+0x24>
 8022b2a:	4602      	mov	r2, r0
 8022b2c:	4b25      	ldr	r3, [pc, #148]	; (8022bc4 <__d2b+0xb0>)
 8022b2e:	4826      	ldr	r0, [pc, #152]	; (8022bc8 <__d2b+0xb4>)
 8022b30:	f240 310a 	movw	r1, #778	; 0x30a
 8022b34:	f7fe f812 	bl	8020b5c <__assert_func>
 8022b38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022b3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022b40:	bb35      	cbnz	r5, 8022b90 <__d2b+0x7c>
 8022b42:	2e00      	cmp	r6, #0
 8022b44:	9301      	str	r3, [sp, #4]
 8022b46:	d028      	beq.n	8022b9a <__d2b+0x86>
 8022b48:	4668      	mov	r0, sp
 8022b4a:	9600      	str	r6, [sp, #0]
 8022b4c:	f7ff fd10 	bl	8022570 <__lo0bits>
 8022b50:	9900      	ldr	r1, [sp, #0]
 8022b52:	b300      	cbz	r0, 8022b96 <__d2b+0x82>
 8022b54:	9a01      	ldr	r2, [sp, #4]
 8022b56:	f1c0 0320 	rsb	r3, r0, #32
 8022b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8022b5e:	430b      	orrs	r3, r1
 8022b60:	40c2      	lsrs	r2, r0
 8022b62:	6163      	str	r3, [r4, #20]
 8022b64:	9201      	str	r2, [sp, #4]
 8022b66:	9b01      	ldr	r3, [sp, #4]
 8022b68:	61a3      	str	r3, [r4, #24]
 8022b6a:	2b00      	cmp	r3, #0
 8022b6c:	bf14      	ite	ne
 8022b6e:	2202      	movne	r2, #2
 8022b70:	2201      	moveq	r2, #1
 8022b72:	6122      	str	r2, [r4, #16]
 8022b74:	b1d5      	cbz	r5, 8022bac <__d2b+0x98>
 8022b76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022b7a:	4405      	add	r5, r0
 8022b7c:	f8c9 5000 	str.w	r5, [r9]
 8022b80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022b84:	f8c8 0000 	str.w	r0, [r8]
 8022b88:	4620      	mov	r0, r4
 8022b8a:	b003      	add	sp, #12
 8022b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022b94:	e7d5      	b.n	8022b42 <__d2b+0x2e>
 8022b96:	6161      	str	r1, [r4, #20]
 8022b98:	e7e5      	b.n	8022b66 <__d2b+0x52>
 8022b9a:	a801      	add	r0, sp, #4
 8022b9c:	f7ff fce8 	bl	8022570 <__lo0bits>
 8022ba0:	9b01      	ldr	r3, [sp, #4]
 8022ba2:	6163      	str	r3, [r4, #20]
 8022ba4:	2201      	movs	r2, #1
 8022ba6:	6122      	str	r2, [r4, #16]
 8022ba8:	3020      	adds	r0, #32
 8022baa:	e7e3      	b.n	8022b74 <__d2b+0x60>
 8022bac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022bb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022bb4:	f8c9 0000 	str.w	r0, [r9]
 8022bb8:	6918      	ldr	r0, [r3, #16]
 8022bba:	f7ff fcb9 	bl	8022530 <__hi0bits>
 8022bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022bc2:	e7df      	b.n	8022b84 <__d2b+0x70>
 8022bc4:	08028090 	.word	0x08028090
 8022bc8:	08028184 	.word	0x08028184

08022bcc <__ratio>:
 8022bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bd0:	468a      	mov	sl, r1
 8022bd2:	4669      	mov	r1, sp
 8022bd4:	4683      	mov	fp, r0
 8022bd6:	f7ff ff4d 	bl	8022a74 <__b2d>
 8022bda:	a901      	add	r1, sp, #4
 8022bdc:	4650      	mov	r0, sl
 8022bde:	ec59 8b10 	vmov	r8, r9, d0
 8022be2:	ee10 6a10 	vmov	r6, s0
 8022be6:	f7ff ff45 	bl	8022a74 <__b2d>
 8022bea:	f8db 3010 	ldr.w	r3, [fp, #16]
 8022bee:	f8da 2010 	ldr.w	r2, [sl, #16]
 8022bf2:	eba3 0c02 	sub.w	ip, r3, r2
 8022bf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022bfa:	1a9b      	subs	r3, r3, r2
 8022bfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022c00:	ec55 4b10 	vmov	r4, r5, d0
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	ee10 0a10 	vmov	r0, s0
 8022c0a:	bfce      	itee	gt
 8022c0c:	464a      	movgt	r2, r9
 8022c0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022c12:	462a      	movle	r2, r5
 8022c14:	464f      	mov	r7, r9
 8022c16:	4629      	mov	r1, r5
 8022c18:	bfcc      	ite	gt
 8022c1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022c1e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8022c22:	ec47 6b17 	vmov	d7, r6, r7
 8022c26:	ec41 0b16 	vmov	d6, r0, r1
 8022c2a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8022c2e:	b003      	add	sp, #12
 8022c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c34 <__copybits>:
 8022c34:	3901      	subs	r1, #1
 8022c36:	b570      	push	{r4, r5, r6, lr}
 8022c38:	1149      	asrs	r1, r1, #5
 8022c3a:	6914      	ldr	r4, [r2, #16]
 8022c3c:	3101      	adds	r1, #1
 8022c3e:	f102 0314 	add.w	r3, r2, #20
 8022c42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022c46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022c4a:	1f05      	subs	r5, r0, #4
 8022c4c:	42a3      	cmp	r3, r4
 8022c4e:	d30c      	bcc.n	8022c6a <__copybits+0x36>
 8022c50:	1aa3      	subs	r3, r4, r2
 8022c52:	3b11      	subs	r3, #17
 8022c54:	f023 0303 	bic.w	r3, r3, #3
 8022c58:	3211      	adds	r2, #17
 8022c5a:	42a2      	cmp	r2, r4
 8022c5c:	bf88      	it	hi
 8022c5e:	2300      	movhi	r3, #0
 8022c60:	4418      	add	r0, r3
 8022c62:	2300      	movs	r3, #0
 8022c64:	4288      	cmp	r0, r1
 8022c66:	d305      	bcc.n	8022c74 <__copybits+0x40>
 8022c68:	bd70      	pop	{r4, r5, r6, pc}
 8022c6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8022c6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8022c72:	e7eb      	b.n	8022c4c <__copybits+0x18>
 8022c74:	f840 3b04 	str.w	r3, [r0], #4
 8022c78:	e7f4      	b.n	8022c64 <__copybits+0x30>

08022c7a <__any_on>:
 8022c7a:	f100 0214 	add.w	r2, r0, #20
 8022c7e:	6900      	ldr	r0, [r0, #16]
 8022c80:	114b      	asrs	r3, r1, #5
 8022c82:	4298      	cmp	r0, r3
 8022c84:	b510      	push	{r4, lr}
 8022c86:	db11      	blt.n	8022cac <__any_on+0x32>
 8022c88:	dd0a      	ble.n	8022ca0 <__any_on+0x26>
 8022c8a:	f011 011f 	ands.w	r1, r1, #31
 8022c8e:	d007      	beq.n	8022ca0 <__any_on+0x26>
 8022c90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022c94:	fa24 f001 	lsr.w	r0, r4, r1
 8022c98:	fa00 f101 	lsl.w	r1, r0, r1
 8022c9c:	428c      	cmp	r4, r1
 8022c9e:	d10b      	bne.n	8022cb8 <__any_on+0x3e>
 8022ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022ca4:	4293      	cmp	r3, r2
 8022ca6:	d803      	bhi.n	8022cb0 <__any_on+0x36>
 8022ca8:	2000      	movs	r0, #0
 8022caa:	bd10      	pop	{r4, pc}
 8022cac:	4603      	mov	r3, r0
 8022cae:	e7f7      	b.n	8022ca0 <__any_on+0x26>
 8022cb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022cb4:	2900      	cmp	r1, #0
 8022cb6:	d0f5      	beq.n	8022ca4 <__any_on+0x2a>
 8022cb8:	2001      	movs	r0, #1
 8022cba:	e7f6      	b.n	8022caa <__any_on+0x30>

08022cbc <_calloc_r>:
 8022cbc:	b513      	push	{r0, r1, r4, lr}
 8022cbe:	434a      	muls	r2, r1
 8022cc0:	4611      	mov	r1, r2
 8022cc2:	9201      	str	r2, [sp, #4]
 8022cc4:	f7fc f856 	bl	801ed74 <_malloc_r>
 8022cc8:	4604      	mov	r4, r0
 8022cca:	b118      	cbz	r0, 8022cd4 <_calloc_r+0x18>
 8022ccc:	9a01      	ldr	r2, [sp, #4]
 8022cce:	2100      	movs	r1, #0
 8022cd0:	f7fb fff8 	bl	801ecc4 <memset>
 8022cd4:	4620      	mov	r0, r4
 8022cd6:	b002      	add	sp, #8
 8022cd8:	bd10      	pop	{r4, pc}

08022cda <__ssputs_r>:
 8022cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cde:	688e      	ldr	r6, [r1, #8]
 8022ce0:	429e      	cmp	r6, r3
 8022ce2:	4682      	mov	sl, r0
 8022ce4:	460c      	mov	r4, r1
 8022ce6:	4690      	mov	r8, r2
 8022ce8:	461f      	mov	r7, r3
 8022cea:	d838      	bhi.n	8022d5e <__ssputs_r+0x84>
 8022cec:	898a      	ldrh	r2, [r1, #12]
 8022cee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022cf2:	d032      	beq.n	8022d5a <__ssputs_r+0x80>
 8022cf4:	6825      	ldr	r5, [r4, #0]
 8022cf6:	6909      	ldr	r1, [r1, #16]
 8022cf8:	eba5 0901 	sub.w	r9, r5, r1
 8022cfc:	6965      	ldr	r5, [r4, #20]
 8022cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022d06:	3301      	adds	r3, #1
 8022d08:	444b      	add	r3, r9
 8022d0a:	106d      	asrs	r5, r5, #1
 8022d0c:	429d      	cmp	r5, r3
 8022d0e:	bf38      	it	cc
 8022d10:	461d      	movcc	r5, r3
 8022d12:	0553      	lsls	r3, r2, #21
 8022d14:	d531      	bpl.n	8022d7a <__ssputs_r+0xa0>
 8022d16:	4629      	mov	r1, r5
 8022d18:	f7fc f82c 	bl	801ed74 <_malloc_r>
 8022d1c:	4606      	mov	r6, r0
 8022d1e:	b950      	cbnz	r0, 8022d36 <__ssputs_r+0x5c>
 8022d20:	230c      	movs	r3, #12
 8022d22:	f8ca 3000 	str.w	r3, [sl]
 8022d26:	89a3      	ldrh	r3, [r4, #12]
 8022d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d2c:	81a3      	strh	r3, [r4, #12]
 8022d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d36:	6921      	ldr	r1, [r4, #16]
 8022d38:	464a      	mov	r2, r9
 8022d3a:	f7fb ff9b 	bl	801ec74 <memcpy>
 8022d3e:	89a3      	ldrh	r3, [r4, #12]
 8022d40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022d48:	81a3      	strh	r3, [r4, #12]
 8022d4a:	6126      	str	r6, [r4, #16]
 8022d4c:	6165      	str	r5, [r4, #20]
 8022d4e:	444e      	add	r6, r9
 8022d50:	eba5 0509 	sub.w	r5, r5, r9
 8022d54:	6026      	str	r6, [r4, #0]
 8022d56:	60a5      	str	r5, [r4, #8]
 8022d58:	463e      	mov	r6, r7
 8022d5a:	42be      	cmp	r6, r7
 8022d5c:	d900      	bls.n	8022d60 <__ssputs_r+0x86>
 8022d5e:	463e      	mov	r6, r7
 8022d60:	4632      	mov	r2, r6
 8022d62:	6820      	ldr	r0, [r4, #0]
 8022d64:	4641      	mov	r1, r8
 8022d66:	f7fb ff93 	bl	801ec90 <memmove>
 8022d6a:	68a3      	ldr	r3, [r4, #8]
 8022d6c:	6822      	ldr	r2, [r4, #0]
 8022d6e:	1b9b      	subs	r3, r3, r6
 8022d70:	4432      	add	r2, r6
 8022d72:	60a3      	str	r3, [r4, #8]
 8022d74:	6022      	str	r2, [r4, #0]
 8022d76:	2000      	movs	r0, #0
 8022d78:	e7db      	b.n	8022d32 <__ssputs_r+0x58>
 8022d7a:	462a      	mov	r2, r5
 8022d7c:	f000 fb1a 	bl	80233b4 <_realloc_r>
 8022d80:	4606      	mov	r6, r0
 8022d82:	2800      	cmp	r0, #0
 8022d84:	d1e1      	bne.n	8022d4a <__ssputs_r+0x70>
 8022d86:	6921      	ldr	r1, [r4, #16]
 8022d88:	4650      	mov	r0, sl
 8022d8a:	f7fb ffa3 	bl	801ecd4 <_free_r>
 8022d8e:	e7c7      	b.n	8022d20 <__ssputs_r+0x46>

08022d90 <_svfiprintf_r>:
 8022d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d94:	4698      	mov	r8, r3
 8022d96:	898b      	ldrh	r3, [r1, #12]
 8022d98:	061b      	lsls	r3, r3, #24
 8022d9a:	b09d      	sub	sp, #116	; 0x74
 8022d9c:	4607      	mov	r7, r0
 8022d9e:	460d      	mov	r5, r1
 8022da0:	4614      	mov	r4, r2
 8022da2:	d50e      	bpl.n	8022dc2 <_svfiprintf_r+0x32>
 8022da4:	690b      	ldr	r3, [r1, #16]
 8022da6:	b963      	cbnz	r3, 8022dc2 <_svfiprintf_r+0x32>
 8022da8:	2140      	movs	r1, #64	; 0x40
 8022daa:	f7fb ffe3 	bl	801ed74 <_malloc_r>
 8022dae:	6028      	str	r0, [r5, #0]
 8022db0:	6128      	str	r0, [r5, #16]
 8022db2:	b920      	cbnz	r0, 8022dbe <_svfiprintf_r+0x2e>
 8022db4:	230c      	movs	r3, #12
 8022db6:	603b      	str	r3, [r7, #0]
 8022db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022dbc:	e0d1      	b.n	8022f62 <_svfiprintf_r+0x1d2>
 8022dbe:	2340      	movs	r3, #64	; 0x40
 8022dc0:	616b      	str	r3, [r5, #20]
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8022dc6:	2320      	movs	r3, #32
 8022dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8022dd0:	2330      	movs	r3, #48	; 0x30
 8022dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022f7c <_svfiprintf_r+0x1ec>
 8022dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022dda:	f04f 0901 	mov.w	r9, #1
 8022dde:	4623      	mov	r3, r4
 8022de0:	469a      	mov	sl, r3
 8022de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022de6:	b10a      	cbz	r2, 8022dec <_svfiprintf_r+0x5c>
 8022de8:	2a25      	cmp	r2, #37	; 0x25
 8022dea:	d1f9      	bne.n	8022de0 <_svfiprintf_r+0x50>
 8022dec:	ebba 0b04 	subs.w	fp, sl, r4
 8022df0:	d00b      	beq.n	8022e0a <_svfiprintf_r+0x7a>
 8022df2:	465b      	mov	r3, fp
 8022df4:	4622      	mov	r2, r4
 8022df6:	4629      	mov	r1, r5
 8022df8:	4638      	mov	r0, r7
 8022dfa:	f7ff ff6e 	bl	8022cda <__ssputs_r>
 8022dfe:	3001      	adds	r0, #1
 8022e00:	f000 80aa 	beq.w	8022f58 <_svfiprintf_r+0x1c8>
 8022e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e06:	445a      	add	r2, fp
 8022e08:	9209      	str	r2, [sp, #36]	; 0x24
 8022e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	f000 80a2 	beq.w	8022f58 <_svfiprintf_r+0x1c8>
 8022e14:	2300      	movs	r3, #0
 8022e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022e1e:	f10a 0a01 	add.w	sl, sl, #1
 8022e22:	9304      	str	r3, [sp, #16]
 8022e24:	9307      	str	r3, [sp, #28]
 8022e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8022e2c:	4654      	mov	r4, sl
 8022e2e:	2205      	movs	r2, #5
 8022e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e34:	4851      	ldr	r0, [pc, #324]	; (8022f7c <_svfiprintf_r+0x1ec>)
 8022e36:	f7dd fa5b 	bl	80002f0 <memchr>
 8022e3a:	9a04      	ldr	r2, [sp, #16]
 8022e3c:	b9d8      	cbnz	r0, 8022e76 <_svfiprintf_r+0xe6>
 8022e3e:	06d0      	lsls	r0, r2, #27
 8022e40:	bf44      	itt	mi
 8022e42:	2320      	movmi	r3, #32
 8022e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e48:	0711      	lsls	r1, r2, #28
 8022e4a:	bf44      	itt	mi
 8022e4c:	232b      	movmi	r3, #43	; 0x2b
 8022e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e52:	f89a 3000 	ldrb.w	r3, [sl]
 8022e56:	2b2a      	cmp	r3, #42	; 0x2a
 8022e58:	d015      	beq.n	8022e86 <_svfiprintf_r+0xf6>
 8022e5a:	9a07      	ldr	r2, [sp, #28]
 8022e5c:	4654      	mov	r4, sl
 8022e5e:	2000      	movs	r0, #0
 8022e60:	f04f 0c0a 	mov.w	ip, #10
 8022e64:	4621      	mov	r1, r4
 8022e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022e6a:	3b30      	subs	r3, #48	; 0x30
 8022e6c:	2b09      	cmp	r3, #9
 8022e6e:	d94e      	bls.n	8022f0e <_svfiprintf_r+0x17e>
 8022e70:	b1b0      	cbz	r0, 8022ea0 <_svfiprintf_r+0x110>
 8022e72:	9207      	str	r2, [sp, #28]
 8022e74:	e014      	b.n	8022ea0 <_svfiprintf_r+0x110>
 8022e76:	eba0 0308 	sub.w	r3, r0, r8
 8022e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8022e7e:	4313      	orrs	r3, r2
 8022e80:	9304      	str	r3, [sp, #16]
 8022e82:	46a2      	mov	sl, r4
 8022e84:	e7d2      	b.n	8022e2c <_svfiprintf_r+0x9c>
 8022e86:	9b03      	ldr	r3, [sp, #12]
 8022e88:	1d19      	adds	r1, r3, #4
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	9103      	str	r1, [sp, #12]
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	bfbb      	ittet	lt
 8022e92:	425b      	neglt	r3, r3
 8022e94:	f042 0202 	orrlt.w	r2, r2, #2
 8022e98:	9307      	strge	r3, [sp, #28]
 8022e9a:	9307      	strlt	r3, [sp, #28]
 8022e9c:	bfb8      	it	lt
 8022e9e:	9204      	strlt	r2, [sp, #16]
 8022ea0:	7823      	ldrb	r3, [r4, #0]
 8022ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8022ea4:	d10c      	bne.n	8022ec0 <_svfiprintf_r+0x130>
 8022ea6:	7863      	ldrb	r3, [r4, #1]
 8022ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8022eaa:	d135      	bne.n	8022f18 <_svfiprintf_r+0x188>
 8022eac:	9b03      	ldr	r3, [sp, #12]
 8022eae:	1d1a      	adds	r2, r3, #4
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	9203      	str	r2, [sp, #12]
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	bfb8      	it	lt
 8022eb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022ebc:	3402      	adds	r4, #2
 8022ebe:	9305      	str	r3, [sp, #20]
 8022ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022f8c <_svfiprintf_r+0x1fc>
 8022ec4:	7821      	ldrb	r1, [r4, #0]
 8022ec6:	2203      	movs	r2, #3
 8022ec8:	4650      	mov	r0, sl
 8022eca:	f7dd fa11 	bl	80002f0 <memchr>
 8022ece:	b140      	cbz	r0, 8022ee2 <_svfiprintf_r+0x152>
 8022ed0:	2340      	movs	r3, #64	; 0x40
 8022ed2:	eba0 000a 	sub.w	r0, r0, sl
 8022ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8022eda:	9b04      	ldr	r3, [sp, #16]
 8022edc:	4303      	orrs	r3, r0
 8022ede:	3401      	adds	r4, #1
 8022ee0:	9304      	str	r3, [sp, #16]
 8022ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ee6:	4826      	ldr	r0, [pc, #152]	; (8022f80 <_svfiprintf_r+0x1f0>)
 8022ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022eec:	2206      	movs	r2, #6
 8022eee:	f7dd f9ff 	bl	80002f0 <memchr>
 8022ef2:	2800      	cmp	r0, #0
 8022ef4:	d038      	beq.n	8022f68 <_svfiprintf_r+0x1d8>
 8022ef6:	4b23      	ldr	r3, [pc, #140]	; (8022f84 <_svfiprintf_r+0x1f4>)
 8022ef8:	bb1b      	cbnz	r3, 8022f42 <_svfiprintf_r+0x1b2>
 8022efa:	9b03      	ldr	r3, [sp, #12]
 8022efc:	3307      	adds	r3, #7
 8022efe:	f023 0307 	bic.w	r3, r3, #7
 8022f02:	3308      	adds	r3, #8
 8022f04:	9303      	str	r3, [sp, #12]
 8022f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f08:	4433      	add	r3, r6
 8022f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8022f0c:	e767      	b.n	8022dde <_svfiprintf_r+0x4e>
 8022f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022f12:	460c      	mov	r4, r1
 8022f14:	2001      	movs	r0, #1
 8022f16:	e7a5      	b.n	8022e64 <_svfiprintf_r+0xd4>
 8022f18:	2300      	movs	r3, #0
 8022f1a:	3401      	adds	r4, #1
 8022f1c:	9305      	str	r3, [sp, #20]
 8022f1e:	4619      	mov	r1, r3
 8022f20:	f04f 0c0a 	mov.w	ip, #10
 8022f24:	4620      	mov	r0, r4
 8022f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022f2a:	3a30      	subs	r2, #48	; 0x30
 8022f2c:	2a09      	cmp	r2, #9
 8022f2e:	d903      	bls.n	8022f38 <_svfiprintf_r+0x1a8>
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d0c5      	beq.n	8022ec0 <_svfiprintf_r+0x130>
 8022f34:	9105      	str	r1, [sp, #20]
 8022f36:	e7c3      	b.n	8022ec0 <_svfiprintf_r+0x130>
 8022f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8022f3c:	4604      	mov	r4, r0
 8022f3e:	2301      	movs	r3, #1
 8022f40:	e7f0      	b.n	8022f24 <_svfiprintf_r+0x194>
 8022f42:	ab03      	add	r3, sp, #12
 8022f44:	9300      	str	r3, [sp, #0]
 8022f46:	462a      	mov	r2, r5
 8022f48:	4b0f      	ldr	r3, [pc, #60]	; (8022f88 <_svfiprintf_r+0x1f8>)
 8022f4a:	a904      	add	r1, sp, #16
 8022f4c:	4638      	mov	r0, r7
 8022f4e:	f7fb fffb 	bl	801ef48 <_printf_float>
 8022f52:	1c42      	adds	r2, r0, #1
 8022f54:	4606      	mov	r6, r0
 8022f56:	d1d6      	bne.n	8022f06 <_svfiprintf_r+0x176>
 8022f58:	89ab      	ldrh	r3, [r5, #12]
 8022f5a:	065b      	lsls	r3, r3, #25
 8022f5c:	f53f af2c 	bmi.w	8022db8 <_svfiprintf_r+0x28>
 8022f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f62:	b01d      	add	sp, #116	; 0x74
 8022f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f68:	ab03      	add	r3, sp, #12
 8022f6a:	9300      	str	r3, [sp, #0]
 8022f6c:	462a      	mov	r2, r5
 8022f6e:	4b06      	ldr	r3, [pc, #24]	; (8022f88 <_svfiprintf_r+0x1f8>)
 8022f70:	a904      	add	r1, sp, #16
 8022f72:	4638      	mov	r0, r7
 8022f74:	f7fc fa74 	bl	801f460 <_printf_i>
 8022f78:	e7eb      	b.n	8022f52 <_svfiprintf_r+0x1c2>
 8022f7a:	bf00      	nop
 8022f7c:	080282e4 	.word	0x080282e4
 8022f80:	080282ee 	.word	0x080282ee
 8022f84:	0801ef49 	.word	0x0801ef49
 8022f88:	08022cdb 	.word	0x08022cdb
 8022f8c:	080282ea 	.word	0x080282ea

08022f90 <__sfputc_r>:
 8022f90:	6893      	ldr	r3, [r2, #8]
 8022f92:	3b01      	subs	r3, #1
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	b410      	push	{r4}
 8022f98:	6093      	str	r3, [r2, #8]
 8022f9a:	da08      	bge.n	8022fae <__sfputc_r+0x1e>
 8022f9c:	6994      	ldr	r4, [r2, #24]
 8022f9e:	42a3      	cmp	r3, r4
 8022fa0:	db01      	blt.n	8022fa6 <__sfputc_r+0x16>
 8022fa2:	290a      	cmp	r1, #10
 8022fa4:	d103      	bne.n	8022fae <__sfputc_r+0x1e>
 8022fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022faa:	f7fd bd17 	b.w	80209dc <__swbuf_r>
 8022fae:	6813      	ldr	r3, [r2, #0]
 8022fb0:	1c58      	adds	r0, r3, #1
 8022fb2:	6010      	str	r0, [r2, #0]
 8022fb4:	7019      	strb	r1, [r3, #0]
 8022fb6:	4608      	mov	r0, r1
 8022fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022fbc:	4770      	bx	lr

08022fbe <__sfputs_r>:
 8022fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fc0:	4606      	mov	r6, r0
 8022fc2:	460f      	mov	r7, r1
 8022fc4:	4614      	mov	r4, r2
 8022fc6:	18d5      	adds	r5, r2, r3
 8022fc8:	42ac      	cmp	r4, r5
 8022fca:	d101      	bne.n	8022fd0 <__sfputs_r+0x12>
 8022fcc:	2000      	movs	r0, #0
 8022fce:	e007      	b.n	8022fe0 <__sfputs_r+0x22>
 8022fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fd4:	463a      	mov	r2, r7
 8022fd6:	4630      	mov	r0, r6
 8022fd8:	f7ff ffda 	bl	8022f90 <__sfputc_r>
 8022fdc:	1c43      	adds	r3, r0, #1
 8022fde:	d1f3      	bne.n	8022fc8 <__sfputs_r+0xa>
 8022fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022fe4 <_vfiprintf_r>:
 8022fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fe8:	460d      	mov	r5, r1
 8022fea:	b09d      	sub	sp, #116	; 0x74
 8022fec:	4614      	mov	r4, r2
 8022fee:	4698      	mov	r8, r3
 8022ff0:	4606      	mov	r6, r0
 8022ff2:	b118      	cbz	r0, 8022ffc <_vfiprintf_r+0x18>
 8022ff4:	6983      	ldr	r3, [r0, #24]
 8022ff6:	b90b      	cbnz	r3, 8022ffc <_vfiprintf_r+0x18>
 8022ff8:	f7fe fcfc 	bl	80219f4 <__sinit>
 8022ffc:	4b89      	ldr	r3, [pc, #548]	; (8023224 <_vfiprintf_r+0x240>)
 8022ffe:	429d      	cmp	r5, r3
 8023000:	d11b      	bne.n	802303a <_vfiprintf_r+0x56>
 8023002:	6875      	ldr	r5, [r6, #4]
 8023004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023006:	07d9      	lsls	r1, r3, #31
 8023008:	d405      	bmi.n	8023016 <_vfiprintf_r+0x32>
 802300a:	89ab      	ldrh	r3, [r5, #12]
 802300c:	059a      	lsls	r2, r3, #22
 802300e:	d402      	bmi.n	8023016 <_vfiprintf_r+0x32>
 8023010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023012:	f7ff f912 	bl	802223a <__retarget_lock_acquire_recursive>
 8023016:	89ab      	ldrh	r3, [r5, #12]
 8023018:	071b      	lsls	r3, r3, #28
 802301a:	d501      	bpl.n	8023020 <_vfiprintf_r+0x3c>
 802301c:	692b      	ldr	r3, [r5, #16]
 802301e:	b9eb      	cbnz	r3, 802305c <_vfiprintf_r+0x78>
 8023020:	4629      	mov	r1, r5
 8023022:	4630      	mov	r0, r6
 8023024:	f7fd fd2c 	bl	8020a80 <__swsetup_r>
 8023028:	b1c0      	cbz	r0, 802305c <_vfiprintf_r+0x78>
 802302a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802302c:	07dc      	lsls	r4, r3, #31
 802302e:	d50e      	bpl.n	802304e <_vfiprintf_r+0x6a>
 8023030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023034:	b01d      	add	sp, #116	; 0x74
 8023036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802303a:	4b7b      	ldr	r3, [pc, #492]	; (8023228 <_vfiprintf_r+0x244>)
 802303c:	429d      	cmp	r5, r3
 802303e:	d101      	bne.n	8023044 <_vfiprintf_r+0x60>
 8023040:	68b5      	ldr	r5, [r6, #8]
 8023042:	e7df      	b.n	8023004 <_vfiprintf_r+0x20>
 8023044:	4b79      	ldr	r3, [pc, #484]	; (802322c <_vfiprintf_r+0x248>)
 8023046:	429d      	cmp	r5, r3
 8023048:	bf08      	it	eq
 802304a:	68f5      	ldreq	r5, [r6, #12]
 802304c:	e7da      	b.n	8023004 <_vfiprintf_r+0x20>
 802304e:	89ab      	ldrh	r3, [r5, #12]
 8023050:	0598      	lsls	r0, r3, #22
 8023052:	d4ed      	bmi.n	8023030 <_vfiprintf_r+0x4c>
 8023054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023056:	f7ff f8f1 	bl	802223c <__retarget_lock_release_recursive>
 802305a:	e7e9      	b.n	8023030 <_vfiprintf_r+0x4c>
 802305c:	2300      	movs	r3, #0
 802305e:	9309      	str	r3, [sp, #36]	; 0x24
 8023060:	2320      	movs	r3, #32
 8023062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023066:	f8cd 800c 	str.w	r8, [sp, #12]
 802306a:	2330      	movs	r3, #48	; 0x30
 802306c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023230 <_vfiprintf_r+0x24c>
 8023070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023074:	f04f 0901 	mov.w	r9, #1
 8023078:	4623      	mov	r3, r4
 802307a:	469a      	mov	sl, r3
 802307c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023080:	b10a      	cbz	r2, 8023086 <_vfiprintf_r+0xa2>
 8023082:	2a25      	cmp	r2, #37	; 0x25
 8023084:	d1f9      	bne.n	802307a <_vfiprintf_r+0x96>
 8023086:	ebba 0b04 	subs.w	fp, sl, r4
 802308a:	d00b      	beq.n	80230a4 <_vfiprintf_r+0xc0>
 802308c:	465b      	mov	r3, fp
 802308e:	4622      	mov	r2, r4
 8023090:	4629      	mov	r1, r5
 8023092:	4630      	mov	r0, r6
 8023094:	f7ff ff93 	bl	8022fbe <__sfputs_r>
 8023098:	3001      	adds	r0, #1
 802309a:	f000 80aa 	beq.w	80231f2 <_vfiprintf_r+0x20e>
 802309e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80230a0:	445a      	add	r2, fp
 80230a2:	9209      	str	r2, [sp, #36]	; 0x24
 80230a4:	f89a 3000 	ldrb.w	r3, [sl]
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	f000 80a2 	beq.w	80231f2 <_vfiprintf_r+0x20e>
 80230ae:	2300      	movs	r3, #0
 80230b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80230b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80230b8:	f10a 0a01 	add.w	sl, sl, #1
 80230bc:	9304      	str	r3, [sp, #16]
 80230be:	9307      	str	r3, [sp, #28]
 80230c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80230c4:	931a      	str	r3, [sp, #104]	; 0x68
 80230c6:	4654      	mov	r4, sl
 80230c8:	2205      	movs	r2, #5
 80230ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230ce:	4858      	ldr	r0, [pc, #352]	; (8023230 <_vfiprintf_r+0x24c>)
 80230d0:	f7dd f90e 	bl	80002f0 <memchr>
 80230d4:	9a04      	ldr	r2, [sp, #16]
 80230d6:	b9d8      	cbnz	r0, 8023110 <_vfiprintf_r+0x12c>
 80230d8:	06d1      	lsls	r1, r2, #27
 80230da:	bf44      	itt	mi
 80230dc:	2320      	movmi	r3, #32
 80230de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230e2:	0713      	lsls	r3, r2, #28
 80230e4:	bf44      	itt	mi
 80230e6:	232b      	movmi	r3, #43	; 0x2b
 80230e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230ec:	f89a 3000 	ldrb.w	r3, [sl]
 80230f0:	2b2a      	cmp	r3, #42	; 0x2a
 80230f2:	d015      	beq.n	8023120 <_vfiprintf_r+0x13c>
 80230f4:	9a07      	ldr	r2, [sp, #28]
 80230f6:	4654      	mov	r4, sl
 80230f8:	2000      	movs	r0, #0
 80230fa:	f04f 0c0a 	mov.w	ip, #10
 80230fe:	4621      	mov	r1, r4
 8023100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023104:	3b30      	subs	r3, #48	; 0x30
 8023106:	2b09      	cmp	r3, #9
 8023108:	d94e      	bls.n	80231a8 <_vfiprintf_r+0x1c4>
 802310a:	b1b0      	cbz	r0, 802313a <_vfiprintf_r+0x156>
 802310c:	9207      	str	r2, [sp, #28]
 802310e:	e014      	b.n	802313a <_vfiprintf_r+0x156>
 8023110:	eba0 0308 	sub.w	r3, r0, r8
 8023114:	fa09 f303 	lsl.w	r3, r9, r3
 8023118:	4313      	orrs	r3, r2
 802311a:	9304      	str	r3, [sp, #16]
 802311c:	46a2      	mov	sl, r4
 802311e:	e7d2      	b.n	80230c6 <_vfiprintf_r+0xe2>
 8023120:	9b03      	ldr	r3, [sp, #12]
 8023122:	1d19      	adds	r1, r3, #4
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	9103      	str	r1, [sp, #12]
 8023128:	2b00      	cmp	r3, #0
 802312a:	bfbb      	ittet	lt
 802312c:	425b      	neglt	r3, r3
 802312e:	f042 0202 	orrlt.w	r2, r2, #2
 8023132:	9307      	strge	r3, [sp, #28]
 8023134:	9307      	strlt	r3, [sp, #28]
 8023136:	bfb8      	it	lt
 8023138:	9204      	strlt	r2, [sp, #16]
 802313a:	7823      	ldrb	r3, [r4, #0]
 802313c:	2b2e      	cmp	r3, #46	; 0x2e
 802313e:	d10c      	bne.n	802315a <_vfiprintf_r+0x176>
 8023140:	7863      	ldrb	r3, [r4, #1]
 8023142:	2b2a      	cmp	r3, #42	; 0x2a
 8023144:	d135      	bne.n	80231b2 <_vfiprintf_r+0x1ce>
 8023146:	9b03      	ldr	r3, [sp, #12]
 8023148:	1d1a      	adds	r2, r3, #4
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	9203      	str	r2, [sp, #12]
 802314e:	2b00      	cmp	r3, #0
 8023150:	bfb8      	it	lt
 8023152:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023156:	3402      	adds	r4, #2
 8023158:	9305      	str	r3, [sp, #20]
 802315a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023240 <_vfiprintf_r+0x25c>
 802315e:	7821      	ldrb	r1, [r4, #0]
 8023160:	2203      	movs	r2, #3
 8023162:	4650      	mov	r0, sl
 8023164:	f7dd f8c4 	bl	80002f0 <memchr>
 8023168:	b140      	cbz	r0, 802317c <_vfiprintf_r+0x198>
 802316a:	2340      	movs	r3, #64	; 0x40
 802316c:	eba0 000a 	sub.w	r0, r0, sl
 8023170:	fa03 f000 	lsl.w	r0, r3, r0
 8023174:	9b04      	ldr	r3, [sp, #16]
 8023176:	4303      	orrs	r3, r0
 8023178:	3401      	adds	r4, #1
 802317a:	9304      	str	r3, [sp, #16]
 802317c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023180:	482c      	ldr	r0, [pc, #176]	; (8023234 <_vfiprintf_r+0x250>)
 8023182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023186:	2206      	movs	r2, #6
 8023188:	f7dd f8b2 	bl	80002f0 <memchr>
 802318c:	2800      	cmp	r0, #0
 802318e:	d03f      	beq.n	8023210 <_vfiprintf_r+0x22c>
 8023190:	4b29      	ldr	r3, [pc, #164]	; (8023238 <_vfiprintf_r+0x254>)
 8023192:	bb1b      	cbnz	r3, 80231dc <_vfiprintf_r+0x1f8>
 8023194:	9b03      	ldr	r3, [sp, #12]
 8023196:	3307      	adds	r3, #7
 8023198:	f023 0307 	bic.w	r3, r3, #7
 802319c:	3308      	adds	r3, #8
 802319e:	9303      	str	r3, [sp, #12]
 80231a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231a2:	443b      	add	r3, r7
 80231a4:	9309      	str	r3, [sp, #36]	; 0x24
 80231a6:	e767      	b.n	8023078 <_vfiprintf_r+0x94>
 80231a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80231ac:	460c      	mov	r4, r1
 80231ae:	2001      	movs	r0, #1
 80231b0:	e7a5      	b.n	80230fe <_vfiprintf_r+0x11a>
 80231b2:	2300      	movs	r3, #0
 80231b4:	3401      	adds	r4, #1
 80231b6:	9305      	str	r3, [sp, #20]
 80231b8:	4619      	mov	r1, r3
 80231ba:	f04f 0c0a 	mov.w	ip, #10
 80231be:	4620      	mov	r0, r4
 80231c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80231c4:	3a30      	subs	r2, #48	; 0x30
 80231c6:	2a09      	cmp	r2, #9
 80231c8:	d903      	bls.n	80231d2 <_vfiprintf_r+0x1ee>
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	d0c5      	beq.n	802315a <_vfiprintf_r+0x176>
 80231ce:	9105      	str	r1, [sp, #20]
 80231d0:	e7c3      	b.n	802315a <_vfiprintf_r+0x176>
 80231d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80231d6:	4604      	mov	r4, r0
 80231d8:	2301      	movs	r3, #1
 80231da:	e7f0      	b.n	80231be <_vfiprintf_r+0x1da>
 80231dc:	ab03      	add	r3, sp, #12
 80231de:	9300      	str	r3, [sp, #0]
 80231e0:	462a      	mov	r2, r5
 80231e2:	4b16      	ldr	r3, [pc, #88]	; (802323c <_vfiprintf_r+0x258>)
 80231e4:	a904      	add	r1, sp, #16
 80231e6:	4630      	mov	r0, r6
 80231e8:	f7fb feae 	bl	801ef48 <_printf_float>
 80231ec:	4607      	mov	r7, r0
 80231ee:	1c78      	adds	r0, r7, #1
 80231f0:	d1d6      	bne.n	80231a0 <_vfiprintf_r+0x1bc>
 80231f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80231f4:	07d9      	lsls	r1, r3, #31
 80231f6:	d405      	bmi.n	8023204 <_vfiprintf_r+0x220>
 80231f8:	89ab      	ldrh	r3, [r5, #12]
 80231fa:	059a      	lsls	r2, r3, #22
 80231fc:	d402      	bmi.n	8023204 <_vfiprintf_r+0x220>
 80231fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023200:	f7ff f81c 	bl	802223c <__retarget_lock_release_recursive>
 8023204:	89ab      	ldrh	r3, [r5, #12]
 8023206:	065b      	lsls	r3, r3, #25
 8023208:	f53f af12 	bmi.w	8023030 <_vfiprintf_r+0x4c>
 802320c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802320e:	e711      	b.n	8023034 <_vfiprintf_r+0x50>
 8023210:	ab03      	add	r3, sp, #12
 8023212:	9300      	str	r3, [sp, #0]
 8023214:	462a      	mov	r2, r5
 8023216:	4b09      	ldr	r3, [pc, #36]	; (802323c <_vfiprintf_r+0x258>)
 8023218:	a904      	add	r1, sp, #16
 802321a:	4630      	mov	r0, r6
 802321c:	f7fc f920 	bl	801f460 <_printf_i>
 8023220:	e7e4      	b.n	80231ec <_vfiprintf_r+0x208>
 8023222:	bf00      	nop
 8023224:	080280c4 	.word	0x080280c4
 8023228:	080280e4 	.word	0x080280e4
 802322c:	080280a4 	.word	0x080280a4
 8023230:	080282e4 	.word	0x080282e4
 8023234:	080282ee 	.word	0x080282ee
 8023238:	0801ef49 	.word	0x0801ef49
 802323c:	08022fbf 	.word	0x08022fbf
 8023240:	080282ea 	.word	0x080282ea
 8023244:	00000000 	.word	0x00000000

08023248 <nan>:
 8023248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023250 <nan+0x8>
 802324c:	4770      	bx	lr
 802324e:	bf00      	nop
 8023250:	00000000 	.word	0x00000000
 8023254:	7ff80000 	.word	0x7ff80000

08023258 <__sread>:
 8023258:	b510      	push	{r4, lr}
 802325a:	460c      	mov	r4, r1
 802325c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023260:	f000 f8ce 	bl	8023400 <_read_r>
 8023264:	2800      	cmp	r0, #0
 8023266:	bfab      	itete	ge
 8023268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802326a:	89a3      	ldrhlt	r3, [r4, #12]
 802326c:	181b      	addge	r3, r3, r0
 802326e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023272:	bfac      	ite	ge
 8023274:	6563      	strge	r3, [r4, #84]	; 0x54
 8023276:	81a3      	strhlt	r3, [r4, #12]
 8023278:	bd10      	pop	{r4, pc}

0802327a <__swrite>:
 802327a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802327e:	461f      	mov	r7, r3
 8023280:	898b      	ldrh	r3, [r1, #12]
 8023282:	05db      	lsls	r3, r3, #23
 8023284:	4605      	mov	r5, r0
 8023286:	460c      	mov	r4, r1
 8023288:	4616      	mov	r6, r2
 802328a:	d505      	bpl.n	8023298 <__swrite+0x1e>
 802328c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023290:	2302      	movs	r3, #2
 8023292:	2200      	movs	r2, #0
 8023294:	f000 f87c 	bl	8023390 <_lseek_r>
 8023298:	89a3      	ldrh	r3, [r4, #12]
 802329a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802329e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80232a2:	81a3      	strh	r3, [r4, #12]
 80232a4:	4632      	mov	r2, r6
 80232a6:	463b      	mov	r3, r7
 80232a8:	4628      	mov	r0, r5
 80232aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80232ae:	f000 b823 	b.w	80232f8 <_write_r>

080232b2 <__sseek>:
 80232b2:	b510      	push	{r4, lr}
 80232b4:	460c      	mov	r4, r1
 80232b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232ba:	f000 f869 	bl	8023390 <_lseek_r>
 80232be:	1c43      	adds	r3, r0, #1
 80232c0:	89a3      	ldrh	r3, [r4, #12]
 80232c2:	bf15      	itete	ne
 80232c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80232c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80232ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80232ce:	81a3      	strheq	r3, [r4, #12]
 80232d0:	bf18      	it	ne
 80232d2:	81a3      	strhne	r3, [r4, #12]
 80232d4:	bd10      	pop	{r4, pc}

080232d6 <__sclose>:
 80232d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232da:	f000 b827 	b.w	802332c <_close_r>

080232de <__ascii_wctomb>:
 80232de:	b149      	cbz	r1, 80232f4 <__ascii_wctomb+0x16>
 80232e0:	2aff      	cmp	r2, #255	; 0xff
 80232e2:	bf85      	ittet	hi
 80232e4:	238a      	movhi	r3, #138	; 0x8a
 80232e6:	6003      	strhi	r3, [r0, #0]
 80232e8:	700a      	strbls	r2, [r1, #0]
 80232ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80232ee:	bf98      	it	ls
 80232f0:	2001      	movls	r0, #1
 80232f2:	4770      	bx	lr
 80232f4:	4608      	mov	r0, r1
 80232f6:	4770      	bx	lr

080232f8 <_write_r>:
 80232f8:	b538      	push	{r3, r4, r5, lr}
 80232fa:	4d07      	ldr	r5, [pc, #28]	; (8023318 <_write_r+0x20>)
 80232fc:	4604      	mov	r4, r0
 80232fe:	4608      	mov	r0, r1
 8023300:	4611      	mov	r1, r2
 8023302:	2200      	movs	r2, #0
 8023304:	602a      	str	r2, [r5, #0]
 8023306:	461a      	mov	r2, r3
 8023308:	f7e0 f86b 	bl	80033e2 <_write>
 802330c:	1c43      	adds	r3, r0, #1
 802330e:	d102      	bne.n	8023316 <_write_r+0x1e>
 8023310:	682b      	ldr	r3, [r5, #0]
 8023312:	b103      	cbz	r3, 8023316 <_write_r+0x1e>
 8023314:	6023      	str	r3, [r4, #0]
 8023316:	bd38      	pop	{r3, r4, r5, pc}
 8023318:	2400b244 	.word	0x2400b244

0802331c <abort>:
 802331c:	b508      	push	{r3, lr}
 802331e:	2006      	movs	r0, #6
 8023320:	f000 f8a8 	bl	8023474 <raise>
 8023324:	2001      	movs	r0, #1
 8023326:	f7e0 f835 	bl	8003394 <_exit>
	...

0802332c <_close_r>:
 802332c:	b538      	push	{r3, r4, r5, lr}
 802332e:	4d06      	ldr	r5, [pc, #24]	; (8023348 <_close_r+0x1c>)
 8023330:	2300      	movs	r3, #0
 8023332:	4604      	mov	r4, r0
 8023334:	4608      	mov	r0, r1
 8023336:	602b      	str	r3, [r5, #0]
 8023338:	f7e0 f86f 	bl	800341a <_close>
 802333c:	1c43      	adds	r3, r0, #1
 802333e:	d102      	bne.n	8023346 <_close_r+0x1a>
 8023340:	682b      	ldr	r3, [r5, #0]
 8023342:	b103      	cbz	r3, 8023346 <_close_r+0x1a>
 8023344:	6023      	str	r3, [r4, #0]
 8023346:	bd38      	pop	{r3, r4, r5, pc}
 8023348:	2400b244 	.word	0x2400b244

0802334c <_fstat_r>:
 802334c:	b538      	push	{r3, r4, r5, lr}
 802334e:	4d07      	ldr	r5, [pc, #28]	; (802336c <_fstat_r+0x20>)
 8023350:	2300      	movs	r3, #0
 8023352:	4604      	mov	r4, r0
 8023354:	4608      	mov	r0, r1
 8023356:	4611      	mov	r1, r2
 8023358:	602b      	str	r3, [r5, #0]
 802335a:	f7e0 f86a 	bl	8003432 <_fstat>
 802335e:	1c43      	adds	r3, r0, #1
 8023360:	d102      	bne.n	8023368 <_fstat_r+0x1c>
 8023362:	682b      	ldr	r3, [r5, #0]
 8023364:	b103      	cbz	r3, 8023368 <_fstat_r+0x1c>
 8023366:	6023      	str	r3, [r4, #0]
 8023368:	bd38      	pop	{r3, r4, r5, pc}
 802336a:	bf00      	nop
 802336c:	2400b244 	.word	0x2400b244

08023370 <_isatty_r>:
 8023370:	b538      	push	{r3, r4, r5, lr}
 8023372:	4d06      	ldr	r5, [pc, #24]	; (802338c <_isatty_r+0x1c>)
 8023374:	2300      	movs	r3, #0
 8023376:	4604      	mov	r4, r0
 8023378:	4608      	mov	r0, r1
 802337a:	602b      	str	r3, [r5, #0]
 802337c:	f7e0 f869 	bl	8003452 <_isatty>
 8023380:	1c43      	adds	r3, r0, #1
 8023382:	d102      	bne.n	802338a <_isatty_r+0x1a>
 8023384:	682b      	ldr	r3, [r5, #0]
 8023386:	b103      	cbz	r3, 802338a <_isatty_r+0x1a>
 8023388:	6023      	str	r3, [r4, #0]
 802338a:	bd38      	pop	{r3, r4, r5, pc}
 802338c:	2400b244 	.word	0x2400b244

08023390 <_lseek_r>:
 8023390:	b538      	push	{r3, r4, r5, lr}
 8023392:	4d07      	ldr	r5, [pc, #28]	; (80233b0 <_lseek_r+0x20>)
 8023394:	4604      	mov	r4, r0
 8023396:	4608      	mov	r0, r1
 8023398:	4611      	mov	r1, r2
 802339a:	2200      	movs	r2, #0
 802339c:	602a      	str	r2, [r5, #0]
 802339e:	461a      	mov	r2, r3
 80233a0:	f7e0 f862 	bl	8003468 <_lseek>
 80233a4:	1c43      	adds	r3, r0, #1
 80233a6:	d102      	bne.n	80233ae <_lseek_r+0x1e>
 80233a8:	682b      	ldr	r3, [r5, #0]
 80233aa:	b103      	cbz	r3, 80233ae <_lseek_r+0x1e>
 80233ac:	6023      	str	r3, [r4, #0]
 80233ae:	bd38      	pop	{r3, r4, r5, pc}
 80233b0:	2400b244 	.word	0x2400b244

080233b4 <_realloc_r>:
 80233b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233b6:	4607      	mov	r7, r0
 80233b8:	4614      	mov	r4, r2
 80233ba:	460e      	mov	r6, r1
 80233bc:	b921      	cbnz	r1, 80233c8 <_realloc_r+0x14>
 80233be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80233c2:	4611      	mov	r1, r2
 80233c4:	f7fb bcd6 	b.w	801ed74 <_malloc_r>
 80233c8:	b922      	cbnz	r2, 80233d4 <_realloc_r+0x20>
 80233ca:	f7fb fc83 	bl	801ecd4 <_free_r>
 80233ce:	4625      	mov	r5, r4
 80233d0:	4628      	mov	r0, r5
 80233d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80233d4:	f000 f86a 	bl	80234ac <_malloc_usable_size_r>
 80233d8:	42a0      	cmp	r0, r4
 80233da:	d20f      	bcs.n	80233fc <_realloc_r+0x48>
 80233dc:	4621      	mov	r1, r4
 80233de:	4638      	mov	r0, r7
 80233e0:	f7fb fcc8 	bl	801ed74 <_malloc_r>
 80233e4:	4605      	mov	r5, r0
 80233e6:	2800      	cmp	r0, #0
 80233e8:	d0f2      	beq.n	80233d0 <_realloc_r+0x1c>
 80233ea:	4631      	mov	r1, r6
 80233ec:	4622      	mov	r2, r4
 80233ee:	f7fb fc41 	bl	801ec74 <memcpy>
 80233f2:	4631      	mov	r1, r6
 80233f4:	4638      	mov	r0, r7
 80233f6:	f7fb fc6d 	bl	801ecd4 <_free_r>
 80233fa:	e7e9      	b.n	80233d0 <_realloc_r+0x1c>
 80233fc:	4635      	mov	r5, r6
 80233fe:	e7e7      	b.n	80233d0 <_realloc_r+0x1c>

08023400 <_read_r>:
 8023400:	b538      	push	{r3, r4, r5, lr}
 8023402:	4d07      	ldr	r5, [pc, #28]	; (8023420 <_read_r+0x20>)
 8023404:	4604      	mov	r4, r0
 8023406:	4608      	mov	r0, r1
 8023408:	4611      	mov	r1, r2
 802340a:	2200      	movs	r2, #0
 802340c:	602a      	str	r2, [r5, #0]
 802340e:	461a      	mov	r2, r3
 8023410:	f7df ffca 	bl	80033a8 <_read>
 8023414:	1c43      	adds	r3, r0, #1
 8023416:	d102      	bne.n	802341e <_read_r+0x1e>
 8023418:	682b      	ldr	r3, [r5, #0]
 802341a:	b103      	cbz	r3, 802341e <_read_r+0x1e>
 802341c:	6023      	str	r3, [r4, #0]
 802341e:	bd38      	pop	{r3, r4, r5, pc}
 8023420:	2400b244 	.word	0x2400b244

08023424 <_raise_r>:
 8023424:	291f      	cmp	r1, #31
 8023426:	b538      	push	{r3, r4, r5, lr}
 8023428:	4604      	mov	r4, r0
 802342a:	460d      	mov	r5, r1
 802342c:	d904      	bls.n	8023438 <_raise_r+0x14>
 802342e:	2316      	movs	r3, #22
 8023430:	6003      	str	r3, [r0, #0]
 8023432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023436:	bd38      	pop	{r3, r4, r5, pc}
 8023438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802343a:	b112      	cbz	r2, 8023442 <_raise_r+0x1e>
 802343c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023440:	b94b      	cbnz	r3, 8023456 <_raise_r+0x32>
 8023442:	4620      	mov	r0, r4
 8023444:	f000 f830 	bl	80234a8 <_getpid_r>
 8023448:	462a      	mov	r2, r5
 802344a:	4601      	mov	r1, r0
 802344c:	4620      	mov	r0, r4
 802344e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023452:	f000 b817 	b.w	8023484 <_kill_r>
 8023456:	2b01      	cmp	r3, #1
 8023458:	d00a      	beq.n	8023470 <_raise_r+0x4c>
 802345a:	1c59      	adds	r1, r3, #1
 802345c:	d103      	bne.n	8023466 <_raise_r+0x42>
 802345e:	2316      	movs	r3, #22
 8023460:	6003      	str	r3, [r0, #0]
 8023462:	2001      	movs	r0, #1
 8023464:	e7e7      	b.n	8023436 <_raise_r+0x12>
 8023466:	2400      	movs	r4, #0
 8023468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802346c:	4628      	mov	r0, r5
 802346e:	4798      	blx	r3
 8023470:	2000      	movs	r0, #0
 8023472:	e7e0      	b.n	8023436 <_raise_r+0x12>

08023474 <raise>:
 8023474:	4b02      	ldr	r3, [pc, #8]	; (8023480 <raise+0xc>)
 8023476:	4601      	mov	r1, r0
 8023478:	6818      	ldr	r0, [r3, #0]
 802347a:	f7ff bfd3 	b.w	8023424 <_raise_r>
 802347e:	bf00      	nop
 8023480:	24003448 	.word	0x24003448

08023484 <_kill_r>:
 8023484:	b538      	push	{r3, r4, r5, lr}
 8023486:	4d07      	ldr	r5, [pc, #28]	; (80234a4 <_kill_r+0x20>)
 8023488:	2300      	movs	r3, #0
 802348a:	4604      	mov	r4, r0
 802348c:	4608      	mov	r0, r1
 802348e:	4611      	mov	r1, r2
 8023490:	602b      	str	r3, [r5, #0]
 8023492:	f7df ff6d 	bl	8003370 <_kill>
 8023496:	1c43      	adds	r3, r0, #1
 8023498:	d102      	bne.n	80234a0 <_kill_r+0x1c>
 802349a:	682b      	ldr	r3, [r5, #0]
 802349c:	b103      	cbz	r3, 80234a0 <_kill_r+0x1c>
 802349e:	6023      	str	r3, [r4, #0]
 80234a0:	bd38      	pop	{r3, r4, r5, pc}
 80234a2:	bf00      	nop
 80234a4:	2400b244 	.word	0x2400b244

080234a8 <_getpid_r>:
 80234a8:	f7df bf5a 	b.w	8003360 <_getpid>

080234ac <_malloc_usable_size_r>:
 80234ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80234b0:	1f18      	subs	r0, r3, #4
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	bfbc      	itt	lt
 80234b6:	580b      	ldrlt	r3, [r1, r0]
 80234b8:	18c0      	addlt	r0, r0, r3
 80234ba:	4770      	bx	lr

080234bc <checkint>:
 80234bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80234c0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80234c4:	429a      	cmp	r2, r3
 80234c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80234c8:	dd2b      	ble.n	8023522 <checkint+0x66>
 80234ca:	f240 4333 	movw	r3, #1075	; 0x433
 80234ce:	429a      	cmp	r2, r3
 80234d0:	dc25      	bgt.n	802351e <checkint+0x62>
 80234d2:	1a9b      	subs	r3, r3, r2
 80234d4:	f1a3 0620 	sub.w	r6, r3, #32
 80234d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80234dc:	fa02 f606 	lsl.w	r6, r2, r6
 80234e0:	fa02 f403 	lsl.w	r4, r2, r3
 80234e4:	f1c3 0520 	rsb	r5, r3, #32
 80234e8:	4334      	orrs	r4, r6
 80234ea:	fa22 f505 	lsr.w	r5, r2, r5
 80234ee:	432c      	orrs	r4, r5
 80234f0:	409a      	lsls	r2, r3
 80234f2:	ea20 0602 	bic.w	r6, r0, r2
 80234f6:	ea21 0704 	bic.w	r7, r1, r4
 80234fa:	ea56 0207 	orrs.w	r2, r6, r7
 80234fe:	f1a3 0420 	sub.w	r4, r3, #32
 8023502:	f1c3 0220 	rsb	r2, r3, #32
 8023506:	d10c      	bne.n	8023522 <checkint+0x66>
 8023508:	40d8      	lsrs	r0, r3
 802350a:	fa01 f302 	lsl.w	r3, r1, r2
 802350e:	4318      	orrs	r0, r3
 8023510:	40e1      	lsrs	r1, r4
 8023512:	4308      	orrs	r0, r1
 8023514:	f000 0301 	and.w	r3, r0, #1
 8023518:	f1c3 0002 	rsb	r0, r3, #2
 802351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802351e:	2002      	movs	r0, #2
 8023520:	e7fc      	b.n	802351c <checkint+0x60>
 8023522:	2000      	movs	r0, #0
 8023524:	e7fa      	b.n	802351c <checkint+0x60>
	...

08023528 <pow>:
 8023528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802352c:	ed2d 8b0a 	vpush	{d8-d12}
 8023530:	b09b      	sub	sp, #108	; 0x6c
 8023532:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023536:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802353a:	ed8d 1b00 	vstr	d1, [sp]
 802353e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8023542:	e9dd 6700 	ldrd	r6, r7, [sp]
 8023546:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 802354a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 802354e:	4288      	cmp	r0, r1
 8023550:	46cc      	mov	ip, r9
 8023552:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8023556:	d806      	bhi.n	8023566 <pow+0x3e>
 8023558:	f3c8 010a 	ubfx	r1, r8, #0, #11
 802355c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8023560:	297f      	cmp	r1, #127	; 0x7f
 8023562:	f240 81ab 	bls.w	80238bc <pow+0x394>
 8023566:	19b1      	adds	r1, r6, r6
 8023568:	9104      	str	r1, [sp, #16]
 802356a:	eb47 0107 	adc.w	r1, r7, r7
 802356e:	9105      	str	r1, [sp, #20]
 8023570:	9904      	ldr	r1, [sp, #16]
 8023572:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 8023576:	460a      	mov	r2, r1
 8023578:	9905      	ldr	r1, [sp, #20]
 802357a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 802357e:	460b      	mov	r3, r1
 8023580:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8023584:	f06f 0001 	mvn.w	r0, #1
 8023588:	4299      	cmp	r1, r3
 802358a:	bf08      	it	eq
 802358c:	4290      	cmpeq	r0, r2
 802358e:	d260      	bcs.n	8023652 <pow+0x12a>
 8023590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023594:	4313      	orrs	r3, r2
 8023596:	d11a      	bne.n	80235ce <pow+0xa6>
 8023598:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 802359c:	1923      	adds	r3, r4, r4
 802359e:	930c      	str	r3, [sp, #48]	; 0x30
 80235a0:	eb42 0302 	adc.w	r3, r2, r2
 80235a4:	930d      	str	r3, [sp, #52]	; 0x34
 80235a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80235aa:	4bcf      	ldr	r3, [pc, #828]	; (80238e8 <pow+0x3c0>)
 80235ac:	2200      	movs	r2, #0
 80235ae:	428b      	cmp	r3, r1
 80235b0:	bf08      	it	eq
 80235b2:	4282      	cmpeq	r2, r0
 80235b4:	f080 8265 	bcs.w	8023a82 <pow+0x55a>
 80235b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80235bc:	ed9d 6b00 	vldr	d6, [sp]
 80235c0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80235c4:	b01b      	add	sp, #108	; 0x6c
 80235c6:	ecbd 8b0a 	vpop	{d8-d12}
 80235ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235ce:	49c7      	ldr	r1, [pc, #796]	; (80238ec <pow+0x3c4>)
 80235d0:	2000      	movs	r0, #0
 80235d2:	428d      	cmp	r5, r1
 80235d4:	bf08      	it	eq
 80235d6:	4284      	cmpeq	r4, r0
 80235d8:	d10b      	bne.n	80235f2 <pow+0xca>
 80235da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80235de:	19b3      	adds	r3, r6, r6
 80235e0:	930e      	str	r3, [sp, #56]	; 0x38
 80235e2:	eb42 0302 	adc.w	r3, r2, r2
 80235e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80235e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80235ec:	4bbe      	ldr	r3, [pc, #760]	; (80238e8 <pow+0x3c0>)
 80235ee:	2200      	movs	r2, #0
 80235f0:	e7dd      	b.n	80235ae <pow+0x86>
 80235f2:	1921      	adds	r1, r4, r4
 80235f4:	9106      	str	r1, [sp, #24]
 80235f6:	eb45 0105 	adc.w	r1, r5, r5
 80235fa:	9107      	str	r1, [sp, #28]
 80235fc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8023600:	49bb      	ldr	r1, [pc, #748]	; (80238f0 <pow+0x3c8>)
 8023602:	2000      	movs	r0, #0
 8023604:	42a1      	cmp	r1, r4
 8023606:	bf08      	it	eq
 8023608:	4298      	cmpeq	r0, r3
 802360a:	d3d5      	bcc.n	80235b8 <pow+0x90>
 802360c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8023610:	428c      	cmp	r4, r1
 8023612:	bf08      	it	eq
 8023614:	4283      	cmpeq	r3, r0
 8023616:	d1cf      	bne.n	80235b8 <pow+0x90>
 8023618:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 802361c:	49b5      	ldr	r1, [pc, #724]	; (80238f4 <pow+0x3cc>)
 802361e:	2000      	movs	r0, #0
 8023620:	428c      	cmp	r4, r1
 8023622:	bf08      	it	eq
 8023624:	4283      	cmpeq	r3, r0
 8023626:	f000 822c 	beq.w	8023a82 <pow+0x55a>
 802362a:	49b3      	ldr	r1, [pc, #716]	; (80238f8 <pow+0x3d0>)
 802362c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023630:	42a1      	cmp	r1, r4
 8023632:	bf08      	it	eq
 8023634:	4298      	cmpeq	r0, r3
 8023636:	ea6f 0307 	mvn.w	r3, r7
 802363a:	bf34      	ite	cc
 802363c:	2201      	movcc	r2, #1
 802363e:	2200      	movcs	r2, #0
 8023640:	0fdb      	lsrs	r3, r3, #31
 8023642:	429a      	cmp	r2, r3
 8023644:	f040 821a 	bne.w	8023a7c <pow+0x554>
 8023648:	ed9d 7b00 	vldr	d7, [sp]
 802364c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8023650:	e7b8      	b.n	80235c4 <pow+0x9c>
 8023652:	1923      	adds	r3, r4, r4
 8023654:	9308      	str	r3, [sp, #32]
 8023656:	eb45 0305 	adc.w	r3, r5, r5
 802365a:	9309      	str	r3, [sp, #36]	; 0x24
 802365c:	9b08      	ldr	r3, [sp, #32]
 802365e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8023662:	9310      	str	r3, [sp, #64]	; 0x40
 8023664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023666:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 802366a:	9311      	str	r3, [sp, #68]	; 0x44
 802366c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8023670:	4299      	cmp	r1, r3
 8023672:	bf08      	it	eq
 8023674:	4290      	cmpeq	r0, r2
 8023676:	d22d      	bcs.n	80236d4 <pow+0x1ac>
 8023678:	ed9d 7b02 	vldr	d7, [sp, #8]
 802367c:	2c00      	cmp	r4, #0
 802367e:	f175 0300 	sbcs.w	r3, r5, #0
 8023682:	ee27 0b07 	vmul.f64	d0, d7, d7
 8023686:	da16      	bge.n	80236b6 <pow+0x18e>
 8023688:	4630      	mov	r0, r6
 802368a:	4639      	mov	r1, r7
 802368c:	f7ff ff16 	bl	80234bc <checkint>
 8023690:	2801      	cmp	r0, #1
 8023692:	d110      	bne.n	80236b6 <pow+0x18e>
 8023694:	eeb1 0b40 	vneg.f64	d0, d0
 8023698:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 802369c:	4323      	orrs	r3, r4
 802369e:	d10c      	bne.n	80236ba <pow+0x192>
 80236a0:	2e00      	cmp	r6, #0
 80236a2:	f177 0300 	sbcs.w	r3, r7, #0
 80236a6:	da8d      	bge.n	80235c4 <pow+0x9c>
 80236a8:	b01b      	add	sp, #108	; 0x6c
 80236aa:	ecbd 8b0a 	vpop	{d8-d12}
 80236ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236b2:	f000 bf25 	b.w	8024500 <__math_divzero>
 80236b6:	2000      	movs	r0, #0
 80236b8:	e7ee      	b.n	8023698 <pow+0x170>
 80236ba:	2e00      	cmp	r6, #0
 80236bc:	f177 0300 	sbcs.w	r3, r7, #0
 80236c0:	da80      	bge.n	80235c4 <pow+0x9c>
 80236c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80236c6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80236ca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80236ce:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80236d2:	e777      	b.n	80235c4 <pow+0x9c>
 80236d4:	2c00      	cmp	r4, #0
 80236d6:	f175 0300 	sbcs.w	r3, r5, #0
 80236da:	da35      	bge.n	8023748 <pow+0x220>
 80236dc:	4630      	mov	r0, r6
 80236de:	4639      	mov	r1, r7
 80236e0:	f7ff feec 	bl	80234bc <checkint>
 80236e4:	b940      	cbnz	r0, 80236f8 <pow+0x1d0>
 80236e6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80236ea:	b01b      	add	sp, #108	; 0x6c
 80236ec:	ecbd 8b0a 	vpop	{d8-d12}
 80236f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236f4:	f000 bf1c 	b.w	8024530 <__math_invalid>
 80236f8:	2801      	cmp	r0, #1
 80236fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80236fe:	bf14      	ite	ne
 8023700:	2000      	movne	r0, #0
 8023702:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8023706:	461d      	mov	r5, r3
 8023708:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 802370c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8023710:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8023714:	2a7f      	cmp	r2, #127	; 0x7f
 8023716:	d933      	bls.n	8023780 <pow+0x258>
 8023718:	4974      	ldr	r1, [pc, #464]	; (80238ec <pow+0x3c4>)
 802371a:	2000      	movs	r0, #0
 802371c:	428d      	cmp	r5, r1
 802371e:	bf08      	it	eq
 8023720:	4284      	cmpeq	r4, r0
 8023722:	f000 81ae 	beq.w	8023a82 <pow+0x55a>
 8023726:	f240 32bd 	movw	r2, #957	; 0x3bd
 802372a:	4293      	cmp	r3, r2
 802372c:	d80e      	bhi.n	802374c <pow+0x224>
 802372e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023732:	ed9d 7b00 	vldr	d7, [sp]
 8023736:	42a9      	cmp	r1, r5
 8023738:	bf08      	it	eq
 802373a:	42a0      	cmpeq	r0, r4
 802373c:	bf34      	ite	cc
 802373e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8023742:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8023746:	e73d      	b.n	80235c4 <pow+0x9c>
 8023748:	2000      	movs	r0, #0
 802374a:	e7df      	b.n	802370c <pow+0x1e4>
 802374c:	42a9      	cmp	r1, r5
 802374e:	bf08      	it	eq
 8023750:	42a0      	cmpeq	r0, r4
 8023752:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8023756:	bf2c      	ite	cs
 8023758:	2301      	movcs	r3, #1
 802375a:	2300      	movcc	r3, #0
 802375c:	4590      	cmp	r8, r2
 802375e:	bf8c      	ite	hi
 8023760:	f04f 0800 	movhi.w	r8, #0
 8023764:	f04f 0801 	movls.w	r8, #1
 8023768:	4543      	cmp	r3, r8
 802376a:	f04f 0000 	mov.w	r0, #0
 802376e:	f000 80af 	beq.w	80238d0 <pow+0x3a8>
 8023772:	b01b      	add	sp, #108	; 0x6c
 8023774:	ecbd 8b0a 	vpop	{d8-d12}
 8023778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802377c:	f000 beb8 	b.w	80244f0 <__math_oflow>
 8023780:	f1bc 0f00 	cmp.w	ip, #0
 8023784:	d10e      	bne.n	80237a4 <pow+0x27c>
 8023786:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80238e0 <pow+0x3b8>
 802378a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802378e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023792:	ec57 6b17 	vmov	r6, r7, d7
 8023796:	4b59      	ldr	r3, [pc, #356]	; (80238fc <pow+0x3d4>)
 8023798:	2100      	movs	r1, #0
 802379a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 802379e:	1874      	adds	r4, r6, r1
 80237a0:	eb42 0503 	adc.w	r5, r2, r3
 80237a4:	2300      	movs	r3, #0
 80237a6:	18e3      	adds	r3, r4, r3
 80237a8:	4b55      	ldr	r3, [pc, #340]	; (8023900 <pow+0x3d8>)
 80237aa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80237ae:	eb45 0303 	adc.w	r3, r5, r3
 80237b2:	1519      	asrs	r1, r3, #20
 80237b4:	ee03 1a10 	vmov	s6, r1
 80237b8:	0d1e      	lsrs	r6, r3, #20
 80237ba:	2100      	movs	r1, #0
 80237bc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80237c0:	0536      	lsls	r6, r6, #20
 80237c2:	1a63      	subs	r3, r4, r1
 80237c4:	9312      	str	r3, [sp, #72]	; 0x48
 80237c6:	eb65 0306 	sbc.w	r3, r5, r6
 80237ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80237cc:	4b4d      	ldr	r3, [pc, #308]	; (8023904 <pow+0x3dc>)
 80237ce:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 80237d2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80237d6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 80237da:	eea5 6b07 	vfma.f64	d6, d5, d7
 80237de:	ed93 7b00 	vldr	d7, [r3]
 80237e2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 80237e6:	ed93 4b02 	vldr	d4, [r3, #8]
 80237ea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80237ee:	eea3 5b07 	vfma.f64	d5, d3, d7
 80237f2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80237f6:	ee36 9b05 	vadd.f64	d9, d6, d5
 80237fa:	ee35 5b49 	vsub.f64	d5, d5, d9
 80237fe:	eea3 7b04 	vfma.f64	d7, d3, d4
 8023802:	ed93 4b04 	vldr	d4, [r3, #16]
 8023806:	ee35 5b06 	vadd.f64	d5, d5, d6
 802380a:	ee37 7b05 	vadd.f64	d7, d7, d5
 802380e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8023812:	ed93 3b08 	vldr	d3, [r3, #32]
 8023816:	ee26 0b04 	vmul.f64	d0, d6, d4
 802381a:	eeb0 8b40 	vmov.f64	d8, d0
 802381e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8023822:	ed93 4b06 	vldr	d4, [r3, #24]
 8023826:	ee26 ab00 	vmul.f64	d10, d6, d0
 802382a:	ee39 1b00 	vadd.f64	d1, d9, d0
 802382e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8023832:	eea6 4b03 	vfma.f64	d4, d6, d3
 8023836:	ee39 9b41 	vsub.f64	d9, d9, d1
 802383a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 802383e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8023842:	ee39 9b00 	vadd.f64	d9, d9, d0
 8023846:	eea6 3b02 	vfma.f64	d3, d6, d2
 802384a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 802384e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8023852:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8023856:	eea6 2b0c 	vfma.f64	d2, d6, d12
 802385a:	ed9d 6b00 	vldr	d6, [sp]
 802385e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8023862:	eea0 4b03 	vfma.f64	d4, d0, d3
 8023866:	eeaa 9b04 	vfma.f64	d9, d10, d4
 802386a:	ee31 7b09 	vadd.f64	d7, d1, d9
 802386e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023872:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023876:	eeb0 3b46 	vmov.f64	d3, d6
 802387a:	ee31 1b47 	vsub.f64	d1, d1, d7
 802387e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023882:	ee31 9b09 	vadd.f64	d9, d1, d9
 8023886:	ed9d 6b00 	vldr	d6, [sp]
 802388a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 802388e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8023892:	193c      	adds	r4, r7, r4
 8023894:	2c3e      	cmp	r4, #62	; 0x3e
 8023896:	ee96 3b07 	vfnms.f64	d3, d6, d7
 802389a:	eea6 3b09 	vfma.f64	d3, d6, d9
 802389e:	d934      	bls.n	802390a <pow+0x3e2>
 80238a0:	428c      	cmp	r4, r1
 80238a2:	da0d      	bge.n	80238c0 <pow+0x398>
 80238a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80238a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80238ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 80238b0:	2800      	cmp	r0, #0
 80238b2:	f43f ae87 	beq.w	80235c4 <pow+0x9c>
 80238b6:	eeb1 0b40 	vneg.f64	d0, d0
 80238ba:	e683      	b.n	80235c4 <pow+0x9c>
 80238bc:	2000      	movs	r0, #0
 80238be:	e771      	b.n	80237a4 <pow+0x27c>
 80238c0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 80238c4:	d920      	bls.n	8023908 <pow+0x3e0>
 80238c6:	2a00      	cmp	r2, #0
 80238c8:	f173 0300 	sbcs.w	r3, r3, #0
 80238cc:	f6bf af51 	bge.w	8023772 <pow+0x24a>
 80238d0:	b01b      	add	sp, #108	; 0x6c
 80238d2:	ecbd 8b0a 	vpop	{d8-d12}
 80238d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238da:	f000 be01 	b.w	80244e0 <__math_uflow>
 80238de:	bf00      	nop
 80238e0:	00000000 	.word	0x00000000
 80238e4:	43300000 	.word	0x43300000
 80238e8:	fff00000 	.word	0xfff00000
 80238ec:	3ff00000 	.word	0x3ff00000
 80238f0:	ffe00000 	.word	0xffe00000
 80238f4:	7fe00000 	.word	0x7fe00000
 80238f8:	7fdfffff 	.word	0x7fdfffff
 80238fc:	fcc00000 	.word	0xfcc00000
 8023900:	c0196aab 	.word	0xc0196aab
 8023904:	080282f8 	.word	0x080282f8
 8023908:	460f      	mov	r7, r1
 802390a:	4e65      	ldr	r6, [pc, #404]	; (8023aa0 <pow+0x578>)
 802390c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8023910:	ed96 6b02 	vldr	d6, [r6, #8]
 8023914:	ed96 7b00 	vldr	d7, [r6]
 8023918:	eeb0 5b46 	vmov.f64	d5, d6
 802391c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8023920:	ed8d 5b00 	vstr	d5, [sp]
 8023924:	ee35 6b46 	vsub.f64	d6, d5, d6
 8023928:	eeb0 5b44 	vmov.f64	d5, d4
 802392c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023930:	ed96 7b04 	vldr	d7, [r6, #16]
 8023934:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8023938:	eea6 5b07 	vfma.f64	d5, d6, d7
 802393c:	eeb0 7b45 	vmov.f64	d7, d5
 8023940:	ed96 5b06 	vldr	d5, [r6, #24]
 8023944:	1849      	adds	r1, r1, r1
 8023946:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 802394a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 802394e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8023952:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8023956:	ee33 3b07 	vadd.f64	d3, d3, d7
 802395a:	ee23 6b03 	vmul.f64	d6, d3, d3
 802395e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8023962:	ed96 5b08 	vldr	d5, [r6, #32]
 8023966:	ee33 7b07 	vadd.f64	d7, d3, d7
 802396a:	1814      	adds	r4, r2, r0
 802396c:	0365      	lsls	r5, r4, #13
 802396e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8023972:	eea3 5b04 	vfma.f64	d5, d3, d4
 8023976:	eea6 7b05 	vfma.f64	d7, d6, d5
 802397a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 802397e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8023982:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8023986:	2000      	movs	r0, #0
 8023988:	eb10 0a04 	adds.w	sl, r0, r4
 802398c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8023990:	eb45 0b0c 	adc.w	fp, r5, ip
 8023994:	eea6 7b05 	vfma.f64	d7, d6, d5
 8023998:	2f00      	cmp	r7, #0
 802399a:	d16a      	bne.n	8023a72 <pow+0x54a>
 802399c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80239a0:	4639      	mov	r1, r7
 80239a2:	ea50 0301 	orrs.w	r3, r0, r1
 80239a6:	f04f 0300 	mov.w	r3, #0
 80239aa:	d115      	bne.n	80239d8 <pow+0x4b0>
 80239ac:	eb1a 0303 	adds.w	r3, sl, r3
 80239b0:	ee0b 3a10 	vmov	s22, r3
 80239b4:	4b3b      	ldr	r3, [pc, #236]	; (8023aa4 <pow+0x57c>)
 80239b6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8023a88 <pow+0x560>
 80239ba:	eb4b 0303 	adc.w	r3, fp, r3
 80239be:	ee0b 3a90 	vmov	s23, r3
 80239c2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 80239c6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80239ca:	b01b      	add	sp, #108	; 0x6c
 80239cc:	ecbd 8b0a 	vpop	{d8-d12}
 80239d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239d4:	f000 bdc4 	b.w	8024560 <__math_check_oflow>
 80239d8:	eb1a 0303 	adds.w	r3, sl, r3
 80239dc:	930a      	str	r3, [sp, #40]	; 0x28
 80239de:	4b32      	ldr	r3, [pc, #200]	; (8023aa8 <pow+0x580>)
 80239e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80239e4:	eb4b 0303 	adc.w	r3, fp, r3
 80239e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80239ea:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80239ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 80239f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80239f6:	eeb0 3bc7 	vabs.f64	d3, d7
 80239fa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80239fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a02:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8023a90 <pow+0x568>
 8023a06:	d52b      	bpl.n	8023a60 <pow+0x538>
 8023a08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023a0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a14:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8023a18:	ee35 6b06 	vadd.f64	d6, d5, d6
 8023a1c:	bf48      	it	mi
 8023a1e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8023a22:	ee37 3b04 	vadd.f64	d3, d7, d4
 8023a26:	ee34 5b43 	vsub.f64	d5, d4, d3
 8023a2a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8023a2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023a32:	ee37 7b03 	vadd.f64	d7, d7, d3
 8023a36:	ee37 7b44 	vsub.f64	d7, d7, d4
 8023a3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a42:	d105      	bne.n	8023a50 <pow+0x528>
 8023a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023a46:	463a      	mov	r2, r7
 8023a48:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8023a4c:	ec43 2b17 	vmov	d7, r2, r3
 8023a50:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8023a54:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8023a58:	ee26 6b00 	vmul.f64	d6, d6, d0
 8023a5c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8023a60:	ee27 0b00 	vmul.f64	d0, d7, d0
 8023a64:	b01b      	add	sp, #108	; 0x6c
 8023a66:	ecbd 8b0a 	vpop	{d8-d12}
 8023a6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a6e:	f000 bd6e 	b.w	802454e <__math_check_uflow>
 8023a72:	ec4b ab10 	vmov	d0, sl, fp
 8023a76:	eea7 0b00 	vfma.f64	d0, d7, d0
 8023a7a:	e5a3      	b.n	80235c4 <pow+0x9c>
 8023a7c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8023a98 <pow+0x570>
 8023a80:	e5a0      	b.n	80235c4 <pow+0x9c>
 8023a82:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023a86:	e59d      	b.n	80235c4 <pow+0x9c>
 8023a88:	00000000 	.word	0x00000000
 8023a8c:	7f000000 	.word	0x7f000000
 8023a90:	00000000 	.word	0x00000000
 8023a94:	00100000 	.word	0x00100000
	...
 8023aa0:	080294c8 	.word	0x080294c8
 8023aa4:	c0f00000 	.word	0xc0f00000
 8023aa8:	3fe00000 	.word	0x3fe00000
 8023aac:	00000000 	.word	0x00000000

08023ab0 <sin>:
 8023ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023ab2:	eeb0 7b40 	vmov.f64	d7, d0
 8023ab6:	ee17 3a90 	vmov	r3, s15
 8023aba:	4a1f      	ldr	r2, [pc, #124]	; (8023b38 <sin+0x88>)
 8023abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023ac0:	4293      	cmp	r3, r2
 8023ac2:	dc05      	bgt.n	8023ad0 <sin+0x20>
 8023ac4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8023b30 <sin+0x80>
 8023ac8:	2000      	movs	r0, #0
 8023aca:	f000 fc95 	bl	80243f8 <__kernel_sin>
 8023ace:	e004      	b.n	8023ada <sin+0x2a>
 8023ad0:	4a1a      	ldr	r2, [pc, #104]	; (8023b3c <sin+0x8c>)
 8023ad2:	4293      	cmp	r3, r2
 8023ad4:	dd04      	ble.n	8023ae0 <sin+0x30>
 8023ad6:	ee30 0b40 	vsub.f64	d0, d0, d0
 8023ada:	b005      	add	sp, #20
 8023adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ae0:	4668      	mov	r0, sp
 8023ae2:	f000 f859 	bl	8023b98 <__ieee754_rem_pio2>
 8023ae6:	f000 0003 	and.w	r0, r0, #3
 8023aea:	2801      	cmp	r0, #1
 8023aec:	d008      	beq.n	8023b00 <sin+0x50>
 8023aee:	2802      	cmp	r0, #2
 8023af0:	d00d      	beq.n	8023b0e <sin+0x5e>
 8023af2:	b9b0      	cbnz	r0, 8023b22 <sin+0x72>
 8023af4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023af8:	ed9d 0b00 	vldr	d0, [sp]
 8023afc:	2001      	movs	r0, #1
 8023afe:	e7e4      	b.n	8023aca <sin+0x1a>
 8023b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023b04:	ed9d 0b00 	vldr	d0, [sp]
 8023b08:	f000 f98a 	bl	8023e20 <__kernel_cos>
 8023b0c:	e7e5      	b.n	8023ada <sin+0x2a>
 8023b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023b12:	ed9d 0b00 	vldr	d0, [sp]
 8023b16:	2001      	movs	r0, #1
 8023b18:	f000 fc6e 	bl	80243f8 <__kernel_sin>
 8023b1c:	eeb1 0b40 	vneg.f64	d0, d0
 8023b20:	e7db      	b.n	8023ada <sin+0x2a>
 8023b22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023b26:	ed9d 0b00 	vldr	d0, [sp]
 8023b2a:	f000 f979 	bl	8023e20 <__kernel_cos>
 8023b2e:	e7f5      	b.n	8023b1c <sin+0x6c>
	...
 8023b38:	3fe921fb 	.word	0x3fe921fb
 8023b3c:	7fefffff 	.word	0x7fefffff

08023b40 <sqrt>:
 8023b40:	b508      	push	{r3, lr}
 8023b42:	ed2d 8b04 	vpush	{d8-d9}
 8023b46:	eeb0 8b40 	vmov.f64	d8, d0
 8023b4a:	f000 f965 	bl	8023e18 <__ieee754_sqrt>
 8023b4e:	4b10      	ldr	r3, [pc, #64]	; (8023b90 <sqrt+0x50>)
 8023b50:	f993 3000 	ldrsb.w	r3, [r3]
 8023b54:	3301      	adds	r3, #1
 8023b56:	d011      	beq.n	8023b7c <sqrt+0x3c>
 8023b58:	eeb4 8b48 	vcmp.f64	d8, d8
 8023b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b60:	d60c      	bvs.n	8023b7c <sqrt+0x3c>
 8023b62:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8023b88 <sqrt+0x48>
 8023b66:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8023b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b6e:	d505      	bpl.n	8023b7c <sqrt+0x3c>
 8023b70:	f7fd fe20 	bl	80217b4 <__errno>
 8023b74:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8023b78:	2321      	movs	r3, #33	; 0x21
 8023b7a:	6003      	str	r3, [r0, #0]
 8023b7c:	ecbd 8b04 	vpop	{d8-d9}
 8023b80:	bd08      	pop	{r3, pc}
 8023b82:	bf00      	nop
 8023b84:	f3af 8000 	nop.w
	...
 8023b90:	2400361c 	.word	0x2400361c
 8023b94:	00000000 	.word	0x00000000

08023b98 <__ieee754_rem_pio2>:
 8023b98:	b570      	push	{r4, r5, r6, lr}
 8023b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8023b9e:	ee17 5a90 	vmov	r5, s15
 8023ba2:	4b97      	ldr	r3, [pc, #604]	; (8023e00 <__ieee754_rem_pio2+0x268>)
 8023ba4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023ba8:	429e      	cmp	r6, r3
 8023baa:	b088      	sub	sp, #32
 8023bac:	4604      	mov	r4, r0
 8023bae:	dc07      	bgt.n	8023bc0 <__ieee754_rem_pio2+0x28>
 8023bb0:	2200      	movs	r2, #0
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	ed84 0b00 	vstr	d0, [r4]
 8023bb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023bbc:	2000      	movs	r0, #0
 8023bbe:	e01b      	b.n	8023bf8 <__ieee754_rem_pio2+0x60>
 8023bc0:	4b90      	ldr	r3, [pc, #576]	; (8023e04 <__ieee754_rem_pio2+0x26c>)
 8023bc2:	429e      	cmp	r6, r3
 8023bc4:	dc3b      	bgt.n	8023c3e <__ieee754_rem_pio2+0xa6>
 8023bc6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8023bca:	2d00      	cmp	r5, #0
 8023bcc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8023dc0 <__ieee754_rem_pio2+0x228>
 8023bd0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8023bd4:	dd19      	ble.n	8023c0a <__ieee754_rem_pio2+0x72>
 8023bd6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8023bda:	429e      	cmp	r6, r3
 8023bdc:	d00e      	beq.n	8023bfc <__ieee754_rem_pio2+0x64>
 8023bde:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8023dc8 <__ieee754_rem_pio2+0x230>
 8023be2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8023be6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8023bea:	ed84 5b00 	vstr	d5, [r4]
 8023bee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023bf2:	ed84 7b02 	vstr	d7, [r4, #8]
 8023bf6:	2001      	movs	r0, #1
 8023bf8:	b008      	add	sp, #32
 8023bfa:	bd70      	pop	{r4, r5, r6, pc}
 8023bfc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8023dd0 <__ieee754_rem_pio2+0x238>
 8023c00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023c04:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8023dd8 <__ieee754_rem_pio2+0x240>
 8023c08:	e7eb      	b.n	8023be2 <__ieee754_rem_pio2+0x4a>
 8023c0a:	429e      	cmp	r6, r3
 8023c0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8023c10:	d00e      	beq.n	8023c30 <__ieee754_rem_pio2+0x98>
 8023c12:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8023dc8 <__ieee754_rem_pio2+0x230>
 8023c16:	ee37 5b06 	vadd.f64	d5, d7, d6
 8023c1a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8023c1e:	ed84 5b00 	vstr	d5, [r4]
 8023c22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023c2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8023c2e:	e7e3      	b.n	8023bf8 <__ieee754_rem_pio2+0x60>
 8023c30:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8023dd0 <__ieee754_rem_pio2+0x238>
 8023c34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023c38:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8023dd8 <__ieee754_rem_pio2+0x240>
 8023c3c:	e7eb      	b.n	8023c16 <__ieee754_rem_pio2+0x7e>
 8023c3e:	4b72      	ldr	r3, [pc, #456]	; (8023e08 <__ieee754_rem_pio2+0x270>)
 8023c40:	429e      	cmp	r6, r3
 8023c42:	dc6e      	bgt.n	8023d22 <__ieee754_rem_pio2+0x18a>
 8023c44:	f000 fca0 	bl	8024588 <fabs>
 8023c48:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8023c4c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8023de0 <__ieee754_rem_pio2+0x248>
 8023c50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8023c54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8023c58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8023c5c:	ee17 0a90 	vmov	r0, s15
 8023c60:	eeb1 4b45 	vneg.f64	d4, d5
 8023c64:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8023dc0 <__ieee754_rem_pio2+0x228>
 8023c68:	eea5 0b47 	vfms.f64	d0, d5, d7
 8023c6c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8023dc8 <__ieee754_rem_pio2+0x230>
 8023c70:	281f      	cmp	r0, #31
 8023c72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8023c76:	ee30 6b47 	vsub.f64	d6, d0, d7
 8023c7a:	dc08      	bgt.n	8023c8e <__ieee754_rem_pio2+0xf6>
 8023c7c:	4b63      	ldr	r3, [pc, #396]	; (8023e0c <__ieee754_rem_pio2+0x274>)
 8023c7e:	1e42      	subs	r2, r0, #1
 8023c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c84:	42b3      	cmp	r3, r6
 8023c86:	d002      	beq.n	8023c8e <__ieee754_rem_pio2+0xf6>
 8023c88:	ed84 6b00 	vstr	d6, [r4]
 8023c8c:	e024      	b.n	8023cd8 <__ieee754_rem_pio2+0x140>
 8023c8e:	ee16 3a90 	vmov	r3, s13
 8023c92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8023c96:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8023c9a:	2b10      	cmp	r3, #16
 8023c9c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8023ca0:	ddf2      	ble.n	8023c88 <__ieee754_rem_pio2+0xf0>
 8023ca2:	eeb0 6b40 	vmov.f64	d6, d0
 8023ca6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8023dd0 <__ieee754_rem_pio2+0x238>
 8023caa:	eea4 6b03 	vfma.f64	d6, d4, d3
 8023cae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8023cb2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8023cb6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8023dd8 <__ieee754_rem_pio2+0x240>
 8023cba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8023cbe:	ee36 3b47 	vsub.f64	d3, d6, d7
 8023cc2:	ee13 3a90 	vmov	r3, s7
 8023cc6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8023cca:	1ad3      	subs	r3, r2, r3
 8023ccc:	2b31      	cmp	r3, #49	; 0x31
 8023cce:	dc17      	bgt.n	8023d00 <__ieee754_rem_pio2+0x168>
 8023cd0:	eeb0 0b46 	vmov.f64	d0, d6
 8023cd4:	ed84 3b00 	vstr	d3, [r4]
 8023cd8:	ed94 6b00 	vldr	d6, [r4]
 8023cdc:	2d00      	cmp	r5, #0
 8023cde:	ee30 0b46 	vsub.f64	d0, d0, d6
 8023ce2:	ee30 7b47 	vsub.f64	d7, d0, d7
 8023ce6:	ed84 7b02 	vstr	d7, [r4, #8]
 8023cea:	da85      	bge.n	8023bf8 <__ieee754_rem_pio2+0x60>
 8023cec:	eeb1 6b46 	vneg.f64	d6, d6
 8023cf0:	ed84 6b00 	vstr	d6, [r4]
 8023cf4:	eeb1 7b47 	vneg.f64	d7, d7
 8023cf8:	4240      	negs	r0, r0
 8023cfa:	ed84 7b02 	vstr	d7, [r4, #8]
 8023cfe:	e77b      	b.n	8023bf8 <__ieee754_rem_pio2+0x60>
 8023d00:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8023de8 <__ieee754_rem_pio2+0x250>
 8023d04:	eeb0 0b46 	vmov.f64	d0, d6
 8023d08:	eea4 0b03 	vfma.f64	d0, d4, d3
 8023d0c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8023d10:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8023df0 <__ieee754_rem_pio2+0x258>
 8023d14:	eea4 7b03 	vfma.f64	d7, d4, d3
 8023d18:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8023d1c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8023d20:	e7b2      	b.n	8023c88 <__ieee754_rem_pio2+0xf0>
 8023d22:	4b3b      	ldr	r3, [pc, #236]	; (8023e10 <__ieee754_rem_pio2+0x278>)
 8023d24:	429e      	cmp	r6, r3
 8023d26:	dd06      	ble.n	8023d36 <__ieee754_rem_pio2+0x19e>
 8023d28:	ee30 7b40 	vsub.f64	d7, d0, d0
 8023d2c:	ed80 7b02 	vstr	d7, [r0, #8]
 8023d30:	ed80 7b00 	vstr	d7, [r0]
 8023d34:	e742      	b.n	8023bbc <__ieee754_rem_pio2+0x24>
 8023d36:	1532      	asrs	r2, r6, #20
 8023d38:	ee10 0a10 	vmov	r0, s0
 8023d3c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8023d40:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8023d44:	ec41 0b17 	vmov	d7, r0, r1
 8023d48:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8023d4c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8023df8 <__ieee754_rem_pio2+0x260>
 8023d50:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8023d54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023d58:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023d5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8023d60:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8023d64:	a902      	add	r1, sp, #8
 8023d66:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8023d6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023d6e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8023d72:	ee27 7b05 	vmul.f64	d7, d7, d5
 8023d76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023d7a:	2603      	movs	r6, #3
 8023d7c:	4608      	mov	r0, r1
 8023d7e:	ed91 7b04 	vldr	d7, [r1, #16]
 8023d82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d8a:	4633      	mov	r3, r6
 8023d8c:	f1a1 0108 	sub.w	r1, r1, #8
 8023d90:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8023d94:	d0f3      	beq.n	8023d7e <__ieee754_rem_pio2+0x1e6>
 8023d96:	491f      	ldr	r1, [pc, #124]	; (8023e14 <__ieee754_rem_pio2+0x27c>)
 8023d98:	9101      	str	r1, [sp, #4]
 8023d9a:	2102      	movs	r1, #2
 8023d9c:	9100      	str	r1, [sp, #0]
 8023d9e:	4621      	mov	r1, r4
 8023da0:	f000 f8aa 	bl	8023ef8 <__kernel_rem_pio2>
 8023da4:	2d00      	cmp	r5, #0
 8023da6:	f6bf af27 	bge.w	8023bf8 <__ieee754_rem_pio2+0x60>
 8023daa:	ed94 7b00 	vldr	d7, [r4]
 8023dae:	eeb1 7b47 	vneg.f64	d7, d7
 8023db2:	ed84 7b00 	vstr	d7, [r4]
 8023db6:	ed94 7b02 	vldr	d7, [r4, #8]
 8023dba:	e79b      	b.n	8023cf4 <__ieee754_rem_pio2+0x15c>
 8023dbc:	f3af 8000 	nop.w
 8023dc0:	54400000 	.word	0x54400000
 8023dc4:	3ff921fb 	.word	0x3ff921fb
 8023dc8:	1a626331 	.word	0x1a626331
 8023dcc:	3dd0b461 	.word	0x3dd0b461
 8023dd0:	1a600000 	.word	0x1a600000
 8023dd4:	3dd0b461 	.word	0x3dd0b461
 8023dd8:	2e037073 	.word	0x2e037073
 8023ddc:	3ba3198a 	.word	0x3ba3198a
 8023de0:	6dc9c883 	.word	0x6dc9c883
 8023de4:	3fe45f30 	.word	0x3fe45f30
 8023de8:	2e000000 	.word	0x2e000000
 8023dec:	3ba3198a 	.word	0x3ba3198a
 8023df0:	252049c1 	.word	0x252049c1
 8023df4:	397b839a 	.word	0x397b839a
 8023df8:	00000000 	.word	0x00000000
 8023dfc:	41700000 	.word	0x41700000
 8023e00:	3fe921fb 	.word	0x3fe921fb
 8023e04:	4002d97b 	.word	0x4002d97b
 8023e08:	413921fb 	.word	0x413921fb
 8023e0c:	08029340 	.word	0x08029340
 8023e10:	7fefffff 	.word	0x7fefffff
 8023e14:	080293c0 	.word	0x080293c0

08023e18 <__ieee754_sqrt>:
 8023e18:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8023e1c:	4770      	bx	lr
	...

08023e20 <__kernel_cos>:
 8023e20:	ee10 1a90 	vmov	r1, s1
 8023e24:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8023e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8023e2c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8023e30:	da05      	bge.n	8023e3e <__kernel_cos+0x1e>
 8023e32:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8023e36:	ee17 3a90 	vmov	r3, s15
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	d03d      	beq.n	8023eba <__kernel_cos+0x9a>
 8023e3e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8023e42:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8023ec0 <__kernel_cos+0xa0>
 8023e46:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8023ec8 <__kernel_cos+0xa8>
 8023e4a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8023e4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8023ed0 <__kernel_cos+0xb0>
 8023e52:	eea6 7b03 	vfma.f64	d7, d6, d3
 8023e56:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8023ed8 <__kernel_cos+0xb8>
 8023e5a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8023e5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8023ee0 <__kernel_cos+0xc0>
 8023e62:	4b23      	ldr	r3, [pc, #140]	; (8023ef0 <__kernel_cos+0xd0>)
 8023e64:	eea6 7b03 	vfma.f64	d7, d6, d3
 8023e68:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8023ee8 <__kernel_cos+0xc8>
 8023e6c:	4299      	cmp	r1, r3
 8023e6e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8023e72:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8023e76:	ee26 5b03 	vmul.f64	d5, d6, d3
 8023e7a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8023e7e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8023e82:	eea3 6b05 	vfma.f64	d6, d3, d5
 8023e86:	dc04      	bgt.n	8023e92 <__kernel_cos+0x72>
 8023e88:	ee37 6b46 	vsub.f64	d6, d7, d6
 8023e8c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8023e90:	4770      	bx	lr
 8023e92:	4b18      	ldr	r3, [pc, #96]	; (8023ef4 <__kernel_cos+0xd4>)
 8023e94:	4299      	cmp	r1, r3
 8023e96:	dc0d      	bgt.n	8023eb4 <__kernel_cos+0x94>
 8023e98:	2200      	movs	r2, #0
 8023e9a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8023e9e:	ec43 2b15 	vmov	d5, r2, r3
 8023ea2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8023ea6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8023eaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023eae:	ee30 0b47 	vsub.f64	d0, d0, d7
 8023eb2:	4770      	bx	lr
 8023eb4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8023eb8:	e7f3      	b.n	8023ea2 <__kernel_cos+0x82>
 8023eba:	eeb0 0b44 	vmov.f64	d0, d4
 8023ebe:	4770      	bx	lr
 8023ec0:	be8838d4 	.word	0xbe8838d4
 8023ec4:	bda8fae9 	.word	0xbda8fae9
 8023ec8:	bdb4b1c4 	.word	0xbdb4b1c4
 8023ecc:	3e21ee9e 	.word	0x3e21ee9e
 8023ed0:	809c52ad 	.word	0x809c52ad
 8023ed4:	be927e4f 	.word	0xbe927e4f
 8023ed8:	19cb1590 	.word	0x19cb1590
 8023edc:	3efa01a0 	.word	0x3efa01a0
 8023ee0:	16c15177 	.word	0x16c15177
 8023ee4:	bf56c16c 	.word	0xbf56c16c
 8023ee8:	5555554c 	.word	0x5555554c
 8023eec:	3fa55555 	.word	0x3fa55555
 8023ef0:	3fd33332 	.word	0x3fd33332
 8023ef4:	3fe90000 	.word	0x3fe90000

08023ef8 <__kernel_rem_pio2>:
 8023ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023efc:	ed2d 8b06 	vpush	{d8-d10}
 8023f00:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8023f04:	469b      	mov	fp, r3
 8023f06:	460f      	mov	r7, r1
 8023f08:	4bcf      	ldr	r3, [pc, #828]	; (8024248 <__kernel_rem_pio2+0x350>)
 8023f0a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8023f0c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8023f10:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8023f14:	9000      	str	r0, [sp, #0]
 8023f16:	f112 0f14 	cmn.w	r2, #20
 8023f1a:	bfa8      	it	ge
 8023f1c:	2318      	movge	r3, #24
 8023f1e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8023f22:	bfb8      	it	lt
 8023f24:	2300      	movlt	r3, #0
 8023f26:	f06f 0417 	mvn.w	r4, #23
 8023f2a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8024230 <__kernel_rem_pio2+0x338>
 8023f2e:	bfa4      	itt	ge
 8023f30:	f1a2 0a03 	subge.w	sl, r2, #3
 8023f34:	fb9a f3f3 	sdivge	r3, sl, r3
 8023f38:	fb03 4404 	mla	r4, r3, r4, r4
 8023f3c:	1a5d      	subs	r5, r3, r1
 8023f3e:	4414      	add	r4, r2
 8023f40:	eb09 0601 	add.w	r6, r9, r1
 8023f44:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8023f48:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8023f4c:	2200      	movs	r2, #0
 8023f4e:	42b2      	cmp	r2, r6
 8023f50:	dd12      	ble.n	8023f78 <__kernel_rem_pio2+0x80>
 8023f52:	aa18      	add	r2, sp, #96	; 0x60
 8023f54:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8023f58:	460e      	mov	r6, r1
 8023f5a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8023f5e:	f1cb 0a01 	rsb	sl, fp, #1
 8023f62:	eb0a 0006 	add.w	r0, sl, r6
 8023f66:	4581      	cmp	r9, r0
 8023f68:	db25      	blt.n	8023fb6 <__kernel_rem_pio2+0xbe>
 8023f6a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8024230 <__kernel_rem_pio2+0x338>
 8023f6e:	f8dd e000 	ldr.w	lr, [sp]
 8023f72:	4615      	mov	r5, r2
 8023f74:	2000      	movs	r0, #0
 8023f76:	e015      	b.n	8023fa4 <__kernel_rem_pio2+0xac>
 8023f78:	42d5      	cmn	r5, r2
 8023f7a:	d409      	bmi.n	8023f90 <__kernel_rem_pio2+0x98>
 8023f7c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8023f80:	ee07 0a90 	vmov	s15, r0
 8023f84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023f88:	eca8 7b02 	vstmia	r8!, {d7}
 8023f8c:	3201      	adds	r2, #1
 8023f8e:	e7de      	b.n	8023f4e <__kernel_rem_pio2+0x56>
 8023f90:	eeb0 7b46 	vmov.f64	d7, d6
 8023f94:	e7f8      	b.n	8023f88 <__kernel_rem_pio2+0x90>
 8023f96:	ecbe 5b02 	vldmia	lr!, {d5}
 8023f9a:	ed95 6b00 	vldr	d6, [r5]
 8023f9e:	3001      	adds	r0, #1
 8023fa0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8023fa4:	4288      	cmp	r0, r1
 8023fa6:	f1a5 0508 	sub.w	r5, r5, #8
 8023faa:	ddf4      	ble.n	8023f96 <__kernel_rem_pio2+0x9e>
 8023fac:	eca8 7b02 	vstmia	r8!, {d7}
 8023fb0:	3208      	adds	r2, #8
 8023fb2:	3601      	adds	r6, #1
 8023fb4:	e7d5      	b.n	8023f62 <__kernel_rem_pio2+0x6a>
 8023fb6:	aa04      	add	r2, sp, #16
 8023fb8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8024238 <__kernel_rem_pio2+0x340>
 8023fbc:	ed9f aba0 	vldr	d10, [pc, #640]	; 8024240 <__kernel_rem_pio2+0x348>
 8023fc0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8023fc4:	9201      	str	r2, [sp, #4]
 8023fc6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8023fca:	464e      	mov	r6, r9
 8023fcc:	ab90      	add	r3, sp, #576	; 0x240
 8023fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023fd2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8023fd6:	ab04      	add	r3, sp, #16
 8023fd8:	4618      	mov	r0, r3
 8023fda:	4632      	mov	r2, r6
 8023fdc:	2a00      	cmp	r2, #0
 8023fde:	dc4e      	bgt.n	802407e <__kernel_rem_pio2+0x186>
 8023fe0:	4620      	mov	r0, r4
 8023fe2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023fe6:	f000 fb4f 	bl	8024688 <scalbn>
 8023fea:	eeb0 8b40 	vmov.f64	d8, d0
 8023fee:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8023ff2:	ee28 0b00 	vmul.f64	d0, d8, d0
 8023ff6:	f000 fad3 	bl	80245a0 <floor>
 8023ffa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8023ffe:	eea0 8b47 	vfms.f64	d8, d0, d7
 8024002:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8024006:	2c00      	cmp	r4, #0
 8024008:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 802400c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8024010:	ee38 8b40 	vsub.f64	d8, d8, d0
 8024014:	ee17 8a90 	vmov	r8, s15
 8024018:	dd46      	ble.n	80240a8 <__kernel_rem_pio2+0x1b0>
 802401a:	1e70      	subs	r0, r6, #1
 802401c:	aa04      	add	r2, sp, #16
 802401e:	f1c4 0c18 	rsb	ip, r4, #24
 8024022:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8024026:	fa45 f20c 	asr.w	r2, r5, ip
 802402a:	4490      	add	r8, r2
 802402c:	fa02 f20c 	lsl.w	r2, r2, ip
 8024030:	1aad      	subs	r5, r5, r2
 8024032:	aa04      	add	r2, sp, #16
 8024034:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8024038:	f1c4 0217 	rsb	r2, r4, #23
 802403c:	4115      	asrs	r5, r2
 802403e:	2d00      	cmp	r5, #0
 8024040:	dd41      	ble.n	80240c6 <__kernel_rem_pio2+0x1ce>
 8024042:	f04f 0c00 	mov.w	ip, #0
 8024046:	f108 0801 	add.w	r8, r8, #1
 802404a:	4660      	mov	r0, ip
 802404c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8024050:	4566      	cmp	r6, ip
 8024052:	dc69      	bgt.n	8024128 <__kernel_rem_pio2+0x230>
 8024054:	2c00      	cmp	r4, #0
 8024056:	dd03      	ble.n	8024060 <__kernel_rem_pio2+0x168>
 8024058:	2c01      	cmp	r4, #1
 802405a:	d076      	beq.n	802414a <__kernel_rem_pio2+0x252>
 802405c:	2c02      	cmp	r4, #2
 802405e:	d07f      	beq.n	8024160 <__kernel_rem_pio2+0x268>
 8024060:	2d02      	cmp	r5, #2
 8024062:	d130      	bne.n	80240c6 <__kernel_rem_pio2+0x1ce>
 8024064:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024068:	ee30 8b48 	vsub.f64	d8, d0, d8
 802406c:	b358      	cbz	r0, 80240c6 <__kernel_rem_pio2+0x1ce>
 802406e:	4620      	mov	r0, r4
 8024070:	9102      	str	r1, [sp, #8]
 8024072:	f000 fb09 	bl	8024688 <scalbn>
 8024076:	9902      	ldr	r1, [sp, #8]
 8024078:	ee38 8b40 	vsub.f64	d8, d8, d0
 802407c:	e023      	b.n	80240c6 <__kernel_rem_pio2+0x1ce>
 802407e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8024082:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8024086:	3a01      	subs	r2, #1
 8024088:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802408c:	ad68      	add	r5, sp, #416	; 0x1a0
 802408e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8024092:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8024096:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 802409a:	eca0 0a01 	vstmia	r0!, {s0}
 802409e:	ed95 0b00 	vldr	d0, [r5]
 80240a2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80240a6:	e799      	b.n	8023fdc <__kernel_rem_pio2+0xe4>
 80240a8:	d105      	bne.n	80240b6 <__kernel_rem_pio2+0x1be>
 80240aa:	1e72      	subs	r2, r6, #1
 80240ac:	a804      	add	r0, sp, #16
 80240ae:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80240b2:	15ed      	asrs	r5, r5, #23
 80240b4:	e7c3      	b.n	802403e <__kernel_rem_pio2+0x146>
 80240b6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80240ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80240be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240c2:	da2f      	bge.n	8024124 <__kernel_rem_pio2+0x22c>
 80240c4:	2500      	movs	r5, #0
 80240c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80240ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240ce:	f040 8087 	bne.w	80241e0 <__kernel_rem_pio2+0x2e8>
 80240d2:	1e73      	subs	r3, r6, #1
 80240d4:	4618      	mov	r0, r3
 80240d6:	f04f 0c00 	mov.w	ip, #0
 80240da:	4548      	cmp	r0, r9
 80240dc:	da47      	bge.n	802416e <__kernel_rem_pio2+0x276>
 80240de:	f1bc 0f00 	cmp.w	ip, #0
 80240e2:	d070      	beq.n	80241c6 <__kernel_rem_pio2+0x2ce>
 80240e4:	aa04      	add	r2, sp, #16
 80240e6:	3c18      	subs	r4, #24
 80240e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80240ec:	2a00      	cmp	r2, #0
 80240ee:	d075      	beq.n	80241dc <__kernel_rem_pio2+0x2e4>
 80240f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80240f4:	4620      	mov	r0, r4
 80240f6:	9300      	str	r3, [sp, #0]
 80240f8:	f000 fac6 	bl	8024688 <scalbn>
 80240fc:	9b00      	ldr	r3, [sp, #0]
 80240fe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8024238 <__kernel_rem_pio2+0x340>
 8024102:	461a      	mov	r2, r3
 8024104:	2a00      	cmp	r2, #0
 8024106:	f280 80ac 	bge.w	8024262 <__kernel_rem_pio2+0x36a>
 802410a:	4619      	mov	r1, r3
 802410c:	2000      	movs	r0, #0
 802410e:	2900      	cmp	r1, #0
 8024110:	f2c0 80cd 	blt.w	80242ae <__kernel_rem_pio2+0x3b6>
 8024114:	aa68      	add	r2, sp, #416	; 0x1a0
 8024116:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 802411a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8024230 <__kernel_rem_pio2+0x338>
 802411e:	4e4b      	ldr	r6, [pc, #300]	; (802424c <__kernel_rem_pio2+0x354>)
 8024120:	2200      	movs	r2, #0
 8024122:	e0b8      	b.n	8024296 <__kernel_rem_pio2+0x39e>
 8024124:	2502      	movs	r5, #2
 8024126:	e78c      	b.n	8024042 <__kernel_rem_pio2+0x14a>
 8024128:	681a      	ldr	r2, [r3, #0]
 802412a:	b948      	cbnz	r0, 8024140 <__kernel_rem_pio2+0x248>
 802412c:	b11a      	cbz	r2, 8024136 <__kernel_rem_pio2+0x23e>
 802412e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8024132:	601a      	str	r2, [r3, #0]
 8024134:	2201      	movs	r2, #1
 8024136:	f10c 0c01 	add.w	ip, ip, #1
 802413a:	3304      	adds	r3, #4
 802413c:	4610      	mov	r0, r2
 802413e:	e787      	b.n	8024050 <__kernel_rem_pio2+0x158>
 8024140:	ebae 0202 	sub.w	r2, lr, r2
 8024144:	601a      	str	r2, [r3, #0]
 8024146:	4602      	mov	r2, r0
 8024148:	e7f5      	b.n	8024136 <__kernel_rem_pio2+0x23e>
 802414a:	1e72      	subs	r2, r6, #1
 802414c:	ab04      	add	r3, sp, #16
 802414e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024152:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024156:	f10d 0c10 	add.w	ip, sp, #16
 802415a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 802415e:	e77f      	b.n	8024060 <__kernel_rem_pio2+0x168>
 8024160:	1e72      	subs	r2, r6, #1
 8024162:	ab04      	add	r3, sp, #16
 8024164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024168:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802416c:	e7f3      	b.n	8024156 <__kernel_rem_pio2+0x25e>
 802416e:	aa04      	add	r2, sp, #16
 8024170:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8024174:	3801      	subs	r0, #1
 8024176:	ea4c 0c02 	orr.w	ip, ip, r2
 802417a:	e7ae      	b.n	80240da <__kernel_rem_pio2+0x1e2>
 802417c:	3001      	adds	r0, #1
 802417e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024182:	2a00      	cmp	r2, #0
 8024184:	d0fa      	beq.n	802417c <__kernel_rem_pio2+0x284>
 8024186:	eb06 020b 	add.w	r2, r6, fp
 802418a:	ad18      	add	r5, sp, #96	; 0x60
 802418c:	1c73      	adds	r3, r6, #1
 802418e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8024192:	4406      	add	r6, r0
 8024194:	429e      	cmp	r6, r3
 8024196:	f6ff af19 	blt.w	8023fcc <__kernel_rem_pio2+0xd4>
 802419a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 802419e:	9d00      	ldr	r5, [sp, #0]
 80241a0:	ee07 0a90 	vmov	s15, r0
 80241a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80241a8:	2000      	movs	r0, #0
 80241aa:	eca2 7b02 	vstmia	r2!, {d7}
 80241ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024230 <__kernel_rem_pio2+0x338>
 80241b2:	4694      	mov	ip, r2
 80241b4:	4288      	cmp	r0, r1
 80241b6:	dd09      	ble.n	80241cc <__kernel_rem_pio2+0x2d4>
 80241b8:	a868      	add	r0, sp, #416	; 0x1a0
 80241ba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80241be:	ed80 7b00 	vstr	d7, [r0]
 80241c2:	3301      	adds	r3, #1
 80241c4:	e7e6      	b.n	8024194 <__kernel_rem_pio2+0x29c>
 80241c6:	9b01      	ldr	r3, [sp, #4]
 80241c8:	2001      	movs	r0, #1
 80241ca:	e7d8      	b.n	802417e <__kernel_rem_pio2+0x286>
 80241cc:	ecb5 5b02 	vldmia	r5!, {d5}
 80241d0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80241d4:	3001      	adds	r0, #1
 80241d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80241da:	e7eb      	b.n	80241b4 <__kernel_rem_pio2+0x2bc>
 80241dc:	3b01      	subs	r3, #1
 80241de:	e781      	b.n	80240e4 <__kernel_rem_pio2+0x1ec>
 80241e0:	4260      	negs	r0, r4
 80241e2:	eeb0 0b48 	vmov.f64	d0, d8
 80241e6:	f000 fa4f 	bl	8024688 <scalbn>
 80241ea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8024240 <__kernel_rem_pio2+0x348>
 80241ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80241f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241f6:	db2b      	blt.n	8024250 <__kernel_rem_pio2+0x358>
 80241f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8024238 <__kernel_rem_pio2+0x340>
 80241fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8024200:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8024204:	aa04      	add	r2, sp, #16
 8024206:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802420a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802420e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8024212:	a904      	add	r1, sp, #16
 8024214:	ee10 3a10 	vmov	r3, s0
 8024218:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802421c:	ee17 2a10 	vmov	r2, s14
 8024220:	1c73      	adds	r3, r6, #1
 8024222:	3418      	adds	r4, #24
 8024224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8024228:	e762      	b.n	80240f0 <__kernel_rem_pio2+0x1f8>
 802422a:	bf00      	nop
 802422c:	f3af 8000 	nop.w
	...
 802423c:	3e700000 	.word	0x3e700000
 8024240:	00000000 	.word	0x00000000
 8024244:	41700000 	.word	0x41700000
 8024248:	08029d78 	.word	0x08029d78
 802424c:	08029d38 	.word	0x08029d38
 8024250:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8024254:	aa04      	add	r2, sp, #16
 8024256:	ee10 3a10 	vmov	r3, s0
 802425a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802425e:	4633      	mov	r3, r6
 8024260:	e746      	b.n	80240f0 <__kernel_rem_pio2+0x1f8>
 8024262:	a804      	add	r0, sp, #16
 8024264:	a968      	add	r1, sp, #416	; 0x1a0
 8024266:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 802426a:	9000      	str	r0, [sp, #0]
 802426c:	ee07 0a90 	vmov	s15, r0
 8024270:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8024274:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024278:	3a01      	subs	r2, #1
 802427a:	ee27 7b00 	vmul.f64	d7, d7, d0
 802427e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8024282:	ed81 7b00 	vstr	d7, [r1]
 8024286:	e73d      	b.n	8024104 <__kernel_rem_pio2+0x20c>
 8024288:	ecb6 5b02 	vldmia	r6!, {d5}
 802428c:	ecb4 6b02 	vldmia	r4!, {d6}
 8024290:	3201      	adds	r2, #1
 8024292:	eea5 7b06 	vfma.f64	d7, d5, d6
 8024296:	454a      	cmp	r2, r9
 8024298:	dc01      	bgt.n	802429e <__kernel_rem_pio2+0x3a6>
 802429a:	4290      	cmp	r0, r2
 802429c:	daf4      	bge.n	8024288 <__kernel_rem_pio2+0x390>
 802429e:	aa40      	add	r2, sp, #256	; 0x100
 80242a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80242a4:	ed82 7b00 	vstr	d7, [r2]
 80242a8:	3901      	subs	r1, #1
 80242aa:	3001      	adds	r0, #1
 80242ac:	e72f      	b.n	802410e <__kernel_rem_pio2+0x216>
 80242ae:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80242b0:	2a02      	cmp	r2, #2
 80242b2:	dc0a      	bgt.n	80242ca <__kernel_rem_pio2+0x3d2>
 80242b4:	2a00      	cmp	r2, #0
 80242b6:	dc5a      	bgt.n	802436e <__kernel_rem_pio2+0x476>
 80242b8:	d039      	beq.n	802432e <__kernel_rem_pio2+0x436>
 80242ba:	f008 0007 	and.w	r0, r8, #7
 80242be:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80242c2:	ecbd 8b06 	vpop	{d8-d10}
 80242c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ca:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80242cc:	2a03      	cmp	r2, #3
 80242ce:	d1f4      	bne.n	80242ba <__kernel_rem_pio2+0x3c2>
 80242d0:	aa40      	add	r2, sp, #256	; 0x100
 80242d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80242d6:	4611      	mov	r1, r2
 80242d8:	4618      	mov	r0, r3
 80242da:	2800      	cmp	r0, #0
 80242dc:	f1a1 0108 	sub.w	r1, r1, #8
 80242e0:	dc52      	bgt.n	8024388 <__kernel_rem_pio2+0x490>
 80242e2:	4619      	mov	r1, r3
 80242e4:	2901      	cmp	r1, #1
 80242e6:	f1a2 0208 	sub.w	r2, r2, #8
 80242ea:	dc5d      	bgt.n	80243a8 <__kernel_rem_pio2+0x4b0>
 80242ec:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80243f0 <__kernel_rem_pio2+0x4f8>
 80242f0:	2b01      	cmp	r3, #1
 80242f2:	dc69      	bgt.n	80243c8 <__kernel_rem_pio2+0x4d0>
 80242f4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80242f8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80242fc:	2d00      	cmp	r5, #0
 80242fe:	d16c      	bne.n	80243da <__kernel_rem_pio2+0x4e2>
 8024300:	ed87 5b00 	vstr	d5, [r7]
 8024304:	ed87 6b02 	vstr	d6, [r7, #8]
 8024308:	ed87 7b04 	vstr	d7, [r7, #16]
 802430c:	e7d5      	b.n	80242ba <__kernel_rem_pio2+0x3c2>
 802430e:	aa40      	add	r2, sp, #256	; 0x100
 8024310:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8024314:	ed92 6b00 	vldr	d6, [r2]
 8024318:	3b01      	subs	r3, #1
 802431a:	ee37 7b06 	vadd.f64	d7, d7, d6
 802431e:	2b00      	cmp	r3, #0
 8024320:	daf5      	bge.n	802430e <__kernel_rem_pio2+0x416>
 8024322:	b10d      	cbz	r5, 8024328 <__kernel_rem_pio2+0x430>
 8024324:	eeb1 7b47 	vneg.f64	d7, d7
 8024328:	ed87 7b00 	vstr	d7, [r7]
 802432c:	e7c5      	b.n	80242ba <__kernel_rem_pio2+0x3c2>
 802432e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80243f0 <__kernel_rem_pio2+0x4f8>
 8024332:	e7f4      	b.n	802431e <__kernel_rem_pio2+0x426>
 8024334:	a940      	add	r1, sp, #256	; 0x100
 8024336:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802433a:	ed91 7b00 	vldr	d7, [r1]
 802433e:	3a01      	subs	r2, #1
 8024340:	ee36 6b07 	vadd.f64	d6, d6, d7
 8024344:	2a00      	cmp	r2, #0
 8024346:	daf5      	bge.n	8024334 <__kernel_rem_pio2+0x43c>
 8024348:	b1ad      	cbz	r5, 8024376 <__kernel_rem_pio2+0x47e>
 802434a:	eeb1 7b46 	vneg.f64	d7, d6
 802434e:	ed87 7b00 	vstr	d7, [r7]
 8024352:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8024356:	a942      	add	r1, sp, #264	; 0x108
 8024358:	2201      	movs	r2, #1
 802435a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802435e:	4293      	cmp	r3, r2
 8024360:	da0c      	bge.n	802437c <__kernel_rem_pio2+0x484>
 8024362:	b10d      	cbz	r5, 8024368 <__kernel_rem_pio2+0x470>
 8024364:	eeb1 7b47 	vneg.f64	d7, d7
 8024368:	ed87 7b02 	vstr	d7, [r7, #8]
 802436c:	e7a5      	b.n	80242ba <__kernel_rem_pio2+0x3c2>
 802436e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80243f0 <__kernel_rem_pio2+0x4f8>
 8024372:	461a      	mov	r2, r3
 8024374:	e7e6      	b.n	8024344 <__kernel_rem_pio2+0x44c>
 8024376:	eeb0 7b46 	vmov.f64	d7, d6
 802437a:	e7e8      	b.n	802434e <__kernel_rem_pio2+0x456>
 802437c:	ecb1 6b02 	vldmia	r1!, {d6}
 8024380:	3201      	adds	r2, #1
 8024382:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024386:	e7ea      	b.n	802435e <__kernel_rem_pio2+0x466>
 8024388:	ed91 7b00 	vldr	d7, [r1]
 802438c:	ed91 5b02 	vldr	d5, [r1, #8]
 8024390:	3801      	subs	r0, #1
 8024392:	ee37 6b05 	vadd.f64	d6, d7, d5
 8024396:	ee37 7b46 	vsub.f64	d7, d7, d6
 802439a:	ed81 6b00 	vstr	d6, [r1]
 802439e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80243a2:	ed81 7b02 	vstr	d7, [r1, #8]
 80243a6:	e798      	b.n	80242da <__kernel_rem_pio2+0x3e2>
 80243a8:	ed92 7b00 	vldr	d7, [r2]
 80243ac:	ed92 5b02 	vldr	d5, [r2, #8]
 80243b0:	3901      	subs	r1, #1
 80243b2:	ee37 6b05 	vadd.f64	d6, d7, d5
 80243b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80243ba:	ed82 6b00 	vstr	d6, [r2]
 80243be:	ee37 7b05 	vadd.f64	d7, d7, d5
 80243c2:	ed82 7b02 	vstr	d7, [r2, #8]
 80243c6:	e78d      	b.n	80242e4 <__kernel_rem_pio2+0x3ec>
 80243c8:	aa40      	add	r2, sp, #256	; 0x100
 80243ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80243ce:	ed92 6b00 	vldr	d6, [r2]
 80243d2:	3b01      	subs	r3, #1
 80243d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80243d8:	e78a      	b.n	80242f0 <__kernel_rem_pio2+0x3f8>
 80243da:	eeb1 5b45 	vneg.f64	d5, d5
 80243de:	eeb1 6b46 	vneg.f64	d6, d6
 80243e2:	ed87 5b00 	vstr	d5, [r7]
 80243e6:	eeb1 7b47 	vneg.f64	d7, d7
 80243ea:	ed87 6b02 	vstr	d6, [r7, #8]
 80243ee:	e78b      	b.n	8024308 <__kernel_rem_pio2+0x410>
	...

080243f8 <__kernel_sin>:
 80243f8:	ee10 3a90 	vmov	r3, s1
 80243fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024400:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024404:	da04      	bge.n	8024410 <__kernel_sin+0x18>
 8024406:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802440a:	ee17 3a90 	vmov	r3, s15
 802440e:	b35b      	cbz	r3, 8024468 <__kernel_sin+0x70>
 8024410:	ee20 6b00 	vmul.f64	d6, d0, d0
 8024414:	ee20 5b06 	vmul.f64	d5, d0, d6
 8024418:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8024470 <__kernel_sin+0x78>
 802441c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8024478 <__kernel_sin+0x80>
 8024420:	eea6 4b07 	vfma.f64	d4, d6, d7
 8024424:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8024480 <__kernel_sin+0x88>
 8024428:	eea4 7b06 	vfma.f64	d7, d4, d6
 802442c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8024488 <__kernel_sin+0x90>
 8024430:	eea7 4b06 	vfma.f64	d4, d7, d6
 8024434:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8024490 <__kernel_sin+0x98>
 8024438:	eea4 7b06 	vfma.f64	d7, d4, d6
 802443c:	b930      	cbnz	r0, 802444c <__kernel_sin+0x54>
 802443e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8024498 <__kernel_sin+0xa0>
 8024442:	eea6 4b07 	vfma.f64	d4, d6, d7
 8024446:	eea4 0b05 	vfma.f64	d0, d4, d5
 802444a:	4770      	bx	lr
 802444c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8024450:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8024454:	eea1 7b04 	vfma.f64	d7, d1, d4
 8024458:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802445c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80244a0 <__kernel_sin+0xa8>
 8024460:	eea5 1b07 	vfma.f64	d1, d5, d7
 8024464:	ee30 0b41 	vsub.f64	d0, d0, d1
 8024468:	4770      	bx	lr
 802446a:	bf00      	nop
 802446c:	f3af 8000 	nop.w
 8024470:	5acfd57c 	.word	0x5acfd57c
 8024474:	3de5d93a 	.word	0x3de5d93a
 8024478:	8a2b9ceb 	.word	0x8a2b9ceb
 802447c:	be5ae5e6 	.word	0xbe5ae5e6
 8024480:	57b1fe7d 	.word	0x57b1fe7d
 8024484:	3ec71de3 	.word	0x3ec71de3
 8024488:	19c161d5 	.word	0x19c161d5
 802448c:	bf2a01a0 	.word	0xbf2a01a0
 8024490:	1110f8a6 	.word	0x1110f8a6
 8024494:	3f811111 	.word	0x3f811111
 8024498:	55555549 	.word	0x55555549
 802449c:	bfc55555 	.word	0xbfc55555
 80244a0:	55555549 	.word	0x55555549
 80244a4:	3fc55555 	.word	0x3fc55555

080244a8 <with_errno>:
 80244a8:	b513      	push	{r0, r1, r4, lr}
 80244aa:	4604      	mov	r4, r0
 80244ac:	ed8d 0b00 	vstr	d0, [sp]
 80244b0:	f7fd f980 	bl	80217b4 <__errno>
 80244b4:	ed9d 0b00 	vldr	d0, [sp]
 80244b8:	6004      	str	r4, [r0, #0]
 80244ba:	b002      	add	sp, #8
 80244bc:	bd10      	pop	{r4, pc}

080244be <xflow>:
 80244be:	b082      	sub	sp, #8
 80244c0:	b158      	cbz	r0, 80244da <xflow+0x1c>
 80244c2:	eeb1 7b40 	vneg.f64	d7, d0
 80244c6:	ed8d 7b00 	vstr	d7, [sp]
 80244ca:	ed9d 7b00 	vldr	d7, [sp]
 80244ce:	2022      	movs	r0, #34	; 0x22
 80244d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80244d4:	b002      	add	sp, #8
 80244d6:	f7ff bfe7 	b.w	80244a8 <with_errno>
 80244da:	eeb0 7b40 	vmov.f64	d7, d0
 80244de:	e7f2      	b.n	80244c6 <xflow+0x8>

080244e0 <__math_uflow>:
 80244e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80244e8 <__math_uflow+0x8>
 80244e4:	f7ff bfeb 	b.w	80244be <xflow>
 80244e8:	00000000 	.word	0x00000000
 80244ec:	10000000 	.word	0x10000000

080244f0 <__math_oflow>:
 80244f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80244f8 <__math_oflow+0x8>
 80244f4:	f7ff bfe3 	b.w	80244be <xflow>
 80244f8:	00000000 	.word	0x00000000
 80244fc:	70000000 	.word	0x70000000

08024500 <__math_divzero>:
 8024500:	b082      	sub	sp, #8
 8024502:	2800      	cmp	r0, #0
 8024504:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8024508:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 802450c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8024510:	ed8d 7b00 	vstr	d7, [sp]
 8024514:	ed9d 0b00 	vldr	d0, [sp]
 8024518:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8024528 <__math_divzero+0x28>
 802451c:	2022      	movs	r0, #34	; 0x22
 802451e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8024522:	b002      	add	sp, #8
 8024524:	f7ff bfc0 	b.w	80244a8 <with_errno>
	...

08024530 <__math_invalid>:
 8024530:	eeb0 7b40 	vmov.f64	d7, d0
 8024534:	eeb4 7b47 	vcmp.f64	d7, d7
 8024538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802453c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8024540:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8024544:	d602      	bvs.n	802454c <__math_invalid+0x1c>
 8024546:	2021      	movs	r0, #33	; 0x21
 8024548:	f7ff bfae 	b.w	80244a8 <with_errno>
 802454c:	4770      	bx	lr

0802454e <__math_check_uflow>:
 802454e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8024552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024556:	d102      	bne.n	802455e <__math_check_uflow+0x10>
 8024558:	2022      	movs	r0, #34	; 0x22
 802455a:	f7ff bfa5 	b.w	80244a8 <with_errno>
 802455e:	4770      	bx	lr

08024560 <__math_check_oflow>:
 8024560:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8024580 <__math_check_oflow+0x20>
 8024564:	eeb0 7bc0 	vabs.f64	d7, d0
 8024568:	eeb4 7b46 	vcmp.f64	d7, d6
 802456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024570:	dd02      	ble.n	8024578 <__math_check_oflow+0x18>
 8024572:	2022      	movs	r0, #34	; 0x22
 8024574:	f7ff bf98 	b.w	80244a8 <with_errno>
 8024578:	4770      	bx	lr
 802457a:	bf00      	nop
 802457c:	f3af 8000 	nop.w
 8024580:	ffffffff 	.word	0xffffffff
 8024584:	7fefffff 	.word	0x7fefffff

08024588 <fabs>:
 8024588:	ec51 0b10 	vmov	r0, r1, d0
 802458c:	ee10 2a10 	vmov	r2, s0
 8024590:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024594:	ec43 2b10 	vmov	d0, r2, r3
 8024598:	4770      	bx	lr
 802459a:	0000      	movs	r0, r0
 802459c:	0000      	movs	r0, r0
	...

080245a0 <floor>:
 80245a0:	ee10 1a90 	vmov	r1, s1
 80245a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80245a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80245ac:	2b13      	cmp	r3, #19
 80245ae:	b530      	push	{r4, r5, lr}
 80245b0:	ee10 0a10 	vmov	r0, s0
 80245b4:	ee10 5a10 	vmov	r5, s0
 80245b8:	dc31      	bgt.n	802461e <floor+0x7e>
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	da15      	bge.n	80245ea <floor+0x4a>
 80245be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024678 <floor+0xd8>
 80245c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80245c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80245ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245ce:	dd07      	ble.n	80245e0 <floor+0x40>
 80245d0:	2900      	cmp	r1, #0
 80245d2:	da4e      	bge.n	8024672 <floor+0xd2>
 80245d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80245d8:	4318      	orrs	r0, r3
 80245da:	d001      	beq.n	80245e0 <floor+0x40>
 80245dc:	4928      	ldr	r1, [pc, #160]	; (8024680 <floor+0xe0>)
 80245de:	2000      	movs	r0, #0
 80245e0:	460b      	mov	r3, r1
 80245e2:	4602      	mov	r2, r0
 80245e4:	ec43 2b10 	vmov	d0, r2, r3
 80245e8:	e020      	b.n	802462c <floor+0x8c>
 80245ea:	4a26      	ldr	r2, [pc, #152]	; (8024684 <floor+0xe4>)
 80245ec:	411a      	asrs	r2, r3
 80245ee:	ea01 0402 	and.w	r4, r1, r2
 80245f2:	4304      	orrs	r4, r0
 80245f4:	d01a      	beq.n	802462c <floor+0x8c>
 80245f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024678 <floor+0xd8>
 80245fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80245fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024606:	ddeb      	ble.n	80245e0 <floor+0x40>
 8024608:	2900      	cmp	r1, #0
 802460a:	bfbe      	ittt	lt
 802460c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8024610:	fa40 f303 	asrlt.w	r3, r0, r3
 8024614:	18c9      	addlt	r1, r1, r3
 8024616:	ea21 0102 	bic.w	r1, r1, r2
 802461a:	2000      	movs	r0, #0
 802461c:	e7e0      	b.n	80245e0 <floor+0x40>
 802461e:	2b33      	cmp	r3, #51	; 0x33
 8024620:	dd05      	ble.n	802462e <floor+0x8e>
 8024622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024626:	d101      	bne.n	802462c <floor+0x8c>
 8024628:	ee30 0b00 	vadd.f64	d0, d0, d0
 802462c:	bd30      	pop	{r4, r5, pc}
 802462e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8024632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024636:	40e2      	lsrs	r2, r4
 8024638:	4202      	tst	r2, r0
 802463a:	d0f7      	beq.n	802462c <floor+0x8c>
 802463c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8024678 <floor+0xd8>
 8024640:	ee30 0b07 	vadd.f64	d0, d0, d7
 8024644:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802464c:	ddc8      	ble.n	80245e0 <floor+0x40>
 802464e:	2900      	cmp	r1, #0
 8024650:	da02      	bge.n	8024658 <floor+0xb8>
 8024652:	2b14      	cmp	r3, #20
 8024654:	d103      	bne.n	802465e <floor+0xbe>
 8024656:	3101      	adds	r1, #1
 8024658:	ea20 0002 	bic.w	r0, r0, r2
 802465c:	e7c0      	b.n	80245e0 <floor+0x40>
 802465e:	2401      	movs	r4, #1
 8024660:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8024664:	fa04 f303 	lsl.w	r3, r4, r3
 8024668:	4418      	add	r0, r3
 802466a:	42a8      	cmp	r0, r5
 802466c:	bf38      	it	cc
 802466e:	1909      	addcc	r1, r1, r4
 8024670:	e7f2      	b.n	8024658 <floor+0xb8>
 8024672:	2000      	movs	r0, #0
 8024674:	4601      	mov	r1, r0
 8024676:	e7b3      	b.n	80245e0 <floor+0x40>
 8024678:	8800759c 	.word	0x8800759c
 802467c:	7e37e43c 	.word	0x7e37e43c
 8024680:	bff00000 	.word	0xbff00000
 8024684:	000fffff 	.word	0x000fffff

08024688 <scalbn>:
 8024688:	b082      	sub	sp, #8
 802468a:	ed8d 0b00 	vstr	d0, [sp]
 802468e:	9b01      	ldr	r3, [sp, #4]
 8024690:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024694:	b9a2      	cbnz	r2, 80246c0 <scalbn+0x38>
 8024696:	9a00      	ldr	r2, [sp, #0]
 8024698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802469c:	4313      	orrs	r3, r2
 802469e:	d03a      	beq.n	8024716 <scalbn+0x8e>
 80246a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8024778 <scalbn+0xf0>
 80246a4:	4b40      	ldr	r3, [pc, #256]	; (80247a8 <scalbn+0x120>)
 80246a6:	ee20 7b07 	vmul.f64	d7, d0, d7
 80246aa:	4298      	cmp	r0, r3
 80246ac:	ed8d 7b00 	vstr	d7, [sp]
 80246b0:	da11      	bge.n	80246d6 <scalbn+0x4e>
 80246b2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8024780 <scalbn+0xf8>
 80246b6:	ed9d 6b00 	vldr	d6, [sp]
 80246ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80246be:	e007      	b.n	80246d0 <scalbn+0x48>
 80246c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80246c4:	428a      	cmp	r2, r1
 80246c6:	d10a      	bne.n	80246de <scalbn+0x56>
 80246c8:	ed9d 7b00 	vldr	d7, [sp]
 80246cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80246d0:	ed8d 7b00 	vstr	d7, [sp]
 80246d4:	e01f      	b.n	8024716 <scalbn+0x8e>
 80246d6:	9b01      	ldr	r3, [sp, #4]
 80246d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80246dc:	3a36      	subs	r2, #54	; 0x36
 80246de:	4402      	add	r2, r0
 80246e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80246e4:	428a      	cmp	r2, r1
 80246e6:	dd0a      	ble.n	80246fe <scalbn+0x76>
 80246e8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8024788 <scalbn+0x100>
 80246ec:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8024790 <scalbn+0x108>
 80246f0:	eeb0 6b47 	vmov.f64	d6, d7
 80246f4:	9b01      	ldr	r3, [sp, #4]
 80246f6:	2b00      	cmp	r3, #0
 80246f8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80246fc:	e7dd      	b.n	80246ba <scalbn+0x32>
 80246fe:	2a00      	cmp	r2, #0
 8024700:	dd0d      	ble.n	802471e <scalbn+0x96>
 8024702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802470a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802470e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024712:	e9cd 0100 	strd	r0, r1, [sp]
 8024716:	ed9d 0b00 	vldr	d0, [sp]
 802471a:	b002      	add	sp, #8
 802471c:	4770      	bx	lr
 802471e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024722:	da18      	bge.n	8024756 <scalbn+0xce>
 8024724:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024728:	4298      	cmp	r0, r3
 802472a:	9b01      	ldr	r3, [sp, #4]
 802472c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8024730:	dd09      	ble.n	8024746 <scalbn+0xbe>
 8024732:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8024788 <scalbn+0x100>
 8024736:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8024790 <scalbn+0x108>
 802473a:	eeb0 6b47 	vmov.f64	d6, d7
 802473e:	2b00      	cmp	r3, #0
 8024740:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8024744:	e7b9      	b.n	80246ba <scalbn+0x32>
 8024746:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8024780 <scalbn+0xf8>
 802474a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8024798 <scalbn+0x110>
 802474e:	eeb0 6b47 	vmov.f64	d6, d7
 8024752:	2b00      	cmp	r3, #0
 8024754:	e7f4      	b.n	8024740 <scalbn+0xb8>
 8024756:	e9dd 0100 	ldrd	r0, r1, [sp]
 802475a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802475e:	3236      	adds	r2, #54	; 0x36
 8024760:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024764:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024768:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80247a0 <scalbn+0x118>
 802476c:	ec41 0b17 	vmov	d7, r0, r1
 8024770:	e7a3      	b.n	80246ba <scalbn+0x32>
 8024772:	bf00      	nop
 8024774:	f3af 8000 	nop.w
 8024778:	00000000 	.word	0x00000000
 802477c:	43500000 	.word	0x43500000
 8024780:	c2f8f359 	.word	0xc2f8f359
 8024784:	01a56e1f 	.word	0x01a56e1f
 8024788:	8800759c 	.word	0x8800759c
 802478c:	7e37e43c 	.word	0x7e37e43c
 8024790:	8800759c 	.word	0x8800759c
 8024794:	fe37e43c 	.word	0xfe37e43c
 8024798:	c2f8f359 	.word	0xc2f8f359
 802479c:	81a56e1f 	.word	0x81a56e1f
 80247a0:	00000000 	.word	0x00000000
 80247a4:	3c900000 	.word	0x3c900000
 80247a8:	ffff3cb0 	.word	0xffff3cb0

080247ac <_init>:
 80247ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247ae:	bf00      	nop
 80247b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247b2:	bc08      	pop	{r3}
 80247b4:	469e      	mov	lr, r3
 80247b6:	4770      	bx	lr

080247b8 <_fini>:
 80247b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247ba:	bf00      	nop
 80247bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247be:	bc08      	pop	{r3}
 80247c0:	469e      	mov	lr, r3
 80247c2:	4770      	bx	lr
