
CISYNTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  08013b98  08013b98  00023b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014550  08014550  00024550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014558  08014558  00024558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801455c  0801455c  0002455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  24000000  08014560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000bbb8  24000200  08014760  00030200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400bdb8  08014760  0003bdb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 10 .debug_info   000310a9  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a1f  00000000  00000000  000612d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a98  00000000  00000000  00065cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000018c0  00000000  00000000  00067790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c398  00000000  00000000  00069050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00020ec4  00000000  00000000  000a53e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185d99  00000000  00000000  000c62ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0024c045  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000804c  00000000  00000000  0024c0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013b7c 	.word	0x08013b7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	08013b7c 	.word	0x08013b7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_ADC_MspInit>:
}

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a4e      	ldr	r2, [pc, #312]	; (80007e8 <HAL_ADC_MspInit+0x158>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d156      	bne.n	8000760 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80006b2:	4b4e      	ldr	r3, [pc, #312]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a4c      	ldr	r2, [pc, #304]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 80006ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80006bc:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10e      	bne.n	80006e2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80006c4:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ca:	4a49      	ldr	r2, [pc, #292]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006d4:	4b46      	ldr	r3, [pc, #280]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a41      	ldr	r2, [pc, #260]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a3a      	ldr	r2, [pc, #232]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071e:	2308      	movs	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4830      	ldr	r0, [pc, #192]	; (80007f4 <HAL_ADC_MspInit+0x164>)
 8000732:	f005 fd43 	bl	80061bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	482b      	ldr	r0, [pc, #172]	; (80007f8 <HAL_ADC_MspInit+0x168>)
 800074a:	f005 fd37 	bl	80061bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 2);
 800074e:	2202      	movs	r2, #2
 8000750:	2100      	movs	r1, #0
 8000752:	2012      	movs	r0, #18
 8000754:	f003 fcf6 	bl	8004144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000758:	2012      	movs	r0, #18
 800075a:	f003 fd1d 	bl	8004198 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800075e:	e03f      	b.n	80007e0 <HAL_ADC_MspInit+0x150>
  else if(adcHandle->Instance==ADC2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <HAL_ADC_MspInit+0x16c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d13a      	bne.n	80007e0 <HAL_ADC_MspInit+0x150>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 8000772:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <HAL_ADC_MspInit+0x15c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10e      	bne.n	800079a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 800077e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 800078e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_ADC_MspInit+0x160>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <HAL_ADC_MspInit+0x168>)
 80007cc:	f005 fcf6 	bl	80061bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 2);
 80007d0:	2202      	movs	r2, #2
 80007d2:	2100      	movs	r1, #0
 80007d4:	2012      	movs	r0, #18
 80007d6:	f003 fcb5 	bl	8004144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007da:	2012      	movs	r0, #18
 80007dc:	f003 fcdc 	bl	8004198 <HAL_NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	3730      	adds	r7, #48	; 0x30
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40022000 	.word	0x40022000
 80007ec:	2400021c 	.word	0x2400021c
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020000 	.word	0x58020000
 80007f8:	58020400 	.word	0x58020400
 80007fc:	40022100 	.word	0x40022100

08000800 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2224      	movs	r2, #36	; 0x24
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00f fb6f 	bl	800fef0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_DAC1_Init+0x74>)
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_DAC1_Init+0x78>)
 8000816:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <MX_DAC1_Init+0x74>)
 800081a:	f003 fce1 	bl	80041e0 <HAL_DAC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000824:	f000 fc54 	bl	80010d0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800082c:	2316      	movs	r3, #22
 800082e:	60bb      	str	r3, [r7, #8]
//  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_DAC1_Init+0x74>)
 8000844:	f003 fd9c 	bl	8004380 <HAL_DAC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 fc3f 	bl	80010d0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2210      	movs	r2, #16
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_DAC1_Init+0x74>)
 800085e:	f003 fd8f 	bl	8004380 <HAL_DAC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000868:	f000 fc32 	bl	80010d0 <Error_Handler>
  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2400bb00 	.word	0x2400bb00
 8000878:	40007400 	.word	0x40007400

0800087c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_DAC_MspInit+0x80>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d129      	bne.n	80008f2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008a4:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_DAC_MspInit+0x84>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008da:	2330      	movs	r3, #48	; 0x30
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008ee:	f005 fc65 	bl	80061bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40007400 	.word	0x40007400
 8000900:	58024400 	.word	0x58024400
 8000904:	58020000 	.word	0x58020000

08000908 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4bc0      	ldr	r3, [pc, #768]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4abe      	ldr	r2, [pc, #760]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4bbc      	ldr	r3, [pc, #752]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	623b      	str	r3, [r7, #32]
 800093a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4bb8      	ldr	r3, [pc, #736]	; (8000c20 <MX_GPIO_Init+0x318>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4ab7      	ldr	r2, [pc, #732]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4bb4      	ldr	r3, [pc, #720]	; (8000c20 <MX_GPIO_Init+0x318>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4bb1      	ldr	r3, [pc, #708]	; (8000c20 <MX_GPIO_Init+0x318>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4aaf      	ldr	r2, [pc, #700]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4bad      	ldr	r3, [pc, #692]	; (8000c20 <MX_GPIO_Init+0x318>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000978:	4ba9      	ldr	r3, [pc, #676]	; (8000c20 <MX_GPIO_Init+0x318>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4aa8      	ldr	r2, [pc, #672]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4ba5      	ldr	r3, [pc, #660]	; (8000c20 <MX_GPIO_Init+0x318>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4ba2      	ldr	r3, [pc, #648]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4aa0      	ldr	r2, [pc, #640]	; (8000c20 <MX_GPIO_Init+0x318>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b9e      	ldr	r3, [pc, #632]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b9a      	ldr	r3, [pc, #616]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	4a99      	ldr	r2, [pc, #612]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c4:	4b96      	ldr	r3, [pc, #600]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	4b93      	ldr	r3, [pc, #588]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a91      	ldr	r2, [pc, #580]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b8f      	ldr	r3, [pc, #572]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b8b      	ldr	r3, [pc, #556]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a8a      	ldr	r2, [pc, #552]	; (8000c20 <MX_GPIO_Init+0x318>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b87      	ldr	r3, [pc, #540]	; (8000c20 <MX_GPIO_Init+0x318>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_SP_GPIO_Port, CIS_SP_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2110      	movs	r1, #16
 8000a12:	4884      	ldr	r0, [pc, #528]	; (8000c24 <MX_GPIO_Init+0x31c>)
 8000a14:	f005 fe82 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a1e:	4882      	ldr	r0, [pc, #520]	; (8000c28 <MX_GPIO_Init+0x320>)
 8000a20:	f005 fe7c 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4880      	ldr	r0, [pc, #512]	; (8000c2c <MX_GPIO_Init+0x324>)
 8000a2a:	f005 fe77 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000a34:	487e      	ldr	r0, [pc, #504]	; (8000c30 <MX_GPIO_Init+0x328>)
 8000a36:	f005 fe71 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CIS_LED_B_Pin|CIS_LED_G_Pin|CIS_LED_R_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	21e0      	movs	r1, #224	; 0xe0
 8000a3e:	487d      	ldr	r0, [pc, #500]	; (8000c34 <MX_GPIO_Init+0x32c>)
 8000a40:	f005 fe6c 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 PE6 
                           PE7 PE8 PE10 PE11 
                           PE12 PE13 PE14 PE15 
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
 8000a44:	f64f 53ef 	movw	r3, #65007	; 0xfdef
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4872      	ldr	r0, [pc, #456]	; (8000c24 <MX_GPIO_Init+0x31c>)
 8000a5a:	f005 fbaf 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_SP_Pin;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	486b      	ldr	r0, [pc, #428]	; (8000c24 <MX_GPIO_Init+0x31c>)
 8000a76:	f005 fba1 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a80:	4b6d      	ldr	r3, [pc, #436]	; (8000c38 <MX_GPIO_Init+0x330>)
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4868      	ldr	r0, [pc, #416]	; (8000c30 <MX_GPIO_Init+0x328>)
 8000a90:	f005 fb94 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4864      	ldr	r0, [pc, #400]	; (8000c3c <MX_GPIO_Init+0x334>)
 8000aaa:	f005 fb87 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC7 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7 
 8000aae:	f641 038d 	movw	r3, #6285	; 0x188d
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	485b      	ldr	r0, [pc, #364]	; (8000c30 <MX_GPIO_Init+0x328>)
 8000ac4:	f005 fb7a 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ac8:	2332      	movs	r3, #50	; 0x32
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4853      	ldr	r0, [pc, #332]	; (8000c30 <MX_GPIO_Init+0x328>)
 8000ae4:	f005 fb6a 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_15;
 8000ae8:	f248 0341 	movw	r3, #32833	; 0x8041
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4850      	ldr	r0, [pc, #320]	; (8000c40 <MX_GPIO_Init+0x338>)
 8000afe:	f005 fb5d 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b02:	2386      	movs	r3, #134	; 0x86
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b12:	230b      	movs	r3, #11
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4848      	ldr	r0, [pc, #288]	; (8000c40 <MX_GPIO_Init+0x338>)
 8000b1e:	f005 fb4d 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 
                           PB15 PB3 PB4 PB5 
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8000b22:	f649 737c 	movw	r3, #40828	; 0x9f7c
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	483c      	ldr	r0, [pc, #240]	; (8000c28 <MX_GPIO_Init+0x320>)
 8000b38:	f005 fb40 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000b3c:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4836      	ldr	r0, [pc, #216]	; (8000c2c <MX_GPIO_Init+0x324>)
 8000b52:	f005 fb33 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	482d      	ldr	r0, [pc, #180]	; (8000c28 <MX_GPIO_Init+0x320>)
 8000b74:	f005 fb22 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000b78:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4825      	ldr	r0, [pc, #148]	; (8000c28 <MX_GPIO_Init+0x320>)
 8000b92:	f005 fb13 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000b96:	f64f 431f 	movw	r3, #64543	; 0xfc1f
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_GPIO_Init+0x32c>)
 8000bac:	f005 fb06 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb0:	2340      	movs	r3, #64	; 0x40
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4819      	ldr	r0, [pc, #100]	; (8000c2c <MX_GPIO_Init+0x324>)
 8000bc8:	f005 faf8 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_GPIO_Init+0x324>)
 8000be0:	f005 faec 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x328>)
 8000bfe:	f005 fadd 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c14:	230a      	movs	r3, #10
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	e012      	b.n	8000c44 <MX_GPIO_Init+0x33c>
 8000c1e:	bf00      	nop
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58021000 	.word	0x58021000
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	58020800 	.word	0x58020800
 8000c34:	58020c00 	.word	0x58020c00
 8000c38:	11110000 	.word	0x11110000
 8000c3c:	58021400 	.word	0x58021400
 8000c40:	58020000 	.word	0x58020000
 8000c44:	4619      	mov	r1, r3
 8000c46:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <MX_GPIO_Init+0x39c>)
 8000c48:	f005 fab8 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CIS_LED_B_Pin|CIS_LED_G_Pin|CIS_LED_R_Pin;
 8000c4c:	23e0      	movs	r3, #224	; 0xe0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0x3a0>)
 8000c64:	f005 faaa 	bl	80061bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_GPIO_Init+0x3a4>)
 8000c86:	f005 fa99 	bl	80061bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2028      	movs	r0, #40	; 0x28
 8000c90:	f003 fa58 	bl	8004144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c94:	2028      	movs	r0, #40	; 0x28
 8000c96:	f003 fa7f 	bl	8004198 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	; 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58020c00 	.word	0x58020c00
 8000cac:	58021800 	.word	0x58021800

08000cb0 <HAL_HRTIM_MspInit>:
  HAL_HRTIM_MspPostInit(&hhrtim);

}

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_HRTIM_MspInit+0x3c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_HRTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_HRTIM_MspInit+0x40>)
 8000cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_HRTIM_MspInit+0x40>)
 8000cca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_HRTIM_MspInit+0x40>)
 8000cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40017400 	.word	0x40017400
 8000cf0:	58024400 	.word	0x58024400

08000cf4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_HRTIM_MspPostInit+0x6c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d11f      	bne.n	8000d56 <HAL_HRTIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_HRTIM_MspPostInit+0x70>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_HRTIM_MspPostInit+0x70>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_HRTIM_MspPostInit+0x70>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM GPIO Configuration    
    PC6     ------> HRTIM_CHA1
    PC8     ------> HRTIM_CHB1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000d34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_HRTIM_MspPostInit+0x74>)
 8000d52:	f005 fa33 	bl	80061bc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40017400 	.word	0x40017400
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020800 	.word	0x58020800

08000d6c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d74:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <SCB_EnableICache+0x3c>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dc4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	0b5b      	lsrs	r3, r3, #13
 8000dca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dce:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dd8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	015a      	lsls	r2, r3, #5
 8000dde:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000de2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de8:	490f      	ldr	r1, [pc, #60]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1ef      	bne.n	8000dda <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	60fa      	str	r2, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e5      	bne.n	8000dd0 <SCB_EnableDCache+0x24>
 8000e04:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <SCB_EnableDCache+0x7c>)
 8000e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e18:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */


	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000e30:	f7ff ff9c 	bl	8000d6c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000e34:	f7ff ffba 	bl	8000dac <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e38:	f000 fc1e 	bl	8001678 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e3c:	f000 f880 	bl	8000f40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e40:	f7ff fd62 	bl	8000908 <MX_GPIO_Init>
//	MX_DMA_Init();
	MX_USART3_UART_Init();
 8000e44:	f000 fb36 	bl	80014b4 <MX_USART3_UART_Init>
	MX_DAC1_Init();
 8000e48:	f7ff fcda 	bl	8000800 <MX_DAC1_Init>
//	MX_TIM1_Init();
//	MX_ADC2_Init();
	/* USER CODE BEGIN 2 */
//	HAL_EnableCompensationCell();
	printf("Start CIS Demo\n");
 8000e4c:	482d      	ldr	r0, [pc, #180]	; (8000f04 <main+0xd8>)
 8000e4e:	f00f fdaf 	bl	80109b0 <puts>
	HAL_GPIO_WritePin(CIS_LED_R_GPIO_Port, CIS_LED_R_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	482c      	ldr	r0, [pc, #176]	; (8000f08 <main+0xdc>)
 8000e58:	f005 fc60 	bl	800671c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CIS_LED_G_GPIO_Port, CIS_LED_G_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4829      	ldr	r0, [pc, #164]	; (8000f08 <main+0xdc>)
 8000e62:	f005 fc5b 	bl	800671c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CIS_LED_B_GPIO_Port, CIS_LED_B_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4827      	ldr	r0, [pc, #156]	; (8000f08 <main+0xdc>)
 8000e6c:	f005 fc56 	bl	800671c <HAL_GPIO_WritePin>
	synth_init();
 8000e70:	f00e fcd0 	bl	800f814 <synth_init>
	cisInit();
 8000e74:	f00e fa34 	bl	800f2e0 <cisInit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	static int old_tick;
	old_tick = HAL_GetTick();
 8000e78:	f000 fc80 	bl	800177c <HAL_GetTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <main+0xe0>)
 8000e82:	601a      	str	r2, [r3, #0]
	//	{
	//		cis_adc_data[idx] = 65534;
	//	}
	while (1)
	{
		if (((HAL_GetTick() - old_tick)) < 1000)
 8000e84:	f000 fc7a 	bl	800177c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <main+0xe0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e94:	d203      	bcs.n	8000e9e <main+0x72>
		{
#ifdef DEBUG_SAMPLE_RATE
			HAL_TIM_PeriodElapsedCallback(&htim15);
 8000e96:	481e      	ldr	r0, [pc, #120]	; (8000f10 <main+0xe4>)
 8000e98:	f00e fdc8 	bl	800fa2c <HAL_TIM_PeriodElapsedCallback>
 8000e9c:	e7f2      	b.n	8000e84 <main+0x58>

		}
		else
		{
#ifdef DEBUG_SYNTH
			printf("-----------------------------------------\n");
 8000e9e:	481d      	ldr	r0, [pc, #116]	; (8000f14 <main+0xe8>)
 8000ea0:	f00f fd86 	bl	80109b0 <puts>
			printf("rfft  cnt : %d\n", (int)rfft_cnt);
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <main+0xec>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481c      	ldr	r0, [pc, #112]	; (8000f1c <main+0xf0>)
 8000eac:	f00f fd0c 	bl	80108c8 <iprintf>
			rfft_cnt = 0;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
#endif
#ifdef DEBUG_CIS
			printf("-----------------------------------------\n");
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <main+0xe8>)
 8000eb8:	f00f fd7a 	bl	80109b0 <puts>
			printf("CIS cnt   : %d\n", (int)cis_dbg_cnt);
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <main+0xf4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <main+0xf8>)
 8000ec4:	f00f fd00 	bl	80108c8 <iprintf>
			printf("CIS cal   : %d\n", (int)cis_dbg_data_cal);
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <main+0xfc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0x100>)
 8000ed0:	f00f fcfa 	bl	80108c8 <iprintf>
			printf("CIS dat   : %d\n", (int)cis_dbg_data);
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0x104>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <main+0x108>)
 8000edc:	f00f fcf4 	bl	80108c8 <iprintf>
			printf("ADC [240] : %d\n", (int)cis_adc_data[240]);
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <main+0x10c>)
 8000ee2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4814      	ldr	r0, [pc, #80]	; (8000f3c <main+0x110>)
 8000eea:	f00f fced 	bl	80108c8 <iprintf>
			cis_dbg_cnt = 0;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <main+0xf4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
#endif

			old_tick = HAL_GetTick();
 8000ef4:	f000 fc42 	bl	800177c <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <main+0xe0>)
 8000efe:	601a      	str	r2, [r3, #0]
		if (((HAL_GetTick() - old_tick)) < 1000)
 8000f00:	e7c0      	b.n	8000e84 <main+0x58>
 8000f02:	bf00      	nop
 8000f04:	08013b98 	.word	0x08013b98
 8000f08:	58020c00 	.word	0x58020c00
 8000f0c:	24000220 	.word	0x24000220
 8000f10:	2400bbf0 	.word	0x2400bbf0
 8000f14:	08013ba8 	.word	0x08013ba8
 8000f18:	2400ba2c 	.word	0x2400ba2c
 8000f1c:	08013bd4 	.word	0x08013bd4
 8000f20:	2400a30c 	.word	0x2400a30c
 8000f24:	08013be4 	.word	0x08013be4
 8000f28:	2400a310 	.word	0x2400a310
 8000f2c:	08013bf4 	.word	0x08013bf4
 8000f30:	2400a314 	.word	0x2400a314
 8000f34:	08013c04 	.word	0x08013c04
 8000f38:	2400022c 	.word	0x2400022c
 8000f3c:	08013c14 	.word	0x08013c14

08000f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0cc      	sub	sp, #304	; 0x130
 8000f44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f4a:	224c      	movs	r2, #76	; 0x4c
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00e ffce 	bl	800fef0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e ffc7 	bl	800fef0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4618      	mov	r0, r3
 8000f68:	23bc      	movs	r3, #188	; 0xbc
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f00e ffbf 	bl	800fef0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f006 f92c 	bl	80071d0 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <SystemClock_Config+0x184>)
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <SystemClock_Config+0x184>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <SystemClock_Config+0x184>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4b4c      	ldr	r3, [pc, #304]	; (80010c8 <SystemClock_Config+0x188>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <SystemClock_Config+0x188>)
 8000f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <SystemClock_Config+0x188>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb2:	bf00      	nop
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <SystemClock_Config+0x188>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc0:	d1f8      	bne.n	8000fb4 <SystemClock_Config+0x74>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 500;
 8000fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ff2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001008:	2304      	movs	r3, #4
 800100a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800101e:	4618      	mov	r0, r3
 8001020:	f006 f91a 	bl	8007258 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xee>
	{
		Error_Handler();
 800102a:	f000 f851 	bl	80010d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	233f      	movs	r3, #63	; 0x3f
 8001030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001040:	2308      	movs	r3, #8
 8001042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001060:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f006 fdd6 	bl	8007c18 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x136>
	{
		Error_Handler();
 8001072:	f000 f82d 	bl	80010d0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART3
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <SystemClock_Config+0x18c>)
 800107c:	601a      	str	r2, [r3, #0]
			|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	651a      	str	r2, [r3, #80]	; 0x50
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2200      	movs	r2, #0
 800108c:	675a      	str	r2, [r3, #116]	; 0x74
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001096:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 fac9 	bl	8008640 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x178>
	{
		Error_Handler();
 80010b4:	f000 f80c 	bl	80010d0 <Error_Handler>
	}
}
 80010b8:	bf00      	nop
 80010ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58000400 	.word	0x58000400
 80010c8:	58024800 	.word	0x58024800
 80010cc:	90080002 	.word	0x90080002

080010d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		printf("Error Handler...");
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <Error_Handler+0xc>)
 80010d6:	f00f fbf7 	bl	80108c8 <iprintf>
 80010da:	e7fb      	b.n	80010d4 <Error_Handler+0x4>
 80010dc:	08013c24 	.word	0x08013c24

080010e0 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	printf("Wrong parameters value: file %s on line %d\r\n", (int)file, (int)line);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <assert_failed+0x20>)
 80010f2:	f00f fbe9 	bl	80108c8 <iprintf>
	/* USER CODE END 6 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08013c38 	.word	0x08013c38

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_MspInit+0x7c>)
 800110c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_MspInit+0x7c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_MspInit+0x7c>)
 800111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001128:	2006      	movs	r0, #6
 800112a:	f002 ffeb 	bl	8004104 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	f06f 000b 	mvn.w	r0, #11
 8001136:	f003 f805 	bl	8004144 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	f06f 000a 	mvn.w	r0, #10
 8001142:	f002 ffff 	bl	8004144 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2101      	movs	r1, #1
 800114a:	f06f 0009 	mvn.w	r0, #9
 800114e:	f002 fff9 	bl	8004144 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	f06f 0004 	mvn.w	r0, #4
 800115a:	f002 fff3 	bl	8004144 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	f06f 0003 	mvn.w	r0, #3
 8001166:	f002 ffed 	bl	8004144 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2101      	movs	r1, #1
 800116e:	f06f 0001 	mvn.w	r0, #1
 8001172:	f002 ffe7 	bl	8004144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	58024400 	.word	0x58024400

08001184 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 fad6 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream0_IRQHandler+0x10>)
 80011b2:	f003 fe9d 	bl	8004ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400bd3c 	.word	0x2400bd3c

080011c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <ADC_IRQHandler+0x10>)
 80011c6:	f001 fa61 	bl	800268c <HAL_ADC_IRQHandler>
//  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2400ba9c 	.word	0x2400ba9c

080011d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011dc:	f005 fad2 	bl	8006784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM15_IRQHandler+0x10>)
 80011ea:	f009 ffc5 	bl	800b178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400bbf0 	.word	0x2400bbf0

080011f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e00a      	b.n	8001220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120a:	f3af 8000 	nop.w
 800120e:	4601      	mov	r1, r0
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf0      	blt.n	800120a <_read+0x12>
	}

return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e009      	b.n	8001258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f9fb 	bl	8001648 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf1      	blt.n	8001244 <_write+0x12>
	}
	return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	extern char end __asm__("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x50>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x16>
		heap_end = &end;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <_sbrk+0x50>)
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <_sbrk+0x54>)
 8001280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <_sbrk+0x50>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <_sbrk+0x50>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	466a      	mov	r2, sp
 8001292:	4293      	cmp	r3, r2
 8001294:	d907      	bls.n	80012a6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001296:	f00e fdf9 	bl	800fe8c <__errno>
 800129a:	4602      	mov	r2, r0
 800129c:	230c      	movs	r3, #12
 800129e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a4:	e006      	b.n	80012b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <_sbrk+0x50>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <_sbrk+0x50>)
 80012b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	24000224 	.word	0x24000224
 80012c0:	2400bdb8 	.word	0x2400bdb8

080012c4 <_close>:

int _close(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	605a      	str	r2, [r3, #4]
	return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_isatty>:

int _isatty(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <SystemInit+0xac>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <SystemInit+0xac>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <SystemInit+0xb0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <SystemInit+0xb0>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <SystemInit+0xb0>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <SystemInit+0xb0>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4921      	ldr	r1, [pc, #132]	; (80013dc <SystemInit+0xb0>)
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <SystemInit+0xb4>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <SystemInit+0xb0>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <SystemInit+0xb0>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <SystemInit+0xb0>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <SystemInit+0xb0>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <SystemInit+0xb0>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <SystemInit+0xb0>)
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <SystemInit+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <SystemInit+0xb0>)
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <SystemInit+0xb0>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <SystemInit+0xb0>)
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <SystemInit+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <SystemInit+0xb0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <SystemInit+0xb0>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <SystemInit+0xb0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <SystemInit+0xb8>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <SystemInit+0xbc>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013be:	d202      	bcs.n	80013c6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <SystemInit+0xc0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SystemInit+0xac>)
 80013c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	58024400 	.word	0x58024400
 80013e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e4:	5c001000 	.word	0x5c001000
 80013e8:	ffff0000 	.word	0xffff0000
 80013ec:	51008108 	.word	0x51008108

080013f0 <HAL_TIM_OC_MspInit>:
  }

}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_TIM_OC_MspInit+0x74>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10f      	bne.n	8001422 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 8001404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 8001414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001420:	e01b      	b.n	800145a <HAL_TIM_OC_MspInit+0x6a>
  else if(tim_ocHandle->Instance==TIM15)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_TIM_OC_MspInit+0x7c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d116      	bne.n	800145a <HAL_TIM_OC_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001432:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_TIM_OC_MspInit+0x78>)
 800143e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 3);
 800144a:	2203      	movs	r2, #3
 800144c:	2100      	movs	r1, #0
 800144e:	2074      	movs	r0, #116	; 0x74
 8001450:	f002 fe78 	bl	8004144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001454:	2074      	movs	r0, #116	; 0x74
 8001456:	f002 fe9f 	bl	8004198 <HAL_NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	58024400 	.word	0x58024400
 800146c:	40014000 	.word	0x40014000

08001470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10e      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40001000 	.word	0x40001000
 80014b0:	58024400 	.word	0x58024400

080014b4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <MX_USART3_UART_Init+0x94>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <MX_USART3_UART_Init+0x98>)
 80014c2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014d8:	220c      	movs	r2, #12
 80014da:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_USART3_UART_Init+0x90>)
 80014fc:	f00a ff00 	bl	800c300 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001506:	f7ff fde3 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_USART3_UART_Init+0x90>)
 800150e:	f00d fd4b 	bl	800efa8 <HAL_UARTEx_SetTxFifoThreshold>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001518:	f7ff fdda 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	4809      	ldr	r0, [pc, #36]	; (8001544 <MX_USART3_UART_Init+0x90>)
 8001520:	f00d fddc 	bl	800f0dc <HAL_UARTEx_SetRxFifoThreshold>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800152a:	f7ff fdd1 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART3_UART_Init+0x90>)
 8001530:	f00d fcc4 	bl	800eebc <HAL_UARTEx_DisableFifoMode>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800153a:	f7ff fdc9 	bl	80010d0 <Error_Handler>
  }

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2400bcb0 	.word	0x2400bcb0
 8001548:	40004800 	.word	0x40004800
 800154c:	001e8480 	.word	0x001e8480

08001550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a31      	ldr	r2, [pc, #196]	; (8001634 <HAL_UART_MspInit+0xe4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d15c      	bne.n	800162c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_UART_MspInit+0xe8>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001578:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_UART_MspInit+0xe8>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_UART_MspInit+0xe8>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_UART_MspInit+0xe8>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HAL_UART_MspInit+0xe8>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_UART_MspInit+0xe8>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c0:	2307      	movs	r3, #7
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <HAL_UART_MspInit+0xec>)
 80015cc:	f004 fdf6 	bl	80061bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_UART_MspInit+0xf4>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015d8:	222e      	movs	r2, #46	; 0x2e
 80015da:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_UART_MspInit+0xf0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_UART_MspInit+0xf0>)
 8001604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001608:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_UART_MspInit+0xf0>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_UART_MspInit+0xf0>)
 8001612:	f003 f883 	bl	800471c <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800161c:	f7ff fd58 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_UART_MspInit+0xf0>)
 8001624:	675a      	str	r2, [r3, #116]	; 0x74
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_UART_MspInit+0xf0>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004800 	.word	0x40004800
 8001638:	58024400 	.word	0x58024400
 800163c:	58020c00 	.word	0x58020c00
 8001640:	2400bd3c 	.word	0x2400bd3c
 8001644:	40020010 	.word	0x40020010

08001648 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY);
 8001650:	bf00      	nop
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <__io_putchar+0x2c>)
 8001654:	f00a ffb8 	bl	800c5c8 <HAL_UART_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	2b24      	cmp	r3, #36	; 0x24
 800165c:	d0f9      	beq.n	8001652 <__io_putchar+0xa>
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10);
 800165e:	1d39      	adds	r1, r7, #4
 8001660:	230a      	movs	r3, #10
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <__io_putchar+0x2c>)
 8001666:	f00a ff19 	bl	800c49c <HAL_UART_Transmit>

  return ch;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2400bcb0 	.word	0x2400bcb0

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f002 fd41 	bl	8004104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001682:	f006 fe23 	bl	80082cc <HAL_RCC_GetSysClockFreq>
 8001686:	4601      	mov	r1, r0
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_Init+0x60>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_Init+0x64>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	fa21 f303 	lsr.w	r3, r1, r3
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <HAL_Init+0x68>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_Init+0x68>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_Init+0x60>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <HAL_Init+0x64>)
 80016b0:	5ccb      	ldrb	r3, [r1, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x6c>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f812 	bl	80016e8 <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e002      	b.n	80016d4 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ce:	f7ff fd19 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58024400 	.word	0x58024400
 80016dc:	08014058 	.word	0x08014058
 80016e0:	24000000 	.word	0x24000000
 80016e4:	24000004 	.word	0x24000004

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_InitTick+0x60>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e021      	b.n	8001740 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_InitTick+0x64>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_InitTick+0x60>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fd58 	bl	80041c8 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001730:	f002 fd08 	bl	8004144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x68>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2400000c 	.word	0x2400000c
 800174c:	24000000 	.word	0x24000000
 8001750:	24000008 	.word	0x24000008

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2400000c 	.word	0x2400000c
 8001778:	24000228 	.word	0x24000228

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	24000228 	.word	0x24000228

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_Delay+0x40>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400000c 	.word	0x2400000c

080017d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetREVID+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0c1b      	lsrs	r3, r3, #16
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	5c001000 	.word	0x5c001000

080017f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_12B
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <LL_ADC_GetResolution+0x44>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800186c:	d104      	bne.n	8001878 <LL_ADC_GetResolution+0x20>
  {
    return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 031c 	and.w	r3, r3, #28
 8001876:	e00b      	b.n	8001890 <LL_ADC_GetResolution+0x38>
  }
  else
  {
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 031c 	and.w	r3, r3, #28
 8001880:	2b1c      	cmp	r3, #28
 8001882:	d101      	bne.n	8001888 <LL_ADC_GetResolution+0x30>
    {
      return (LL_ADC_RESOLUTION_8B);
 8001884:	2310      	movs	r3, #16
 8001886:	e003      	b.n	8001890 <LL_ADC_GetResolution+0x38>
    }
    else
    {
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 031c 	and.w	r3, r3, #28
    }
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	5c001000 	.word	0x5c001000

080018a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a0:	b490      	push	{r4, r7}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	4313      	orrs	r3, r2
 80018ce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc90      	pop	{r4, r7}
 80018d8:	4770      	bx	lr

080018da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018da:	b490      	push	{r4, r7}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3360      	adds	r3, #96	; 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	6023      	str	r3, [r4, #0]
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bc90      	pop	{r4, r7}
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001930:	b490      	push	{r4, r7}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3330      	adds	r3, #48	; 0x30
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	4413      	add	r3, r2
 800194e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	211f      	movs	r1, #31
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0e9b      	lsrs	r3, r3, #26
 8001966:	f003 011f 	and.w	r1, r3, #31
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bc90      	pop	{r4, r7}
 8001980:	4770      	bx	lr

08001982 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019a8:	b490      	push	{r4, r7}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3314      	adds	r3, #20
 80019b8:	461a      	mov	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	0e5b      	lsrs	r3, r3, #25
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0d1b      	lsrs	r3, r3, #20
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2107      	movs	r1, #7
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	401a      	ands	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0d1b      	lsrs	r3, r3, #20
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc90      	pop	{r4, r7}
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0318 	and.w	r3, r3, #24
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a1c:	40d9      	lsrs	r1, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	400b      	ands	r3, r1
 8001a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	000fffff 	.word	0x000fffff

08001a40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6093      	str	r3, [r2, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	5fffffc0 	.word	0x5fffffc0

08001a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab0:	d101      	bne.n	8001ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	6fffffc0 	.word	0x6fffffc0

08001aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <LL_ADC_Enable+0x24>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	7fffffc0 	.word	0x7fffffc0

08001b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_ADC_Disable+0x24>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	7fffffc0 	.word	0x7fffffc0

08001b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <LL_ADC_IsEnabled+0x18>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_ADC_IsEnabled+0x1a>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d101      	bne.n	8001ba2 <LL_ADC_IsDisableOngoing+0x18>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <LL_ADC_REG_StartConversion+0x24>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	f043 0204 	orr.w	r2, r3, #4
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	7fffffc0 	.word	0x7fffffc0

08001bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d101      	bne.n	8001bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d101      	bne.n	8001c16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e398      	b.n	8002370 <HAL_ADC_Init+0x74c>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4aa0      	ldr	r2, [pc, #640]	; (8001ec4 <HAL_ADC_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_ADC_Init+0x42>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a9e      	ldr	r2, [pc, #632]	; (8001ec8 <HAL_ADC_Init+0x2a4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_ADC_Init+0x42>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a9d      	ldr	r2, [pc, #628]	; (8001ecc <HAL_ADC_Init+0x2a8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_Init+0x42>
 8001c5c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001c60:	489b      	ldr	r0, [pc, #620]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001c62:	f7ff fa3d 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d049      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c78:	d044      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c82:	d03f      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03b      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c94:	d036      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c9e:	d031      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001ca8:	d02c      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb2:	d027      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001cbc:	d022      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001cc6:	d01d      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001cd0:	d018      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cda:	d013      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ce4:	d00e      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001cee:	d009      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_Init+0xe0>
 8001cfa:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001cfe:	4874      	ldr	r0, [pc, #464]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001d00:	f7ff f9ee 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d014      	beq.n	8001d36 <HAL_ADC_Init+0x112>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d010      	beq.n	8001d36 <HAL_ADC_Init+0x112>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d00c      	beq.n	8001d36 <HAL_ADC_Init+0x112>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d008      	beq.n	8001d36 <HAL_ADC_Init+0x112>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_Init+0x112>
 8001d2c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001d30:	4867      	ldr	r0, [pc, #412]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001d32:	f7ff f9d5 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_ADC_Init+0x12c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_Init+0x12c>
 8001d46:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001d4a:	4861      	ldr	r0, [pc, #388]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001d4c:	f7ff f9c8 	bl	80010e0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7d5b      	ldrb	r3, [r3, #21]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_ADC_Init+0x146>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7d5b      	ldrb	r3, [r3, #21]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d004      	beq.n	8001d6a <HAL_ADC_Init+0x146>
 8001d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d64:	485a      	ldr	r0, [pc, #360]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001d66:	f7ff f9bb 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d013      	beq.n	8001d9a <HAL_ADC_Init+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d00e      	beq.n	8001d9a <HAL_ADC_Init+0x176>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d84:	d009      	beq.n	8001d9a <HAL_ADC_Init+0x176>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_Init+0x176>
 8001d90:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001d94:	484e      	ldr	r0, [pc, #312]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001d96:	f7ff f9a3 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d06c      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001dac:	d067      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8001db6:	d062      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8001dc0:	d05d      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001dca:	d058      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 8001dd4:	d053      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8001dde:	d04e      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001de8:	d049      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001df2:	d044      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8001dfc:	d03f      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8001e06:	d03a      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f5b3 6fac 	cmp.w	r3, #1376	; 0x560
 8001e10:	d035      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8001e1a:	d030      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8001e24:	d02b      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8001e2e:	d026      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8001e38:	d021      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001e42:	d01c      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8001e4c:	d017      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001e56:	d012      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8001e60:	d00d      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8001e6a:	d008      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_Init+0x25a>
 8001e74:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001e78:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001e7a:	f7ff f931 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d010      	beq.n	8001ea8 <HAL_ADC_Init+0x284>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_ADC_Init+0x284>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d008      	beq.n	8001ea8 <HAL_ADC_Init+0x284>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Init+0x284>
 8001e9e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001ea4:	f7ff f91c 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d011      	beq.n	8001ed4 <HAL_ADC_Init+0x2b0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_ADC_Init+0x2b0>
 8001eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_ADC_Init+0x2ac>)
 8001ebe:	f7ff f90f 	bl	80010e0 <assert_failed>
 8001ec2:	e007      	b.n	8001ed4 <HAL_ADC_Init+0x2b0>
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40022100 	.word	0x40022100
 8001ecc:	58026000 	.word	0x58026000
 8001ed0:	08013c68 	.word	0x08013c68
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <HAL_ADC_Init+0x2cc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_Init+0x2cc>
 8001ee6:	f240 11af 	movw	r1, #431	; 0x1af
 8001eea:	488e      	ldr	r0, [pc, #568]	; (8002124 <HAL_ADC_Init+0x500>)
 8001eec:	f7ff f8f8 	bl	80010e0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d1b      	ldrb	r3, [r3, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_ADC_Init+0x2e6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7d1b      	ldrb	r3, [r3, #20]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x2e6>
 8001f00:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f04:	4887      	ldr	r0, [pc, #540]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f06:	f7ff f8eb 	bl	80010e0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_ADC_Init+0x304>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_Init+0x304>
 8001f1e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001f22:	4880      	ldr	r0, [pc, #512]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f24:	f7ff f8dc 	bl	80010e0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02a      	beq.n	8001f86 <HAL_ADC_Init+0x362>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_ADC_Init+0x31c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d904      	bls.n	8001f4a <HAL_ADC_Init+0x326>
 8001f40:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001f44:	4877      	ldr	r0, [pc, #476]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f46:	f7ff f8cb 	bl	80010e0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f1b      	ldrb	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_ADC_Init+0x340>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7f1b      	ldrb	r3, [r3, #28]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_Init+0x340>
 8001f5a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001f5e:	4871      	ldr	r0, [pc, #452]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f60:	f7ff f8be 	bl	80010e0 <assert_failed>
    
    if(hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7f1b      	ldrb	r3, [r3, #28]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10c      	bne.n	8001f86 <HAL_ADC_Init+0x362>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_ADC_Init+0x358>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d904      	bls.n	8001f86 <HAL_ADC_Init+0x362>
 8001f7c:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001f80:	4868      	ldr	r0, [pc, #416]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f82:	f7ff f8ad 	bl	80010e0 <assert_failed>
    }
  }
  
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7f1b      	ldrb	r3, [r3, #28]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_ADC_Init+0x37c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7d5b      	ldrb	r3, [r3, #21]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d104      	bne.n	8001fa0 <HAL_ADC_Init+0x37c>
 8001f96:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001f9a:	4862      	ldr	r0, [pc, #392]	; (8002124 <HAL_ADC_Init+0x500>)
 8001f9c:	f7ff f8a0 	bl	80010e0 <assert_failed>
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_Init+0x398>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe fb71 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fd6b 	bl	8001a9c <LL_ADC_IsDeepPowerDownEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Init+0x3b2>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fd51 	bl	8001a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fd86 	bl	8001aec <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <HAL_ADC_Init+0x3ea>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd6a 	bl	8001ac4 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_ADC_Init+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_ADC_Init+0x508>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8002000:	e002      	b.n	8002008 <HAL_ADC_Init+0x3e4>
    {
      wait_loop_index--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_Init+0x3de>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fd6a 	bl	8001aec <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_ADC_Init+0x416>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fdca 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 8002044:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 8185 	bne.w	800235e <HAL_ADC_Init+0x73a>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8181 	bne.w	800235e <HAL_ADC_Init+0x73a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fd77 	bl	8001b64 <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d136      	bne.n	80020ea <HAL_ADC_Init+0x4c6>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <HAL_ADC_Init+0x50c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_ADC_Init+0x46c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_ADC_Init+0x510>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d10e      	bne.n	80020ae <HAL_ADC_Init+0x48a>
 8002090:	4827      	ldr	r0, [pc, #156]	; (8002130 <HAL_ADC_Init+0x50c>)
 8002092:	f7ff fd67 	bl	8001b64 <LL_ADC_IsEnabled>
 8002096:	4604      	mov	r4, r0
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <HAL_ADC_Init+0x510>)
 800209a:	f7ff fd63 	bl	8001b64 <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	4323      	orrs	r3, r4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	e008      	b.n	80020c0 <HAL_ADC_Init+0x49c>
 80020ae:	4822      	ldr	r0, [pc, #136]	; (8002138 <HAL_ADC_Init+0x514>)
 80020b0:	f7ff fd58 	bl	8001b64 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <HAL_ADC_Init+0x4c6>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_ADC_Init+0x50c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_Init+0x4b4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_ADC_Init+0x510>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_Init+0x4b8>
 80020d8:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_ADC_Init+0x518>)
 80020da:	e000      	b.n	80020de <HAL_ADC_Init+0x4ba>
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_ADC_Init+0x51c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f7ff fb83 	bl	80017f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020ea:	f7ff fb75 	bl	80017d8 <HAL_GetREVID>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d925      	bls.n	8002144 <HAL_ADC_Init+0x520>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d121      	bne.n	8002144 <HAL_ADC_Init+0x520>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7d5b      	ldrb	r3, [r3, #21]
 8002104:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800210a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002110:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7f1b      	ldrb	r3, [r3, #28]
 8002116:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002118:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800211a:	f043 030c 	orr.w	r3, r3, #12
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e01e      	b.n	8002160 <HAL_ADC_Init+0x53c>
 8002122:	bf00      	nop
 8002124:	08013c68 	.word	0x08013c68
 8002128:	24000000 	.word	0x24000000
 800212c:	053e2d63 	.word	0x053e2d63
 8002130:	40022000 	.word	0x40022000
 8002134:	40022100 	.word	0x40022100
 8002138:	58026000 	.word	0x58026000
 800213c:	40022300 	.word	0x40022300
 8002140:	58026300 	.word	0x58026300
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7d5b      	ldrb	r3, [r3, #21]
 8002148:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800214e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002154:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7f1b      	ldrb	r3, [r3, #28]
 800215a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
    }
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7f1b      	ldrb	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_ADC_Init+0x552>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	3b01      	subs	r3, #1
 800216e:	045b      	lsls	r3, r3, #17
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_ADC_Init+0x56e>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b77      	ldr	r3, [pc, #476]	; (8002378 <HAL_ADC_Init+0x754>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fd14 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 80021b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fd21 	bl	8001bfe <LL_ADC_INJ_IsConversionOngoing>
 80021bc:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 80aa 	bne.w	800231a <HAL_ADC_Init+0x6f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 80a6 	bne.w	800231a <HAL_ADC_Init+0x6f6>
       )
    {
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7d1b      	ldrb	r3, [r3, #20]
 80021d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement)  );
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_ADC_Init+0x758>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d179      	bne.n	80022ee <HAL_ADC_Init+0x6ca>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d304      	bcc.n	800220e <HAL_ADC_Init+0x5ea>
 8002204:	f240 2179 	movw	r1, #633	; 0x279
 8002208:	485d      	ldr	r0, [pc, #372]	; (8002380 <HAL_ADC_Init+0x75c>)
 800220a:	f7fe ff69 	bl	80010e0 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d025      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b20      	cmp	r3, #32
 800221c:	d021      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d01d      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b60      	cmp	r3, #96	; 0x60
 800222c:	d019      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d015      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2ba0      	cmp	r3, #160	; 0xa0
 800223c:	d011      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2bc0      	cmp	r3, #192	; 0xc0
 8002244:	d00d      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2be0      	cmp	r3, #224	; 0xe0
 800224c:	d009      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002256:	d004      	beq.n	8002262 <HAL_ADC_Init+0x63e>
 8002258:	f240 217a 	movw	r1, #634	; 0x27a
 800225c:	4848      	ldr	r0, [pc, #288]	; (8002380 <HAL_ADC_Init+0x75c>)
 800225e:	f7fe ff3f 	bl	80010e0 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_ADC_Init+0x65a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002272:	d004      	beq.n	800227e <HAL_ADC_Init+0x65a>
 8002274:	f240 217b 	movw	r1, #635	; 0x27b
 8002278:	4841      	ldr	r0, [pc, #260]	; (8002380 <HAL_ADC_Init+0x75c>)
 800227a:	f7fe ff31 	bl	80010e0 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	2b01      	cmp	r3, #1
 8002284:	d00a      	beq.n	800229c <HAL_ADC_Init+0x678>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	f240 4201 	movw	r2, #1025	; 0x401
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_ADC_Init+0x678>
 8002292:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8002296:	483a      	ldr	r0, [pc, #232]	; (8002380 <HAL_ADC_Init+0x75c>)
 8002298:	f7fe ff22 	bl	80010e0 <assert_failed>
        
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_ADC_Init+0x688>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <HAL_ADC_Init+0x69a>
        {
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_ADC_Init+0x69a>
 80022b4:	f240 2182 	movw	r1, #642	; 0x282
 80022b8:	4831      	ldr	r0, [pc, #196]	; (8002380 <HAL_ADC_Init+0x75c>)
 80022ba:	f7fe ff11 	bl	80010e0 <assert_failed>
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_ADC_Init+0x760>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022cc:	0411      	lsls	r1, r2, #16
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022de:	430a      	orrs	r2, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	611a      	str	r2, [r3, #16]
 80022ec:	e007      	b.n	80022fe <HAL_ADC_Init+0x6da>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	611a      	str	r2, [r3, #16]
      }
      
      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 fab9 	bl	800388c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <HAL_ADC_Init+0x718>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f023 010f 	bic.w	r1, r3, #15
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x728>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 020f 	bic.w	r2, r2, #15
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f023 0303 	bic.w	r3, r3, #3
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
 800235c:	e007      	b.n	800236e <HAL_ADC_Init+0x74a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800236e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3724      	adds	r7, #36	; 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	fff0c003 	.word	0xfff0c003
 800237c:	ffffbffc 	.word	0xffffbffc
 8002380:	08013c68 	.word	0x08013c68
 8002384:	fc00f81e 	.word	0xfc00f81e

08002388 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a92      	ldr	r2, [pc, #584]	; (80025e0 <HAL_ADC_Start_IT+0x258>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_Start_IT+0x1c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a91      	ldr	r2, [pc, #580]	; (80025e4 <HAL_ADC_Start_IT+0x25c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_Start_IT+0x20>
 80023a4:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <HAL_ADC_Start_IT+0x260>)
 80023a6:	e000      	b.n	80023aa <HAL_ADC_Start_IT+0x22>
 80023a8:	4b90      	ldr	r3, [pc, #576]	; (80025ec <HAL_ADC_Start_IT+0x264>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fb48 	bl	8001a40 <LL_ADC_GetMultimode>
 80023b0:	6138      	str	r0, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a8a      	ldr	r2, [pc, #552]	; (80025e0 <HAL_ADC_Start_IT+0x258>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00e      	beq.n	80023da <HAL_ADC_Start_IT+0x52>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a88      	ldr	r2, [pc, #544]	; (80025e4 <HAL_ADC_Start_IT+0x25c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_ADC_Start_IT+0x52>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a89      	ldr	r2, [pc, #548]	; (80025f0 <HAL_ADC_Start_IT+0x268>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d004      	beq.n	80023da <HAL_ADC_Start_IT+0x52>
 80023d0:	f240 61bb 	movw	r1, #1723	; 0x6bb
 80023d4:	4887      	ldr	r0, [pc, #540]	; (80025f4 <HAL_ADC_Start_IT+0x26c>)
 80023d6:	f7fe fe83 	bl	80010e0 <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fbfa 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 811f 	bne.w	800262a <HAL_ADC_Start_IT+0x2a2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Start_IT+0x72>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e11c      	b.n	8002634 <HAL_ADC_Start_IT+0x2ac>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f001 f966 	bl	80036d4 <ADC_Enable>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8106 	bne.w	8002620 <HAL_ADC_Start_IT+0x298>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002418:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_ADC_Start_IT+0x270>)
 800241a:	4013      	ands	r3, r2
 800241c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a6e      	ldr	r2, [pc, #440]	; (80025e4 <HAL_ADC_Start_IT+0x25c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d002      	beq.n	8002434 <HAL_ADC_Start_IT+0xac>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e000      	b.n	8002436 <HAL_ADC_Start_IT+0xae>
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_ADC_Start_IT+0x258>)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4293      	cmp	r3, r2
 800243c:	d002      	beq.n	8002444 <HAL_ADC_Start_IT+0xbc>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <HAL_ADC_Start_IT+0xc8>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
      }
      
      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <HAL_ADC_Start_IT+0xe2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));         
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f023 0206 	bic.w	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start_IT+0xe8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc); 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
      }
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	221c      	movs	r2, #28
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      
      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 021c 	bic.w	r2, r2, #28
 800248e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d108      	bne.n	80024aa <HAL_ADC_Start_IT+0x122>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0208 	orr.w	r2, r2, #8
 80024a6:	605a      	str	r2, [r3, #4]
          break;
 80024a8:	e008      	b.n	80024bc <HAL_ADC_Start_IT+0x134>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0204 	orr.w	r2, r2, #4
 80024b8:	605a      	str	r2, [r3, #4]
          break;
 80024ba:	bf00      	nop
      
      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_ADC_Start_IT+0x14c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0210 	orr.w	r2, r2, #16
 80024d2:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */ 
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_ADC_Start_IT+0x25c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d002      	beq.n	80024e4 <HAL_ADC_Start_IT+0x15c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_Start_IT+0x15e>
 80024e4:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_ADC_Start_IT+0x258>)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d008      	beq.n	8002500 <HAL_ADC_Start_IT+0x178>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_ADC_Start_IT+0x178>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d002      	beq.n	8002500 <HAL_ADC_Start_IT+0x178>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d13b      	bne.n	8002578 <HAL_ADC_Start_IT+0x1f0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02d      	beq.n	800256a <HAL_ADC_Start_IT+0x1e2>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002516:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Enable as well injected interruptions in case 
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch(hadc->Init.EOCSelection)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d110      	bne.n	8002548 <HAL_ADC_Start_IT+0x1c0>
          {
            case ADC_EOC_SEQ_CONV: 
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0220 	bic.w	r2, r2, #32
 8002534:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002544:	605a      	str	r2, [r3, #4]
            break;
 8002546:	e011      	b.n	800256c <HAL_ADC_Start_IT+0x1e4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);      
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002556:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	605a      	str	r2, [r3, #4]
            break;
 8002568:	e000      	b.n	800256c <HAL_ADC_Start_IT+0x1e4>
          }
        }
 800256a:	bf00      	nop
        
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fb1d 	bl	8001bb0 <LL_ADC_REG_StartConversion>
 8002576:	e05c      	b.n	8002632 <HAL_ADC_Start_IT+0x2aa>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_ADC_Start_IT+0x25c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_Start_IT+0x20c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e000      	b.n	8002596 <HAL_ADC_Start_IT+0x20e>
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_ADC_Start_IT+0x258>)
 8002596:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d045      	beq.n	8002630 <HAL_ADC_Start_IT+0x2a8>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit 
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch(hadc->Init.EOCSelection)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d11f      	bne.n	80025fc <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0220 	bic.w	r2, r2, #32
 80025ca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025da:	605a      	str	r2, [r3, #4]
            break;
 80025dc:	e029      	b.n	8002632 <HAL_ADC_Start_IT+0x2aa>
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022100 	.word	0x40022100
 80025e8:	40022300 	.word	0x40022300
 80025ec:	58026300 	.word	0x58026300
 80025f0:	58026000 	.word	0x58026000
 80025f4:	08013c68 	.word	0x08013c68
 80025f8:	fffff0fe 	.word	0xfffff0fe
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	605a      	str	r2, [r3, #4]
            break;
 800261c:	bf00      	nop
 800261e:	e008      	b.n	8002632 <HAL_ADC_Start_IT+0x2aa>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002628:	e003      	b.n	8002632 <HAL_ADC_Start_IT+0x2aa>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
 800262e:	e000      	b.n	8002632 <HAL_ADC_Start_IT+0x2aa>
        }
 8002630:	bf00      	nop
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_ADC_GetValue+0x40>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_ADC_GetValue+0x30>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_ADC_GetValue+0x44>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_ADC_GetValue+0x30>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_ADC_GetValue+0x48>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_ADC_GetValue+0x30>
 8002662:	f640 0173 	movw	r1, #2163	; 0x873
 8002666:	4808      	ldr	r0, [pc, #32]	; (8002688 <HAL_ADC_GetValue+0x4c>)
 8002668:	f7fe fd3a 	bl	80010e0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40022000 	.word	0x40022000
 8002680:	40022100 	.word	0x40022100
 8002684:	58026000 	.word	0x58026000
 8002688:	08013c68 	.word	0x08013c68

0800268c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a98      	ldr	r2, [pc, #608]	; (8002910 <HAL_ADC_IRQHandler+0x284>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_IRQHandler+0x30>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a97      	ldr	r2, [pc, #604]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x34>
 80026bc:	4b96      	ldr	r3, [pc, #600]	; (8002918 <HAL_ADC_IRQHandler+0x28c>)
 80026be:	e000      	b.n	80026c2 <HAL_ADC_IRQHandler+0x36>
 80026c0:	4b96      	ldr	r3, [pc, #600]	; (800291c <HAL_ADC_IRQHandler+0x290>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f9bc 	bl	8001a40 <LL_ADC_GetMultimode>
 80026c8:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a90      	ldr	r2, [pc, #576]	; (8002910 <HAL_ADC_IRQHandler+0x284>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00e      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x66>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a8e      	ldr	r2, [pc, #568]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x66>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a8f      	ldr	r2, [pc, #572]	; (8002920 <HAL_ADC_IRQHandler+0x294>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x66>
 80026e8:	f640 018d 	movw	r1, #2189	; 0x88d
 80026ec:	488d      	ldr	r0, [pc, #564]	; (8002924 <HAL_ADC_IRQHandler+0x298>)
 80026ee:	f7fe fcf7 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d008      	beq.n	800270c <HAL_ADC_IRQHandler+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d004      	beq.n	800270c <HAL_ADC_IRQHandler+0x80>
 8002702:	f640 018e 	movw	r1, #2190	; 0x88e
 8002706:	4887      	ldr	r0, [pc, #540]	; (8002924 <HAL_ADC_IRQHandler+0x298>)
 8002708:	f7fe fcea 	bl	80010e0 <assert_failed>
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_ADC_IRQHandler+0xba>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_ADC_IRQHandler+0xba>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f001 fab5 	bl	8003ca8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2202      	movs	r2, #2
 8002744:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_ADC_IRQHandler+0xce>
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <HAL_ADC_IRQHandler+0xe4>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0308 	and.w	r3, r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8083 	beq.w	800286c <HAL_ADC_IRQHandler+0x1e0>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d07d      	beq.n	800286c <HAL_ADC_IRQHandler+0x1e0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_IRQHandler+0xfc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f8bc 	bl	800190a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d062      	beq.n	800285e <HAL_ADC_IRQHandler+0x1d2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d002      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x11c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e000      	b.n	80027aa <HAL_ADC_IRQHandler+0x11e>
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_ADC_IRQHandler+0x284>)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d008      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x138>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x138>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d002      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x138>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d104      	bne.n	80027ce <HAL_ADC_IRQHandler+0x142>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	e00c      	b.n	80027e8 <HAL_ADC_IRQHandler+0x15c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d002      	beq.n	80027de <HAL_ADC_IRQHandler+0x152>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_IRQHandler+0x154>
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_ADC_IRQHandler+0x284>)
 80027e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	623b      	str	r3, [r7, #32]
      }
      
      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d135      	bne.n	800285e <HAL_ADC_IRQHandler+0x1d2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d12e      	bne.n	800285e <HAL_ADC_IRQHandler+0x1d2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f9e7 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11a      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1ba>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020c 	bic.w	r2, r2, #12
 800281e:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
            
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d112      	bne.n	800285e <HAL_ADC_IRQHandler+0x1d2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
 8002844:	e00b      	b.n	800285e <HAL_ADC_IRQHandler+0x1d2>
            }           
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f00c feb8 	bl	800f5d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	220c      	movs	r2, #12
 800286a:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_ADC_IRQHandler+0x1f4>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_IRQHandler+0x20c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a5 	beq.w	80029d6 <HAL_ADC_IRQHandler+0x34a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 809f 	beq.w	80029d6 <HAL_ADC_IRQHandler+0x34a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f864 	bl	8001982 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80028ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f822 	bl	800190a <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d002      	beq.n	80028d8 <HAL_ADC_IRQHandler+0x24c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e000      	b.n	80028da <HAL_ADC_IRQHandler+0x24e>
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_ADC_IRQHandler+0x284>)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d008      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x268>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x268>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d002      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x268>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d104      	bne.n	80028fe <HAL_ADC_IRQHandler+0x272>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	e019      	b.n	8002932 <HAL_ADC_IRQHandler+0x2a6>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_ADC_IRQHandler+0x288>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <HAL_ADC_IRQHandler+0x29c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e00d      	b.n	800292a <HAL_ADC_IRQHandler+0x29e>
 800290e:	bf00      	nop
 8002910:	40022000 	.word	0x40022000
 8002914:	40022100 	.word	0x40022100
 8002918:	40022300 	.word	0x40022300
 800291c:	58026300 	.word	0x58026300
 8002920:	58026000 	.word	0x58026000
 8002924:	08013c68 	.word	0x08013c68
 8002928:	4b84      	ldr	r3, [pc, #528]	; (8002b3c <HAL_ADC_IRQHandler+0x4b0>)
 800292a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10c      	bne.n	8002952 <HAL_ADC_IRQHandler+0x2c6>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800293e:	2b00      	cmp	r3, #0
 8002940:	d142      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03f      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == 0UL)    )   )   )
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13a      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
    {
      /* If End of Sequence is reached, disable interrupts */
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d133      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d12e      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f945 	bl	8001bfe <LL_ADC_INJ_IsConversionOngoing>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11a      	bne.n	80029b0 <HAL_ADC_IRQHandler+0x324>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002988:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d112      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
 80029ae:	e00b      	b.n	80029c8 <HAL_ADC_IRQHandler+0x33c>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0210 	orr.w	r2, r3, #16
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
          
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of 
              sequence.    */    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f001 f945 	bl	8003c58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2260      	movs	r2, #96	; 0x60
 80029d4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x378>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x378>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8a8 	bl	8002b4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <HAL_ADC_IRQHandler+0x3a8>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_ADC_IRQHandler+0x3a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f92b 	bl	8003c80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a32:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <HAL_ADC_IRQHandler+0x3d8>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <HAL_ADC_IRQHandler+0x3d8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f001 f91d 	bl	8003c94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d043      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x46a>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03e      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x46a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_ADC_IRQHandler+0x3fa>
    {
      overrun_error = 1UL;
 8002a80:	2301      	movs	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
 8002a84:	e021      	b.n	8002aca <HAL_ADC_IRQHandler+0x43e>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x42c>
      {
        /* Multimode (when feature is available) is enabled, 
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_ADC_IRQHandler+0x4b0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x414>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_ADC_IRQHandler+0x4b4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_IRQHandler+0x418>
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_ADC_IRQHandler+0x4b8>)
 8002aa2:	e000      	b.n	8002aa6 <HAL_ADC_IRQHandler+0x41a>
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_ADC_IRQHandler+0x4bc>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe ffd8 	bl	8001a5c <LL_ADC_GetMultiDMATransfer>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_ADC_IRQHandler+0x43e>
        {
          overrun_error = 1UL;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	e008      	b.n	8002aca <HAL_ADC_IRQHandler+0x43e>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_ADC_IRQHandler+0x43e>
      {
        overrun_error = 1UL;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }
        
    if (overrun_error == 1UL)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10e      	bne.n	8002aee <HAL_ADC_IRQHandler+0x462>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f043 0202 	orr.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f839 	bl	8002b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2210      	movs	r2, #16
 8002af4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d018      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x4a6>
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x4a6>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f043 0208 	orr.w	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2a:	601a      	str	r2, [r3, #0]
    
    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f001 f89d 	bl	8003c6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40022100 	.word	0x40022100
 8002b44:	40022300 	.word	0x40022300
 8002b48:	58026300 	.word	0x58026300

08002b4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b099      	sub	sp, #100	; 0x64
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <HAL_ADC_ConfigChannel+0x1c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x3c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_ADC_ConfigChannel+0x1c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x3c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_ADC_ConfigChannel+0x1c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x3c>
 8002ba6:	f640 2153 	movw	r1, #2643	; 0xa53
 8002baa:	4865      	ldr	r0, [pc, #404]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002bac:	f7fe fa98 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d04f      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d04b      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d047      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	d043      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d03e      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002be2:	d039      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8002bec:	d034      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8002bf6:	d02f      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002c00:	d02a      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0a:	d025      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f240 2206 	movw	r2, #518	; 0x206
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01f      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002c20:	d01a      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f240 2212 	movw	r2, #530	; 0x212
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d014      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8002c36:	d00f      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c40:	d00a      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f240 3206 	movw	r2, #774	; 0x306
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xe4>
 8002c4e:	f640 2154 	movw	r1, #2644	; 0xa54
 8002c52:	483b      	ldr	r0, [pc, #236]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002c54:	f7fe fa44 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d01c      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d014      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d010      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d00c      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d008      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x12e>
 8002c98:	f640 2155 	movw	r1, #2645	; 0xa55
 8002c9c:	4828      	ldr	r0, [pc, #160]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002c9e:	f7fe fa1f 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d009      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x14e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_ADC_ConfigChannel+0x1d0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x14e>
 8002cb8:	f640 2156 	movw	r1, #2646	; 0xa56
 8002cbc:	4820      	ldr	r0, [pc, #128]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002cbe:	f7fe fa0f 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d014      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x180>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x180>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x180>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d008      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x180>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d004      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x180>
 8002cea:	f640 2157 	movw	r1, #2647	; 0xa57
 8002cee:	4814      	ldr	r0, [pc, #80]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002cf0:	f7fe f9f6 	bl	80010e0 <assert_failed>
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d124      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x1d4>
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset/(hadc->Init.Oversampling.Ratio+1U)));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	3301      	adds	r3, #1
 8002d08:	fbb2 f4f3 	udiv	r4, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fda1 	bl	8001858 <LL_ADC_GetResolution>
 8002d16:	4603      	mov	r3, r0
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d924      	bls.n	8002d70 <HAL_ADC_ConfigChannel+0x1fc>
 8002d26:	f640 215b 	movw	r1, #2651	; 0xa5b
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_ADC_ConfigChannel+0x1cc>)
 8002d2c:	f7fe f9d8 	bl	80010e0 <assert_failed>
 8002d30:	e01e      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x1fc>
 8002d32:	bf00      	nop
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40022100 	.word	0x40022100
 8002d3c:	58026000 	.word	0x58026000
 8002d40:	08013c68 	.word	0x08013c68
 8002d44:	47ff0000 	.word	0x47ff0000
  }
  else
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695c      	ldr	r4, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe fd81 	bl	8001858 <LL_ADC_GetResolution>
 8002d56:	4603      	mov	r3, r0
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d904      	bls.n	8002d70 <HAL_ADC_ConfigChannel+0x1fc>
 8002d66:	f640 215f 	movw	r1, #2655	; 0xa5f
 8002d6a:	4859      	ldr	r0, [pc, #356]	; (8002ed0 <HAL_ADC_ConfigChannel+0x35c>)
 8002d6c:	f7fe f9b8 	bl	80010e0 <assert_failed>
  }
  
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is  
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));  
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d009      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x218>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d104      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x218>
 8002d82:	f640 2164 	movw	r1, #2660	; 0xa64
 8002d86:	4852      	ldr	r0, [pc, #328]	; (8002ed0 <HAL_ADC_ConfigChannel+0x35c>)
 8002d88:	f7fe f9aa 	bl	80010e0 <assert_failed>
  
  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a50      	ldr	r2, [pc, #320]	; (8002ed4 <HAL_ADC_ConfigChannel+0x360>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f000 80ce 	beq.w	8002f34 <HAL_ADC_ConfigChannel+0x3c0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f000 8178 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_ADC_ConfigChannel+0x364>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f000 8172 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_ADC_ConfigChannel+0x368>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	f000 816c 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a48      	ldr	r2, [pc, #288]	; (8002ee0 <HAL_ADC_ConfigChannel+0x36c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	f000 8166 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a46      	ldr	r2, [pc, #280]	; (8002ee4 <HAL_ADC_ConfigChannel+0x370>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	f000 8160 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a44      	ldr	r2, [pc, #272]	; (8002ee8 <HAL_ADC_ConfigChannel+0x374>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	f000 815a 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_ADC_ConfigChannel+0x378>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	f000 8154 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a40      	ldr	r2, [pc, #256]	; (8002ef0 <HAL_ADC_ConfigChannel+0x37c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	f000 814e 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3e      	ldr	r2, [pc, #248]	; (8002ef4 <HAL_ADC_ConfigChannel+0x380>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f000 8148 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <HAL_ADC_ConfigChannel+0x384>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f000 8142 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_ADC_ConfigChannel+0x388>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f000 813c 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_ADC_ConfigChannel+0x38c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f000 8136 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <HAL_ADC_ConfigChannel+0x390>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f000 8130 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a34      	ldr	r2, [pc, #208]	; (8002f08 <HAL_ADC_ConfigChannel+0x394>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f000 812a 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_ADC_ConfigChannel+0x398>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f000 8124 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <HAL_ADC_ConfigChannel+0x39c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	f000 811e 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_ADC_ConfigChannel+0x3a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	f000 8118 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <HAL_ADC_ConfigChannel+0x3a4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f000 8112 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <HAL_ADC_ConfigChannel+0x3a8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f000 810c 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_ADC_ConfigChannel+0x3ac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	f000 8106 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_ADC_ConfigChannel+0x3b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f000 8100 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_ADC_ConfigChannel+0x3b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f000 80fa 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_ADC_ConfigChannel+0x3b8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	f000 80f4 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_ADC_ConfigChannel+0x3b4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f000 80ee 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_ADC_ConfigChannel+0x3bc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f000 80e8 	beq.w	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002ec2:	f640 2169 	movw	r1, #2665	; 0xa69
 8002ec6:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <HAL_ADC_ConfigChannel+0x35c>)
 8002ec8:	f7fe f90a 	bl	80010e0 <assert_failed>
 8002ecc:	e0e1      	b.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8002ece:	bf00      	nop
 8002ed0:	08013c68 	.word	0x08013c68
 8002ed4:	47ff0000 	.word	0x47ff0000
 8002ed8:	04300002 	.word	0x04300002
 8002edc:	08600004 	.word	0x08600004
 8002ee0:	0c900008 	.word	0x0c900008
 8002ee4:	10c00010 	.word	0x10c00010
 8002ee8:	14f00020 	.word	0x14f00020
 8002eec:	19200040 	.word	0x19200040
 8002ef0:	1d500080 	.word	0x1d500080
 8002ef4:	21800100 	.word	0x21800100
 8002ef8:	25b00200 	.word	0x25b00200
 8002efc:	2a000400 	.word	0x2a000400
 8002f00:	2e300800 	.word	0x2e300800
 8002f04:	32601000 	.word	0x32601000
 8002f08:	36902000 	.word	0x36902000
 8002f0c:	3ac04000 	.word	0x3ac04000
 8002f10:	3ef08000 	.word	0x3ef08000
 8002f14:	43210000 	.word	0x43210000
 8002f18:	47520000 	.word	0x47520000
 8002f1c:	4b840000 	.word	0x4b840000
 8002f20:	4fb80000 	.word	0x4fb80000
 8002f24:	cb840000 	.word	0xcb840000
 8002f28:	c7520000 	.word	0xc7520000
 8002f2c:	c3210000 	.word	0xc3210000
 8002f30:	cfb80000 	.word	0xcfb80000
  }
  else
  {
    if (hadc->Instance == ADC1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a98      	ldr	r2, [pc, #608]	; (800319c <HAL_ADC_ConfigChannel+0x628>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d136      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x438>
    {
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a97      	ldr	r2, [pc, #604]	; (80031a0 <HAL_ADC_ConfigChannel+0x62c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d031      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a95      	ldr	r2, [pc, #596]	; (80031a4 <HAL_ADC_ConfigChannel+0x630>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02c      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a94      	ldr	r2, [pc, #592]	; (80031a8 <HAL_ADC_ConfigChannel+0x634>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d027      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a92      	ldr	r2, [pc, #584]	; (80031ac <HAL_ADC_ConfigChannel+0x638>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a91      	ldr	r2, [pc, #580]	; (80031b0 <HAL_ADC_ConfigChannel+0x63c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d01d      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a8f      	ldr	r2, [pc, #572]	; (80031b4 <HAL_ADC_ConfigChannel+0x640>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a8e      	ldr	r2, [pc, #568]	; (80031b8 <HAL_ADC_ConfigChannel+0x644>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a8c      	ldr	r2, [pc, #560]	; (80031bc <HAL_ADC_ConfigChannel+0x648>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a8b      	ldr	r2, [pc, #556]	; (80031c0 <HAL_ADC_ConfigChannel+0x64c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a89      	ldr	r2, [pc, #548]	; (80031c4 <HAL_ADC_ConfigChannel+0x650>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x438>
 8002fa2:	f640 216f 	movw	r1, #2671	; 0xa6f
 8002fa6:	4888      	ldr	r0, [pc, #544]	; (80031c8 <HAL_ADC_ConfigChannel+0x654>)
 8002fa8:	f7fe f89a 	bl	80010e0 <assert_failed>
    }
    if (hadc->Instance == ADC2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a86      	ldr	r2, [pc, #536]	; (80031cc <HAL_ADC_ConfigChannel+0x658>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d131      	bne.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
    {
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a79      	ldr	r2, [pc, #484]	; (80031a0 <HAL_ADC_ConfigChannel+0x62c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02c      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <HAL_ADC_ConfigChannel+0x630>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d027      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a76      	ldr	r2, [pc, #472]	; (80031a8 <HAL_ADC_ConfigChannel+0x634>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a74      	ldr	r2, [pc, #464]	; (80031ac <HAL_ADC_ConfigChannel+0x638>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	; (80031b0 <HAL_ADC_ConfigChannel+0x63c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d018      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a71      	ldr	r2, [pc, #452]	; (80031b4 <HAL_ADC_ConfigChannel+0x640>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	; (80031b8 <HAL_ADC_ConfigChannel+0x644>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	; (80031bc <HAL_ADC_ConfigChannel+0x648>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_ADC_ConfigChannel+0x650>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_ADC_ConfigChannel+0x4a6>
 8003010:	f640 2173 	movw	r1, #2675	; 0xa73
 8003014:	486c      	ldr	r0, [pc, #432]	; (80031c8 <HAL_ADC_ConfigChannel+0x654>)
 8003016:	f7fe f863 	bl	80010e0 <assert_failed>
    }
    /* ADC3 is not available on some STM32H7 products */
    if (hadc->Instance == ADC3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6c      	ldr	r2, [pc, #432]	; (80031d0 <HAL_ADC_ConfigChannel+0x65c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d136      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
    {
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5d      	ldr	r2, [pc, #372]	; (80031a0 <HAL_ADC_ConfigChannel+0x62c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5c      	ldr	r2, [pc, #368]	; (80031a4 <HAL_ADC_ConfigChannel+0x630>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5a      	ldr	r2, [pc, #360]	; (80031a8 <HAL_ADC_ConfigChannel+0x634>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a59      	ldr	r2, [pc, #356]	; (80031ac <HAL_ADC_ConfigChannel+0x638>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_ADC_ConfigChannel+0x63c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <HAL_ADC_ConfigChannel+0x640>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a54      	ldr	r2, [pc, #336]	; (80031b8 <HAL_ADC_ConfigChannel+0x644>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a59      	ldr	r2, [pc, #356]	; (80031d4 <HAL_ADC_ConfigChannel+0x660>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_ADC_ConfigChannel+0x664>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_ADC_ConfigChannel+0x668>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x51e>
 8003088:	f640 2178 	movw	r1, #2680	; 0xa78
 800308c:	484e      	ldr	r0, [pc, #312]	; (80031c8 <HAL_ADC_ConfigChannel+0x654>)
 800308e:	f7fe f827 	bl	80010e0 <assert_failed>
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x52c>
 800309c:	2302      	movs	r3, #2
 800309e:	e300      	b.n	80036a2 <HAL_ADC_ConfigChannel+0xb2e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fd93 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 82e5 	bne.w	8003684 <HAL_ADC_ConfigChannel+0xb10>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x564>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2201      	movs	r2, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	e00e      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x582>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2201      	movs	r2, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	69d1      	ldr	r1, [r2, #28]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	61d3      	str	r3, [r2, #28]
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	f7fe fc0d 	bl	8001930 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fd5c 	bl	8001bd8 <LL_ADC_REG_IsConversionOngoing>
 8003120:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fd69 	bl	8001bfe <LL_ADC_INJ_IsConversionOngoing>
 800312c:	6578      	str	r0, [r7, #84]	; 0x54
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800312e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80d5 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x76c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 80d1 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x76c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	461a      	mov	r2, r3
 800314c:	f7fe fc2c 	bl	80019a8 <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_ADC_ConfigChannel+0x66c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315c:	d10b      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x602>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	e041      	b.n	80031fa <HAL_ADC_ConfigChannel+0x686>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d12f      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x670>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	e02e      	b.n	80031fa <HAL_ADC_ConfigChannel+0x686>
 800319c:	40022000 	.word	0x40022000
 80031a0:	04300002 	.word	0x04300002
 80031a4:	08600004 	.word	0x08600004
 80031a8:	0c900008 	.word	0x0c900008
 80031ac:	10c00010 	.word	0x10c00010
 80031b0:	14f00020 	.word	0x14f00020
 80031b4:	2a000400 	.word	0x2a000400
 80031b8:	2e300800 	.word	0x2e300800
 80031bc:	32601000 	.word	0x32601000
 80031c0:	43210000 	.word	0x43210000
 80031c4:	4b840000 	.word	0x4b840000
 80031c8:	08013c68 	.word	0x08013c68
 80031cc:	40022100 	.word	0x40022100
 80031d0:	58026000 	.word	0x58026000
 80031d4:	36902000 	.word	0x36902000
 80031d8:	3ac04000 	.word	0x3ac04000
 80031dc:	3ef08000 	.word	0x3ef08000
 80031e0:	5c001000 	.word	0x5c001000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	653b      	str	r3, [r7, #80]	; 0x50
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d025      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6919      	ldr	r1, [r3, #16]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003212:	f7fe fb45 	bl	80018a0 <LL_ADC_SetOffset>
         
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	7e5b      	ldrb	r3, [r3, #25]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_ADC_ConfigChannel+0x6bc>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	7e5b      	ldrb	r3, [r3, #25]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d004      	beq.n	8003230 <HAL_ADC_ConfigChannel+0x6bc>
 8003226:	f640 21a5 	movw	r1, #2725	; 0xaa5
 800322a:	48a7      	ldr	r0, [pc, #668]	; (80034c8 <HAL_ADC_ConfigChannel+0x954>)
 800322c:	f7fd ff58 	bl	80010e0 <assert_failed>
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6919      	ldr	r1, [r3, #16]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	7e5b      	ldrb	r3, [r3, #25]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x6d2>
 8003240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003244:	e000      	b.n	8003248 <HAL_ADC_ConfigChannel+0x6d4>
 8003246:	2300      	movs	r3, #0
 8003248:	461a      	mov	r2, r3
 800324a:	f7fe fb46 	bl	80018da <LL_ADC_SetOffsetSignedSaturation>
 800324e:	e047      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x76c>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	069b      	lsls	r3, r3, #26
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x700>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	069b      	lsls	r3, r3, #26
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x724>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003296:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x748>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ba:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	069b      	lsls	r3, r3, #26
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x76c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032de:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fc3d 	bl	8001b64 <LL_ADC_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 81d2 	bne.w	8003696 <HAL_ADC_ConfigChannel+0xb22>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7fe fb7a 	bl	80019f8 <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a70      	ldr	r2, [pc, #448]	; (80034cc <HAL_ADC_ConfigChannel+0x958>)
 800330a:	4293      	cmp	r3, r2
 800330c:	f040 80fa 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x990>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x7c4>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	3301      	adds	r3, #1
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2b09      	cmp	r3, #9
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e011      	b.n	800335c <HAL_ADC_ConfigChannel+0x7e8>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2b09      	cmp	r3, #9
 8003354:	bf94      	ite	ls
 8003356:	2301      	movls	r3, #1
 8003358:	2300      	movhi	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d061      	beq.n	8003424 <HAL_ADC_ConfigChannel+0x8b0>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_ADC_ConfigChannel+0x808>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	3301      	adds	r3, #1
 8003374:	069b      	lsls	r3, r3, #26
 8003376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337a:	e00d      	b.n	8003398 <HAL_ADC_ConfigChannel+0x824>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	069b      	lsls	r3, r3, #26
 8003394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x844>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	e00f      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x864>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x88a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	051b      	lsls	r3, r3, #20
 80033fc:	e010      	b.n	8003420 <HAL_ADC_ConfigChannel+0x8ac>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	051b      	lsls	r3, r3, #20
 8003420:	430b      	orrs	r3, r1
 8003422:	e06a      	b.n	80034fa <HAL_ADC_ConfigChannel+0x986>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x8cc>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	069b      	lsls	r3, r3, #26
 800343a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800343e:	e00d      	b.n	800345c <HAL_ADC_ConfigChannel+0x8e8>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	61fb      	str	r3, [r7, #28]
  return(result);
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	069b      	lsls	r3, r3, #26
 8003458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_ADC_ConfigChannel+0x908>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	e00f      	b.n	800349c <HAL_ADC_ConfigChannel+0x928>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	617b      	str	r3, [r7, #20]
  return(result);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	ea42 0103 	orr.w	r1, r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d111      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x95c>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	3301      	adds	r3, #1
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	3b1e      	subs	r3, #30
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034c6:	e017      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x984>
 80034c8:	08013c68 	.word	0x08013c68
 80034cc:	47ff0000 	.word	0x47ff0000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 021f 	and.w	r2, r3, #31
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	3b1e      	subs	r3, #30
 80034f2:	051b      	lsls	r3, r3, #20
 80034f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f8:	430b      	orrs	r3, r1
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	6892      	ldr	r2, [r2, #8]
 80034fe:	4619      	mov	r1, r3
 8003500:	f7fe fa52 	bl	80019a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
      
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f280 80c4 	bge.w	8003696 <HAL_ADC_ConfigChannel+0xb22>
      {
        /* Configuration of common ADC parameters                                 */
        
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a66      	ldr	r2, [pc, #408]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x9ae>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a64      	ldr	r2, [pc, #400]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x9b2>
 8003522:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <HAL_ADC_ConfigChannel+0xb40>)
 8003524:	e000      	b.n	8003528 <HAL_ADC_ConfigChannel+0x9b4>
 8003526:	4b64      	ldr	r3, [pc, #400]	; (80036b8 <HAL_ADC_ConfigChannel+0xb44>)
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe f987 	bl	800183c <LL_ADC_GetCommonPathInternalCh>
 800352e:	64f8      	str	r0, [r7, #76]	; 0x4c
        
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5d      	ldr	r2, [pc, #372]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x9d0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5c      	ldr	r2, [pc, #368]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10e      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x9ee>
 8003544:	4859      	ldr	r0, [pc, #356]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 8003546:	f7fe fb0d 	bl	8001b64 <LL_ADC_IsEnabled>
 800354a:	4604      	mov	r4, r0
 800354c:	4858      	ldr	r0, [pc, #352]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 800354e:	f7fe fb09 	bl	8001b64 <LL_ADC_IsEnabled>
 8003552:	4603      	mov	r3, r0
 8003554:	4323      	orrs	r3, r4
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e008      	b.n	8003574 <HAL_ADC_ConfigChannel+0xa00>
 8003562:	4856      	ldr	r0, [pc, #344]	; (80036bc <HAL_ADC_ConfigChannel+0xb48>)
 8003564:	f7fe fafe 	bl	8001b64 <LL_ADC_IsEnabled>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d07b      	beq.n	8003670 <HAL_ADC_ConfigChannel+0xafc>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_ADC_ConfigChannel+0xb4c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d12e      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0xa6c>
 8003582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d129      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0xa6c>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <HAL_ADC_ConfigChannel+0xb48>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d17f      	bne.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a44      	ldr	r2, [pc, #272]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_ADC_ConfigChannel+0xa36>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a42      	ldr	r2, [pc, #264]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0xa3a>
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_ADC_ConfigChannel+0xb40>)
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_ConfigChannel+0xa3c>
 80035ae:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_ADC_ConfigChannel+0xb44>)
 80035b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fe f92c 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_ADC_ConfigChannel+0xb50>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <HAL_ADC_ConfigChannel+0xb54>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_ConfigChannel+0xa64>
              {
                wait_loop_index--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0xa5e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035de:	e05a      	b.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a39      	ldr	r2, [pc, #228]	; (80036cc <HAL_ADC_ConfigChannel+0xb58>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d11e      	bne.n	8003628 <HAL_ADC_ConfigChannel+0xab4>
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d119      	bne.n	8003628 <HAL_ADC_ConfigChannel+0xab4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a30      	ldr	r2, [pc, #192]	; (80036bc <HAL_ADC_ConfigChannel+0xb48>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d14b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_ADC_ConfigChannel+0xa9e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0xaa2>
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_ADC_ConfigChannel+0xb40>)
 8003614:	e000      	b.n	8003618 <HAL_ADC_ConfigChannel+0xaa4>
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_ADC_ConfigChannel+0xb44>)
 8003618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7fe f8f8 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003626:	e036      	b.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <HAL_ADC_ConfigChannel+0xb5c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d131      	bne.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d12c      	bne.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_ADC_ConfigChannel+0xb48>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d127      	bne.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_ADC_ConfigChannel+0xb38>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_ADC_ConfigChannel+0xae6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_ADC_ConfigChannel+0xb3c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0xaea>
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_ADC_ConfigChannel+0xb40>)
 800365c:	e000      	b.n	8003660 <HAL_ADC_ConfigChannel+0xaec>
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_ADC_ConfigChannel+0xb44>)
 8003660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe f8d4 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
 800366e:	e012      	b.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
          
          tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003682:	e008      	b.n	8003696 <HAL_ADC_ConfigChannel+0xb22>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 800369e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3764      	adds	r7, #100	; 0x64
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022100 	.word	0x40022100
 80036b4:	40022300 	.word	0x40022300
 80036b8:	58026300 	.word	0x58026300
 80036bc:	58026000 	.word	0x58026000
 80036c0:	cb840000 	.word	0xcb840000
 80036c4:	24000000 	.word	0x24000000
 80036c8:	053e2d63 	.word	0x053e2d63
 80036cc:	c7520000 	.word	0xc7520000
 80036d0:	cfb80000 	.word	0xcfb80000

080036d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe fa3f 	bl	8001b64 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d167      	bne.n	80037bc <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <ADC_Enable+0xf4>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e053      	b.n	80037be <ADC_Enable+0xea>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe f9fa 	bl	8001b14 <LL_ADC_Enable>
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003720:	f7fe f82c 	bl	800177c <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]
    
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a28      	ldr	r2, [pc, #160]	; (80037cc <ADC_Enable+0xf8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <ADC_Enable+0x66>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <ADC_Enable+0xfc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <ADC_Enable+0x6a>
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <ADC_Enable+0x100>)
 800373c:	e000      	b.n	8003740 <ADC_Enable+0x6c>
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <ADC_Enable+0x104>)
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe f97d 	bl	8001a40 <LL_ADC_GetMultimode>
 8003746:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <ADC_Enable+0xfc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <ADC_Enable+0x84>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e000      	b.n	800375a <ADC_Enable+0x86>
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <ADC_Enable+0xf8>)
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d129      	bne.n	80037bc <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003768:	e021      	b.n	80037ae <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f9f8 	bl	8001b64 <LL_ADC_IsEnabled>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe f9c8 	bl	8001b14 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003784:	f7fd fffa 	bl	800177c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d90d      	bls.n	80037ae <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1d6      	bne.n	800376a <ADC_Enable+0x96>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	8000003f 	.word	0x8000003f
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40022100 	.word	0x40022100
 80037d4:	40022300 	.word	0x40022300
 80037d8:	58026300 	.word	0x58026300

080037dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe f9ce 	bl	8001b8a <LL_ADC_IsDisableOngoing>
 80037ee:	60f8      	str	r0, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe f9b5 	bl	8001b64 <LL_ADC_IsEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d040      	beq.n	8003882 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d13d      	bne.n	8003882 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030d 	and.w	r3, r3, #13
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe f98f 	bl	8001b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2203      	movs	r2, #3
 8003824:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003826:	f7fd ffa9 	bl	800177c <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800382c:	e022      	b.n	8003874 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e01c      	b.n	8003884 <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800384a:	f7fd ff97 	bl	800177c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d90d      	bls.n	8003874 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <ADC_Disable+0x6e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a73      	ldr	r2, [pc, #460]	; (8003a68 <ADC_ConfigureBoostMode+0x1dc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <ADC_ConfigureBoostMode+0x1c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a72      	ldr	r2, [pc, #456]	; (8003a6c <ADC_ConfigureBoostMode+0x1e0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d109      	bne.n	80038bc <ADC_ConfigureBoostMode+0x30>
 80038a8:	4b71      	ldr	r3, [pc, #452]	; (8003a70 <ADC_ConfigureBoostMode+0x1e4>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e008      	b.n	80038ce <ADC_ConfigureBoostMode+0x42>
 80038bc:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <ADC_ConfigureBoostMode+0x1e8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01a      	beq.n	8003908 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038d2:	f004 fe6d 	bl	80085b0 <HAL_RCC_GetHCLKFreq>
 80038d6:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e0:	d006      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x64>
 80038e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e6:	d00b      	beq.n	8003900 <ADC_ConfigureBoostMode+0x74>
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d000      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80038ee:	e05d      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	60fb      	str	r3, [r7, #12]
        break;
 80038fe:	e055      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	60fb      	str	r3, [r7, #12]
        break;
 8003906:	e051      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003908:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800390c:	f006 f83a 	bl	8009984 <HAL_RCCEx_GetPeriphCLKFreq>
 8003910:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800391a:	d02a      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
 800391c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003920:	d813      	bhi.n	800394a <ADC_ConfigureBoostMode+0xbe>
 8003922:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003926:	d024      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
 8003928:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800392c:	d806      	bhi.n	800393c <ADC_ConfigureBoostMode+0xb0>
 800392e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003932:	d01e      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
 8003934:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003938:	d01b      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800393a:	e037      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800393c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003940:	d017      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
 8003942:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003946:	d014      	beq.n	8003972 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003948:	e030      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800394a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800394e:	d021      	beq.n	8003994 <ADC_ConfigureBoostMode+0x108>
 8003950:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003954:	d806      	bhi.n	8003964 <ADC_ConfigureBoostMode+0xd8>
 8003956:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800395a:	d013      	beq.n	8003984 <ADC_ConfigureBoostMode+0xf8>
 800395c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003960:	d014      	beq.n	800398c <ADC_ConfigureBoostMode+0x100>
        break;
 8003962:	e023      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003964:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003968:	d018      	beq.n	800399c <ADC_ConfigureBoostMode+0x110>
 800396a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800396e:	d019      	beq.n	80039a4 <ADC_ConfigureBoostMode+0x118>
        break;
 8003970:	e01c      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	60fb      	str	r3, [r7, #12]
        break;
 8003982:	e013      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
      break;
 800398a:	e00f      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	60fb      	str	r3, [r7, #12]
        break;
 8003992:	e00b      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	60fb      	str	r3, [r7, #12]
        break;
 800399a:	e007      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	09db      	lsrs	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
        break;
 80039a2:	e003      	b.n	80039ac <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	60fb      	str	r3, [r7, #12]
        break;
 80039aa:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80039ac:	f7fd ff14 	bl	80017d8 <HAL_GetREVID>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d815      	bhi.n	80039e6 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <ADC_ConfigureBoostMode+0x1ec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d908      	bls.n	80039d4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d0:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */ 
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 80039d2:	e044      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	e03b      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
    if (freq <= 6250000UL)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <ADC_ConfigureBoostMode+0x1f0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d808      	bhi.n	8003a00 <ADC_ConfigureBoostMode+0x174>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	e02e      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 6250000UL) && (freq <= 12500000UL)) 
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <ADC_ConfigureBoostMode+0x1f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d90e      	bls.n	8003a26 <ADC_ConfigureBoostMode+0x19a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <ADC_ConfigureBoostMode+0x1f4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d80a      	bhi.n	8003a26 <ADC_ConfigureBoostMode+0x19a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	e01b      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 12500000UL) && (freq <= 25000000UL)) 
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <ADC_ConfigureBoostMode+0x1f4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d90e      	bls.n	8003a4c <ADC_ConfigureBoostMode+0x1c0>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <ADC_ConfigureBoostMode+0x1f8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d80a      	bhi.n	8003a4c <ADC_ConfigureBoostMode+0x1c0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	e008      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	e7ff      	b.n	8003a5e <ADC_ConfigureBoostMode+0x1d2>
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40022100 	.word	0x40022100
 8003a70:	40022300 	.word	0x40022300
 8003a74:	58026300 	.word	0x58026300
 8003a78:	01312d00 	.word	0x01312d00
 8003a7c:	005f5e10 	.word	0x005f5e10
 8003a80:	00bebc20 	.word	0x00bebc20
 8003a84:	017d7840 	.word	0x017d7840

08003a88 <LL_ADC_IsEnabled>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <LL_ADC_IsEnabled+0x18>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <LL_ADC_IsEnabled+0x1a>
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <LL_ADC_StartCalibration>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <LL_ADC_StartCalibration+0x38>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	3ffeffc0 	.word	0x3ffeffc0

08003aec <LL_ADC_IsCalibrationOnGoing>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <HAL_ADCEx_Calibration_Start+0x100>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00d      	beq.n	8003b72 <HAL_ADCEx_Calibration_Start+0x36>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <HAL_ADCEx_Calibration_Start+0x104>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d008      	beq.n	8003b72 <HAL_ADCEx_Calibration_Start+0x36>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_ADCEx_Calibration_Start+0x108>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <HAL_ADCEx_Calibration_Start+0x36>
 8003b6a:	218c      	movs	r1, #140	; 0x8c
 8003b6c:	4836      	ldr	r0, [pc, #216]	; (8003c48 <HAL_ADCEx_Calibration_Start+0x10c>)
 8003b6e:	f7fd fab7 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <HAL_ADCEx_Calibration_Start+0x50>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <HAL_ADCEx_Calibration_Start+0x110>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <HAL_ADCEx_Calibration_Start+0x50>
 8003b84:	218d      	movs	r1, #141	; 0x8d
 8003b86:	4830      	ldr	r0, [pc, #192]	; (8003c48 <HAL_ADCEx_Calibration_Start+0x10c>)
 8003b88:	f7fd faaa 	bl	80010e0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADCEx_Calibration_Start+0x5e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e04c      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0xf8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fe1a 	bl	80037dc <ADC_Disable>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d135      	bne.n	8003c1e <HAL_ADCEx_Calibration_Start+0xe2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_ADCEx_Calibration_Start+0x114>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff70 	bl	8003ab0 <LL_ADC_StartCalibration>
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bd0:	e014      	b.n	8003bfc <HAL_ADCEx_Calibration_Start+0xc0>
    {
      wait_loop_index++;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_ADCEx_Calibration_Start+0x118>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d90d      	bls.n	8003bfc <HAL_ADCEx_Calibration_Start+0xc0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f023 0312 	bic.w	r3, r3, #18
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e01b      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0xf8>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff73 	bl	8003aec <LL_ADC_IsCalibrationOnGoing>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e2      	bne.n	8003bd2 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c1c:	e005      	b.n	8003c2a <HAL_ADCEx_Calibration_Start+0xee>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	40022100 	.word	0x40022100
 8003c44:	58026000 	.word	0x58026000
 8003c48:	08013ca0 	.word	0x08013ca0
 8003c4c:	47ff0000 	.word	0x47ff0000
 8003c50:	ffffeefd 	.word	0xffffeefd
 8003c54:	555a95ff 	.word	0x555a95ff

08003c58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b09f      	sub	sp, #124	; 0x7c
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a9d      	ldr	r2, [pc, #628]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x24>
 8003cd6:	f640 0167 	movw	r1, #2151	; 0x867
 8003cda:	489c      	ldr	r0, [pc, #624]	; (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x290>)
 8003cdc:	f7fd fa00 	bl	80010e0 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d01c      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d018      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d014      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d010      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d00c      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	d008      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b09      	cmp	r3, #9
 8003d1e:	d004      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d20:	f640 0168 	movw	r1, #2152	; 0x868
 8003d24:	4889      	ldr	r0, [pc, #548]	; (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x290>)
 8003d26:	f7fd f9db 	bl	80010e0 <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d043      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d42:	d009      	beq.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d4c:	d004      	beq.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d4e:	f640 016b 	movw	r1, #2155	; 0x86b
 8003d52:	487e      	ldr	r0, [pc, #504]	; (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x290>)
 8003d54:	f7fd f9c4 	bl	80010e0 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02c      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d027      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d72:	d022      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	d01d      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d018      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d90:	d013      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d9a:	d00e      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da4:	d009      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d004      	beq.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003db0:	f640 016c 	movw	r1, #2156	; 0x86c
 8003db4:	4865      	ldr	r0, [pc, #404]	; (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x290>)
 8003db6:	f7fd f993 	bl	80010e0 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e0ba      	b.n	8003f3e <HAL_ADCEx_MultiModeConfigChannel+0x282>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d102      	bne.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	e001      	b.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
  
  if (tmphadcSlave.Instance == NULL)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e09d      	b.n	8003f3e <HAL_ADCEx_MultiModeConfigChannel+0x282>
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe85 	bl	8003b14 <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	6738      	str	r0, [r7, #112]	; 0x70
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fe7f 	bl	8003b14 <LL_ADC_REG_IsConversionOngoing>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d17f      	bne.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x260>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8003e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d17c      	bne.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x260>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x298>)
 8003e38:	e000      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x180>
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_ADCEx_MultiModeConfigChannel+0x29c>)
 8003e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d039      	beq.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10e      	bne.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x1ce>
 8003e6c:	4836      	ldr	r0, [pc, #216]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003e6e:	f7ff fe0b 	bl	8003a88 <LL_ADC_IsEnabled>
 8003e72:	4604      	mov	r4, r0
 8003e74:	4836      	ldr	r0, [pc, #216]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003e76:	f7ff fe07 	bl	8003a88 <LL_ADC_IsEnabled>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4323      	orrs	r3, r4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e008      	b.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
 8003e8a:	4834      	ldr	r0, [pc, #208]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8003e8c:	f7ff fdfc 	bl	8003a88 <LL_ADC_IsEnabled>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d047      	beq.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x274>
      {
          MODIFY_REG(tmpADC_Common->CCR,
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	6811      	ldr	r1, [r2, #0]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb8:	e03a      	b.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x274>
                    );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_ADCEx_MultiModeConfigChannel+0x23c>
 8003eda:	481b      	ldr	r0, [pc, #108]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x28c>)
 8003edc:	f7ff fdd4 	bl	8003a88 <LL_ADC_IsEnabled>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	481b      	ldr	r0, [pc, #108]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x294>)
 8003ee4:	f7ff fdd0 	bl	8003a88 <LL_ADC_IsEnabled>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4323      	orrs	r3, r4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e008      	b.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x24e>
 8003ef8:	4818      	ldr	r0, [pc, #96]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x2a0>)
 8003efa:	f7ff fdc5 	bl	8003a88 <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x274>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f1a:	e009      	b.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x274>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f2e:	e000      	b.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x276>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f30:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8003f3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
} 
 8003f3e:	4618      	mov	r0, r3
 8003f40:	377c      	adds	r7, #124	; 0x7c
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	08013ca0 	.word	0x08013ca0
 8003f50:	40022100 	.word	0x40022100
 8003f54:	40022300 	.word	0x40022300
 8003f58:	58026300 	.word	0x58026300
 8003f5c:	58026000 	.word	0x58026000
 8003f60:	fffff0e0 	.word	0xfffff0e0

08003f64 <__NVIC_SetPriorityGrouping>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f80:	4013      	ands	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	60d3      	str	r3, [r2, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00
 8003fa8:	05fa0000 	.word	0x05fa0000

08003fac <__NVIC_GetPriorityGrouping>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 0307 	and.w	r3, r3, #7
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <__NVIC_EnableIRQ>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db0b      	blt.n	8003ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	4907      	ldr	r1, [pc, #28]	; (8004000 <__NVIC_EnableIRQ+0x38>)
 8003fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2001      	movs	r0, #1
 8003fea:	fa00 f202 	lsl.w	r2, r0, r2
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e100 	.word	0xe000e100

08004004 <__NVIC_SetPriority>:
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db0a      	blt.n	800402e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	490c      	ldr	r1, [pc, #48]	; (8004050 <__NVIC_SetPriority+0x4c>)
 800401e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004022:	0112      	lsls	r2, r2, #4
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	440b      	add	r3, r1
 8004028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800402c:	e00a      	b.n	8004044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4908      	ldr	r1, [pc, #32]	; (8004054 <__NVIC_SetPriority+0x50>)
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3b04      	subs	r3, #4
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	440b      	add	r3, r1
 8004042:	761a      	strb	r2, [r3, #24]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000e100 	.word	0xe000e100
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <NVIC_EncodePriority>:
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	bf28      	it	cs
 8004076:	2304      	movcs	r3, #4
 8004078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3304      	adds	r3, #4
 800407e:	2b06      	cmp	r3, #6
 8004080:	d902      	bls.n	8004088 <NVIC_EncodePriority+0x30>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3b03      	subs	r3, #3
 8004086:	e000      	b.n	800408a <NVIC_EncodePriority+0x32>
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	401a      	ands	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	43d9      	mvns	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	4313      	orrs	r3, r2
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d0:	d301      	bcc.n	80040d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00f      	b.n	80040f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <SysTick_Config+0x40>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3b01      	subs	r3, #1
 80040dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040de:	210f      	movs	r1, #15
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e4:	f7ff ff8e 	bl	8004004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <SysTick_Config+0x40>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <SysTick_Config+0x40>)
 80040f0:	2207      	movs	r2, #7
 80040f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	e000e010 	.word	0xe000e010

08004104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b07      	cmp	r3, #7
 8004110:	d00f      	beq.n	8004132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b06      	cmp	r3, #6
 8004116:	d00c      	beq.n	8004132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d009      	beq.n	8004132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d006      	beq.n	8004132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d003      	beq.n	8004132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800412a:	2192      	movs	r1, #146	; 0x92
 800412c:	4804      	ldr	r0, [pc, #16]	; (8004140 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800412e:	f7fc ffd7 	bl	80010e0 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff16 	bl	8003f64 <__NVIC_SetPriorityGrouping>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	08013cdc 	.word	0x08013cdc

08004144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d903      	bls.n	8004160 <HAL_NVIC_SetPriority+0x1c>
 8004158:	21aa      	movs	r1, #170	; 0xaa
 800415a:	480e      	ldr	r0, [pc, #56]	; (8004194 <HAL_NVIC_SetPriority+0x50>)
 800415c:	f7fc ffc0 	bl	80010e0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d903      	bls.n	800416e <HAL_NVIC_SetPriority+0x2a>
 8004166:	21ab      	movs	r1, #171	; 0xab
 8004168:	480a      	ldr	r0, [pc, #40]	; (8004194 <HAL_NVIC_SetPriority+0x50>)
 800416a:	f7fc ffb9 	bl	80010e0 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800416e:	f7ff ff1d 	bl	8003fac <__NVIC_GetPriorityGrouping>
 8004172:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	f7ff ff6d 	bl	8004058 <NVIC_EncodePriority>
 800417e:	4602      	mov	r2, r0
 8004180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff3c 	bl	8004004 <__NVIC_SetPriority>
}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08013cdc 	.word	0x08013cdc

08004198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80041a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da03      	bge.n	80041b2 <HAL_NVIC_EnableIRQ+0x1a>
 80041aa:	21be      	movs	r1, #190	; 0xbe
 80041ac:	4805      	ldr	r0, [pc, #20]	; (80041c4 <HAL_NVIC_EnableIRQ+0x2c>)
 80041ae:	f7fc ff97 	bl	80010e0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff06 	bl	8003fc8 <__NVIC_EnableIRQ>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	08013cdc 	.word	0x08013cdc

080041c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff75 	bl	80040c0 <SysTick_Config>
 80041d6:	4603      	mov	r3, r0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e01e      	b.n	8004230 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <HAL_DAC_Init+0x58>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DAC_Init+0x26>
 80041fc:	f240 116b 	movw	r1, #363	; 0x16b
 8004200:	480e      	ldr	r0, [pc, #56]	; (800423c <HAL_DAC_Init+0x5c>)
 8004202:	f7fc ff6d 	bl	80010e0 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_DAC_Init+0x3c>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fb30 	bl	800087c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40007400 	.word	0x40007400
 800423c:	08013d18 	.word	0x08013d18

08004240 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_DAC_Start+0x20>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b10      	cmp	r3, #16
 8004254:	d004      	beq.n	8004260 <HAL_DAC_Start+0x20>
 8004256:	f44f 7102 	mov.w	r1, #520	; 0x208
 800425a:	4824      	ldr	r0, [pc, #144]	; (80042ec <HAL_DAC_Start+0xac>)
 800425c:	f7fc ff40 	bl	80010e0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	795b      	ldrb	r3, [r3, #5]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_DAC_Start+0x2c>
 8004268:	2302      	movs	r3, #2
 800426a:	e03b      	b.n	80042e4 <HAL_DAC_Start+0xa4>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2201      	movs	r2, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_DAC_Start+0x76>
  {
    
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d118      	bne.n	80042d6 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	e00f      	b.n	80042d6 <HAL_DAC_Start+0x96>
    }
  }
  else
  {  
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80042c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c4:	d107      	bne.n	80042d6 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0202 	orr.w	r2, r2, #2
 80042d4:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08013d18 	.word	0x08013d18

080042f0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_DAC_SetValue+0x28>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b10      	cmp	r3, #16
 800430c:	d004      	beq.n	8004318 <HAL_DAC_SetValue+0x28>
 800430e:	f240 315b 	movw	r1, #859	; 0x35b
 8004312:	481a      	ldr	r0, [pc, #104]	; (800437c <HAL_DAC_SetValue+0x8c>)
 8004314:	f7fc fee4 	bl	80010e0 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_DAC_SetValue+0x44>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d007      	beq.n	8004334 <HAL_DAC_SetValue+0x44>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d004      	beq.n	8004334 <HAL_DAC_SetValue+0x44>
 800432a:	f44f 7157 	mov.w	r1, #860	; 0x35c
 800432e:	4813      	ldr	r0, [pc, #76]	; (800437c <HAL_DAC_SetValue+0x8c>)
 8004330:	f7fc fed6 	bl	80010e0 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800433a:	4293      	cmp	r3, r2
 800433c:	d904      	bls.n	8004348 <HAL_DAC_SetValue+0x58>
 800433e:	f240 315d 	movw	r1, #861	; 0x35d
 8004342:	480e      	ldr	r0, [pc, #56]	; (800437c <HAL_DAC_SetValue+0x8c>)
 8004344:	f7fc fecc 	bl	80010e0 <assert_failed>
  
  tmp = (uint32_t)hdac->Instance; 
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	3308      	adds	r3, #8
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e004      	b.n	800436a <HAL_DAC_SetValue+0x7a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3314      	adds	r3, #20
 8004368:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	461a      	mov	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	08013d18 	.word	0x08013d18

08004380 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1, tmpreg2;
  uint32_t tickstart = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
   
  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03c      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d038      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b0a      	cmp	r3, #10
 80043a6:	d034      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b0e      	cmp	r3, #14
 80043ae:	d030      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b12      	cmp	r3, #18
 80043b6:	d02c      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b16      	cmp	r3, #22
 80043be:	d028      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b1a      	cmp	r3, #26
 80043c6:	d024      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b1e      	cmp	r3, #30
 80043ce:	d020      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b22      	cmp	r3, #34	; 0x22
 80043d6:	d01c      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b26      	cmp	r3, #38	; 0x26
 80043de:	d018      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b2a      	cmp	r3, #42	; 0x2a
 80043e6:	d014      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b2e      	cmp	r3, #46	; 0x2e
 80043ee:	d010      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b32      	cmp	r3, #50	; 0x32
 80043f6:	d00c      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b36      	cmp	r3, #54	; 0x36
 80043fe:	d008      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d004      	beq.n	8004412 <HAL_DAC_ConfigChannel+0x92>
 8004408:	f240 31ee 	movw	r1, #1006	; 0x3ee
 800440c:	485d      	ldr	r0, [pc, #372]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 800440e:	f7fc fe67 	bl	80010e0 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_DAC_ConfigChannel+0xac>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d004      	beq.n	800442c <HAL_DAC_ConfigChannel+0xac>
 8004422:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8004426:	4857      	ldr	r0, [pc, #348]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 8004428:	f7fc fe5a 	bl	80010e0 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_DAC_ConfigChannel+0xc6>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d004      	beq.n	8004446 <HAL_DAC_ConfigChannel+0xc6>
 800443c:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8004440:	4850      	ldr	r0, [pc, #320]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 8004442:	f7fc fe4d 	bl	80010e0 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_DAC_ConfigChannel+0xe0>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d004      	beq.n	8004460 <HAL_DAC_ConfigChannel+0xe0>
 8004456:	f240 31f1 	movw	r1, #1009	; 0x3f1
 800445a:	484a      	ldr	r0, [pc, #296]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 800445c:	f7fc fe40 	bl	80010e0 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_DAC_ConfigChannel+0xfa>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));               
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	2b1f      	cmp	r3, #31
 800446e:	d904      	bls.n	800447a <HAL_DAC_ConfigChannel+0xfa>
 8004470:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8004474:	4843      	ldr	r0, [pc, #268]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 8004476:	f7fc fe33 	bl	80010e0 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_DAC_ConfigChannel+0x114>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d004      	beq.n	8004494 <HAL_DAC_ConfigChannel+0x114>
 800448a:	f240 31f6 	movw	r1, #1014	; 0x3f6
 800448e:	483d      	ldr	r0, [pc, #244]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 8004490:	f7fc fe26 	bl	80010e0 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11c      	bne.n	80044d6 <HAL_DAC_ConfigChannel+0x156>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a4:	d304      	bcc.n	80044b0 <HAL_DAC_ConfigChannel+0x130>
 80044a6:	f240 31f9 	movw	r1, #1017	; 0x3f9
 80044aa:	4836      	ldr	r0, [pc, #216]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 80044ac:	f7fc fe18 	bl	80010e0 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d304      	bcc.n	80044c4 <HAL_DAC_ConfigChannel+0x144>
 80044ba:	f240 31fa 	movw	r1, #1018	; 0x3fa
 80044be:	4831      	ldr	r0, [pc, #196]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 80044c0:	f7fc fe0e 	bl	80010e0 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	2bff      	cmp	r3, #255	; 0xff
 80044ca:	d904      	bls.n	80044d6 <HAL_DAC_ConfigChannel+0x156>
 80044cc:	f240 31fb 	movw	r1, #1019	; 0x3fb
 80044d0:	482c      	ldr	r0, [pc, #176]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 80044d2:	f7fc fe05 	bl	80010e0 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_DAC_ConfigChannel+0x16c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d004      	beq.n	80044ec <HAL_DAC_ConfigChannel+0x16c>
 80044e2:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80044e6:	4827      	ldr	r0, [pc, #156]	; (8004584 <HAL_DAC_ConfigChannel+0x204>)
 80044e8:	f7fc fdfa 	bl	80010e0 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	795b      	ldrb	r3, [r3, #5]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_DAC_ConfigChannel+0x178>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e10c      	b.n	8004712 <HAL_DAC_ConfigChannel+0x392>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2202      	movs	r2, #2
 8004502:	711a      	strb	r2, [r3, #4]
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d179      	bne.n	8004600 <HAL_DAC_ConfigChannel+0x280>
  /* Sample on old configuration */ 
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d13c      	bne.n	800458c <HAL_DAC_ConfigChannel+0x20c>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004512:	f7fd f933 	bl	800177c <HAL_GetTick>
 8004516:	61f8      	str	r0, [r7, #28]
      
      
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004518:	e011      	b.n	800453e <HAL_DAC_ConfigChannel+0x1be>
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800451a:	f7fd f92f 	bl	800177c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d90a      	bls.n	800453e <HAL_DAC_ConfigChannel+0x1be>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f043 0208 	orr.w	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2203      	movs	r2, #3
 8004538:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0e9      	b.n	8004712 <HAL_DAC_ConfigChannel+0x392>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_DAC_ConfigChannel+0x208>)
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <HAL_DAC_ConfigChannel+0x19a>
        }
      }
      HAL_Delay(1);
 800454c:	2001      	movs	r0, #1
 800454e:	f7fd f921 	bl	8001794 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	6992      	ldr	r2, [r2, #24]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
 800455c:	e023      	b.n	80045a6 <HAL_DAC_ConfigChannel+0x226>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= 0UL)
      {
        /* Check for the Timeout */
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800455e:	f7fd f90d 	bl	800177c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d90f      	bls.n	800458c <HAL_DAC_ConfigChannel+0x20c>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f043 0208 	orr.w	r2, r3, #8
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2203      	movs	r2, #3
 800457c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0c7      	b.n	8004712 <HAL_DAC_ConfigChannel+0x392>
 8004582:	bf00      	nop
 8004584:	08013d18 	.word	0x08013d18
 8004588:	20008000 	.word	0x20008000
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= 0UL)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	dbe3      	blt.n	800455e <HAL_DAC_ConfigChannel+0x1de>
        }
      }
      HAL_Delay(1U);
 8004596:	2001      	movs	r0, #1
 8004598:	f7fd f8fc 	bl	8001794 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	6992      	ldr	r2, [r2, #24]
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	ea02 0103 	and.w	r1, r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	409a      	lsls	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	21ff      	movs	r1, #255	; 0xff
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	ea02 0103 	and.w	r1, r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d11d      	bne.n	8004644 <HAL_DAC_ConfigChannel+0x2c4>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	221f      	movs	r2, #31
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */
  
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2207      	movs	r2, #7
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	431a      	orrs	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43da      	mvns	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	400a      	ands	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	601a      	str	r2, [r3, #0]
      
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	22c0      	movs	r2, #192	; 0xc0
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	400a      	ands	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop

0800471c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7fd f82a 	bl	800177c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e3d8      	b.n	8004ee6 <HAL_DMA_Init+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a96      	ldr	r2, [pc, #600]	; (8004994 <HAL_DMA_Init+0x278>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d076      	beq.n	800482c <HAL_DMA_Init+0x110>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a95      	ldr	r2, [pc, #596]	; (8004998 <HAL_DMA_Init+0x27c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d071      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a93      	ldr	r2, [pc, #588]	; (800499c <HAL_DMA_Init+0x280>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d06c      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a92      	ldr	r2, [pc, #584]	; (80049a0 <HAL_DMA_Init+0x284>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d067      	beq.n	800482c <HAL_DMA_Init+0x110>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a90      	ldr	r2, [pc, #576]	; (80049a4 <HAL_DMA_Init+0x288>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d062      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a8f      	ldr	r2, [pc, #572]	; (80049a8 <HAL_DMA_Init+0x28c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d05d      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a8d      	ldr	r2, [pc, #564]	; (80049ac <HAL_DMA_Init+0x290>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d058      	beq.n	800482c <HAL_DMA_Init+0x110>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a8c      	ldr	r2, [pc, #560]	; (80049b0 <HAL_DMA_Init+0x294>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d053      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a8a      	ldr	r2, [pc, #552]	; (80049b4 <HAL_DMA_Init+0x298>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d04e      	beq.n	800482c <HAL_DMA_Init+0x110>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a89      	ldr	r2, [pc, #548]	; (80049b8 <HAL_DMA_Init+0x29c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d049      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a87      	ldr	r2, [pc, #540]	; (80049bc <HAL_DMA_Init+0x2a0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d044      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a86      	ldr	r2, [pc, #536]	; (80049c0 <HAL_DMA_Init+0x2a4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d03f      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a84      	ldr	r2, [pc, #528]	; (80049c4 <HAL_DMA_Init+0x2a8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d03a      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_DMA_Init+0x2ac>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d035      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a81      	ldr	r2, [pc, #516]	; (80049cc <HAL_DMA_Init+0x2b0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d030      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a80      	ldr	r2, [pc, #512]	; (80049d0 <HAL_DMA_Init+0x2b4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02b      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7e      	ldr	r2, [pc, #504]	; (80049d4 <HAL_DMA_Init+0x2b8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d026      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7d      	ldr	r2, [pc, #500]	; (80049d8 <HAL_DMA_Init+0x2bc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d021      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a7b      	ldr	r2, [pc, #492]	; (80049dc <HAL_DMA_Init+0x2c0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01c      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a7a      	ldr	r2, [pc, #488]	; (80049e0 <HAL_DMA_Init+0x2c4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d017      	beq.n	800482c <HAL_DMA_Init+0x110>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a78      	ldr	r2, [pc, #480]	; (80049e4 <HAL_DMA_Init+0x2c8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d012      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a77      	ldr	r2, [pc, #476]	; (80049e8 <HAL_DMA_Init+0x2cc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00d      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a75      	ldr	r2, [pc, #468]	; (80049ec <HAL_DMA_Init+0x2d0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d008      	beq.n	800482c <HAL_DMA_Init+0x110>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a74      	ldr	r2, [pc, #464]	; (80049f0 <HAL_DMA_Init+0x2d4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <HAL_DMA_Init+0x110>
 8004824:	21d4      	movs	r1, #212	; 0xd4
 8004826:	4873      	ldr	r0, [pc, #460]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 8004828:	f7fc fc5a 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_DMA_Init+0x130>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d007      	beq.n	800484c <HAL_DMA_Init+0x130>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d003      	beq.n	800484c <HAL_DMA_Init+0x130>
 8004844:	21d5      	movs	r1, #213	; 0xd5
 8004846:	486b      	ldr	r0, [pc, #428]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 8004848:	f7fc fc4a 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004854:	d007      	beq.n	8004866 <HAL_DMA_Init+0x14a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_DMA_Init+0x14a>
 800485e:	21d6      	movs	r1, #214	; 0xd6
 8004860:	4864      	ldr	r0, [pc, #400]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 8004862:	f7fc fc3d 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d007      	beq.n	8004880 <HAL_DMA_Init+0x164>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_DMA_Init+0x164>
 8004878:	21d7      	movs	r1, #215	; 0xd7
 800487a:	485e      	ldr	r0, [pc, #376]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 800487c:	f7fc fc30 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <HAL_DMA_Init+0x188>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004890:	d008      	beq.n	80048a4 <HAL_DMA_Init+0x188>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_Init+0x188>
 800489c:	21d8      	movs	r1, #216	; 0xd8
 800489e:	4855      	ldr	r0, [pc, #340]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 80048a0:	f7fc fc1e 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <HAL_DMA_Init+0x1ac>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d008      	beq.n	80048c8 <HAL_DMA_Init+0x1ac>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048be:	d003      	beq.n	80048c8 <HAL_DMA_Init+0x1ac>
 80048c0:	21d9      	movs	r1, #217	; 0xd9
 80048c2:	484c      	ldr	r0, [pc, #304]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 80048c4:	f7fc fc0c 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <HAL_DMA_Init+0x1e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d8:	d011      	beq.n	80048fe <HAL_DMA_Init+0x1e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d00d      	beq.n	80048fe <HAL_DMA_Init+0x1e2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048ea:	d008      	beq.n	80048fe <HAL_DMA_Init+0x1e2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048f4:	d003      	beq.n	80048fe <HAL_DMA_Init+0x1e2>
 80048f6:	21da      	movs	r1, #218	; 0xda
 80048f8:	483e      	ldr	r0, [pc, #248]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 80048fa:	f7fc fbf1 	bl	80010e0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d012      	beq.n	800492c <HAL_DMA_Init+0x210>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d00d      	beq.n	800492c <HAL_DMA_Init+0x210>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004918:	d008      	beq.n	800492c <HAL_DMA_Init+0x210>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004922:	d003      	beq.n	800492c <HAL_DMA_Init+0x210>
 8004924:	21db      	movs	r1, #219	; 0xdb
 8004926:	4833      	ldr	r0, [pc, #204]	; (80049f4 <HAL_DMA_Init+0x2d8>)
 8004928:	f7fc fbda 	bl	80010e0 <assert_failed>

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_DMA_Init+0x278>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d07e      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a17      	ldr	r2, [pc, #92]	; (8004998 <HAL_DMA_Init+0x27c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d079      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a15      	ldr	r2, [pc, #84]	; (800499c <HAL_DMA_Init+0x280>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d074      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <HAL_DMA_Init+0x284>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d06f      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <HAL_DMA_Init+0x288>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d06a      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_DMA_Init+0x28c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d065      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <HAL_DMA_Init+0x290>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d060      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <HAL_DMA_Init+0x294>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d05b      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <HAL_DMA_Init+0x298>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d056      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <HAL_DMA_Init+0x29c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d051      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004990:	e032      	b.n	80049f8 <HAL_DMA_Init+0x2dc>
 8004992:	bf00      	nop
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	58025408 	.word	0x58025408
 80049d8:	5802541c 	.word	0x5802541c
 80049dc:	58025430 	.word	0x58025430
 80049e0:	58025444 	.word	0x58025444
 80049e4:	58025458 	.word	0x58025458
 80049e8:	5802546c 	.word	0x5802546c
 80049ec:	58025480 	.word	0x58025480
 80049f0:	58025494 	.word	0x58025494
 80049f4:	08013d50 	.word	0x08013d50
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_DMA_Init+0x4cc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_DMA_Init+0x4d0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	; (8004bf0 <HAL_DMA_Init+0x4d4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a76      	ldr	r2, [pc, #472]	; (8004bf4 <HAL_DMA_Init+0x4d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a74      	ldr	r2, [pc, #464]	; (8004bf8 <HAL_DMA_Init+0x4dc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_DMA_Init+0x318>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a73      	ldr	r2, [pc, #460]	; (8004bfc <HAL_DMA_Init+0x4e0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_DMA_Init+0x31c>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_DMA_Init+0x31e>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8167 	beq.w	8004d0e <HAL_DMA_Init+0x5f2>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b73      	cmp	r3, #115	; 0x73
 8004a46:	d903      	bls.n	8004a50 <HAL_DMA_Init+0x334>
 8004a48:	21df      	movs	r1, #223	; 0xdf
 8004a4a:	486d      	ldr	r0, [pc, #436]	; (8004c00 <HAL_DMA_Init+0x4e4>)
 8004a4c:	f7fc fb48 	bl	80010e0 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_DMA_Init+0x34c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d003      	beq.n	8004a68 <HAL_DMA_Init+0x34c>
 8004a60:	21e0      	movs	r1, #224	; 0xe0
 8004a62:	4867      	ldr	r0, [pc, #412]	; (8004c00 <HAL_DMA_Init+0x4e4>)
 8004a64:	f7fc fb3c 	bl	80010e0 <assert_failed>
    /* Check the memory burst, peripheral burst and FIFO threshold parameters only
       when FIFO mode is enabled */
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d041      	beq.n	8004af4 <HAL_DMA_Init+0x3d8>
    {
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <HAL_DMA_Init+0x37c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00b      	beq.n	8004a98 <HAL_DMA_Init+0x37c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d007      	beq.n	8004a98 <HAL_DMA_Init+0x37c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_Init+0x37c>
 8004a90:	21e5      	movs	r1, #229	; 0xe5
 8004a92:	485b      	ldr	r0, [pc, #364]	; (8004c00 <HAL_DMA_Init+0x4e4>)
 8004a94:	f7fc fb24 	bl	80010e0 <assert_failed>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <HAL_DMA_Init+0x3aa>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_DMA_Init+0x3aa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab2:	d008      	beq.n	8004ac6 <HAL_DMA_Init+0x3aa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004abc:	d003      	beq.n	8004ac6 <HAL_DMA_Init+0x3aa>
 8004abe:	21e6      	movs	r1, #230	; 0xe6
 8004ac0:	484f      	ldr	r0, [pc, #316]	; (8004c00 <HAL_DMA_Init+0x4e4>)
 8004ac2:	f7fc fb0d 	bl	80010e0 <assert_failed>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_DMA_Init+0x3d8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad6:	d00d      	beq.n	8004af4 <HAL_DMA_Init+0x3d8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae0:	d008      	beq.n	8004af4 <HAL_DMA_Init+0x3d8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA_Init+0x3d8>
 8004aec:	21e7      	movs	r1, #231	; 0xe7
 8004aee:	4844      	ldr	r0, [pc, #272]	; (8004c00 <HAL_DMA_Init+0x4e4>)
 8004af0:	f7fc faf6 	bl	80010e0 <assert_failed>
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <HAL_DMA_Init+0x4e8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d04a      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_DMA_Init+0x4ec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d045      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <HAL_DMA_Init+0x4f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d040      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <HAL_DMA_Init+0x4f4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d03b      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <HAL_DMA_Init+0x4f8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d036      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <HAL_DMA_Init+0x4fc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d031      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a35      	ldr	r2, [pc, #212]	; (8004c1c <HAL_DMA_Init+0x500>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02c      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a34      	ldr	r2, [pc, #208]	; (8004c20 <HAL_DMA_Init+0x504>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d027      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a32      	ldr	r2, [pc, #200]	; (8004c24 <HAL_DMA_Init+0x508>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d022      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <HAL_DMA_Init+0x50c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01d      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <HAL_DMA_Init+0x4cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_DMA_Init+0x4d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_DMA_Init+0x4d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_DMA_Init+0x4d8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_DMA_Init+0x4dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_DMA_Init+0x488>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_DMA_Init+0x4e0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <HAL_DMA_Init+0x49a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e007      	b.n	8004bc6 <HAL_DMA_Init+0x4aa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bc6:	e031      	b.n	8004c2c <HAL_DMA_Init+0x510>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc8:	f7fc fdd8 	bl	800177c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d92a      	bls.n	8004c2c <HAL_DMA_Init+0x510>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2203      	movs	r2, #3
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e17e      	b.n	8004ee6 <HAL_DMA_Init+0x7ca>
 8004be8:	40020440 	.word	0x40020440
 8004bec:	40020458 	.word	0x40020458
 8004bf0:	40020470 	.word	0x40020470
 8004bf4:	40020488 	.word	0x40020488
 8004bf8:	400204a0 	.word	0x400204a0
 8004bfc:	400204b8 	.word	0x400204b8
 8004c00:	08013d50 	.word	0x08013d50
 8004c04:	40020010 	.word	0x40020010
 8004c08:	40020028 	.word	0x40020028
 8004c0c:	40020040 	.word	0x40020040
 8004c10:	40020058 	.word	0x40020058
 8004c14:	40020070 	.word	0x40020070
 8004c18:	40020088 	.word	0x40020088
 8004c1c:	400200a0 	.word	0x400200a0
 8004c20:	400200b8 	.word	0x400200b8
 8004c24:	40020410 	.word	0x40020410
 8004c28:	40020428 	.word	0x40020428
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1c6      	bne.n	8004bc8 <HAL_DMA_Init+0x4ac>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4b92      	ldr	r3, [pc, #584]	; (8004e90 <HAL_DMA_Init+0x774>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d107      	bne.n	8004c90 <HAL_DMA_Init+0x574>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d117      	bne.n	8004cea <HAL_DMA_Init+0x5ce>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <HAL_DMA_Init+0x5ce>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 f8eb 	bl	8005ea8 <DMA_CheckFifoParam>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_DMA_Init+0x5ce>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0fd      	b.n	8004ee6 <HAL_DMA_Init+0x7ca>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 f826 	bl	8005d44 <DMA_CalcBaseAndBitshift>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	223f      	movs	r2, #63	; 0x3f
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	e095      	b.n	8004e3a <HAL_DMA_Init+0x71e>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a60      	ldr	r2, [pc, #384]	; (8004e94 <HAL_DMA_Init+0x778>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <HAL_DMA_Init+0x77c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5d      	ldr	r2, [pc, #372]	; (8004e9c <HAL_DMA_Init+0x780>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5b      	ldr	r2, [pc, #364]	; (8004ea0 <HAL_DMA_Init+0x784>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5a      	ldr	r2, [pc, #360]	; (8004ea4 <HAL_DMA_Init+0x788>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_DMA_Init+0x78c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a57      	ldr	r2, [pc, #348]	; (8004eac <HAL_DMA_Init+0x790>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_Init+0x642>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a55      	ldr	r2, [pc, #340]	; (8004eb0 <HAL_DMA_Init+0x794>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_DMA_Init+0x646>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <HAL_DMA_Init+0x648>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d05f      	beq.n	8004e28 <HAL_DMA_Init+0x70c>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b11      	cmp	r3, #17
 8004d6e:	d904      	bls.n	8004d7a <HAL_DMA_Init+0x65e>
 8004d70:	f240 1149 	movw	r1, #329	; 0x149
 8004d74:	484f      	ldr	r0, [pc, #316]	; (8004eb4 <HAL_DMA_Init+0x798>)
 8004d76:	f7fc f9b3 	bl	80010e0 <assert_failed>

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4b48      	ldr	r3, [pc, #288]	; (8004eb8 <HAL_DMA_Init+0x79c>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d008      	beq.n	8004db4 <HAL_DMA_Init+0x698>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d102      	bne.n	8004db0 <HAL_DMA_Init+0x694>
 8004daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dae:	e002      	b.n	8004db6 <HAL_DMA_Init+0x69a>
 8004db0:	2300      	movs	r3, #0
 8004db2:	e000      	b.n	8004db6 <HAL_DMA_Init+0x69a>
 8004db4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68d2      	ldr	r2, [r2, #12]
 8004dba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8004dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8004dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8004dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8004dd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8004ddc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8004de4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <HAL_DMA_Init+0x7a0>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_DMA_Init+0x7a4>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	009a      	lsls	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 ff99 	bl	8005d44 <DMA_CalcBaseAndBitshift>
 8004e12:	4603      	mov	r3, r0
 8004e14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2201      	movs	r2, #1
 8004e20:	409a      	lsls	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	e008      	b.n	8004e3a <HAL_DMA_Init+0x71e>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e055      	b.n	8004ee6 <HAL_DMA_Init+0x7ca>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f8b0 	bl	8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d102      	bne.n	8004e4e <HAL_DMA_Init+0x732>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e62:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02b      	beq.n	8004ec4 <HAL_DMA_Init+0x7a8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d827      	bhi.n	8004ec4 <HAL_DMA_Init+0x7a8>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 f92d 	bl	80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e023      	b.n	8004ed6 <HAL_DMA_Init+0x7ba>
 8004e8e:	bf00      	nop
 8004e90:	fe10803f 	.word	0xfe10803f
 8004e94:	58025408 	.word	0x58025408
 8004e98:	5802541c 	.word	0x5802541c
 8004e9c:	58025430 	.word	0x58025430
 8004ea0:	58025444 	.word	0x58025444
 8004ea4:	58025458 	.word	0x58025458
 8004ea8:	5802546c 	.word	0x5802546c
 8004eac:	58025480 	.word	0x58025480
 8004eb0:	58025494 	.word	0x58025494
 8004eb4:	08013d50 	.word	0x08013d50
 8004eb8:	fffe000f 	.word	0xfffe000f
 8004ebc:	a7fdabf8 	.word	0xa7fdabf8
 8004ec0:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop

08004ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004efc:	4b67      	ldr	r3, [pc, #412]	; (800509c <HAL_DMA_IRQHandler+0x1ac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0a9b      	lsrs	r3, r3, #10
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5f      	ldr	r2, [pc, #380]	; (80050a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d04a      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d045      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5c      	ldr	r2, [pc, #368]	; (80050ac <HAL_DMA_IRQHandler+0x1bc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d040      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d03b      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a59      	ldr	r2, [pc, #356]	; (80050b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d036      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_DMA_IRQHandler+0x1c8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d031      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_DMA_IRQHandler+0x1cc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d02c      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d027      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a53      	ldr	r2, [pc, #332]	; (80050c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d022      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a51      	ldr	r2, [pc, #324]	; (80050c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01d      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a50      	ldr	r2, [pc, #320]	; (80050cc <HAL_DMA_IRQHandler+0x1dc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4e      	ldr	r2, [pc, #312]	; (80050d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_DMA_IRQHandler+0x1e8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_DMA_IRQHandler+0x1ec>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xd2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a48      	ldr	r2, [pc, #288]	; (80050e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0xd6>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_DMA_IRQHandler+0xd8>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 842b 	beq.w	8005824 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80a2 	beq.w	8005128 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_DMA_IRQHandler+0x1bc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <HAL_DMA_IRQHandler+0x1c8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_DMA_IRQHandler+0x1cc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <HAL_DMA_IRQHandler+0x1d0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_DMA_IRQHandler+0x1d4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_DMA_IRQHandler+0x1dc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_DMA_IRQHandler+0x1e4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_DMA_IRQHandler+0x1e8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_DMA_IRQHandler+0x1ec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_DMA_IRQHandler+0x194>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_DMA_IRQHandler+0x1f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d12f      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x1f4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e02e      	b.n	80050f8 <HAL_DMA_IRQHandler+0x208>
 800509a:	bf00      	nop
 800509c:	24000000 	.word	0x24000000
 80050a0:	1b4e81b5 	.word	0x1b4e81b5
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2208      	movs	r2, #8
 8005116:	409a      	lsls	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	fa22 f303 	lsr.w	r3, r2, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d06e      	beq.n	800521c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a69      	ldr	r2, [pc, #420]	; (80052e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a67      	ldr	r2, [pc, #412]	; (80052ec <HAL_DMA_IRQHandler+0x3fc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a66      	ldr	r2, [pc, #408]	; (80052f0 <HAL_DMA_IRQHandler+0x400>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a64      	ldr	r2, [pc, #400]	; (80052f4 <HAL_DMA_IRQHandler+0x404>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_DMA_IRQHandler+0x408>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a61      	ldr	r2, [pc, #388]	; (80052fc <HAL_DMA_IRQHandler+0x40c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a60      	ldr	r2, [pc, #384]	; (8005300 <HAL_DMA_IRQHandler+0x410>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5e      	ldr	r2, [pc, #376]	; (8005304 <HAL_DMA_IRQHandler+0x414>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5d      	ldr	r2, [pc, #372]	; (8005308 <HAL_DMA_IRQHandler+0x418>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5b      	ldr	r2, [pc, #364]	; (800530c <HAL_DMA_IRQHandler+0x41c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_DMA_IRQHandler+0x420>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a58      	ldr	r2, [pc, #352]	; (8005314 <HAL_DMA_IRQHandler+0x424>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_DMA_IRQHandler+0x428>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a55      	ldr	r2, [pc, #340]	; (800531c <HAL_DMA_IRQHandler+0x42c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a54      	ldr	r2, [pc, #336]	; (8005320 <HAL_DMA_IRQHandler+0x430>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0x2ee>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a52      	ldr	r2, [pc, #328]	; (8005324 <HAL_DMA_IRQHandler+0x434>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10a      	bne.n	80051f4 <HAL_DMA_IRQHandler+0x304>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e003      	b.n	80051fc <HAL_DMA_IRQHandler+0x30c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2201      	movs	r2, #1
 800520a:	409a      	lsls	r2, r3
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 0202 	orr.w	r2, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2204      	movs	r2, #4
 8005226:	409a      	lsls	r2, r3
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 808f 	beq.w	8005350 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d04a      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <HAL_DMA_IRQHandler+0x3fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d045      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <HAL_DMA_IRQHandler+0x400>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d040      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_DMA_IRQHandler+0x404>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d03b      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <HAL_DMA_IRQHandler+0x408>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d036      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a24      	ldr	r2, [pc, #144]	; (80052fc <HAL_DMA_IRQHandler+0x40c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d031      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a23      	ldr	r2, [pc, #140]	; (8005300 <HAL_DMA_IRQHandler+0x410>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d02c      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_DMA_IRQHandler+0x414>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d027      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a20      	ldr	r2, [pc, #128]	; (8005308 <HAL_DMA_IRQHandler+0x418>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1e      	ldr	r2, [pc, #120]	; (800530c <HAL_DMA_IRQHandler+0x41c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01d      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_DMA_IRQHandler+0x420>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_DMA_IRQHandler+0x424>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <HAL_DMA_IRQHandler+0x428>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_DMA_IRQHandler+0x42c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a17      	ldr	r2, [pc, #92]	; (8005320 <HAL_DMA_IRQHandler+0x430>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_IRQHandler+0x3e2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <HAL_DMA_IRQHandler+0x434>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12a      	bne.n	8005328 <HAL_DMA_IRQHandler+0x438>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e023      	b.n	8005330 <HAL_DMA_IRQHandler+0x440>
 80052e8:	40020010 	.word	0x40020010
 80052ec:	40020028 	.word	0x40020028
 80052f0:	40020040 	.word	0x40020040
 80052f4:	40020058 	.word	0x40020058
 80052f8:	40020070 	.word	0x40020070
 80052fc:	40020088 	.word	0x40020088
 8005300:	400200a0 	.word	0x400200a0
 8005304:	400200b8 	.word	0x400200b8
 8005308:	40020410 	.word	0x40020410
 800530c:	40020428 	.word	0x40020428
 8005310:	40020440 	.word	0x40020440
 8005314:	40020458 	.word	0x40020458
 8005318:	40020470 	.word	0x40020470
 800531c:	40020488 	.word	0x40020488
 8005320:	400204a0 	.word	0x400204a0
 8005324:	400204b8 	.word	0x400204b8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2300      	movs	r3, #0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2204      	movs	r2, #4
 800533e:	409a      	lsls	r2, r3
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	f043 0204 	orr.w	r2, r3, #4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2210      	movs	r2, #16
 800535a:	409a      	lsls	r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80a6 	beq.w	80054b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a85      	ldr	r2, [pc, #532]	; (8005580 <HAL_DMA_IRQHandler+0x690>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <HAL_DMA_IRQHandler+0x694>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a82      	ldr	r2, [pc, #520]	; (8005588 <HAL_DMA_IRQHandler+0x698>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a80      	ldr	r2, [pc, #512]	; (800558c <HAL_DMA_IRQHandler+0x69c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a7f      	ldr	r2, [pc, #508]	; (8005590 <HAL_DMA_IRQHandler+0x6a0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a7d      	ldr	r2, [pc, #500]	; (8005594 <HAL_DMA_IRQHandler+0x6a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7c      	ldr	r2, [pc, #496]	; (8005598 <HAL_DMA_IRQHandler+0x6a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a7a      	ldr	r2, [pc, #488]	; (800559c <HAL_DMA_IRQHandler+0x6ac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a79      	ldr	r2, [pc, #484]	; (80055a0 <HAL_DMA_IRQHandler+0x6b0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a77      	ldr	r2, [pc, #476]	; (80055a4 <HAL_DMA_IRQHandler+0x6b4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a76      	ldr	r2, [pc, #472]	; (80055a8 <HAL_DMA_IRQHandler+0x6b8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a74      	ldr	r2, [pc, #464]	; (80055ac <HAL_DMA_IRQHandler+0x6bc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a73      	ldr	r2, [pc, #460]	; (80055b0 <HAL_DMA_IRQHandler+0x6c0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a71      	ldr	r2, [pc, #452]	; (80055b4 <HAL_DMA_IRQHandler+0x6c4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a70      	ldr	r2, [pc, #448]	; (80055b8 <HAL_DMA_IRQHandler+0x6c8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_IRQHandler+0x516>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6e      	ldr	r2, [pc, #440]	; (80055bc <HAL_DMA_IRQHandler+0x6cc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10a      	bne.n	800541c <HAL_DMA_IRQHandler+0x52c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e009      	b.n	8005430 <HAL_DMA_IRQHandler+0x540>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d03e      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2210      	movs	r2, #16
 800543e:	409a      	lsls	r2, r3
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d024      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e01f      	b.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01b      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	e016      	b.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0208 	bic.w	r2, r2, #8
 80054a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2220      	movs	r2, #32
 80054bc:	409a      	lsls	r2, r3
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8110 	beq.w	80056e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <HAL_DMA_IRQHandler+0x690>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d04a      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_IRQHandler+0x694>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d045      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a29      	ldr	r2, [pc, #164]	; (8005588 <HAL_DMA_IRQHandler+0x698>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d040      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_IRQHandler+0x69c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d03b      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <HAL_DMA_IRQHandler+0x6a0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d036      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_IRQHandler+0x6a4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d031      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_DMA_IRQHandler+0x6a8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d02c      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_IRQHandler+0x6ac>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d027      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <HAL_DMA_IRQHandler+0x6b0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_DMA_IRQHandler+0x6b4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d01d      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <HAL_DMA_IRQHandler+0x6b8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_DMA_IRQHandler+0x6bc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <HAL_DMA_IRQHandler+0x6c0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_DMA_IRQHandler+0x6c4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <HAL_DMA_IRQHandler+0x6c8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_DMA_IRQHandler+0x678>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <HAL_DMA_IRQHandler+0x6cc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d12b      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x6d0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e02a      	b.n	80055d4 <HAL_DMA_IRQHandler+0x6e4>
 800557e:	bf00      	nop
 8005580:	40020010 	.word	0x40020010
 8005584:	40020028 	.word	0x40020028
 8005588:	40020040 	.word	0x40020040
 800558c:	40020058 	.word	0x40020058
 8005590:	40020070 	.word	0x40020070
 8005594:	40020088 	.word	0x40020088
 8005598:	400200a0 	.word	0x400200a0
 800559c:	400200b8 	.word	0x400200b8
 80055a0:	40020410 	.word	0x40020410
 80055a4:	40020428 	.word	0x40020428
 80055a8:	40020440 	.word	0x40020440
 80055ac:	40020458 	.word	0x40020458
 80055b0:	40020470 	.word	0x40020470
 80055b4:	40020488 	.word	0x40020488
 80055b8:	400204a0 	.word	0x400204a0
 80055bc:	400204b8 	.word	0x400204b8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8087 	beq.w	80056e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2220      	movs	r2, #32
 80055e4:	409a      	lsls	r2, r3
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d139      	bne.n	800566a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0216 	bic.w	r2, r2, #22
 8005604:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_DMA_IRQHandler+0x736>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0208 	bic.w	r2, r2, #8
 8005634:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	223f      	movs	r2, #63	; 0x3f
 8005640:	409a      	lsls	r2, r3
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 834a 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
          }
          return;
 8005668:	e344      	b.n	8005cf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d018      	beq.n	80056aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d108      	bne.n	8005698 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02c      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	e027      	b.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d023      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
 80056a8:	e01e      	b.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0210 	bic.w	r2, r2, #16
 80056c6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8306 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8088 	beq.w	8005810 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2204      	movs	r2, #4
 8005704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7a      	ldr	r2, [pc, #488]	; (80058f8 <HAL_DMA_IRQHandler+0xa08>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04a      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a79      	ldr	r2, [pc, #484]	; (80058fc <HAL_DMA_IRQHandler+0xa0c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d045      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a77      	ldr	r2, [pc, #476]	; (8005900 <HAL_DMA_IRQHandler+0xa10>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d040      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a76      	ldr	r2, [pc, #472]	; (8005904 <HAL_DMA_IRQHandler+0xa14>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d03b      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a74      	ldr	r2, [pc, #464]	; (8005908 <HAL_DMA_IRQHandler+0xa18>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d036      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a73      	ldr	r2, [pc, #460]	; (800590c <HAL_DMA_IRQHandler+0xa1c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d031      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a71      	ldr	r2, [pc, #452]	; (8005910 <HAL_DMA_IRQHandler+0xa20>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02c      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a70      	ldr	r2, [pc, #448]	; (8005914 <HAL_DMA_IRQHandler+0xa24>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d027      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_DMA_IRQHandler+0xa28>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6d      	ldr	r2, [pc, #436]	; (800591c <HAL_DMA_IRQHandler+0xa2c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01d      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6b      	ldr	r2, [pc, #428]	; (8005920 <HAL_DMA_IRQHandler+0xa30>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_DMA_IRQHandler+0xa34>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a68      	ldr	r2, [pc, #416]	; (8005928 <HAL_DMA_IRQHandler+0xa38>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a67      	ldr	r2, [pc, #412]	; (800592c <HAL_DMA_IRQHandler+0xa3c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a65      	ldr	r2, [pc, #404]	; (8005930 <HAL_DMA_IRQHandler+0xa40>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x8b8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a64      	ldr	r2, [pc, #400]	; (8005934 <HAL_DMA_IRQHandler+0xa44>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <HAL_DMA_IRQHandler+0x8ca>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e007      	b.n	80057ca <HAL_DMA_IRQHandler+0x8da>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d307      	bcc.n	80057e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f2      	bne.n	80057ca <HAL_DMA_IRQHandler+0x8da>
 80057e4:	e000      	b.n	80057e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057e6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005806:	e003      	b.n	8005810 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8272 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
 8005822:	e26c      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a43      	ldr	r2, [pc, #268]	; (8005938 <HAL_DMA_IRQHandler+0xa48>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a42      	ldr	r2, [pc, #264]	; (800593c <HAL_DMA_IRQHandler+0xa4c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01d      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a40      	ldr	r2, [pc, #256]	; (8005940 <HAL_DMA_IRQHandler+0xa50>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <HAL_DMA_IRQHandler+0xa54>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <HAL_DMA_IRQHandler+0xa58>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <HAL_DMA_IRQHandler+0xa5c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a3a      	ldr	r2, [pc, #232]	; (8005950 <HAL_DMA_IRQHandler+0xa60>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_DMA_IRQHandler+0x984>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a39      	ldr	r2, [pc, #228]	; (8005954 <HAL_DMA_IRQHandler+0xa64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_DMA_IRQHandler+0x988>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_DMA_IRQHandler+0x98a>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 823f 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2204      	movs	r2, #4
 8005892:	409a      	lsls	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80cd 	beq.w	8005a38 <HAL_DMA_IRQHandler+0xb48>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80c7 	beq.w	8005a38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2204      	movs	r2, #4
 80058b4:	409a      	lsls	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d049      	beq.n	8005958 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8210 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058e0:	e20a      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8206 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f4:	e200      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
 80058f6:	bf00      	nop
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
 8005938:	58025408 	.word	0x58025408
 800593c:	5802541c 	.word	0x5802541c
 8005940:	58025430 	.word	0x58025430
 8005944:	58025444 	.word	0x58025444
 8005948:	58025458 	.word	0x58025458
 800594c:	5802546c 	.word	0x5802546c
 8005950:	58025480 	.word	0x58025480
 8005954:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d160      	bne.n	8005a24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a8c      	ldr	r2, [pc, #560]	; (8005b98 <HAL_DMA_IRQHandler+0xca8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d04a      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <HAL_DMA_IRQHandler+0xcac>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d045      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a89      	ldr	r2, [pc, #548]	; (8005ba0 <HAL_DMA_IRQHandler+0xcb0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d040      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a87      	ldr	r2, [pc, #540]	; (8005ba4 <HAL_DMA_IRQHandler+0xcb4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d03b      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a86      	ldr	r2, [pc, #536]	; (8005ba8 <HAL_DMA_IRQHandler+0xcb8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d036      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a84      	ldr	r2, [pc, #528]	; (8005bac <HAL_DMA_IRQHandler+0xcbc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d031      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a83      	ldr	r2, [pc, #524]	; (8005bb0 <HAL_DMA_IRQHandler+0xcc0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d02c      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a81      	ldr	r2, [pc, #516]	; (8005bb4 <HAL_DMA_IRQHandler+0xcc4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d027      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a80      	ldr	r2, [pc, #512]	; (8005bb8 <HAL_DMA_IRQHandler+0xcc8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a7e      	ldr	r2, [pc, #504]	; (8005bbc <HAL_DMA_IRQHandler+0xccc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7d      	ldr	r2, [pc, #500]	; (8005bc0 <HAL_DMA_IRQHandler+0xcd0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a7b      	ldr	r2, [pc, #492]	; (8005bc4 <HAL_DMA_IRQHandler+0xcd4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7a      	ldr	r2, [pc, #488]	; (8005bc8 <HAL_DMA_IRQHandler+0xcd8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a78      	ldr	r2, [pc, #480]	; (8005bcc <HAL_DMA_IRQHandler+0xcdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a77      	ldr	r2, [pc, #476]	; (8005bd0 <HAL_DMA_IRQHandler+0xce0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xb12>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a75      	ldr	r2, [pc, #468]	; (8005bd4 <HAL_DMA_IRQHandler+0xce4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <HAL_DMA_IRQHandler+0xb24>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0208 	bic.w	r2, r2, #8
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e007      	b.n	8005a24 <HAL_DMA_IRQHandler+0xb34>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0204 	bic.w	r2, r2, #4
 8005a22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8165 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a36:	e15f      	b.n	8005cf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2202      	movs	r2, #2
 8005a42:	409a      	lsls	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80c5 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xce8>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80bf 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	2202      	movs	r2, #2
 8005a64:	409a      	lsls	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 813a 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a90:	e134      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8130 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aa4:	e12a      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d168      	bne.n	8005b82 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a38      	ldr	r2, [pc, #224]	; (8005b98 <HAL_DMA_IRQHandler+0xca8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d04a      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <HAL_DMA_IRQHandler+0xcac>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d045      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a35      	ldr	r2, [pc, #212]	; (8005ba0 <HAL_DMA_IRQHandler+0xcb0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d040      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a34      	ldr	r2, [pc, #208]	; (8005ba4 <HAL_DMA_IRQHandler+0xcb4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d03b      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <HAL_DMA_IRQHandler+0xcb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d036      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a31      	ldr	r2, [pc, #196]	; (8005bac <HAL_DMA_IRQHandler+0xcbc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d031      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <HAL_DMA_IRQHandler+0xcc0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02c      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_DMA_IRQHandler+0xcc4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d027      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <HAL_DMA_IRQHandler+0xcc8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d022      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <HAL_DMA_IRQHandler+0xccc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01d      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <HAL_DMA_IRQHandler+0xcd0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d018      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_DMA_IRQHandler+0xcd4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a26      	ldr	r2, [pc, #152]	; (8005bc8 <HAL_DMA_IRQHandler+0xcd8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00e      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_DMA_IRQHandler+0xcdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <HAL_DMA_IRQHandler+0xce0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xc60>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_DMA_IRQHandler+0xce4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <HAL_DMA_IRQHandler+0xc72>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0214 	bic.w	r2, r2, #20
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e007      	b.n	8005b72 <HAL_DMA_IRQHandler+0xc82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 020a 	bic.w	r2, r2, #10
 8005b70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80b8 	beq.w	8005cfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b94:	e0b2      	b.n	8005cfc <HAL_DMA_IRQHandler+0xe0c>
 8005b96:	bf00      	nop
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	2208      	movs	r2, #8
 8005be2:	409a      	lsls	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8088 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8082 	beq.w	8005cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	; (8005d04 <HAL_DMA_IRQHandler+0xe14>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04a      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <HAL_DMA_IRQHandler+0xe18>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d045      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3e      	ldr	r2, [pc, #248]	; (8005d0c <HAL_DMA_IRQHandler+0xe1c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3c      	ldr	r2, [pc, #240]	; (8005d10 <HAL_DMA_IRQHandler+0xe20>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d03b      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3b      	ldr	r2, [pc, #236]	; (8005d14 <HAL_DMA_IRQHandler+0xe24>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d036      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <HAL_DMA_IRQHandler+0xe28>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_DMA_IRQHandler+0xe2c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02c      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a36      	ldr	r2, [pc, #216]	; (8005d20 <HAL_DMA_IRQHandler+0xe30>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d027      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a35      	ldr	r2, [pc, #212]	; (8005d24 <HAL_DMA_IRQHandler+0xe34>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a33      	ldr	r2, [pc, #204]	; (8005d28 <HAL_DMA_IRQHandler+0xe38>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01d      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <HAL_DMA_IRQHandler+0xe3c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <HAL_DMA_IRQHandler+0xe40>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2f      	ldr	r2, [pc, #188]	; (8005d34 <HAL_DMA_IRQHandler+0xe44>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <HAL_DMA_IRQHandler+0xe48>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <HAL_DMA_IRQHandler+0xe4c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMA_IRQHandler+0xdaa>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <HAL_DMA_IRQHandler+0xe50>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <HAL_DMA_IRQHandler+0xdbc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 021c 	bic.w	r2, r2, #28
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e007      	b.n	8005cbc <HAL_DMA_IRQHandler+0xdcc>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 020e 	bic.w	r2, r2, #14
 8005cba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	e004      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cfe:	3728      	adds	r7, #40	; 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8

08005d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a42      	ldr	r2, [pc, #264]	; (8005e5c <DMA_CalcBaseAndBitshift+0x118>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a41      	ldr	r2, [pc, #260]	; (8005e60 <DMA_CalcBaseAndBitshift+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3f      	ldr	r2, [pc, #252]	; (8005e64 <DMA_CalcBaseAndBitshift+0x120>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	; (8005e68 <DMA_CalcBaseAndBitshift+0x124>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3c      	ldr	r2, [pc, #240]	; (8005e6c <DMA_CalcBaseAndBitshift+0x128>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a39      	ldr	r2, [pc, #228]	; (8005e74 <DMA_CalcBaseAndBitshift+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a38      	ldr	r2, [pc, #224]	; (8005e78 <DMA_CalcBaseAndBitshift+0x134>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a36      	ldr	r2, [pc, #216]	; (8005e7c <DMA_CalcBaseAndBitshift+0x138>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a35      	ldr	r2, [pc, #212]	; (8005e80 <DMA_CalcBaseAndBitshift+0x13c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <DMA_CalcBaseAndBitshift+0x140>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a32      	ldr	r2, [pc, #200]	; (8005e88 <DMA_CalcBaseAndBitshift+0x144>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <DMA_CalcBaseAndBitshift+0x148>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2f      	ldr	r2, [pc, #188]	; (8005e90 <DMA_CalcBaseAndBitshift+0x14c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <DMA_CalcBaseAndBitshift+0x150>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <DMA_CalcBaseAndBitshift+0xa8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <DMA_CalcBaseAndBitshift+0x154>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <DMA_CalcBaseAndBitshift+0xac>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <DMA_CalcBaseAndBitshift+0xae>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d024      	beq.n	8005e40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	3b10      	subs	r3, #16
 8005dfe:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <DMA_CalcBaseAndBitshift+0x158>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d908      	bls.n	8005e30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e2e:	e00d      	b.n	8005e4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3e:	e005      	b.n	8005e4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
 8005e9c:	aaaaaaab 	.word	0xaaaaaaab
 8005ea0:	08014068 	.word	0x08014068
 8005ea4:	fffffc00 	.word	0xfffffc00

08005ea8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d120      	bne.n	8005efe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d858      	bhi.n	8005f76 <DMA_CheckFifoParam+0xce>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <DMA_CheckFifoParam+0x24>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005eef 	.word	0x08005eef
 8005ed4:	08005edd 	.word	0x08005edd
 8005ed8:	08005f77 	.word	0x08005f77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d048      	beq.n	8005f7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eec:	e045      	b.n	8005f7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ef6:	d142      	bne.n	8005f7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005efc:	e03f      	b.n	8005f7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	d123      	bne.n	8005f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d838      	bhi.n	8005f82 <DMA_CheckFifoParam+0xda>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <DMA_CheckFifoParam+0x70>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f2f 	.word	0x08005f2f
 8005f20:	08005f29 	.word	0x08005f29
 8005f24:	08005f41 	.word	0x08005f41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f2c:	e030      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d025      	beq.n	8005f86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f3e:	e022      	b.n	8005f86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f48:	d11f      	bne.n	8005f8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f4e:	e01c      	b.n	8005f8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d902      	bls.n	8005f5e <DMA_CheckFifoParam+0xb6>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d003      	beq.n	8005f64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005f5c:	e018      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
        break;
 8005f62:	e015      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
    break;
 8005f74:	e00b      	b.n	8005f8e <DMA_CheckFifoParam+0xe6>
        break;
 8005f76:	bf00      	nop
 8005f78:	e00a      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e008      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e006      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <DMA_CheckFifoParam+0xe8>
    break;
 8005f8e:	bf00      	nop
    }
  }

  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop

08005fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a38      	ldr	r2, [pc, #224]	; (8006094 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a36      	ldr	r2, [pc, #216]	; (8006098 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01d      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a35      	ldr	r2, [pc, #212]	; (800609c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a33      	ldr	r2, [pc, #204]	; (80060a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a32      	ldr	r2, [pc, #200]	; (80060a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01a      	beq.n	800603e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	3b08      	subs	r3, #8
 8006010:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a24      	ldr	r2, [pc, #144]	; (80060bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800602c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800603c:	e024      	b.n	8006088 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3b10      	subs	r3, #16
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d806      	bhi.n	8006066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d902      	bls.n	8006066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3308      	adds	r3, #8
 8006064:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006078:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494
 80060b4:	cccccccd 	.word	0xcccccccd
 80060b8:	16009600 	.word	0x16009600
 80060bc:	58025880 	.word	0x58025880
 80060c0:	aaaaaaab 	.word	0xaaaaaaab
 80060c4:	400204b8 	.word	0x400204b8
 80060c8:	4002040f 	.word	0x4002040f
 80060cc:	10008200 	.word	0x10008200
 80060d0:	40020880 	.word	0x40020880

080060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04a      	beq.n	8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d847      	bhi.n	8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a25      	ldr	r2, [pc, #148]	; (800618c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a24      	ldr	r2, [pc, #144]	; (8006190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a21      	ldr	r2, [pc, #132]	; (8006198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1f      	ldr	r2, [pc, #124]	; (800619c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d101      	bne.n	8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800615c:	671a      	str	r2, [r3, #112]	; 0x70
 800615e:	e009      	b.n	8006174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a11      	ldr	r2, [pc, #68]	; (80061b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006172:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	58025408 	.word	0x58025408
 8006190:	5802541c 	.word	0x5802541c
 8006194:	58025430 	.word	0x58025430
 8006198:	58025444 	.word	0x58025444
 800619c:	58025458 	.word	0x58025458
 80061a0:	5802546c 	.word	0x5802546c
 80061a4:	58025480 	.word	0x58025480
 80061a8:	58025494 	.word	0x58025494
 80061ac:	1600963f 	.word	0x1600963f
 80061b0:	58025940 	.word	0x58025940
 80061b4:	1000823f 	.word	0x1000823f
 80061b8:	40020940 	.word	0x40020940

080061bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061ca:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_GPIO_Init+0x12c>)
 80061cc:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a46      	ldr	r2, [pc, #280]	; (80062ec <HAL_GPIO_Init+0x130>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d02b      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a45      	ldr	r2, [pc, #276]	; (80062f0 <HAL_GPIO_Init+0x134>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d027      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a44      	ldr	r2, [pc, #272]	; (80062f4 <HAL_GPIO_Init+0x138>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d023      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <HAL_GPIO_Init+0x13c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01f      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a42      	ldr	r2, [pc, #264]	; (80062fc <HAL_GPIO_Init+0x140>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01b      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a41      	ldr	r2, [pc, #260]	; (8006300 <HAL_GPIO_Init+0x144>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d017      	beq.n	800622e <HAL_GPIO_Init+0x72>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a40      	ldr	r2, [pc, #256]	; (8006304 <HAL_GPIO_Init+0x148>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_GPIO_Init+0x72>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a3f      	ldr	r2, [pc, #252]	; (8006308 <HAL_GPIO_Init+0x14c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00f      	beq.n	800622e <HAL_GPIO_Init+0x72>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a3e      	ldr	r2, [pc, #248]	; (800630c <HAL_GPIO_Init+0x150>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00b      	beq.n	800622e <HAL_GPIO_Init+0x72>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a3d      	ldr	r2, [pc, #244]	; (8006310 <HAL_GPIO_Init+0x154>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <HAL_GPIO_Init+0x72>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a3c      	ldr	r2, [pc, #240]	; (8006314 <HAL_GPIO_Init+0x158>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <HAL_GPIO_Init+0x72>
 8006226:	21bb      	movs	r1, #187	; 0xbb
 8006228:	483b      	ldr	r0, [pc, #236]	; (8006318 <HAL_GPIO_Init+0x15c>)
 800622a:	f7fa ff59 	bl	80010e0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_GPIO_Init+0x88>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b37      	ldr	r3, [pc, #220]	; (800631c <HAL_GPIO_Init+0x160>)
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <HAL_GPIO_Init+0x90>
 8006244:	21bc      	movs	r1, #188	; 0xbc
 8006246:	4834      	ldr	r0, [pc, #208]	; (8006318 <HAL_GPIO_Init+0x15c>)
 8006248:	f7fa ff4a 	bl	80010e0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d035      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d031      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b11      	cmp	r3, #17
 8006262:	d02d      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d029      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b12      	cmp	r3, #18
 8006272:	d025      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a29      	ldr	r2, [pc, #164]	; (8006320 <HAL_GPIO_Init+0x164>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d020      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4a28      	ldr	r2, [pc, #160]	; (8006324 <HAL_GPIO_Init+0x168>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d01b      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a26      	ldr	r2, [pc, #152]	; (8006328 <HAL_GPIO_Init+0x16c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d016      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4a25      	ldr	r2, [pc, #148]	; (800632c <HAL_GPIO_Init+0x170>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d011      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a23      	ldr	r2, [pc, #140]	; (8006330 <HAL_GPIO_Init+0x174>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00c      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <HAL_GPIO_Init+0x178>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d003      	beq.n	80062c0 <HAL_GPIO_Init+0x104>
 80062b8:	21bd      	movs	r1, #189	; 0xbd
 80062ba:	4817      	ldr	r0, [pc, #92]	; (8006318 <HAL_GPIO_Init+0x15c>)
 80062bc:	f7fa ff10 	bl	80010e0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 821a 	beq.w	80066fe <HAL_GPIO_Init+0x542>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	f000 8215 	beq.w	80066fe <HAL_GPIO_Init+0x542>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	f000 8210 	beq.w	80066fe <HAL_GPIO_Init+0x542>
 80062de:	21be      	movs	r1, #190	; 0xbe
 80062e0:	480d      	ldr	r0, [pc, #52]	; (8006318 <HAL_GPIO_Init+0x15c>)
 80062e2:	f7fa fefd 	bl	80010e0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062e6:	e20a      	b.n	80066fe <HAL_GPIO_Init+0x542>
 80062e8:	58000080 	.word	0x58000080
 80062ec:	58020000 	.word	0x58020000
 80062f0:	58020400 	.word	0x58020400
 80062f4:	58020800 	.word	0x58020800
 80062f8:	58020c00 	.word	0x58020c00
 80062fc:	58021000 	.word	0x58021000
 8006300:	58021400 	.word	0x58021400
 8006304:	58021800 	.word	0x58021800
 8006308:	58021c00 	.word	0x58021c00
 800630c:	58022000 	.word	0x58022000
 8006310:	58022400 	.word	0x58022400
 8006314:	58022800 	.word	0x58022800
 8006318:	08013d88 	.word	0x08013d88
 800631c:	ffff0000 	.word	0xffff0000
 8006320:	11110000 	.word	0x11110000
 8006324:	11210000 	.word	0x11210000
 8006328:	11310000 	.word	0x11310000
 800632c:	11120000 	.word	0x11120000
 8006330:	11220000 	.word	0x11220000
 8006334:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	2101      	movs	r1, #1
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	fa01 f303 	lsl.w	r3, r1, r3
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 81d4 	beq.w	80066f8 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d003      	beq.n	8006360 <HAL_GPIO_Init+0x1a4>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b12      	cmp	r3, #18
 800635e:	d15b      	bne.n	8006418 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4aa2      	ldr	r2, [pc, #648]	; (80065ec <HAL_GPIO_Init+0x430>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d02b      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4aa1      	ldr	r2, [pc, #644]	; (80065f0 <HAL_GPIO_Init+0x434>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d027      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4aa0      	ldr	r2, [pc, #640]	; (80065f4 <HAL_GPIO_Init+0x438>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d023      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a9f      	ldr	r2, [pc, #636]	; (80065f8 <HAL_GPIO_Init+0x43c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01f      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a9e      	ldr	r2, [pc, #632]	; (80065fc <HAL_GPIO_Init+0x440>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01b      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a9d      	ldr	r2, [pc, #628]	; (8006600 <HAL_GPIO_Init+0x444>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d017      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a9c      	ldr	r2, [pc, #624]	; (8006604 <HAL_GPIO_Init+0x448>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a9b      	ldr	r2, [pc, #620]	; (8006608 <HAL_GPIO_Init+0x44c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a9a      	ldr	r2, [pc, #616]	; (800660c <HAL_GPIO_Init+0x450>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a99      	ldr	r2, [pc, #612]	; (8006610 <HAL_GPIO_Init+0x454>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a98      	ldr	r2, [pc, #608]	; (8006614 <HAL_GPIO_Init+0x458>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x204>
 80063b8:	21cd      	movs	r1, #205	; 0xcd
 80063ba:	4897      	ldr	r0, [pc, #604]	; (8006618 <HAL_GPIO_Init+0x45c>)
 80063bc:	f7fa fe90 	bl	80010e0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b0f      	cmp	r3, #15
 80063c6:	d903      	bls.n	80063d0 <HAL_GPIO_Init+0x214>
 80063c8:	21ce      	movs	r1, #206	; 0xce
 80063ca:	4893      	ldr	r0, [pc, #588]	; (8006618 <HAL_GPIO_Init+0x45c>)
 80063cc:	f7fa fe88 	bl	80010e0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	08da      	lsrs	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3208      	adds	r2, #8
 80063d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	220f      	movs	r2, #15
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4313      	orrs	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	08da      	lsrs	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3208      	adds	r2, #8
 8006412:	69b9      	ldr	r1, [r7, #24]
 8006414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0203 	and.w	r2, r3, #3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4313      	orrs	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d00b      	beq.n	800646c <HAL_GPIO_Init+0x2b0>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d007      	beq.n	800646c <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006460:	2b11      	cmp	r3, #17
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b12      	cmp	r3, #18
 800646a:	d144      	bne.n	80064f6 <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00f      	beq.n	8006494 <HAL_GPIO_Init+0x2d8>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d00b      	beq.n	8006494 <HAL_GPIO_Init+0x2d8>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d007      	beq.n	8006494 <HAL_GPIO_Init+0x2d8>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d003      	beq.n	8006494 <HAL_GPIO_Init+0x2d8>
 800648c:	21e2      	movs	r1, #226	; 0xe2
 800648e:	4862      	ldr	r0, [pc, #392]	; (8006618 <HAL_GPIO_Init+0x45c>)
 8006490:	f7fa fe26 	bl	80010e0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2203      	movs	r2, #3
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064ca:	2201      	movs	r2, #1
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	f003 0201 	and.w	r2, r3, #1
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	2203      	movs	r2, #3
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4313      	orrs	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80e2 	beq.w	80066f8 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006534:	4b39      	ldr	r3, [pc, #228]	; (800661c <HAL_GPIO_Init+0x460>)
 8006536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800653a:	4a38      	ldr	r2, [pc, #224]	; (800661c <HAL_GPIO_Init+0x460>)
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <HAL_GPIO_Init+0x460>)
 8006546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006552:	4a33      	ldr	r2, [pc, #204]	; (8006620 <HAL_GPIO_Init+0x464>)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	3302      	adds	r3, #2
 800655a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	220f      	movs	r2, #15
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4013      	ands	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <HAL_GPIO_Init+0x430>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d054      	beq.n	8006628 <HAL_GPIO_Init+0x46c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <HAL_GPIO_Init+0x434>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d04e      	beq.n	8006624 <HAL_GPIO_Init+0x468>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <HAL_GPIO_Init+0x438>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d02b      	beq.n	80065e6 <HAL_GPIO_Init+0x42a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <HAL_GPIO_Init+0x43c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d025      	beq.n	80065e2 <HAL_GPIO_Init+0x426>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a18      	ldr	r2, [pc, #96]	; (80065fc <HAL_GPIO_Init+0x440>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01f      	beq.n	80065de <HAL_GPIO_Init+0x422>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a17      	ldr	r2, [pc, #92]	; (8006600 <HAL_GPIO_Init+0x444>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d019      	beq.n	80065da <HAL_GPIO_Init+0x41e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_GPIO_Init+0x448>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_GPIO_Init+0x41a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <HAL_GPIO_Init+0x44c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00d      	beq.n	80065d2 <HAL_GPIO_Init+0x416>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_GPIO_Init+0x450>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <HAL_GPIO_Init+0x412>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a13      	ldr	r2, [pc, #76]	; (8006610 <HAL_GPIO_Init+0x454>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d101      	bne.n	80065ca <HAL_GPIO_Init+0x40e>
 80065c6:	2309      	movs	r3, #9
 80065c8:	e02f      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065ca:	230a      	movs	r3, #10
 80065cc:	e02d      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065ce:	2308      	movs	r3, #8
 80065d0:	e02b      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065d2:	2307      	movs	r3, #7
 80065d4:	e029      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065d6:	2306      	movs	r3, #6
 80065d8:	e027      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065da:	2305      	movs	r3, #5
 80065dc:	e025      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065de:	2304      	movs	r3, #4
 80065e0:	e023      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065e2:	2303      	movs	r3, #3
 80065e4:	e021      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e01f      	b.n	800662a <HAL_GPIO_Init+0x46e>
 80065ea:	bf00      	nop
 80065ec:	58020000 	.word	0x58020000
 80065f0:	58020400 	.word	0x58020400
 80065f4:	58020800 	.word	0x58020800
 80065f8:	58020c00 	.word	0x58020c00
 80065fc:	58021000 	.word	0x58021000
 8006600:	58021400 	.word	0x58021400
 8006604:	58021800 	.word	0x58021800
 8006608:	58021c00 	.word	0x58021c00
 800660c:	58022000 	.word	0x58022000
 8006610:	58022400 	.word	0x58022400
 8006614:	58022800 	.word	0x58022800
 8006618:	08013d88 	.word	0x08013d88
 800661c:	58024400 	.word	0x58024400
 8006620:	58000400 	.word	0x58000400
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_GPIO_Init+0x46e>
 8006628:	2300      	movs	r3, #0
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	f002 0203 	and.w	r2, r2, #3
 8006630:	0092      	lsls	r2, r2, #2
 8006632:	4093      	lsls	r3, r2
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4313      	orrs	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800663a:	4937      	ldr	r1, [pc, #220]	; (8006718 <HAL_GPIO_Init+0x55c>)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	3302      	adds	r3, #2
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800669c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	43db      	mvns	r3, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4013      	ands	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	f47f ae15 	bne.w	8006338 <HAL_GPIO_Init+0x17c>
  }
}
 800670e:	bf00      	nop
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	58000400 	.word	0x58000400

0800671c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800672c:	887b      	ldrh	r3, [r7, #2]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <HAL_GPIO_WritePin+0x20>
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <HAL_GPIO_WritePin+0x60>)
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <HAL_GPIO_WritePin+0x2a>
 800673c:	f240 11ad 	movw	r1, #429	; 0x1ad
 8006740:	480f      	ldr	r0, [pc, #60]	; (8006780 <HAL_GPIO_WritePin+0x64>)
 8006742:	f7fa fccd 	bl	80010e0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006746:	787b      	ldrb	r3, [r7, #1]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <HAL_GPIO_WritePin+0x40>
 800674c:	787b      	ldrb	r3, [r7, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d004      	beq.n	800675c <HAL_GPIO_WritePin+0x40>
 8006752:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006756:	480a      	ldr	r0, [pc, #40]	; (8006780 <HAL_GPIO_WritePin+0x64>)
 8006758:	f7fa fcc2 	bl	80010e0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800675c:	787b      	ldrb	r3, [r7, #1]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006762:	887a      	ldrh	r2, [r7, #2]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006768:	e003      	b.n	8006772 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800676a:	887b      	ldrh	r3, [r7, #2]
 800676c:	041a      	lsls	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	619a      	str	r2, [r3, #24]
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	ffff0000 	.word	0xffff0000
 8006780:	08013d88 	.word	0x08013d88

08006784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800678e:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	4013      	ands	r3, r2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800679a:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f008 fdf2 	bl	800f38c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	58000080 	.word	0x58000080

080067b4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e110      	b.n	80069e8 <HAL_HRTIM_Init+0x234>
  }

  /* Check the parameters */
  assert_param(IS_HRTIM_ALL_INSTANCE(hhrtim->Instance));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a89      	ldr	r2, [pc, #548]	; (80069f0 <HAL_HRTIM_Init+0x23c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_HRTIM_Init+0x26>
 80067d0:	f240 210b 	movw	r1, #523	; 0x20b
 80067d4:	4887      	ldr	r0, [pc, #540]	; (80069f4 <HAL_HRTIM_Init+0x240>)
 80067d6:	f7fa fc83 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_IT(hhrtim->Init.HRTIMInterruptResquests));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b86      	ldr	r3, [pc, #536]	; (80069f8 <HAL_HRTIM_Init+0x244>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <HAL_HRTIM_Init+0x3c>
 80067e6:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80067ea:	4882      	ldr	r0, [pc, #520]	; (80069f4 <HAL_HRTIM_Init+0x240>)
 80067ec:	f7fa fc78 	bl	80010e0 <assert_failed>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05c      	beq.n	80068ee <HAL_HRTIM_Init+0x13a>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(hhrtim->Init.SyncOutputSource));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d013      	beq.n	8006864 <HAL_HRTIM_Init+0xb0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006844:	d00e      	beq.n	8006864 <HAL_HRTIM_Init+0xb0>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684e:	d009      	beq.n	8006864 <HAL_HRTIM_Init+0xb0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006858:	d004      	beq.n	8006864 <HAL_HRTIM_Init+0xb0>
 800685a:	f240 2141 	movw	r1, #577	; 0x241
 800685e:	4865      	ldr	r0, [pc, #404]	; (80069f4 <HAL_HRTIM_Init+0x240>)
 8006860:	f7fa fc3e 	bl	80010e0 <assert_failed>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <HAL_HRTIM_Init+0xd6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006874:	d009      	beq.n	800688a <HAL_HRTIM_Init+0xd6>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800687e:	d004      	beq.n	800688a <HAL_HRTIM_Init+0xd6>
 8006880:	f240 2142 	movw	r1, #578	; 0x242
 8006884:	485b      	ldr	r0, [pc, #364]	; (80069f4 <HAL_HRTIM_Init+0x240>)
 8006886:	f7fa fc2b 	bl	80010e0 <assert_failed>

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a58      	ldr	r2, [pc, #352]	; (80069f0 <HAL_HRTIM_Init+0x23c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10e      	bne.n	80068b2 <HAL_HRTIM_Init+0xfe>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006894:	4b59      	ldr	r3, [pc, #356]	; (80069fc <HAL_HRTIM_Init+0x248>)
 8006896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800689a:	4a58      	ldr	r2, [pc, #352]	; (80069fc <HAL_HRTIM_Init+0x248>)
 800689c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80068a4:	4b55      	ldr	r3, [pc, #340]	; (80069fc <HAL_HRTIM_Init+0x248>)
 80068a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80068c0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068d6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fa f9de 	bl	8000cb0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d025      	beq.n	800694c <HAL_HRTIM_Init+0x198>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <HAL_HRTIM_Init+0x172>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006910:	d009      	beq.n	8006926 <HAL_HRTIM_Init+0x172>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691a:	d004      	beq.n	8006926 <HAL_HRTIM_Init+0x172>
 800691c:	f240 2166 	movw	r1, #614	; 0x266
 8006920:	4834      	ldr	r0, [pc, #208]	; (80069f4 <HAL_HRTIM_Init+0x240>)
 8006922:	f7fa fbdd 	bl	80010e0 <assert_failed>

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]
 8006960:	e03e      	b.n	80069e0 <HAL_HRTIM_Init+0x22c>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006962:	7dfa      	ldrb	r2, [r7, #23]
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3318      	adds	r3, #24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006976:	7dfa      	ldrb	r2, [r7, #23]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	331c      	adds	r3, #28
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800698a:	7dfa      	ldrb	r2, [r7, #23]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3320      	adds	r3, #32
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800699e:	7dfa      	ldrb	r2, [r7, #23]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	3324      	adds	r3, #36	; 0x24
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80069b2:	7dfa      	ldrb	r2, [r7, #23]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3328      	adds	r3, #40	; 0x28
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80069c6:	7dfa      	ldrb	r2, [r7, #23]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3330      	adds	r3, #48	; 0x30
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	3301      	adds	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	d9bd      	bls.n	8006962 <HAL_HRTIM_Init+0x1ae>
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40017400 	.word	0x40017400
 80069f4:	08013dc4 	.word	0x08013dc4
 80069f8:	fffcffc0 	.word	0xfffcffc0
 80069fc:	58024400 	.word	0x58024400

08006a00 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d013      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d00d      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d00a      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d007      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d004      	beq.n	8006a3a <HAL_HRTIM_TimeBaseConfig+0x3a>
 8006a30:	f240 21e3 	movw	r1, #739	; 0x2e3
 8006a34:	482d      	ldr	r0, [pc, #180]	; (8006aec <HAL_HRTIM_TimeBaseConfig+0xec>)
 8006a36:	f7fa fb53 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d01c      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d018      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d014      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d010      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d00c      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b06      	cmp	r3, #6
 8006a70:	d008      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b07      	cmp	r3, #7
 8006a78:	d004      	beq.n	8006a84 <HAL_HRTIM_TimeBaseConfig+0x84>
 8006a7a:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8006a7e:	481b      	ldr	r0, [pc, #108]	; (8006aec <HAL_HRTIM_TimeBaseConfig+0xec>)
 8006a80:	f7fa fb2e 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_HRTIM_TimeBaseConfig+0xa6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_HRTIM_TimeBaseConfig+0xa6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d004      	beq.n	8006aa6 <HAL_HRTIM_TimeBaseConfig+0xa6>
 8006a9c:	f240 21e5 	movw	r1, #741	; 0x2e5
 8006aa0:	4812      	ldr	r0, [pc, #72]	; (8006aec <HAL_HRTIM_TimeBaseConfig+0xec>)
 8006aa2:	f7fa fb1d 	bl	80010e0 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d101      	bne.n	8006ab6 <HAL_HRTIM_TimeBaseConfig+0xb6>
  {
     return HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e015      	b.n	8006ae2 <HAL_HRTIM_TimeBaseConfig+0xe2>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	d104      	bne.n	8006ace <HAL_HRTIM_TimeBaseConfig+0xce>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fa5c 	bl	8006f84 <HRTIM_MasterBase_Config>
 8006acc:	e004      	b.n	8006ad8 <HAL_HRTIM_TimeBaseConfig+0xd8>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fa85 	bl	8006fe2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	08013dc4 	.word	0x08013dc4

08006af0 <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08e      	sub	sp, #56	; 0x38
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  HRTIM_OutputCfgTypeDef OutputCfg;
  uint32_t hrtim_timcr;

  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_HRTIM_SimplePWMChannelConfig+0x20>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d02d      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d02a      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_HRTIM_SimplePWMChannelConfig+0x32>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d024      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d021      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d105      	bne.n	8006b34 <HAL_HRTIM_SimplePWMChannelConfig+0x44>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d01b      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d018      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d105      	bne.n	8006b46 <HAL_HRTIM_SimplePWMChannelConfig+0x56>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d012      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d00f      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d107      	bne.n	8006b5c <HAL_HRTIM_SimplePWMChannelConfig+0x6c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b52:	d008      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d004      	beq.n	8006b66 <HAL_HRTIM_SimplePWMChannelConfig+0x76>
 8006b5c:	f240 7117 	movw	r1, #1815	; 0x717
 8006b60:	4861      	ldr	r0, [pc, #388]	; (8006ce8 <HAL_HRTIM_SimplePWMChannelConfig+0x1f8>)
 8006b62:	f7fa fabd 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_HRTIM_SimplePWMChannelConfig+0x90>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d004      	beq.n	8006b80 <HAL_HRTIM_SimplePWMChannelConfig+0x90>
 8006b76:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 8006b7a:	485b      	ldr	r0, [pc, #364]	; (8006ce8 <HAL_HRTIM_SimplePWMChannelConfig+0x1f8>)
 8006b7c:	f7fa fab0 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b88:	d304      	bcc.n	8006b94 <HAL_HRTIM_SimplePWMChannelConfig+0xa4>
 8006b8a:	f240 7119 	movw	r1, #1817	; 0x719
 8006b8e:	4856      	ldr	r0, [pc, #344]	; (8006ce8 <HAL_HRTIM_SimplePWMChannelConfig+0x1f8>)
 8006b90:	f7fa faa6 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_HRTIM_SimplePWMChannelConfig+0xbe>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d004      	beq.n	8006bae <HAL_HRTIM_SimplePWMChannelConfig+0xbe>
 8006ba4:	f240 711a 	movw	r1, #1818	; 0x71a
 8006ba8:	484f      	ldr	r0, [pc, #316]	; (8006ce8 <HAL_HRTIM_SimplePWMChannelConfig+0x1f8>)
 8006baa:	f7fa fa99 	bl	80010e0 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d101      	bne.n	8006bbe <HAL_HRTIM_SimplePWMChannelConfig+0xce>
  {
     return HAL_BUSY;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e090      	b.n	8006ce0 <HAL_HRTIM_SimplePWMChannelConfig+0x1f0>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_HRTIM_SimplePWMChannelConfig+0xdc>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e089      	b.n	8006ce0 <HAL_HRTIM_SimplePWMChannelConfig+0x1f0>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure timer compare unit */
  switch (PWMChannel)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d01d      	beq.n	8006c1e <HAL_HRTIM_SimplePWMChannelConfig+0x12e>
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d80b      	bhi.n	8006bfe <HAL_HRTIM_SimplePWMChannelConfig+0x10e>
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d025      	beq.n	8006c36 <HAL_HRTIM_SimplePWMChannelConfig+0x146>
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d802      	bhi.n	8006bf4 <HAL_HRTIM_SimplePWMChannelConfig+0x104>
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d015      	beq.n	8006c1e <HAL_HRTIM_SimplePWMChannelConfig+0x12e>
 8006bf2:	e02c      	b.n	8006c4e <HAL_HRTIM_SimplePWMChannelConfig+0x15e>
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d012      	beq.n	8006c1e <HAL_HRTIM_SimplePWMChannelConfig+0x12e>
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d01c      	beq.n	8006c36 <HAL_HRTIM_SimplePWMChannelConfig+0x146>
 8006bfc:	e027      	b.n	8006c4e <HAL_HRTIM_SimplePWMChannelConfig+0x15e>
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d019      	beq.n	8006c36 <HAL_HRTIM_SimplePWMChannelConfig+0x146>
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d804      	bhi.n	8006c10 <HAL_HRTIM_SimplePWMChannelConfig+0x120>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d015      	beq.n	8006c36 <HAL_HRTIM_SimplePWMChannelConfig+0x146>
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d007      	beq.n	8006c1e <HAL_HRTIM_SimplePWMChannelConfig+0x12e>
 8006c0e:	e01e      	b.n	8006c4e <HAL_HRTIM_SimplePWMChannelConfig+0x15e>
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c14:	d003      	beq.n	8006c1e <HAL_HRTIM_SimplePWMChannelConfig+0x12e>
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d00c      	beq.n	8006c36 <HAL_HRTIM_SimplePWMChannelConfig+0x146>
 8006c1c:	e017      	b.n	8006c4e <HAL_HRTIM_SimplePWMChannelConfig+0x15e>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	01db      	lsls	r3, r3, #7
 8006c2a:	440b      	add	r3, r1
 8006c2c:	339c      	adds	r3, #156	; 0x9c
 8006c2e:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8006c30:	2308      	movs	r3, #8
 8006c32:	61bb      	str	r3, [r7, #24]
      break;
 8006c34:	e014      	b.n	8006c60 <HAL_HRTIM_SimplePWMChannelConfig+0x170>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	440b      	add	r3, r1
 8006c44:	33a4      	adds	r3, #164	; 0xa4
 8006c46:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8006c48:	2310      	movs	r3, #16
 8006c4a:	61bb      	str	r3, [r7, #24]
      break;
 8006c4c:	e008      	b.n	8006c60 <HAL_HRTIM_SimplePWMChannelConfig+0x170>
    }
  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2207      	movs	r2, #7
 8006c52:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8006c5e:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	d101      	bne.n	8006c70 <HAL_HRTIM_SimplePWMChannelConfig+0x180>
  {
     return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e037      	b.n	8006ce0 <HAL_HRTIM_SimplePWMChannelConfig+0x1f0>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8006c90:	2300      	movs	r3, #0
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8006c94:	2304      	movs	r3, #4
 8006c96:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f9de 	bl	8007062 <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3301      	adds	r3, #1
 8006cae:	01db      	lsls	r3, r3, #7
 8006cb0:	4413      	add	r3, r2
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	01db      	lsls	r3, r3, #7
 8006cc8:	4413      	add	r3, r2
 8006cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ccc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3738      	adds	r7, #56	; 0x38
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	08013dc4 	.word	0x08013dc4

08006cec <HAL_HRTIM_SimplePWMStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMStart(HRTIM_HandleTypeDef * hhrtim,
                                          uint32_t TimerIdx,
                                          uint32_t PWMChannel)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d105      	bne.n	8006d0a <HAL_HRTIM_SimplePWMStart+0x1e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d02d      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d02a      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <HAL_HRTIM_SimplePWMStart+0x30>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d024      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d021      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d105      	bne.n	8006d2e <HAL_HRTIM_SimplePWMStart+0x42>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d01b      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d018      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d105      	bne.n	8006d40 <HAL_HRTIM_SimplePWMStart+0x54>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d012      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d00f      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d107      	bne.n	8006d56 <HAL_HRTIM_SimplePWMStart+0x6a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d008      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d54:	d004      	beq.n	8006d60 <HAL_HRTIM_SimplePWMStart+0x74>
 8006d56:	f240 7186 	movw	r1, #1926	; 0x786
 8006d5a:	481a      	ldr	r0, [pc, #104]	; (8006dc4 <HAL_HRTIM_SimplePWMStart+0xd8>)
 8006d5c:	f7fa f9c0 	bl	80010e0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_HRTIM_SimplePWMStart+0x82>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e025      	b.n	8006dba <HAL_HRTIM_SimplePWMStart+0xce>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the timer output */
  hhrtim->Instance->sCommonRegs.OENR |= PWMChannel;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6819      	ldr	r1, [r3, #0]
 8006d98:	4a0b      	ldr	r2, [pc, #44]	; (8006dc8 <HAL_HRTIM_SimplePWMStart+0xdc>)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08013dc4 	.word	0x08013dc4
 8006dc8:	24000010 	.word	0x24000010

08006dcc <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_cr1;

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d00d      	beq.n	8006dfa <HAL_HRTIM_ADCTriggerConfig+0x2e>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d00a      	beq.n	8006dfa <HAL_HRTIM_ADCTriggerConfig+0x2e>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d007      	beq.n	8006dfa <HAL_HRTIM_ADCTriggerConfig+0x2e>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d004      	beq.n	8006dfa <HAL_HRTIM_ADCTriggerConfig+0x2e>
 8006df0:	f640 715b 	movw	r1, #3931	; 0xf5b
 8006df4:	4862      	ldr	r0, [pc, #392]	; (8006f80 <HAL_HRTIM_ADCTriggerConfig+0x1b4>)
 8006df6:	f7fa f973 	bl	80010e0 <assert_failed>
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01d      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0a:	d018      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e14:	d013      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e1e:	d00e      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e28:	d009      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e32:	d004      	beq.n	8006e3e <HAL_HRTIM_ADCTriggerConfig+0x72>
 8006e34:	f640 715c 	movw	r1, #3932	; 0xf5c
 8006e38:	4851      	ldr	r0, [pc, #324]	; (8006f80 <HAL_HRTIM_ADCTriggerConfig+0x1b4>)
 8006e3a:	f7fa f951 	bl	80010e0 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d101      	bne.n	8006e4e <HAL_HRTIM_ADCTriggerConfig+0x82>
  {
     return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e094      	b.n	8006f78 <HAL_HRTIM_ADCTriggerConfig+0x1ac>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_HRTIM_ADCTriggerConfig+0x90>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e08d      	b.n	8006f78 <HAL_HRTIM_ADCTriggerConfig+0x1ac>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e74:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	2b07      	cmp	r3, #7
 8006e7c:	d85d      	bhi.n	8006f3a <HAL_HRTIM_ADCTriggerConfig+0x16e>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_HRTIM_ADCTriggerConfig+0xb8>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ea5 	.word	0x08006ea5
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006f3b 	.word	0x08006f3b
 8006e90:	08006eef 	.word	0x08006eef
 8006e94:	08006f3b 	.word	0x08006f3b
 8006e98:	08006f3b 	.word	0x08006f3b
 8006e9c:	08006f3b 	.word	0x08006f3b
 8006ea0:	08006f15 	.word	0x08006f15
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006eaa:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 8006ec6:	e041      	b.n	8006f4c <HAL_HRTIM_ADCTriggerConfig+0x180>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006ece:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6852      	ldr	r2, [r2, #4]
 8006ee8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8006eec:	e02e      	b.n	8006f4c <HAL_HRTIM_ADCTriggerConfig+0x180>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006ef4:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	019b      	lsls	r3, r3, #6
 8006efc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8006f12:	e01b      	b.n	8006f4c <HAL_HRTIM_ADCTriggerConfig+0x180>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006f1a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	025b      	lsls	r3, r3, #9
 8006f22:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6852      	ldr	r2, [r2, #4]
 8006f34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 8006f38:	e008      	b.n	8006f4c <HAL_HRTIM_ADCTriggerConfig+0x180>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2207      	movs	r2, #7
 8006f3e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8006f4a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b07      	cmp	r3, #7
 8006f56:	d101      	bne.n	8006f5c <HAL_HRTIM_ADCTriggerConfig+0x190>
  {
     return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e00d      	b.n	8006f78 <HAL_HRTIM_ADCTriggerConfig+0x1ac>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	08013dc4 	.word	0x08013dc4

08006f84 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f023 0307 	bic.w	r3, r3, #7
 8006f9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0318 	bic.w	r3, r3, #24
 8006fae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6852      	ldr	r2, [r2, #4]
 8006fd4:	619a      	str	r2, [r3, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4413      	add	r3, r2
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f023 0318 	bic.w	r3, r3, #24
 8007016:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3301      	adds	r3, #1
 800702a:	01db      	lsls	r3, r3, #7
 800702c:	4413      	add	r3, r2
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	01db      	lsls	r3, r3, #7
 800703e:	440b      	add	r3, r1
 8007040:	3394      	adds	r3, #148	; 0x94
 8007042:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6819      	ldr	r1, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	440b      	add	r3, r1
 8007052:	3398      	adds	r3, #152	; 0x98
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007062:	b480      	push	{r7}
 8007064:	b089      	sub	sp, #36	; 0x24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	01db      	lsls	r3, r3, #7
 800707c:	4413      	add	r3, r2
 800707e:	33e4      	adds	r3, #228	; 0xe4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	01db      	lsls	r3, r3, #7
 800708c:	4413      	add	r3, r2
 800708e:	33b8      	adds	r3, #184	; 0xb8
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	617b      	str	r3, [r7, #20]

  switch (Output)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b10      	cmp	r3, #16
 8007098:	d01d      	beq.n	80070d6 <HRTIM_OutputConfig+0x74>
 800709a:	2b10      	cmp	r3, #16
 800709c:	d80b      	bhi.n	80070b6 <HRTIM_OutputConfig+0x54>
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d02c      	beq.n	80070fc <HRTIM_OutputConfig+0x9a>
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d802      	bhi.n	80070ac <HRTIM_OutputConfig+0x4a>
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d015      	beq.n	80070d6 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80070aa:	e03c      	b.n	8007126 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d012      	beq.n	80070d6 <HRTIM_OutputConfig+0x74>
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d023      	beq.n	80070fc <HRTIM_OutputConfig+0x9a>
    break;
 80070b4:	e037      	b.n	8007126 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d020      	beq.n	80070fc <HRTIM_OutputConfig+0x9a>
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d804      	bhi.n	80070c8 <HRTIM_OutputConfig+0x66>
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d01c      	beq.n	80070fc <HRTIM_OutputConfig+0x9a>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d007      	beq.n	80070d6 <HRTIM_OutputConfig+0x74>
    break;
 80070c6:	e02e      	b.n	8007126 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80070c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070cc:	d003      	beq.n	80070d6 <HRTIM_OutputConfig+0x74>
 80070ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d2:	d013      	beq.n	80070fc <HRTIM_OutputConfig+0x9a>
    break;
 80070d4:	e027      	b.n	8007126 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	01db      	lsls	r3, r3, #7
 80070e2:	440b      	add	r3, r1
 80070e4:	33bc      	adds	r3, #188	; 0xbc
 80070e6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6819      	ldr	r1, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	01db      	lsls	r3, r3, #7
 80070f4:	440b      	add	r3, r1
 80070f6:	33c0      	adds	r3, #192	; 0xc0
 80070f8:	601a      	str	r2, [r3, #0]
      break;
 80070fa:	e014      	b.n	8007126 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	01db      	lsls	r3, r3, #7
 8007108:	440b      	add	r3, r1
 800710a:	33c4      	adds	r3, #196	; 0xc4
 800710c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	01db      	lsls	r3, r3, #7
 800711a:	440b      	add	r3, r1
 800711c:	33c8      	adds	r3, #200	; 0xc8
 800711e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8007120:	2310      	movs	r3, #16
 8007122:	61bb      	str	r3, [r7, #24]
      break;
 8007124:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8007126:	22fe      	movs	r2, #254	; 0xfe
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800712e:	43db      	mvns	r3, r3
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	4013      	ands	r3, r2
 8007134:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	4313      	orrs	r3, r2
 8007144:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	4313      	orrs	r3, r2
 8007154:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	4313      	orrs	r3, r2
 8007164:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	4313      	orrs	r3, r2
 8007174:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	4313      	orrs	r3, r2
 8007184:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d111      	bne.n	80071b2 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10c      	bne.n	80071b2 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	69da      	ldr	r2, [r3, #28]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	01db      	lsls	r3, r3, #7
 80071ba:	4413      	add	r3, r2
 80071bc:	33e4      	adds	r3, #228	; 0xe4
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	3724      	adds	r7, #36	; 0x24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d006      	beq.n	80071ec <HAL_PWREx_ConfigSupply+0x1c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d003      	beq.n	80071ec <HAL_PWREx_ConfigSupply+0x1c>
 80071e4:	21ef      	movs	r1, #239	; 0xef
 80071e6:	481a      	ldr	r0, [pc, #104]	; (8007250 <HAL_PWREx_ConfigSupply+0x80>)
 80071e8:	f7f9 ff7a 	bl	80010e0 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <HAL_PWREx_ConfigSupply+0x84>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d008      	beq.n	800720a <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071f8:	4b16      	ldr	r3, [pc, #88]	; (8007254 <HAL_PWREx_ConfigSupply+0x84>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d001      	beq.n	800720a <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e01d      	b.n	8007246 <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <HAL_PWREx_ConfigSupply+0x84>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f023 0207 	bic.w	r2, r3, #7
 8007212:	4910      	ldr	r1, [pc, #64]	; (8007254 <HAL_PWREx_ConfigSupply+0x84>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4313      	orrs	r3, r2
 8007218:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800721a:	f7fa faaf 	bl	800177c <HAL_GetTick>
 800721e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007220:	e009      	b.n	8007236 <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8007222:	f7fa faab 	bl	800177c <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007230:	d901      	bls.n	8007236 <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e007      	b.n	8007246 <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_PWREx_ConfigSupply+0x84>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007242:	d1ee      	bne.n	8007222 <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	08013e00 	.word	0x08013e00
 8007254:	58024800 	.word	0x58024800

08007258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f000 bcc9 	b.w	8007bfe <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d028      	beq.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d122      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11c      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d116      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d110      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_RCC_OscConfig+0x6e>
 80072bc:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80072c0:	48a2      	ldr	r0, [pc, #648]	; (800754c <HAL_RCC_OscConfig+0x2f4>)
 80072c2:	f7f9 ff0d 	bl	80010e0 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 809d 	beq.w	800740e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00e      	beq.n	80072fa <HAL_RCC_OscConfig+0xa2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e4:	d009      	beq.n	80072fa <HAL_RCC_OscConfig+0xa2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072ee:	d004      	beq.n	80072fa <HAL_RCC_OscConfig+0xa2>
 80072f0:	f240 1175 	movw	r1, #373	; 0x175
 80072f4:	4895      	ldr	r0, [pc, #596]	; (800754c <HAL_RCC_OscConfig+0x2f4>)
 80072f6:	f7f9 fef3 	bl	80010e0 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fa:	4b95      	ldr	r3, [pc, #596]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007304:	4b92      	ldr	r3, [pc, #584]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b10      	cmp	r3, #16
 800730e:	d007      	beq.n	8007320 <HAL_RCC_OscConfig+0xc8>
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2b18      	cmp	r3, #24
 8007314:	d111      	bne.n	800733a <HAL_RCC_OscConfig+0xe2>
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d10c      	bne.n	800733a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007320:	4b8b      	ldr	r3, [pc, #556]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d06f      	beq.n	800740c <HAL_RCC_OscConfig+0x1b4>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d16b      	bne.n	800740c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f000 bc62 	b.w	8007bfe <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007342:	d106      	bne.n	8007352 <HAL_RCC_OscConfig+0xfa>
 8007344:	4b82      	ldr	r3, [pc, #520]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a81      	ldr	r2, [pc, #516]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800734a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e02e      	b.n	80073b0 <HAL_RCC_OscConfig+0x158>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10c      	bne.n	8007374 <HAL_RCC_OscConfig+0x11c>
 800735a:	4b7d      	ldr	r3, [pc, #500]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a7c      	ldr	r2, [pc, #496]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b7a      	ldr	r3, [pc, #488]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a79      	ldr	r2, [pc, #484]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800736c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e01d      	b.n	80073b0 <HAL_RCC_OscConfig+0x158>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x140>
 800737e:	4b74      	ldr	r3, [pc, #464]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a73      	ldr	r2, [pc, #460]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b71      	ldr	r3, [pc, #452]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a70      	ldr	r2, [pc, #448]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e00b      	b.n	80073b0 <HAL_RCC_OscConfig+0x158>
 8007398:	4b6d      	ldr	r3, [pc, #436]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6c      	ldr	r2, [pc, #432]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800739e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	4b6a      	ldr	r3, [pc, #424]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a69      	ldr	r2, [pc, #420]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80073aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d014      	beq.n	80073e2 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fa f9e0 	bl	800177c <HAL_GetTick>
 80073bc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073be:	e009      	b.n	80073d4 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073c0:	f7fa f9dc 	bl	800177c <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b64      	cmp	r3, #100	; 0x64
 80073cc:	d902      	bls.n	80073d4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	f000 bc15 	b.w	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073d4:	4b5e      	ldr	r3, [pc, #376]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ef      	beq.n	80073c0 <HAL_RCC_OscConfig+0x168>
 80073e0:	e015      	b.n	800740e <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fa f9cb 	bl	800177c <HAL_GetTick>
 80073e6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073e8:	e009      	b.n	80073fe <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073ea:	f7fa f9c7 	bl	800177c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b64      	cmp	r3, #100	; 0x64
 80073f6:	d902      	bls.n	80073fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	f000 bc00 	b.w	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073fe:	4b54      	ldr	r3, [pc, #336]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ef      	bne.n	80073ea <HAL_RCC_OscConfig+0x192>
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800740c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80d8 	beq.w	80075cc <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d018      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d014      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d010      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b09      	cmp	r3, #9
 800743a:	d00c      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b11      	cmp	r3, #17
 8007442:	d008      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b19      	cmp	r3, #25
 800744a:	d004      	beq.n	8007456 <HAL_RCC_OscConfig+0x1fe>
 800744c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007450:	483e      	ldr	r0, [pc, #248]	; (800754c <HAL_RCC_OscConfig+0x2f4>)
 8007452:	f7f9 fe45 	bl	80010e0 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b7f      	cmp	r3, #127	; 0x7f
 800745c:	d904      	bls.n	8007468 <HAL_RCC_OscConfig+0x210>
 800745e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007462:	483a      	ldr	r0, [pc, #232]	; (800754c <HAL_RCC_OscConfig+0x2f4>)
 8007464:	f7f9 fe3c 	bl	80010e0 <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007470:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007472:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <HAL_RCC_OscConfig+0x236>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b18      	cmp	r3, #24
 8007482:	d149      	bne.n	8007518 <HAL_RCC_OscConfig+0x2c0>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d144      	bne.n	8007518 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800748e:	4b30      	ldr	r3, [pc, #192]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCC_OscConfig+0x24e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e3ab      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074a6:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 0219 	bic.w	r2, r3, #25
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	4927      	ldr	r1, [pc, #156]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b8:	f7fa f960 	bl	800177c <HAL_GetTick>
 80074bc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c0:	f7fa f95c 	bl	800177c <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e395      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f0      	beq.n	80074c0 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074de:	f7fa f97b 	bl	80017d8 <HAL_GetREVID>
 80074e2:	4602      	mov	r2, r0
 80074e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d80a      	bhi.n	8007502 <HAL_RCC_OscConfig+0x2aa>
 80074ec:	4b18      	ldr	r3, [pc, #96]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	4915      	ldr	r1, [pc, #84]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007500:	e064      	b.n	80075cc <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	490f      	ldr	r1, [pc, #60]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007512:	4313      	orrs	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007516:	e059      	b.n	80075cc <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d03c      	beq.n	800759a <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f023 0219 	bic.w	r2, r3, #25
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4908      	ldr	r1, [pc, #32]	; (8007550 <HAL_RCC_OscConfig+0x2f8>)
 800752e:	4313      	orrs	r3, r2
 8007530:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fa f923 	bl	800177c <HAL_GetTick>
 8007536:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007538:	e00c      	b.n	8007554 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800753a:	f7fa f91f 	bl	800177c <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d905      	bls.n	8007554 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e358      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
 800754c:	08013e3c 	.word	0x08013e3c
 8007550:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007554:	4b95      	ldr	r3, [pc, #596]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ec      	beq.n	800753a <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007560:	f7fa f93a 	bl	80017d8 <HAL_GetREVID>
 8007564:	4602      	mov	r2, r0
 8007566:	f241 0303 	movw	r3, #4099	; 0x1003
 800756a:	429a      	cmp	r2, r3
 800756c:	d80a      	bhi.n	8007584 <HAL_RCC_OscConfig+0x32c>
 800756e:	4b8f      	ldr	r3, [pc, #572]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	031b      	lsls	r3, r3, #12
 800757c:	498b      	ldr	r1, [pc, #556]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800757e:	4313      	orrs	r3, r2
 8007580:	604b      	str	r3, [r1, #4]
 8007582:	e023      	b.n	80075cc <HAL_RCC_OscConfig+0x374>
 8007584:	4b89      	ldr	r3, [pc, #548]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	061b      	lsls	r3, r3, #24
 8007592:	4986      	ldr	r1, [pc, #536]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007594:	4313      	orrs	r3, r2
 8007596:	604b      	str	r3, [r1, #4]
 8007598:	e018      	b.n	80075cc <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800759a:	4b84      	ldr	r3, [pc, #528]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a83      	ldr	r2, [pc, #524]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a6:	f7fa f8e9 	bl	800177c <HAL_GetTick>
 80075aa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075ae:	f7fa f8e5 	bl	800177c <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e31e      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075c0:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f0      	bne.n	80075ae <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80a5 	beq.w	8007724 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_RCC_OscConfig+0x39c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	2b80      	cmp	r3, #128	; 0x80
 80075e8:	d004      	beq.n	80075f4 <HAL_RCC_OscConfig+0x39c>
 80075ea:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80075ee:	4870      	ldr	r0, [pc, #448]	; (80077b0 <HAL_RCC_OscConfig+0x558>)
 80075f0:	f7f9 fd76 	bl	80010e0 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	2b1f      	cmp	r3, #31
 80075fa:	d904      	bls.n	8007606 <HAL_RCC_OscConfig+0x3ae>
 80075fc:	f240 11fb 	movw	r1, #507	; 0x1fb
 8007600:	486b      	ldr	r0, [pc, #428]	; (80077b0 <HAL_RCC_OscConfig+0x558>)
 8007602:	f7f9 fd6d 	bl	80010e0 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007606:	4b69      	ldr	r3, [pc, #420]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800760e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007610:	4b66      	ldr	r3, [pc, #408]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d007      	beq.n	800762c <HAL_RCC_OscConfig+0x3d4>
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b18      	cmp	r3, #24
 8007620:	d12d      	bne.n	800767e <HAL_RCC_OscConfig+0x426>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	2b01      	cmp	r3, #1
 800762a:	d128      	bne.n	800767e <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800762c:	4b5f      	ldr	r3, [pc, #380]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_RCC_OscConfig+0x3ec>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d001      	beq.n	8007644 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e2dc      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007644:	f7fa f8c8 	bl	80017d8 <HAL_GetREVID>
 8007648:	4602      	mov	r2, r0
 800764a:	f241 0303 	movw	r3, #4099	; 0x1003
 800764e:	429a      	cmp	r2, r3
 8007650:	d80a      	bhi.n	8007668 <HAL_RCC_OscConfig+0x410>
 8007652:	4b56      	ldr	r3, [pc, #344]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	069b      	lsls	r3, r3, #26
 8007660:	4952      	ldr	r1, [pc, #328]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007662:	4313      	orrs	r3, r2
 8007664:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007666:	e05d      	b.n	8007724 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007668:	4b50      	ldr	r3, [pc, #320]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	494d      	ldr	r1, [pc, #308]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007678:	4313      	orrs	r3, r2
 800767a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800767c:	e052      	b.n	8007724 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d035      	beq.n	80076f2 <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007686:	4b49      	ldr	r3, [pc, #292]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a48      	ldr	r2, [pc, #288]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fa f873 	bl	800177c <HAL_GetTick>
 8007696:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800769a:	f7fa f86f 	bl	800177c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e2a8      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076ac:	4b3f      	ldr	r3, [pc, #252]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076b8:	f7fa f88e 	bl	80017d8 <HAL_GetREVID>
 80076bc:	4602      	mov	r2, r0
 80076be:	f241 0303 	movw	r3, #4099	; 0x1003
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d80a      	bhi.n	80076dc <HAL_RCC_OscConfig+0x484>
 80076c6:	4b39      	ldr	r3, [pc, #228]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	069b      	lsls	r3, r3, #26
 80076d4:	4935      	ldr	r1, [pc, #212]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	604b      	str	r3, [r1, #4]
 80076da:	e023      	b.n	8007724 <HAL_RCC_OscConfig+0x4cc>
 80076dc:	4b33      	ldr	r3, [pc, #204]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	061b      	lsls	r3, r3, #24
 80076ea:	4930      	ldr	r1, [pc, #192]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60cb      	str	r3, [r1, #12]
 80076f0:	e018      	b.n	8007724 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80076f2:	4b2e      	ldr	r3, [pc, #184]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2d      	ldr	r2, [pc, #180]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 80076f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fe:	f7fa f83d 	bl	800177c <HAL_GetTick>
 8007702:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007706:	f7fa f839 	bl	800177c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e272      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f0      	bne.n	8007706 <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d047      	beq.n	80077c0 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <HAL_RCC_OscConfig+0x4f2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d004      	beq.n	800774a <HAL_RCC_OscConfig+0x4f2>
 8007740:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8007744:	481a      	ldr	r0, [pc, #104]	; (80077b0 <HAL_RCC_OscConfig+0x558>)
 8007746:	f7f9 fccb 	bl	80010e0 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d019      	beq.n	8007786 <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007752:	4b16      	ldr	r3, [pc, #88]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fa f80d 	bl	800177c <HAL_GetTick>
 8007762:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007766:	f7fa f809 	bl	800177c <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e242      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x50e>
 8007784:	e01c      	b.n	80077c0 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 8007788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800778a:	4a08      	ldr	r2, [pc, #32]	; (80077ac <HAL_RCC_OscConfig+0x554>)
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7f9 fff3 	bl	800177c <HAL_GetTick>
 8007796:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007798:	e00c      	b.n	80077b4 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779a:	f7f9 ffef 	bl	800177c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d905      	bls.n	80077b4 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e228      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
 80077ac:	58024400 	.word	0x58024400
 80077b0:	08013e3c 	.word	0x08013e3c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077b4:	4b71      	ldr	r3, [pc, #452]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80077b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1ec      	bne.n	800779a <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d043      	beq.n	8007854 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_RCC_OscConfig+0x58e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d004      	beq.n	80077e6 <HAL_RCC_OscConfig+0x58e>
 80077dc:	f240 2167 	movw	r1, #615	; 0x267
 80077e0:	4867      	ldr	r0, [pc, #412]	; (8007980 <HAL_RCC_OscConfig+0x728>)
 80077e2:	f7f9 fc7d 	bl	80010e0 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d019      	beq.n	8007822 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077ee:	4b63      	ldr	r3, [pc, #396]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a62      	ldr	r2, [pc, #392]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80077f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077fa:	f7f9 ffbf 	bl	800177c <HAL_GetTick>
 80077fe:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007802:	f7f9 ffbb 	bl	800177c <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e1f4      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <HAL_RCC_OscConfig+0x5aa>
 8007820:	e018      	b.n	8007854 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007822:	4b56      	ldr	r3, [pc, #344]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a55      	ldr	r2, [pc, #340]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800782e:	f7f9 ffa5 	bl	800177c <HAL_GetTick>
 8007832:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007836:	f7f9 ffa1 	bl	800177c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e1da      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <HAL_RCC_OscConfig+0x724>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8099 	beq.w	8007994 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <HAL_RCC_OscConfig+0x62c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d008      	beq.n	8007884 <HAL_RCC_OscConfig+0x62c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b05      	cmp	r3, #5
 8007878:	d004      	beq.n	8007884 <HAL_RCC_OscConfig+0x62c>
 800787a:	f240 2191 	movw	r1, #657	; 0x291
 800787e:	4840      	ldr	r0, [pc, #256]	; (8007980 <HAL_RCC_OscConfig+0x728>)
 8007880:	f7f9 fc2e 	bl	80010e0 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007884:	4b3f      	ldr	r3, [pc, #252]	; (8007984 <HAL_RCC_OscConfig+0x72c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a3e      	ldr	r2, [pc, #248]	; (8007984 <HAL_RCC_OscConfig+0x72c>)
 800788a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007890:	f7f9 ff74 	bl	800177c <HAL_GetTick>
 8007894:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007898:	f7f9 ff70 	bl	800177c <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b64      	cmp	r3, #100	; 0x64
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e1a9      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078aa:	4b36      	ldr	r3, [pc, #216]	; (8007984 <HAL_RCC_OscConfig+0x72c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d106      	bne.n	80078cc <HAL_RCC_OscConfig+0x674>
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c2:	4a2e      	ldr	r2, [pc, #184]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ca:	e02d      	b.n	8007928 <HAL_RCC_OscConfig+0x6d0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10c      	bne.n	80078ee <HAL_RCC_OscConfig+0x696>
 80078d4:	4b29      	ldr	r3, [pc, #164]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	4a28      	ldr	r2, [pc, #160]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	6713      	str	r3, [r2, #112]	; 0x70
 80078e0:	4b26      	ldr	r3, [pc, #152]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	4a25      	ldr	r2, [pc, #148]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078e6:	f023 0304 	bic.w	r3, r3, #4
 80078ea:	6713      	str	r3, [r2, #112]	; 0x70
 80078ec:	e01c      	b.n	8007928 <HAL_RCC_OscConfig+0x6d0>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b05      	cmp	r3, #5
 80078f4:	d10c      	bne.n	8007910 <HAL_RCC_OscConfig+0x6b8>
 80078f6:	4b21      	ldr	r3, [pc, #132]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	4a20      	ldr	r2, [pc, #128]	; (800797c <HAL_RCC_OscConfig+0x724>)
 80078fc:	f043 0304 	orr.w	r3, r3, #4
 8007900:	6713      	str	r3, [r2, #112]	; 0x70
 8007902:	4b1e      	ldr	r3, [pc, #120]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	4a1d      	ldr	r2, [pc, #116]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	6713      	str	r3, [r2, #112]	; 0x70
 800790e:	e00b      	b.n	8007928 <HAL_RCC_OscConfig+0x6d0>
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	6713      	str	r3, [r2, #112]	; 0x70
 800791c:	4b17      	ldr	r3, [pc, #92]	; (800797c <HAL_RCC_OscConfig+0x724>)
 800791e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007920:	4a16      	ldr	r2, [pc, #88]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007922:	f023 0304 	bic.w	r3, r3, #4
 8007926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d015      	beq.n	800795c <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007930:	f7f9 ff24 	bl	800177c <HAL_GetTick>
 8007934:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007936:	e00a      	b.n	800794e <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007938:	f7f9 ff20 	bl	800177c <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f241 3288 	movw	r2, #5000	; 0x1388
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e157      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCC_OscConfig+0x724>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ee      	beq.n	8007938 <HAL_RCC_OscConfig+0x6e0>
 800795a:	e01b      	b.n	8007994 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7f9 ff0e 	bl	800177c <HAL_GetTick>
 8007960:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007962:	e011      	b.n	8007988 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007964:	f7f9 ff0a 	bl	800177c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007972:	4293      	cmp	r3, r2
 8007974:	d908      	bls.n	8007988 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e141      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
 800797a:	bf00      	nop
 800797c:	58024400 	.word	0x58024400
 8007980:	08013e3c 	.word	0x08013e3c
 8007984:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007988:	4b9f      	ldr	r3, [pc, #636]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e7      	bne.n	8007964 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00c      	beq.n	80079b6 <HAL_RCC_OscConfig+0x75e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d008      	beq.n	80079b6 <HAL_RCC_OscConfig+0x75e>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d004      	beq.n	80079b6 <HAL_RCC_OscConfig+0x75e>
 80079ac:	f240 21c3 	movw	r1, #707	; 0x2c3
 80079b0:	4896      	ldr	r0, [pc, #600]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 80079b2:	f7f9 fb95 	bl	80010e0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 811e 	beq.w	8007bfc <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079c0:	4b91      	ldr	r3, [pc, #580]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c8:	2b18      	cmp	r3, #24
 80079ca:	f000 8115 	beq.w	8007bf8 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	f040 80f6 	bne.w	8007bc4 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d010      	beq.n	8007a02 <HAL_RCC_OscConfig+0x7aa>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00c      	beq.n	8007a02 <HAL_RCC_OscConfig+0x7aa>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d008      	beq.n	8007a02 <HAL_RCC_OscConfig+0x7aa>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d004      	beq.n	8007a02 <HAL_RCC_OscConfig+0x7aa>
 80079f8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80079fc:	4883      	ldr	r0, [pc, #524]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 80079fe:	f7f9 fb6f 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_RCC_OscConfig+0x7ba>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a10:	d904      	bls.n	8007a1c <HAL_RCC_OscConfig+0x7c4>
 8007a12:	f240 21cd 	movw	r1, #717	; 0x2cd
 8007a16:	487d      	ldr	r0, [pc, #500]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a18:	f7f9 fb62 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d904      	bls.n	8007a2e <HAL_RCC_OscConfig+0x7d6>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d904      	bls.n	8007a38 <HAL_RCC_OscConfig+0x7e0>
 8007a2e:	f240 21ce 	movw	r1, #718	; 0x2ce
 8007a32:	4876      	ldr	r0, [pc, #472]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a34:	f7f9 fb54 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_RCC_OscConfig+0x7f0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	d904      	bls.n	8007a52 <HAL_RCC_OscConfig+0x7fa>
 8007a48:	f240 21cf 	movw	r1, #719	; 0x2cf
 8007a4c:	486f      	ldr	r0, [pc, #444]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a4e:	f7f9 fb47 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_RCC_OscConfig+0x80a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	2b80      	cmp	r3, #128	; 0x80
 8007a60:	d904      	bls.n	8007a6c <HAL_RCC_OscConfig+0x814>
 8007a62:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8007a66:	4869      	ldr	r0, [pc, #420]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a68:	f7f9 fb3a 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_RCC_OscConfig+0x824>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d904      	bls.n	8007a86 <HAL_RCC_OscConfig+0x82e>
 8007a7c:	f240 21d1 	movw	r1, #721	; 0x2d1
 8007a80:	4862      	ldr	r0, [pc, #392]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a82:	f7f9 fb2d 	bl	80010e0 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	d304      	bcc.n	8007a9a <HAL_RCC_OscConfig+0x842>
 8007a90:	f240 21d2 	movw	r1, #722	; 0x2d2
 8007a94:	485d      	ldr	r0, [pc, #372]	; (8007c0c <HAL_RCC_OscConfig+0x9b4>)
 8007a96:	f7f9 fb23 	bl	80010e0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9a:	4b5b      	ldr	r3, [pc, #364]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a5a      	ldr	r2, [pc, #360]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7f9 fe69 	bl	800177c <HAL_GetTick>
 8007aaa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aae:	f7f9 fe65 	bl	800177c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e09e      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ac0:	4b51      	ldr	r3, [pc, #324]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007acc:	4b4e      	ldr	r3, [pc, #312]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ad0:	4b4f      	ldr	r3, [pc, #316]	; (8007c10 <HAL_RCC_OscConfig+0x9b8>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007adc:	0112      	lsls	r2, r2, #4
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	4949      	ldr	r1, [pc, #292]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	628b      	str	r3, [r1, #40]	; 0x28
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	3b01      	subs	r3, #1
 8007aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	3b01      	subs	r3, #1
 8007af6:	025b      	lsls	r3, r3, #9
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	3b01      	subs	r3, #1
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	061b      	lsls	r3, r3, #24
 8007b12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b16:	493c      	ldr	r1, [pc, #240]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007b1c:	4b3a      	ldr	r3, [pc, #232]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a39      	ldr	r2, [pc, #228]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b28:	4b37      	ldr	r3, [pc, #220]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b2c:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <HAL_RCC_OscConfig+0x9bc>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b34:	00d2      	lsls	r2, r2, #3
 8007b36:	4934      	ldr	r1, [pc, #208]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b3c:	4b32      	ldr	r3, [pc, #200]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	f023 020c 	bic.w	r2, r3, #12
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	492f      	ldr	r1, [pc, #188]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b4e:	4b2e      	ldr	r3, [pc, #184]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f023 0202 	bic.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	492b      	ldr	r1, [pc, #172]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b60:	4b29      	ldr	r3, [pc, #164]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	4a28      	ldr	r2, [pc, #160]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4b26      	ldr	r3, [pc, #152]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b78:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b84:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b90:	4b1d      	ldr	r3, [pc, #116]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7f9 fdee 	bl	800177c <HAL_GetTick>
 8007ba0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7f9 fdea 	bl	800177c <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e023      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x94c>
 8007bc2:	e01b      	b.n	8007bfc <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a0f      	ldr	r2, [pc, #60]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7f9 fdd4 	bl	800177c <HAL_GetTick>
 8007bd4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd8:	f7f9 fdd0 	bl	800177c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e009      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <HAL_RCC_OscConfig+0x9b0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x980>
 8007bf6:	e001      	b.n	8007bfc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	08013e3c 	.word	0x08013e3c
 8007c10:	fffffc0c 	.word	0xfffffc0c
 8007c14:	ffff0007 	.word	0xffff0007

08007c18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e343      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_RCC_ClockConfig+0x24>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b3f      	cmp	r3, #63	; 0x3f
 8007c3a:	d904      	bls.n	8007c46 <HAL_RCC_ClockConfig+0x2e>
 8007c3c:	f240 3152 	movw	r1, #850	; 0x352
 8007c40:	4827      	ldr	r0, [pc, #156]	; (8007ce0 <HAL_RCC_ClockConfig+0xc8>)
 8007c42:	f7f9 fa4d 	bl	80010e0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d031      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d02e      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d02b      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d028      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d025      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	d022      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b06      	cmp	r3, #6
 8007c6e:	d01f      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b07      	cmp	r3, #7
 8007c74:	d01c      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d019      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d016      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b0a      	cmp	r3, #10
 8007c86:	d013      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b0b      	cmp	r3, #11
 8007c8c:	d010      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b0c      	cmp	r3, #12
 8007c92:	d00d      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b0d      	cmp	r3, #13
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b0e      	cmp	r3, #14
 8007c9e:	d007      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b0f      	cmp	r3, #15
 8007ca4:	d004      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x98>
 8007ca6:	f240 3153 	movw	r1, #851	; 0x353
 8007caa:	480d      	ldr	r0, [pc, #52]	; (8007ce0 <HAL_RCC_ClockConfig+0xc8>)
 8007cac:	f7f9 fa18 	bl	80010e0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <HAL_RCC_ClockConfig+0xcc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d914      	bls.n	8007ce8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <HAL_RCC_ClockConfig+0xcc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 020f 	bic.w	r2, r3, #15
 8007cc6:	4907      	ldr	r1, [pc, #28]	; (8007ce4 <HAL_RCC_ClockConfig+0xcc>)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCC_ClockConfig+0xcc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d005      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e2e9      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
 8007ce0:	08013e3c 	.word	0x08013e3c
 8007ce4:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d029      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	4b9a      	ldr	r3, [pc, #616]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d921      	bls.n	8007d48 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d014      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x11e>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d010      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x11e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b50      	cmp	r3, #80	; 0x50
 8007d1a:	d00c      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x11e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b60      	cmp	r3, #96	; 0x60
 8007d22:	d008      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x11e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b70      	cmp	r3, #112	; 0x70
 8007d2a:	d004      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x11e>
 8007d2c:	f240 316e 	movw	r1, #878	; 0x36e
 8007d30:	488d      	ldr	r0, [pc, #564]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007d32:	f7f9 f9d5 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d36:	4b8b      	ldr	r3, [pc, #556]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	4988      	ldr	r1, [pc, #544]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d029      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	4b82      	ldr	r3, [pc, #520]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d921      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d014      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x17e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d010      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x17e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	2b50      	cmp	r3, #80	; 0x50
 8007d7a:	d00c      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x17e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	2b60      	cmp	r3, #96	; 0x60
 8007d82:	d008      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x17e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b70      	cmp	r3, #112	; 0x70
 8007d8a:	d004      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x17e>
 8007d8c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8007d90:	4875      	ldr	r0, [pc, #468]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007d92:	f7f9 f9a5 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d96:	4b73      	ldr	r3, [pc, #460]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4970      	ldr	r1, [pc, #448]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d02d      	beq.n	8007e10 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	4b6a      	ldr	r3, [pc, #424]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d925      	bls.n	8007e10 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x1e6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd4:	d013      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x1e6>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007dde:	d00e      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x1e6>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007de8:	d009      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x1e6>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007df2:	d004      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x1e6>
 8007df4:	f240 3182 	movw	r1, #898	; 0x382
 8007df8:	485b      	ldr	r0, [pc, #364]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007dfa:	f7f9 f971 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dfe:	4b59      	ldr	r3, [pc, #356]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	4956      	ldr	r1, [pc, #344]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d029      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	4b50      	ldr	r3, [pc, #320]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d921      	bls.n	8007e70 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d014      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x246>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x246>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b50      	cmp	r3, #80	; 0x50
 8007e42:	d00c      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x246>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	2b60      	cmp	r3, #96	; 0x60
 8007e4a:	d008      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x246>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b70      	cmp	r3, #112	; 0x70
 8007e52:	d004      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x246>
 8007e54:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8007e58:	4843      	ldr	r0, [pc, #268]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007e5a:	f7f9 f941 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e5e:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	493e      	ldr	r1, [pc, #248]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d039      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	4b38      	ldr	r3, [pc, #224]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d931      	bls.n	8007ef0 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d024      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d020      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d01c      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b0a      	cmp	r3, #10
 8007eaa:	d018      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	2b0b      	cmp	r3, #11
 8007eb2:	d014      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b0c      	cmp	r3, #12
 8007eba:	d010      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b0d      	cmp	r3, #13
 8007ec2:	d00c      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b0e      	cmp	r3, #14
 8007eca:	d008      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2b0f      	cmp	r3, #15
 8007ed2:	d004      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2c6>
 8007ed4:	f240 3197 	movw	r1, #919	; 0x397
 8007ed8:	4823      	ldr	r0, [pc, #140]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007eda:	f7f9 f901 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ede:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f023 020f 	bic.w	r2, r3, #15
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	491e      	ldr	r1, [pc, #120]	; (8007f64 <HAL_RCC_ClockConfig+0x34c>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80a2 	beq.w	8008042 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d032      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8007f18:	d028      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007f22:	d023      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8007f2c:	d01e      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f36:	d019      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8007f40:	d014      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007f4a:	d00f      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f54:	d00a      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f56:	f240 319f 	movw	r1, #927	; 0x39f
 8007f5a:	4803      	ldr	r0, [pc, #12]	; (8007f68 <HAL_RCC_ClockConfig+0x350>)
 8007f5c:	f7f9 f8c0 	bl	80010e0 <assert_failed>
 8007f60:	e004      	b.n	8007f6c <HAL_RCC_ClockConfig+0x354>
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	08013e3c 	.word	0x08013e3c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d010      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x37e>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x37e>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d008      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x37e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d004      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x37e>
 8007f8c:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8007f90:	4858      	ldr	r0, [pc, #352]	; (80080f4 <HAL_RCC_ClockConfig+0x4dc>)
 8007f92:	f7f9 f8a5 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f96:	4b58      	ldr	r3, [pc, #352]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	4955      	ldr	r1, [pc, #340]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fb0:	4b51      	ldr	r3, [pc, #324]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d121      	bne.n	8008000 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e179      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fc8:	4b4b      	ldr	r3, [pc, #300]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d115      	bne.n	8008000 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e16d      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fe0:	4b45      	ldr	r3, [pc, #276]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e161      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff0:	4b41      	ldr	r3, [pc, #260]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e159      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008000:	4b3d      	ldr	r3, [pc, #244]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f023 0207 	bic.w	r2, r3, #7
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	493a      	ldr	r1, [pc, #232]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 800800e:	4313      	orrs	r3, r2
 8008010:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008012:	f7f9 fbb3 	bl	800177c <HAL_GetTick>
 8008016:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008018:	e00a      	b.n	8008030 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800801a:	f7f9 fbaf 	bl	800177c <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	; 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e141      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008030:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	429a      	cmp	r2, r3
 8008040:	d1eb      	bne.n	800801a <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d039      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	429a      	cmp	r2, r3
 800805c:	d231      	bcs.n	80080c2 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d024      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b08      	cmp	r3, #8
 800806c:	d020      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b09      	cmp	r3, #9
 8008074:	d01c      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b0a      	cmp	r3, #10
 800807c:	d018      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b0b      	cmp	r3, #11
 8008084:	d014      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b0c      	cmp	r3, #12
 800808c:	d010      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b0d      	cmp	r3, #13
 8008094:	d00c      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b0e      	cmp	r3, #14
 800809c:	d008      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b0f      	cmp	r3, #15
 80080a4:	d004      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x498>
 80080a6:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80080aa:	4812      	ldr	r0, [pc, #72]	; (80080f4 <HAL_RCC_ClockConfig+0x4dc>)
 80080ac:	f7f9 f818 	bl	80010e0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b0:	4b11      	ldr	r3, [pc, #68]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f023 020f 	bic.w	r2, r3, #15
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	490e      	ldr	r1, [pc, #56]	; (80080f8 <HAL_RCC_ClockConfig+0x4e0>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080c2:	4b0e      	ldr	r3, [pc, #56]	; (80080fc <HAL_RCC_ClockConfig+0x4e4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d217      	bcs.n	8008100 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <HAL_RCC_ClockConfig+0x4e4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 020f 	bic.w	r2, r3, #15
 80080d8:	4908      	ldr	r1, [pc, #32]	; (80080fc <HAL_RCC_ClockConfig+0x4e4>)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <HAL_RCC_ClockConfig+0x4e4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d008      	beq.n	8008100 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e0e0      	b.n	80082b4 <HAL_RCC_ClockConfig+0x69c>
 80080f2:	bf00      	nop
 80080f4:	08013e3c 	.word	0x08013e3c
 80080f8:	58024400 	.word	0x58024400
 80080fc:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d029      	beq.n	8008160 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	4b6a      	ldr	r3, [pc, #424]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008118:	429a      	cmp	r2, r3
 800811a:	d221      	bcs.n	8008160 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d014      	beq.n	800814e <HAL_RCC_ClockConfig+0x536>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b40      	cmp	r3, #64	; 0x40
 800812a:	d010      	beq.n	800814e <HAL_RCC_ClockConfig+0x536>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b50      	cmp	r3, #80	; 0x50
 8008132:	d00c      	beq.n	800814e <HAL_RCC_ClockConfig+0x536>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b60      	cmp	r3, #96	; 0x60
 800813a:	d008      	beq.n	800814e <HAL_RCC_ClockConfig+0x536>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b70      	cmp	r3, #112	; 0x70
 8008142:	d004      	beq.n	800814e <HAL_RCC_ClockConfig+0x536>
 8008144:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8008148:	485d      	ldr	r0, [pc, #372]	; (80082c0 <HAL_RCC_ClockConfig+0x6a8>)
 800814a:	f7f8 ffc9 	bl	80010e0 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800814e:	4b5b      	ldr	r3, [pc, #364]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	4958      	ldr	r1, [pc, #352]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 800815c:	4313      	orrs	r3, r2
 800815e:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d029      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695a      	ldr	r2, [r3, #20]
 8008170:	4b52      	ldr	r3, [pc, #328]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008178:	429a      	cmp	r2, r3
 800817a:	d221      	bcs.n	80081c0 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d014      	beq.n	80081ae <HAL_RCC_ClockConfig+0x596>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d010      	beq.n	80081ae <HAL_RCC_ClockConfig+0x596>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	2b50      	cmp	r3, #80	; 0x50
 8008192:	d00c      	beq.n	80081ae <HAL_RCC_ClockConfig+0x596>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	2b60      	cmp	r3, #96	; 0x60
 800819a:	d008      	beq.n	80081ae <HAL_RCC_ClockConfig+0x596>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	2b70      	cmp	r3, #112	; 0x70
 80081a2:	d004      	beq.n	80081ae <HAL_RCC_ClockConfig+0x596>
 80081a4:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80081a8:	4845      	ldr	r0, [pc, #276]	; (80082c0 <HAL_RCC_ClockConfig+0x6a8>)
 80081aa:	f7f8 ff99 	bl	80010e0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081ae:	4b43      	ldr	r3, [pc, #268]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	4940      	ldr	r1, [pc, #256]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02d      	beq.n	8008228 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081d8:	429a      	cmp	r2, r3
 80081da:	d225      	bcs.n	8008228 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d018      	beq.n	8008216 <HAL_RCC_ClockConfig+0x5fe>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d013      	beq.n	8008216 <HAL_RCC_ClockConfig+0x5fe>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80081f6:	d00e      	beq.n	8008216 <HAL_RCC_ClockConfig+0x5fe>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008200:	d009      	beq.n	8008216 <HAL_RCC_ClockConfig+0x5fe>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800820a:	d004      	beq.n	8008216 <HAL_RCC_ClockConfig+0x5fe>
 800820c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8008210:	482b      	ldr	r0, [pc, #172]	; (80082c0 <HAL_RCC_ClockConfig+0x6a8>)
 8008212:	f7f8 ff65 	bl	80010e0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008216:	4b29      	ldr	r3, [pc, #164]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	4926      	ldr	r1, [pc, #152]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008224:	4313      	orrs	r3, r2
 8008226:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d029      	beq.n	8008288 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008240:	429a      	cmp	r2, r3
 8008242:	d221      	bcs.n	8008288 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d014      	beq.n	8008276 <HAL_RCC_ClockConfig+0x65e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d010      	beq.n	8008276 <HAL_RCC_ClockConfig+0x65e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	2b50      	cmp	r3, #80	; 0x50
 800825a:	d00c      	beq.n	8008276 <HAL_RCC_ClockConfig+0x65e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b60      	cmp	r3, #96	; 0x60
 8008262:	d008      	beq.n	8008276 <HAL_RCC_ClockConfig+0x65e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b70      	cmp	r3, #112	; 0x70
 800826a:	d004      	beq.n	8008276 <HAL_RCC_ClockConfig+0x65e>
 800826c:	f240 4112 	movw	r1, #1042	; 0x412
 8008270:	4813      	ldr	r0, [pc, #76]	; (80082c0 <HAL_RCC_ClockConfig+0x6a8>)
 8008272:	f7f8 ff35 	bl	80010e0 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	490e      	ldr	r1, [pc, #56]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008284:	4313      	orrs	r3, r2
 8008286:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008288:	f000 f820 	bl	80082cc <HAL_RCC_GetSysClockFreq>
 800828c:	4601      	mov	r1, r0
 800828e:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <HAL_RCC_ClockConfig+0x6a4>)
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <HAL_RCC_ClockConfig+0x6ac>)
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	fa21 f303 	lsr.w	r3, r1, r3
 80082a4:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <HAL_RCC_ClockConfig+0x6b0>)
 80082a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 80082a8:	2000      	movs	r0, #0
 80082aa:	f7f9 fa1d 	bl	80016e8 <HAL_InitTick>
 80082ae:	4603      	mov	r3, r0
 80082b0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	58024400 	.word	0x58024400
 80082c0:	08013e3c 	.word	0x08013e3c
 80082c4:	08014058 	.word	0x08014058
 80082c8:	24000000 	.word	0x24000000

080082cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	; 0x24
 80082d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082d2:	4baf      	ldr	r3, [pc, #700]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082da:	2b18      	cmp	r3, #24
 80082dc:	f200 814e 	bhi.w	800857c <HAL_RCC_GetSysClockFreq+0x2b0>
 80082e0:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800834d 	.word	0x0800834d
 80082ec:	0800857d 	.word	0x0800857d
 80082f0:	0800857d 	.word	0x0800857d
 80082f4:	0800857d 	.word	0x0800857d
 80082f8:	0800857d 	.word	0x0800857d
 80082fc:	0800857d 	.word	0x0800857d
 8008300:	0800857d 	.word	0x0800857d
 8008304:	0800857d 	.word	0x0800857d
 8008308:	08008373 	.word	0x08008373
 800830c:	0800857d 	.word	0x0800857d
 8008310:	0800857d 	.word	0x0800857d
 8008314:	0800857d 	.word	0x0800857d
 8008318:	0800857d 	.word	0x0800857d
 800831c:	0800857d 	.word	0x0800857d
 8008320:	0800857d 	.word	0x0800857d
 8008324:	0800857d 	.word	0x0800857d
 8008328:	08008379 	.word	0x08008379
 800832c:	0800857d 	.word	0x0800857d
 8008330:	0800857d 	.word	0x0800857d
 8008334:	0800857d 	.word	0x0800857d
 8008338:	0800857d 	.word	0x0800857d
 800833c:	0800857d 	.word	0x0800857d
 8008340:	0800857d 	.word	0x0800857d
 8008344:	0800857d 	.word	0x0800857d
 8008348:	0800837f 	.word	0x0800837f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800834c:	4b90      	ldr	r3, [pc, #576]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008358:	4b8d      	ldr	r3, [pc, #564]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	08db      	lsrs	r3, r3, #3
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	4a8c      	ldr	r2, [pc, #560]	; (8008594 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
 8008368:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800836a:	e10a      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800836c:	4b89      	ldr	r3, [pc, #548]	; (8008594 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800836e:	61bb      	str	r3, [r7, #24]
    break;
 8008370:	e107      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008372:	4b89      	ldr	r3, [pc, #548]	; (8008598 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008374:	61bb      	str	r3, [r7, #24]
    break;
 8008376:	e104      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008378:	4b88      	ldr	r3, [pc, #544]	; (800859c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800837a:	61bb      	str	r3, [r7, #24]
    break;
 800837c:	e101      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800837e:	4b84      	ldr	r3, [pc, #528]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008388:	4b81      	ldr	r3, [pc, #516]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	091b      	lsrs	r3, r3, #4
 800838e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008392:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008394:	4b7e      	ldr	r3, [pc, #504]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800839e:	4b7c      	ldr	r3, [pc, #496]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	08db      	lsrs	r3, r3, #3
 80083a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	fb02 f303 	mul.w	r3, r2, r3
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 80da 	beq.w	8008576 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d05a      	beq.n	800847e <HAL_RCC_GetSysClockFreq+0x1b2>
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d302      	bcc.n	80083d2 <HAL_RCC_GetSysClockFreq+0x106>
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d078      	beq.n	80084c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80083d0:	e099      	b.n	8008506 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d2:	4b6f      	ldr	r3, [pc, #444]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d02d      	beq.n	800843a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083de:	4b6c      	ldr	r3, [pc, #432]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	08db      	lsrs	r3, r3, #3
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	4a6a      	ldr	r2, [pc, #424]	; (8008594 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	ee07 3a90 	vmov	s15, r3
 8008400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008408:	4b61      	ldr	r3, [pc, #388]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008418:	ed97 6a02 	vldr	s12, [r7, #8]
 800841c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80085a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008434:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008438:	e087      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008444:	eddf 6a57 	vldr	s13, [pc, #348]	; 80085a4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844c:	4b50      	ldr	r3, [pc, #320]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008460:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80085a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008478:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847c:	e065      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	eddf 6a47 	vldr	s13, [pc, #284]	; 80085a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800848c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008490:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008498:	ee07 3a90 	vmov	s15, r3
 800849c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80085a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80084a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c0:	e043      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80085ac <HAL_RCC_GetSysClockFreq+0x2e0>
 80084d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d4:	4b2e      	ldr	r3, [pc, #184]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80084e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80085a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80084ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008500:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008504:	e021      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008510:	eddf 6a25 	vldr	s13, [pc, #148]	; 80085a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008518:	4b1d      	ldr	r3, [pc, #116]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008528:	ed97 6a02 	vldr	s12, [r7, #8]
 800852c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80085a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008548:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800854a:	4b11      	ldr	r3, [pc, #68]	; (8008590 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008554:	3301      	adds	r3, #1
 8008556:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008562:	edd7 6a07 	vldr	s13, [r7, #28]
 8008566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856e:	ee17 3a90 	vmov	r3, s15
 8008572:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008574:	e005      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	61bb      	str	r3, [r7, #24]
    break;
 800857a:	e002      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800857e:	61bb      	str	r3, [r7, #24]
    break;
 8008580:	bf00      	nop
  }

  return sysclockfreq;
 8008582:	69bb      	ldr	r3, [r7, #24]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3724      	adds	r7, #36	; 0x24
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	58024400 	.word	0x58024400
 8008594:	03d09000 	.word	0x03d09000
 8008598:	003d0900 	.word	0x003d0900
 800859c:	007a1200 	.word	0x007a1200
 80085a0:	46000000 	.word	0x46000000
 80085a4:	4c742400 	.word	0x4c742400
 80085a8:	4a742400 	.word	0x4a742400
 80085ac:	4af42400 	.word	0x4af42400

080085b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085b4:	f001 fff2 	bl	800a59c <HAL_RCCEx_GetD1SysClockFreq>
 80085b8:	4601      	mov	r1, r0
 80085ba:	4b08      	ldr	r3, [pc, #32]	; (80085dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	4a07      	ldr	r2, [pc, #28]	; (80085e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80085c4:	5cd3      	ldrb	r3, [r2, r3]
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	fa21 f303 	lsr.w	r3, r1, r3
 80085ce:	4a05      	ldr	r2, [pc, #20]	; (80085e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80085d0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80085d2:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80085d4:	681b      	ldr	r3, [r3, #0]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	58024400 	.word	0x58024400
 80085e0:	08014058 	.word	0x08014058
 80085e4:	24000004 	.word	0x24000004

080085e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80085ec:	f7ff ffe0 	bl	80085b0 <HAL_RCC_GetHCLKFreq>
 80085f0:	4601      	mov	r1, r0
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_GetPCLK1Freq+0x24>)
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	4a04      	ldr	r2, [pc, #16]	; (8008610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085fe:	5cd3      	ldrb	r3, [r2, r3]
 8008600:	f003 031f 	and.w	r3, r3, #31
 8008604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008608:	4618      	mov	r0, r3
 800860a:	bd80      	pop	{r7, pc}
 800860c:	58024400 	.word	0x58024400
 8008610:	08014058 	.word	0x08014058

08008614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008618:	f7ff ffca 	bl	80085b0 <HAL_RCC_GetHCLKFreq>
 800861c:	4601      	mov	r1, r0
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	4a04      	ldr	r2, [pc, #16]	; (800863c <HAL_RCC_GetPCLK2Freq+0x28>)
 800862a:	5cd3      	ldrb	r3, [r2, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	58024400 	.word	0x58024400
 800863c:	08014058 	.word	0x08014058

08008640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800864c:	2300      	movs	r3, #0
 800864e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03d      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008664:	d013      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866a:	d802      	bhi.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008670:	e01f      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008676:	d013      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800867c:	d01c      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800867e:	e018      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008680:	4baf      	ldr	r3, [pc, #700]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4aae      	ldr	r2, [pc, #696]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800868c:	e015      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2102      	movs	r1, #2
 8008694:	4618      	mov	r0, r3
 8008696:	f001 ff9d 	bl	800a5d4 <RCCEx_PLL2_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800869e:	e00c      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	2102      	movs	r1, #2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 f8b6 	bl	800a818 <RCCEx_PLL3_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086b0:	e003      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      break;
 80086b6:	e000      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80086b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086c0:	4b9f      	ldr	r3, [pc, #636]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086cc:	499c      	ldr	r1, [pc, #624]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	650b      	str	r3, [r1, #80]	; 0x50
 80086d2:	e001      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d03d      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d826      	bhi.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008709 	.word	0x08008709
 80086f8:	08008717 	.word	0x08008717
 80086fc:	08008729 	.word	0x08008729
 8008700:	08008741 	.word	0x08008741
 8008704:	08008741 	.word	0x08008741
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008708:	4b8d      	ldr	r3, [pc, #564]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a8c      	ldr	r2, [pc, #560]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800870e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008714:	e015      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f001 ff59 	bl	800a5d4 <RCCEx_PLL2_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008726:	e00c      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3324      	adds	r3, #36	; 0x24
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f002 f872 	bl	800a818 <RCCEx_PLL3_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008738:	e003      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
      break;
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008748:	4b7d      	ldr	r3, [pc, #500]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874c:	f023 0207 	bic.w	r2, r3, #7
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008754:	497a      	ldr	r1, [pc, #488]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008756:	4313      	orrs	r3, r2
 8008758:	650b      	str	r3, [r1, #80]	; 0x50
 800875a:	e001      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008768:	2b00      	cmp	r3, #0
 800876a:	d03e      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d01c      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008774:	2b80      	cmp	r3, #128	; 0x80
 8008776:	d804      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d00d      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008780:	e01e      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008782:	2bc0      	cmp	r3, #192	; 0xc0
 8008784:	d01f      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878a:	d01e      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800878c:	e018      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878e:	4b6c      	ldr	r3, [pc, #432]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	4a6b      	ldr	r2, [pc, #428]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800879a:	e017      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 ff16 	bl	800a5d4 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087ac:	e00e      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3324      	adds	r3, #36	; 0x24
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f002 f82f 	bl	800a818 <RCCEx_PLL3_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087be:	e005      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	75fb      	strb	r3, [r7, #23]
      break;
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80087ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80087d2:	4b5b      	ldr	r3, [pc, #364]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087de:	4958      	ldr	r1, [pc, #352]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	650b      	str	r3, [r1, #80]	; 0x50
 80087e4:	e001      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d044      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008800:	d01f      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008806:	d805      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800880c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008810:	d00e      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008812:	e01f      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008814:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008818:	d01f      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800881a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800881e:	d01e      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008820:	e018      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008822:	4b47      	ldr	r3, [pc, #284]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	4a46      	ldr	r2, [pc, #280]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800882e:	e017      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f001 fecc 	bl	800a5d4 <RCCEx_PLL2_Config>
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008840:	e00e      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3324      	adds	r3, #36	; 0x24
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f001 ffe5 	bl	800a818 <RCCEx_PLL3_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008852:	e005      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
      break;
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800885a:	bf00      	nop
 800885c:	e000      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800885e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10a      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008866:	4b36      	ldr	r3, [pc, #216]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008874:	4932      	ldr	r1, [pc, #200]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008876:	4313      	orrs	r3, r2
 8008878:	658b      	str	r3, [r1, #88]	; 0x58
 800887a:	e001      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008888:	2b00      	cmp	r3, #0
 800888a:	d044      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008896:	d01f      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800889c:	d805      	bhi.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80088a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088a6:	d00e      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088a8:	e01f      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80088aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088ae:	d01f      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088b4:	d01e      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088b6:	e018      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	4a20      	ldr	r2, [pc, #128]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088c4:	e017      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fe81 	bl	800a5d4 <RCCEx_PLL2_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088d6:	e00e      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3324      	adds	r3, #36	; 0x24
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 ff9a 	bl	800a818 <RCCEx_PLL3_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088e8:	e005      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]
      break;
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80088f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008900:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800890a:	490d      	ldr	r1, [pc, #52]	; (8008940 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800890c:	4313      	orrs	r3, r2
 800890e:	658b      	str	r3, [r1, #88]	; 0x58
 8008910:	e001      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d035      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008926:	2b10      	cmp	r3, #16
 8008928:	d00c      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800892a:	2b10      	cmp	r3, #16
 800892c:	d802      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01b      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008932:	e017      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d00c      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008938:	2b30      	cmp	r3, #48	; 0x30
 800893a:	d018      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800893c:	e012      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008944:	4baf      	ldr	r3, [pc, #700]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4aae      	ldr	r2, [pc, #696]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008950:	e00e      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	2102      	movs	r1, #2
 8008958:	4618      	mov	r0, r3
 800895a:	f001 fe3b 	bl	800a5d4 <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008962:	e005      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
      break;
 8008968:	e002      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800896e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008976:	4ba3      	ldr	r3, [pc, #652]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008982:	49a0      	ldr	r1, [pc, #640]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008984:	4313      	orrs	r3, r2
 8008986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008988:	e001      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d042      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a2:	d01f      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80089a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a8:	d805      	bhi.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b2:	d00e      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80089b4:	e01f      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80089b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089ba:	d01f      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80089bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c0:	d01e      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80089c2:	e018      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c4:	4b8f      	ldr	r3, [pc, #572]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	4a8e      	ldr	r2, [pc, #568]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089d0:	e017      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3304      	adds	r3, #4
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fdfb 	bl	800a5d4 <RCCEx_PLL2_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089e2:	e00e      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3324      	adds	r3, #36	; 0x24
 80089e8:	2100      	movs	r1, #0
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 ff14 	bl	800a818 <RCCEx_PLL3_Config>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089f4:	e005      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
      break;
 80089fa:	e002      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80089fc:	bf00      	nop
 80089fe:	e000      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d109      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a08:	4b7e      	ldr	r3, [pc, #504]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a14:	497b      	ldr	r1, [pc, #492]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	650b      	str	r3, [r1, #80]	; 0x50
 8008a1a:	e001      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d042      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a34:	d01b      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a3a:	d805      	bhi.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d022      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d00a      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a46:	e01b      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a4c:	d01d      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a52:	d01c      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008a54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a58:	d01b      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008a5a:	e011      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	2101      	movs	r1, #1
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 fdb6 	bl	800a5d4 <RCCEx_PLL2_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a6c:	e012      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3324      	adds	r3, #36	; 0x24
 8008a72:	2101      	movs	r1, #1
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 fecf 	bl	800a818 <RCCEx_PLL3_Config>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a7e:	e009      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	75fb      	strb	r3, [r7, #23]
      break;
 8008a84:	e006      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008a86:	bf00      	nop
 8008a88:	e004      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e002      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e000      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a9a:	4b5a      	ldr	r3, [pc, #360]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	4957      	ldr	r1, [pc, #348]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	650b      	str	r3, [r1, #80]	; 0x50
 8008aac:	e001      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d044      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac8:	d01b      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ace:	d805      	bhi.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d022      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ad8:	d00a      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008ada:	e01b      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae0:	d01d      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ae6:	d01c      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008ae8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aec:	d01b      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008aee:	e011      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	2101      	movs	r1, #1
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fd6c 	bl	800a5d4 <RCCEx_PLL2_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b00:	e012      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3324      	adds	r3, #36	; 0x24
 8008b06:	2101      	movs	r1, #1
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 fe85 	bl	800a818 <RCCEx_PLL3_Config>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b12:	e009      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
      break;
 8008b18:	e006      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008b1a:	bf00      	nop
 8008b1c:	e004      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e002      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008b22:	bf00      	nop
 8008b24:	e000      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b2e:	4b35      	ldr	r3, [pc, #212]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b3c:	4931      	ldr	r1, [pc, #196]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	658b      	str	r3, [r1, #88]	; 0x58
 8008b42:	e001      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d02d      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b5c:	d005      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b62:	d009      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d013      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008b68:	e00f      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b6a:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b76:	e00c      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fd28 	bl	800a5d4 <RCCEx_PLL2_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b98:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba4:	4917      	ldr	r1, [pc, #92]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8008baa:	e001      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d037      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d81b      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008c09 	.word	0x08008c09
 8008bd0:	08008bdd 	.word	0x08008bdd
 8008bd4:	08008beb 	.word	0x08008beb
 8008bd8:	08008c09 	.word	0x08008c09
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008be8:	e00f      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3304      	adds	r3, #4
 8008bee:	2102      	movs	r1, #2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f001 fcef 	bl	800a5d4 <RCCEx_PLL2_Config>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008bfa:	e006      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008c00:	e003      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
      break;
 8008c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c14:	f023 0203 	bic.w	r2, r3, #3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1c:	4901      	ldr	r1, [pc, #4]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c22:	e003      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8008c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 829b 	beq.w	8009170 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c44:	f000 81a9 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c52:	f000 81a2 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c5c:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8008c60:	f000 819b 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c6a:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8008c6e:	f000 8194 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c78:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8008c7c:	f000 818d 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c86:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8008c8a:	f000 8186 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c94:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8008c98:	f000 817f 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca2:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8008ca6:	f000 8178 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cb0:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8008cb4:	f000 8171 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cbe:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8008cc2:	f000 816a 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ccc:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8008cd0:	f000 8163 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cda:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8008cde:	f000 815c 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ce8:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8008cec:	f000 8155 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cf6:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8008cfa:	f000 814e 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d04:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8008d08:	f000 8147 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d12:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8008d16:	f000 8140 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d20:	4aa8      	ldr	r2, [pc, #672]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	f000 8139 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d2e:	4aa6      	ldr	r2, [pc, #664]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	f000 8132 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d3c:	4aa3      	ldr	r2, [pc, #652]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	f000 812b 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d4a:	4aa1      	ldr	r2, [pc, #644]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	f000 8124 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d58:	4a9e      	ldr	r2, [pc, #632]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	f000 811d 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d66:	4a9c      	ldr	r2, [pc, #624]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	f000 8116 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d74:	4a99      	ldr	r2, [pc, #612]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	f000 810f 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d82:	4a97      	ldr	r2, [pc, #604]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	f000 8108 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d90:	4a94      	ldr	r2, [pc, #592]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	f000 8101 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d9e:	4a92      	ldr	r2, [pc, #584]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	f000 80fa 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dac:	4a8f      	ldr	r2, [pc, #572]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	f000 80f3 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dba:	4a8d      	ldr	r2, [pc, #564]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	f000 80ec 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dc8:	4a8a      	ldr	r2, [pc, #552]	; (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	f000 80e5 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd6:	4a88      	ldr	r2, [pc, #544]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	f000 80de 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008de4:	4a85      	ldr	r2, [pc, #532]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	f000 80d7 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008df2:	4a83      	ldr	r2, [pc, #524]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	f000 80d0 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e00:	4a80      	ldr	r2, [pc, #512]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f000 80c9 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e0e:	4a7e      	ldr	r2, [pc, #504]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	f000 80c2 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e1c:	4a7b      	ldr	r2, [pc, #492]	; (800900c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f000 80bb 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e2a:	4a79      	ldr	r2, [pc, #484]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	f000 80b4 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e38:	4a76      	ldr	r2, [pc, #472]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	f000 80ad 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e46:	4a74      	ldr	r2, [pc, #464]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	f000 80a6 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e54:	4a71      	ldr	r2, [pc, #452]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	f000 809f 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e62:	4a6f      	ldr	r2, [pc, #444]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	f000 8098 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e70:	4a6c      	ldr	r2, [pc, #432]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	f000 8091 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e7e:	4a6a      	ldr	r2, [pc, #424]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	f000 808a 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e8c:	4a67      	ldr	r2, [pc, #412]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	f000 8083 	beq.w	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e9a:	4a65      	ldr	r2, [pc, #404]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d07c      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ea6:	4a63      	ldr	r2, [pc, #396]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d076      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eb2:	4a61      	ldr	r2, [pc, #388]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d070      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ebe:	4a5f      	ldr	r2, [pc, #380]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d06a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eca:	4a5d      	ldr	r2, [pc, #372]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d064      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ed6:	4a5b      	ldr	r2, [pc, #364]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d05e      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ee2:	4a59      	ldr	r2, [pc, #356]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d058      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eee:	4a57      	ldr	r2, [pc, #348]	; (800904c <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d052      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008efa:	4a55      	ldr	r2, [pc, #340]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d04c      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f06:	4a53      	ldr	r2, [pc, #332]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d046      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f12:	4a51      	ldr	r2, [pc, #324]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d040      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f1e:	4a4f      	ldr	r2, [pc, #316]	; (800905c <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d03a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f2a:	4a4d      	ldr	r2, [pc, #308]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d034      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f36:	4a4b      	ldr	r2, [pc, #300]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d02e      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f42:	4a49      	ldr	r2, [pc, #292]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d028      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f4e:	4a47      	ldr	r2, [pc, #284]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d022      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f5a:	4a45      	ldr	r2, [pc, #276]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d01c      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f66:	4a43      	ldr	r2, [pc, #268]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d016      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f72:	4a41      	ldr	r2, [pc, #260]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d010      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f7e:	4a3f      	ldr	r2, [pc, #252]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f8a:	4a3d      	ldr	r2, [pc, #244]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d004      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008f90:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008f94:	483b      	ldr	r0, [pc, #236]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8008f96:	f7f8 f8a3 	bl	80010e0 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f9a:	4b3b      	ldr	r3, [pc, #236]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a3a      	ldr	r2, [pc, #232]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8008fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fa6:	f7f8 fbe9 	bl	800177c <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fac:	e06e      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fae:	f7f8 fbe5 	bl	800177c <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b64      	cmp	r3, #100	; 0x64
 8008fba:	d967      	bls.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8008fc0:	e06a      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8008fc2:	bf00      	nop
 8008fc4:	00010300 	.word	0x00010300
 8008fc8:	00011300 	.word	0x00011300
 8008fcc:	00012300 	.word	0x00012300
 8008fd0:	00013300 	.word	0x00013300
 8008fd4:	00014300 	.word	0x00014300
 8008fd8:	00015300 	.word	0x00015300
 8008fdc:	00016300 	.word	0x00016300
 8008fe0:	00017300 	.word	0x00017300
 8008fe4:	00018300 	.word	0x00018300
 8008fe8:	00019300 	.word	0x00019300
 8008fec:	0001a300 	.word	0x0001a300
 8008ff0:	0001b300 	.word	0x0001b300
 8008ff4:	0001c300 	.word	0x0001c300
 8008ff8:	0001d300 	.word	0x0001d300
 8008ffc:	0001e300 	.word	0x0001e300
 8009000:	0001f300 	.word	0x0001f300
 8009004:	00020300 	.word	0x00020300
 8009008:	00021300 	.word	0x00021300
 800900c:	00022300 	.word	0x00022300
 8009010:	00023300 	.word	0x00023300
 8009014:	00024300 	.word	0x00024300
 8009018:	00025300 	.word	0x00025300
 800901c:	00026300 	.word	0x00026300
 8009020:	00027300 	.word	0x00027300
 8009024:	00028300 	.word	0x00028300
 8009028:	00029300 	.word	0x00029300
 800902c:	0002a300 	.word	0x0002a300
 8009030:	0002b300 	.word	0x0002b300
 8009034:	0002c300 	.word	0x0002c300
 8009038:	0002d300 	.word	0x0002d300
 800903c:	0002e300 	.word	0x0002e300
 8009040:	0002f300 	.word	0x0002f300
 8009044:	00030300 	.word	0x00030300
 8009048:	00031300 	.word	0x00031300
 800904c:	00032300 	.word	0x00032300
 8009050:	00033300 	.word	0x00033300
 8009054:	00034300 	.word	0x00034300
 8009058:	00035300 	.word	0x00035300
 800905c:	00036300 	.word	0x00036300
 8009060:	00037300 	.word	0x00037300
 8009064:	00038300 	.word	0x00038300
 8009068:	00039300 	.word	0x00039300
 800906c:	0003a300 	.word	0x0003a300
 8009070:	0003b300 	.word	0x0003b300
 8009074:	0003c300 	.word	0x0003c300
 8009078:	0003d300 	.word	0x0003d300
 800907c:	0003e300 	.word	0x0003e300
 8009080:	0003f300 	.word	0x0003f300
 8009084:	08013e74 	.word	0x08013e74
 8009088:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800908c:	4bb9      	ldr	r3, [pc, #740]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009094:	2b00      	cmp	r3, #0
 8009096:	d08a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d166      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800909e:	4bb6      	ldr	r3, [pc, #728]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090a8:	4053      	eors	r3, r2
 80090aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d013      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090b2:	4bb1      	ldr	r3, [pc, #708]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090bc:	4bae      	ldr	r3, [pc, #696]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c0:	4aad      	ldr	r2, [pc, #692]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090c8:	4bab      	ldr	r3, [pc, #684]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090cc:	4aaa      	ldr	r2, [pc, #680]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090d4:	4aa8      	ldr	r2, [pc, #672]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e4:	d115      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e6:	f7f8 fb49 	bl	800177c <HAL_GetTick>
 80090ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ec:	e00b      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090ee:	f7f8 fb45 	bl	800177c <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d902      	bls.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	75fb      	strb	r3, [r7, #23]
            break;
 8009104:	e005      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009106:	4b9c      	ldr	r3, [pc, #624]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0ed      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8009112:	7dfb      	ldrb	r3, [r7, #23]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d126      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009126:	d10d      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8009128:	4b93      	ldr	r3, [pc, #588]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009136:	0919      	lsrs	r1, r3, #4
 8009138:	4b90      	ldr	r3, [pc, #576]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800913a:	400b      	ands	r3, r1
 800913c:	498e      	ldr	r1, [pc, #568]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800913e:	4313      	orrs	r3, r2
 8009140:	610b      	str	r3, [r1, #16]
 8009142:	e005      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8009144:	4b8c      	ldr	r3, [pc, #560]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	4a8b      	ldr	r2, [pc, #556]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800914a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800914e:	6113      	str	r3, [r2, #16]
 8009150:	4b89      	ldr	r3, [pc, #548]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800915a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800915e:	4986      	ldr	r1, [pc, #536]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009160:	4313      	orrs	r3, r2
 8009162:	670b      	str	r3, [r1, #112]	; 0x70
 8009164:	e004      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	75bb      	strb	r3, [r7, #22]
 800916a:	e001      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d07e      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009180:	2b28      	cmp	r3, #40	; 0x28
 8009182:	d867      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8009184:	a201      	add	r2, pc, #4	; (adr r2, 800918c <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	0800925b 	.word	0x0800925b
 8009190:	08009255 	.word	0x08009255
 8009194:	08009255 	.word	0x08009255
 8009198:	08009255 	.word	0x08009255
 800919c:	08009255 	.word	0x08009255
 80091a0:	08009255 	.word	0x08009255
 80091a4:	08009255 	.word	0x08009255
 80091a8:	08009255 	.word	0x08009255
 80091ac:	08009231 	.word	0x08009231
 80091b0:	08009255 	.word	0x08009255
 80091b4:	08009255 	.word	0x08009255
 80091b8:	08009255 	.word	0x08009255
 80091bc:	08009255 	.word	0x08009255
 80091c0:	08009255 	.word	0x08009255
 80091c4:	08009255 	.word	0x08009255
 80091c8:	08009255 	.word	0x08009255
 80091cc:	08009243 	.word	0x08009243
 80091d0:	08009255 	.word	0x08009255
 80091d4:	08009255 	.word	0x08009255
 80091d8:	08009255 	.word	0x08009255
 80091dc:	08009255 	.word	0x08009255
 80091e0:	08009255 	.word	0x08009255
 80091e4:	08009255 	.word	0x08009255
 80091e8:	08009255 	.word	0x08009255
 80091ec:	0800925b 	.word	0x0800925b
 80091f0:	08009255 	.word	0x08009255
 80091f4:	08009255 	.word	0x08009255
 80091f8:	08009255 	.word	0x08009255
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009255 	.word	0x08009255
 8009204:	08009255 	.word	0x08009255
 8009208:	08009255 	.word	0x08009255
 800920c:	0800925b 	.word	0x0800925b
 8009210:	08009255 	.word	0x08009255
 8009214:	08009255 	.word	0x08009255
 8009218:	08009255 	.word	0x08009255
 800921c:	08009255 	.word	0x08009255
 8009220:	08009255 	.word	0x08009255
 8009224:	08009255 	.word	0x08009255
 8009228:	08009255 	.word	0x08009255
 800922c:	0800925b 	.word	0x0800925b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	2101      	movs	r1, #1
 8009236:	4618      	mov	r0, r3
 8009238:	f001 f9cc 	bl	800a5d4 <RCCEx_PLL2_Config>
 800923c:	4603      	mov	r3, r0
 800923e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009240:	e00c      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3324      	adds	r3, #36	; 0x24
 8009246:	2101      	movs	r1, #1
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fae5 	bl	800a818 <RCCEx_PLL3_Config>
 800924e:	4603      	mov	r3, r0
 8009250:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009252:	e003      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]
      break;
 8009258:	e000      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800925a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d109      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009262:	4b45      	ldr	r3, [pc, #276]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009266:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926e:	4942      	ldr	r1, [pc, #264]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009270:	4313      	orrs	r3, r2
 8009272:	654b      	str	r3, [r1, #84]	; 0x54
 8009274:	e001      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d037      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928a:	2b05      	cmp	r3, #5
 800928c:	d820      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092d7 	.word	0x080092d7
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092bf 	.word	0x080092bf
 80092a0:	080092d7 	.word	0x080092d7
 80092a4:	080092d7 	.word	0x080092d7
 80092a8:	080092d7 	.word	0x080092d7
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	2101      	movs	r1, #1
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f98e 	bl	800a5d4 <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092bc:	e00c      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3324      	adds	r3, #36	; 0x24
 80092c2:	2101      	movs	r1, #1
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 faa7 	bl	800a818 <RCCEx_PLL3_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092ce:	e003      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
      break;
 80092d4:	e000      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 80092d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092de:	4b26      	ldr	r3, [pc, #152]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	f023 0207 	bic.w	r2, r3, #7
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ea:	4923      	ldr	r1, [pc, #140]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	654b      	str	r3, [r1, #84]	; 0x54
 80092f0:	e001      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d040      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009308:	2b05      	cmp	r3, #5
 800930a:	d821      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009357 	.word	0x08009357
 8009318:	0800932d 	.word	0x0800932d
 800931c:	0800933f 	.word	0x0800933f
 8009320:	08009357 	.word	0x08009357
 8009324:	08009357 	.word	0x08009357
 8009328:	08009357 	.word	0x08009357
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f001 f94e 	bl	800a5d4 <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800933c:	e00c      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fa67 	bl	800a818 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	e000      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d110      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800935e:	4b06      	ldr	r3, [pc, #24]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	f023 0207 	bic.w	r2, r3, #7
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936c:	4902      	ldr	r1, [pc, #8]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800936e:	4313      	orrs	r3, r2
 8009370:	658b      	str	r3, [r1, #88]	; 0x58
 8009372:	e007      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009374:	58024800 	.word	0x58024800
 8009378:	58024400 	.word	0x58024400
 800937c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	d044      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939a:	d01b      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800939c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a0:	d805      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d022      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80093a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093aa:	d00a      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80093ac:	e01b      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 80093ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b2:	d01d      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80093b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b8:	d01c      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80093ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093be:	d01b      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80093c0:	e011      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f903 	bl	800a5d4 <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093d2:	e012      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3324      	adds	r3, #36	; 0x24
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fa1c 	bl	800a818 <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093e4:	e009      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ea:	e006      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80093ec:	bf00      	nop
 80093ee:	e004      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80093f0:	bf00      	nop
 80093f2:	e002      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80093f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009400:	4bb7      	ldr	r3, [pc, #732]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8009402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009404:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800940e:	49b4      	ldr	r1, [pc, #720]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8009410:	4313      	orrs	r3, r2
 8009412:	654b      	str	r3, [r1, #84]	; 0x54
 8009414:	e001      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d044      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800942c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009430:	d01b      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8009432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009436:	d805      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d022      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 800943c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009440:	d00a      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009442:	e01b      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009448:	d01d      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 800944a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800944e:	d01c      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8009450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009454:	d01b      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8009456:	e011      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f001 f8b8 	bl	800a5d4 <RCCEx_PLL2_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009468:	e012      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3324      	adds	r3, #36	; 0x24
 800946e:	2102      	movs	r1, #2
 8009470:	4618      	mov	r0, r3
 8009472:	f001 f9d1 	bl	800a818 <RCCEx_PLL3_Config>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800947a:	e009      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	75fb      	strb	r3, [r7, #23]
      break;
 8009480:	e006      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8009482:	bf00      	nop
 8009484:	e004      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8009486:	bf00      	nop
 8009488:	e002      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800948a:	bf00      	nop
 800948c:	e000      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800948e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009496:	4b92      	ldr	r3, [pc, #584]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8009498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094a4:	498e      	ldr	r1, [pc, #568]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	658b      	str	r3, [r1, #88]	; 0x58
 80094aa:	e001      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d044      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c6:	d01b      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 80094c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094cc:	d805      	bhi.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d022      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80094d8:	e01b      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 80094da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094de:	d01d      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80094e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094e4:	d01c      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 80094e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094ea:	d01b      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 80094ec:	e011      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 f86d 	bl	800a5d4 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094fe:	e012      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	2102      	movs	r1, #2
 8009506:	4618      	mov	r0, r3
 8009508:	f001 f986 	bl	800a818 <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009510:	e009      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]
      break;
 8009516:	e006      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8009518:	bf00      	nop
 800951a:	e004      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800951c:	bf00      	nop
 800951e:	e002      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8009520:	bf00      	nop
 8009522:	e000      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8009524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800952c:	4b6c      	ldr	r3, [pc, #432]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800952e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800953a:	4969      	ldr	r1, [pc, #420]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800953c:	4313      	orrs	r3, r2
 800953e:	658b      	str	r3, [r1, #88]	; 0x58
 8009540:	e001      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d037      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955c:	d015      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009568:	d00f      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800957a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800957e:	d004      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8009580:	f240 413a 	movw	r1, #1082	; 0x43a
 8009584:	4857      	ldr	r0, [pc, #348]	; (80096e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8009586:	f7f7 fdab 	bl	80010e0 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009594:	d10b      	bne.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3324      	adds	r3, #36	; 0x24
 800959a:	2102      	movs	r1, #2
 800959c:	4618      	mov	r0, r3
 800959e:	f001 f93b 	bl	800a818 <RCCEx_PLL3_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75bb      	strb	r3, [r7, #22]
 80095ac:	e009      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095ae:	4b4c      	ldr	r3, [pc, #304]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095bc:	4948      	ldr	r1, [pc, #288]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0310 	and.w	r3, r3, #16
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d037      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d8:	d015      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e4:	d00f      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095fa:	d004      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80095fc:	f240 414f 	movw	r1, #1103	; 0x44f
 8009600:	4838      	ldr	r0, [pc, #224]	; (80096e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8009602:	f7f7 fd6d 	bl	80010e0 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800960c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009610:	d10b      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3324      	adds	r3, #36	; 0x24
 8009616:	2102      	movs	r1, #2
 8009618:	4618      	mov	r0, r3
 800961a:	f001 f8fd 	bl	800a818 <RCCEx_PLL3_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00c      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	75bb      	strb	r3, [r7, #22]
 8009628:	e009      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800962a:	4b2d      	ldr	r3, [pc, #180]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009638:	4929      	ldr	r1, [pc, #164]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800963a:	4313      	orrs	r3, r2
 800963c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d030      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009654:	d00d      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x1032>
 8009656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800965a:	d016      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x104a>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d111      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3304      	adds	r3, #4
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f000 ffb4 	bl	800a5d4 <RCCEx_PLL2_Config>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009670:	e00c      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3324      	adds	r3, #36	; 0x24
 8009676:	2102      	movs	r1, #2
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f8cd 	bl	800a818 <RCCEx_PLL3_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009682:	e003      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]
      break;
 8009688:	e000      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 800968a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009692:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096a0:	490f      	ldr	r1, [pc, #60]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	658b      	str	r3, [r1, #88]	; 0x58
 80096a6:	e001      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d034      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096c2:	d011      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80096c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c8:	d01a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80096ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ce:	d114      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d0:	4b03      	ldr	r3, [pc, #12]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a02      	ldr	r2, [pc, #8]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80096d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80096dc:	e011      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 80096de:	bf00      	nop
 80096e0:	58024400 	.word	0x58024400
 80096e4:	08013e74 	.word	0x08013e74

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3324      	adds	r3, #36	; 0x24
 80096ec:	2101      	movs	r1, #1
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 f892 	bl	800a818 <RCCEx_PLL3_Config>
 80096f4:	4603      	mov	r3, r0
 80096f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096f8:	e003      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	75fb      	strb	r3, [r7, #23]
      break;
 80096fe:	e000      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8009700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009708:	4b9c      	ldr	r3, [pc, #624]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800970a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009716:	4999      	ldr	r1, [pc, #612]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009718:	4313      	orrs	r3, r2
 800971a:	654b      	str	r3, [r1, #84]	; 0x54
 800971c:	e001      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d037      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d009      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973e:	d004      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8009740:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8009744:	488e      	ldr	r0, [pc, #568]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8009746:	f7f7 fccb 	bl	80010e0 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009756:	d007      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8009758:	e00f      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975a:	4b88      	ldr	r3, [pc, #544]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800975c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975e:	4a87      	ldr	r2, [pc, #540]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009766:	e00b      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3304      	adds	r3, #4
 800976c:	2102      	movs	r1, #2
 800976e:	4618      	mov	r0, r3
 8009770:	f000 ff30 	bl	800a5d4 <RCCEx_PLL2_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009778:	e002      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]
      break;
 800977e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009786:	4b7d      	ldr	r3, [pc, #500]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	497a      	ldr	r1, [pc, #488]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009794:	4313      	orrs	r3, r2
 8009796:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009798:	e001      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3324      	adds	r3, #36	; 0x24
 80097ae:	2102      	movs	r1, #2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 f831 	bl	800a818 <RCCEx_PLL3_Config>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02f      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d4:	d00c      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 80097d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097da:	d802      	bhi.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d011      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 80097e0:	e00d      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x11be>
 80097e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e6:	d00f      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80097e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ec:	d00e      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 80097ee:	e006      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f0:	4b62      	ldr	r3, [pc, #392]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	4a61      	ldr	r2, [pc, #388]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80097fc:	e007      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	75fb      	strb	r3, [r7, #23]
      break;
 8009802:	e004      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8009804:	bf00      	nop
 8009806:	e002      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800980c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d109      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009814:	4b59      	ldr	r3, [pc, #356]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009820:	4956      	ldr	r1, [pc, #344]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009822:	4313      	orrs	r3, r2
 8009824:	654b      	str	r3, [r1, #84]	; 0x54
 8009826:	e001      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d016      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009848:	d004      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 800984a:	f240 5116 	movw	r1, #1302	; 0x516
 800984e:	484c      	ldr	r0, [pc, #304]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8009850:	f7f7 fc46 	bl	80010e0 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009854:	4b49      	ldr	r3, [pc, #292]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009860:	4946      	ldr	r1, [pc, #280]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009862:	4313      	orrs	r3, r2
 8009864:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d019      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009886:	d004      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 8009888:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800988c:	483c      	ldr	r0, [pc, #240]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 800988e:	f7f7 fc27 	bl	80010e0 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009892:	4b3a      	ldr	r3, [pc, #232]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098a0:	4936      	ldr	r1, [pc, #216]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d016      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d009      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098c2:	d004      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80098c4:	f240 512a 	movw	r1, #1322	; 0x52a
 80098c8:	482d      	ldr	r0, [pc, #180]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80098ca:	f7f7 fc09 	bl	80010e0 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098ce:	4b2b      	ldr	r3, [pc, #172]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098da:	4928      	ldr	r1, [pc, #160]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01d      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009900:	d004      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8009902:	f240 5134 	movw	r1, #1332	; 0x534
 8009906:	481e      	ldr	r0, [pc, #120]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8009908:	f7f7 fbea 	bl	80010e0 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	4a1a      	ldr	r2, [pc, #104]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009912:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009916:	6113      	str	r3, [r2, #16]
 8009918:	4b18      	ldr	r3, [pc, #96]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800991a:	691a      	ldr	r2, [r3, #16]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009922:	4916      	ldr	r1, [pc, #88]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da1b      	bge.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00e      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009940:	d009      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800994a:	d004      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800994c:	f240 513e 	movw	r1, #1342	; 0x53e
 8009950:	480b      	ldr	r0, [pc, #44]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8009952:	f7f7 fbc5 	bl	80010e0 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009956:	4b09      	ldr	r3, [pc, #36]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009962:	4906      	ldr	r1, [pc, #24]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009964:	4313      	orrs	r3, r2
 8009966:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009968:	7dbb      	ldrb	r3, [r7, #22]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	e000      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	58024400 	.word	0x58024400
 8009980:	08013e74 	.word	0x08013e74

08009984 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b090      	sub	sp, #64	; 0x40
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009992:	d150      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009994:	4ba1      	ldr	r3, [pc, #644]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d844      	bhi.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099c1 	.word	0x080099c1
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	08009a29 	.word	0x08009a29
 80099bc:	080099f1 	.word	0x080099f1
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fc9d 	bl	800a304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ce:	e1dc      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d0:	f107 0318 	add.w	r3, r7, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 f9fd 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099de:	e1d4      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fb41 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ee:	e1cc      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099f0:	4b8a      	ldr	r3, [pc, #552]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009a00:	4b87      	ldr	r3, [pc, #540]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009a04:	e1c1      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a0c:	d102      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009a0e:	4b85      	ldr	r3, [pc, #532]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a12:	e1ba      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1a:	d102      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009a1c:	4b82      	ldr	r3, [pc, #520]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a20:	e1b3      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a26:	e1b0      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a28:	4b80      	ldr	r3, [pc, #512]	; (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a2c:	e1ad      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a32:	bf00      	nop
 8009a34:	e1a9      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a3c:	d14f      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009a3e:	4b77      	ldr	r3, [pc, #476]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a42:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	2b80      	cmp	r3, #128	; 0x80
 8009a4c:	d01c      	beq.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009a4e:	2b80      	cmp	r3, #128	; 0x80
 8009a50:	d804      	bhi.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009a56:	2b40      	cmp	r3, #64	; 0x40
 8009a58:	d00e      	beq.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009a5a:	e03c      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009a5c:	2bc0      	cmp	r3, #192	; 0xc0
 8009a5e:	d037      	beq.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a64:	d018      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8009a66:	e036      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fc49 	bl	800a304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a76:	e188      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a78:	f107 0318 	add.w	r3, r7, #24
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f9a9 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a86:	e180      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 faed 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a96:	e178      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a98:	4b60      	ldr	r3, [pc, #384]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d102      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009aa8:	4b5d      	ldr	r3, [pc, #372]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009aac:	e16d      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8009aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ab4:	d102      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8009ab6:	4b5b      	ldr	r3, [pc, #364]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aba:	e166      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8009abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ac2:	d102      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009ac4:	4b58      	ldr	r3, [pc, #352]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac8:	e15f      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ace:	e15c      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ad0:	4b56      	ldr	r3, [pc, #344]	; (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad4:	e159      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ada:	bf00      	nop
 8009adc:	e155      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae4:	d153      	bne.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009ae6:	4b4d      	ldr	r3, [pc, #308]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009af6:	d01f      	beq.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009afc:	d805      	bhi.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b06:	d00f      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009b08:	e03d      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009b0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b0e:	d037      	beq.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b14:	d018      	beq.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8009b16:	e036      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbf1 	bl	800a304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b26:	e130      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b28:	f107 0318 	add.w	r3, r7, #24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 f951 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b36:	e128      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fa95 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b46:	e120      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b48:	4b34      	ldr	r3, [pc, #208]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009b58:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009b5c:	e115      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8009b66:	4b2f      	ldr	r3, [pc, #188]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6a:	e10e      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b72:	d102      	bne.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8009b74:	4b2c      	ldr	r3, [pc, #176]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b78:	e107      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b7e:	e104      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b80:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b84:	e101      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b8a:	bf00      	nop
 8009b8c:	e0fd      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b94:	d15d      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009b96:	4b21      	ldr	r3, [pc, #132]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009b9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ba6:	d01f      	beq.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bac:	d805      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bb6:	d00f      	beq.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009bb8:	e047      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009bba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bbe:	d041      	beq.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc4:	d018      	beq.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009bc6:	e040      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fb99 	bl	800a304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bd6:	e0d8      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd8:	f107 0318 	add.w	r3, r7, #24
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 f8f9 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009be6:	e0d0      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fa3d 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf6:	e0c8      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bf8:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009c08:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009c0c:	e0bd      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c14:	d10c      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8009c16:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c1a:	e0b6      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	03d09000 	.word	0x03d09000
 8009c24:	003d0900 	.word	0x003d0900
 8009c28:	007a1200 	.word	0x007a1200
 8009c2c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8009c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c36:	d102      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009c38:	4b56      	ldr	r3, [pc, #344]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c3c:	e0a5      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c42:	e0a2      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c44:	4b54      	ldr	r3, [pc, #336]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8009c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c48:	e09f      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c4e:	bf00      	nop
 8009c50:	e09b      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c58:	d153      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c5a:	4b50      	ldr	r3, [pc, #320]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8009c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6a:	d01f      	beq.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c70:	d805      	bhi.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8009c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7a:	d00f      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009c7c:	e03d      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c82:	d037      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c88:	d018      	beq.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009c8a:	e036      	b.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fb37 	bl	800a304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c9a:	e076      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c9c:	f107 0318 	add.w	r3, r7, #24
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f897 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009caa:	e06e      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cac:	f107 030c 	add.w	r3, r7, #12
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f9db 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cba:	e066      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009cbc:	4b37      	ldr	r3, [pc, #220]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8009cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009ccc:	4b34      	ldr	r3, [pc, #208]	; (8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009cd0:	e05b      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cd8:	d102      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009cda:	4b32      	ldr	r3, [pc, #200]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8009cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cde:	e054      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ce6:	d102      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009ce8:	4b2a      	ldr	r3, [pc, #168]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cec:	e04d      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf2:	e04a      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cf4:	4b28      	ldr	r3, [pc, #160]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8009cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf8:	e047      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cfe:	bf00      	nop
 8009d00:	e043      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d08:	d13d      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d1a:	d00c      	beq.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d20:	d011      	beq.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d12b      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d26:	f107 0318 	add.w	r3, r7, #24
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f852 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d34:	e029      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d36:	f107 030c 	add.w	r3, r7, #12
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f996 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d44:	e021      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d46:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8009d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d102      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009d5a:	e016      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d62:	d102      	bne.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009d64:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d68:	e00f      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d70:	d102      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009d72:	4b08      	ldr	r3, [pc, #32]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8009d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d76:	e008      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d7c:	e005      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d82:	bf00      	nop
 8009d84:	e001      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else
    {
      frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3740      	adds	r7, #64	; 0x40
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	007a1200 	.word	0x007a1200
 8009d98:	00bb8000 	.word	0x00bb8000
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	03d09000 	.word	0x03d09000
 8009da4:	003d0900 	.word	0x003d0900

08009da8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009dac:	f7fe fc00 	bl	80085b0 <HAL_RCC_GetHCLKFreq>
 8009db0:	4601      	mov	r1, r0
 8009db2:	4b06      	ldr	r3, [pc, #24]	; (8009dcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	091b      	lsrs	r3, r3, #4
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	4a04      	ldr	r2, [pc, #16]	; (8009dd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009dbe:	5cd3      	ldrb	r3, [r2, r3]
 8009dc0:	f003 031f 	and.w	r3, r3, #31
 8009dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	08014058 	.word	0x08014058

08009dd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ddc:	4b9d      	ldr	r3, [pc, #628]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8009de6:	4b9b      	ldr	r3, [pc, #620]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dea:	0b1b      	lsrs	r3, r3, #12
 8009dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009df0:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8009df2:	4b98      	ldr	r3, [pc, #608]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009dfc:	4b95      	ldr	r3, [pc, #596]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	08db      	lsrs	r3, r3, #3
 8009e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
 8009e0c:	ee07 3a90 	vmov	s15, r3
 8009e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 810a 	beq.w	800a034 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d05a      	beq.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d302      	bcc.n	8009e30 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d078      	beq.n	8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8009e2e:	e099      	b.n	8009f64 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e30:	4b88      	ldr	r3, [pc, #544]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02d      	beq.n	8009e98 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e3c:	4b85      	ldr	r3, [pc, #532]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	08db      	lsrs	r3, r3, #3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	4a84      	ldr	r2, [pc, #528]	; (800a058 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009e48:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b7b      	ldr	r3, [pc, #492]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e96:	e087      	b.n	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a060 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b6a      	ldr	r3, [pc, #424]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eda:	e065      	b.n	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b59      	ldr	r3, [pc, #356]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1e:	e043      	b.n	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a068 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f32:	4b48      	ldr	r3, [pc, #288]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f62:	e021      	b.n	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a064 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f76:	4b37      	ldr	r3, [pc, #220]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009fa8:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	0a5b      	lsrs	r3, r3, #9
 8009fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fce:	ee17 2a90 	vmov	r2, s15
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009fd6:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ffc:	ee17 2a90 	vmov	r2, s15
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a004:	4b13      	ldr	r3, [pc, #76]	; (800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	0e1b      	lsrs	r3, r3, #24
 800a00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a02a:	ee17 2a90 	vmov	r2, s15
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a032:	e008      	b.n	800a046 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	609a      	str	r2, [r3, #8]
}
 800a046:	bf00      	nop
 800a048:	3724      	adds	r7, #36	; 0x24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400
 800a058:	03d09000 	.word	0x03d09000
 800a05c:	46000000 	.word	0x46000000
 800a060:	4c742400 	.word	0x4c742400
 800a064:	4a742400 	.word	0x4a742400
 800a068:	4af42400 	.word	0x4af42400

0800a06c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b089      	sub	sp, #36	; 0x24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a074:	4b9d      	ldr	r3, [pc, #628]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a07e:	4b9b      	ldr	r3, [pc, #620]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	0d1b      	lsrs	r3, r3, #20
 800a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a088:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800a08a:	4b98      	ldr	r3, [pc, #608]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a094:	4b95      	ldr	r3, [pc, #596]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a098:	08db      	lsrs	r3, r3, #3
 800a09a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	fb02 f303 	mul.w	r3, r2, r3
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 810a 	beq.w	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d05a      	beq.n	800a174 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d302      	bcc.n	800a0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d078      	beq.n	800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800a0c6:	e099      	b.n	800a1fc <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0c8:	4b88      	ldr	r3, [pc, #544]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d02d      	beq.n	800a130 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0d4:	4b85      	ldr	r3, [pc, #532]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	08db      	lsrs	r3, r3, #3
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	4a84      	ldr	r2, [pc, #528]	; (800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	ee07 3a90 	vmov	s15, r3
 800a0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b7b      	ldr	r3, [pc, #492]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a112:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a12e:	e087      	b.n	800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b6a      	ldr	r3, [pc, #424]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a03 	vldr	s12, [r7, #12]
 800a156:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a172:	e065      	b.n	800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a186:	4b59      	ldr	r3, [pc, #356]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a196:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1b6:	e043      	b.n	800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a300 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b48      	ldr	r3, [pc, #288]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1fa:	e021      	b.n	800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b37      	ldr	r3, [pc, #220]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a23e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a240:	4b2a      	ldr	r3, [pc, #168]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	0a5b      	lsrs	r3, r3, #9
 800a246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a266:	ee17 2a90 	vmov	r2, s15
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a26e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a288:	edd7 6a07 	vldr	s13, [r7, #28]
 800a28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a294:	ee17 2a90 	vmov	r2, s15
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a29c:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	0e1b      	lsrs	r3, r3, #24
 800a2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c2:	ee17 2a90 	vmov	r2, s15
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a2ca:	e008      	b.n	800a2de <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	609a      	str	r2, [r3, #8]
}
 800a2de:	bf00      	nop
 800a2e0:	3724      	adds	r7, #36	; 0x24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	03d09000 	.word	0x03d09000
 800a2f4:	46000000 	.word	0x46000000
 800a2f8:	4c742400 	.word	0x4c742400
 800a2fc:	4a742400 	.word	0x4a742400
 800a300:	4af42400 	.word	0x4af42400

0800a304 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a304:	b480      	push	{r7}
 800a306:	b089      	sub	sp, #36	; 0x24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a30c:	4b9d      	ldr	r3, [pc, #628]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a316:	4b9b      	ldr	r3, [pc, #620]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a320:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a322:	4b98      	ldr	r3, [pc, #608]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a32c:	4b95      	ldr	r3, [pc, #596]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a330:	08db      	lsrs	r3, r3, #3
 800a332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	fb02 f303 	mul.w	r3, r2, r3
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 810a 	beq.w	800a564 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d05a      	beq.n	800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d302      	bcc.n	800a360 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d078      	beq.n	800a450 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a35e:	e099      	b.n	800a494 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a360:	4b88      	ldr	r3, [pc, #544]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0320 	and.w	r3, r3, #32
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d02d      	beq.n	800a3c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a36c:	4b85      	ldr	r3, [pc, #532]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	08db      	lsrs	r3, r3, #3
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	4a84      	ldr	r2, [pc, #528]	; (800a588 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a396:	4b7b      	ldr	r3, [pc, #492]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a58c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3c6:	e087      	b.n	800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800a3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3da:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a58c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a40a:	e065      	b.n	800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a416:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a594 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a41e:	4b59      	ldr	r3, [pc, #356]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a432:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a58c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a44e:	e043      	b.n	800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a462:	4b48      	ldr	r3, [pc, #288]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46a:	ee07 3a90 	vmov	s15, r3
 800a46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a472:	ed97 6a03 	vldr	s12, [r7, #12]
 800a476:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a58c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a492:	e021      	b.n	800a4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a594 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a6:	4b37      	ldr	r3, [pc, #220]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a58c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4d6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a4d8:	4b2a      	ldr	r3, [pc, #168]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	0a5b      	lsrs	r3, r3, #9
 800a4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fe:	ee17 2a90 	vmov	r2, s15
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a51c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a520:	edd7 6a07 	vldr	s13, [r7, #28]
 800a524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a52c:	ee17 2a90 	vmov	r2, s15
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a534:	4b13      	ldr	r3, [pc, #76]	; (800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	0e1b      	lsrs	r3, r3, #24
 800a53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a54a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a54e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a55a:	ee17 2a90 	vmov	r2, s15
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a562:	e008      	b.n	800a576 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	609a      	str	r2, [r3, #8]
}
 800a576:	bf00      	nop
 800a578:	3724      	adds	r7, #36	; 0x24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	58024400 	.word	0x58024400
 800a588:	03d09000 	.word	0x03d09000
 800a58c:	46000000 	.word	0x46000000
 800a590:	4c742400 	.word	0x4c742400
 800a594:	4a742400 	.word	0x4a742400
 800a598:	4af42400 	.word	0x4af42400

0800a59c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5a0:	f7fd fe94 	bl	80082cc <HAL_RCC_GetSysClockFreq>
 800a5a4:	4601      	mov	r1, r0
 800a5a6:	4b08      	ldr	r3, [pc, #32]	; (800a5c8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	0a1b      	lsrs	r3, r3, #8
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	4a06      	ldr	r2, [pc, #24]	; (800a5cc <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800a5b2:	5cd3      	ldrb	r3, [r2, r3]
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	fa21 f303 	lsr.w	r3, r1, r3
 800a5bc:	4a04      	ldr	r2, [pc, #16]	; (800a5d0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800a5be:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a5c0:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	08014058 	.word	0x08014058
 800a5d0:	24000000 	.word	0x24000000

0800a5d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <RCCEx_PLL2_Config+0x1e>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b3f      	cmp	r3, #63	; 0x3f
 800a5f0:	d904      	bls.n	800a5fc <RCCEx_PLL2_Config+0x28>
 800a5f2:	f640 216b 	movw	r1, #2667	; 0xa6b
 800a5f6:	4885      	ldr	r0, [pc, #532]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a5f8:	f7f6 fd72 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d904      	bls.n	800a60e <RCCEx_PLL2_Config+0x3a>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a60c:	d904      	bls.n	800a618 <RCCEx_PLL2_Config+0x44>
 800a60e:	f640 216c 	movw	r1, #2668	; 0xa6c
 800a612:	487e      	ldr	r0, [pc, #504]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a614:	f7f6 fd64 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <RCCEx_PLL2_Config+0x54>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b80      	cmp	r3, #128	; 0x80
 800a626:	d904      	bls.n	800a632 <RCCEx_PLL2_Config+0x5e>
 800a628:	f640 216d 	movw	r1, #2669	; 0xa6d
 800a62c:	4877      	ldr	r0, [pc, #476]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a62e:	f7f6 fd57 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <RCCEx_PLL2_Config+0x6e>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b80      	cmp	r3, #128	; 0x80
 800a640:	d904      	bls.n	800a64c <RCCEx_PLL2_Config+0x78>
 800a642:	f640 216e 	movw	r1, #2670	; 0xa6e
 800a646:	4871      	ldr	r0, [pc, #452]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a648:	f7f6 fd4a 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <RCCEx_PLL2_Config+0x88>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b80      	cmp	r3, #128	; 0x80
 800a65a:	d904      	bls.n	800a666 <RCCEx_PLL2_Config+0x92>
 800a65c:	f640 216f 	movw	r1, #2671	; 0xa6f
 800a660:	486a      	ldr	r0, [pc, #424]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a662:	f7f6 fd3d 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d010      	beq.n	800a690 <RCCEx_PLL2_Config+0xbc>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	d00c      	beq.n	800a690 <RCCEx_PLL2_Config+0xbc>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	2b80      	cmp	r3, #128	; 0x80
 800a67c:	d008      	beq.n	800a690 <RCCEx_PLL2_Config+0xbc>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	2bc0      	cmp	r3, #192	; 0xc0
 800a684:	d004      	beq.n	800a690 <RCCEx_PLL2_Config+0xbc>
 800a686:	f44f 6127 	mov.w	r1, #2672	; 0xa70
 800a68a:	4860      	ldr	r0, [pc, #384]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a68c:	f7f6 fd28 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d008      	beq.n	800a6aa <RCCEx_PLL2_Config+0xd6>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d004      	beq.n	800a6aa <RCCEx_PLL2_Config+0xd6>
 800a6a0:	f640 2171 	movw	r1, #2673	; 0xa71
 800a6a4:	4859      	ldr	r0, [pc, #356]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a6a6:	f7f6 fd1b 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b2:	d304      	bcc.n	800a6be <RCCEx_PLL2_Config+0xea>
 800a6b4:	f640 2172 	movw	r1, #2674	; 0xa72
 800a6b8:	4854      	ldr	r0, [pc, #336]	; (800a80c <RCCEx_PLL2_Config+0x238>)
 800a6ba:	f7f6 fd11 	bl	80010e0 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6be:	4b54      	ldr	r3, [pc, #336]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d101      	bne.n	800a6ce <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e099      	b.n	800a802 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6ce:	4b50      	ldr	r3, [pc, #320]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a4f      	ldr	r2, [pc, #316]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a6d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6da:	f7f7 f84f 	bl	800177c <HAL_GetTick>
 800a6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6e2:	f7f7 f84b 	bl	800177c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d901      	bls.n	800a6f4 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e086      	b.n	800a802 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6f4:	4b46      	ldr	r3, [pc, #280]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a700:	4b43      	ldr	r3, [pc, #268]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	031b      	lsls	r3, r3, #12
 800a70e:	4940      	ldr	r1, [pc, #256]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a710:	4313      	orrs	r3, r2
 800a712:	628b      	str	r3, [r1, #40]	; 0x28
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	3b01      	subs	r3, #1
 800a71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	3b01      	subs	r3, #1
 800a724:	025b      	lsls	r3, r3, #9
 800a726:	b29b      	uxth	r3, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	3b01      	subs	r3, #1
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	061b      	lsls	r3, r3, #24
 800a740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a744:	4932      	ldr	r1, [pc, #200]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a746:	4313      	orrs	r3, r2
 800a748:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	492e      	ldr	r1, [pc, #184]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a75c:	4b2c      	ldr	r3, [pc, #176]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	f023 0220 	bic.w	r2, r3, #32
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	4929      	ldr	r1, [pc, #164]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a76e:	4b28      	ldr	r3, [pc, #160]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a772:	4a27      	ldr	r2, [pc, #156]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a774:	f023 0310 	bic.w	r3, r3, #16
 800a778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a77a:	4b25      	ldr	r3, [pc, #148]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a77e:	4b25      	ldr	r3, [pc, #148]	; (800a814 <RCCEx_PLL2_Config+0x240>)
 800a780:	4013      	ands	r3, r2
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	69d2      	ldr	r2, [r2, #28]
 800a786:	00d2      	lsls	r2, r2, #3
 800a788:	4921      	ldr	r1, [pc, #132]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a78e:	4b20      	ldr	r3, [pc, #128]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	4a1f      	ldr	r2, [pc, #124]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a794:	f043 0310 	orr.w	r3, r3, #16
 800a798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7a0:	4b1b      	ldr	r3, [pc, #108]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	4a1a      	ldr	r2, [pc, #104]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7ac:	e00f      	b.n	800a7ce <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d106      	bne.n	800a7c2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7b4:	4b16      	ldr	r3, [pc, #88]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	4a15      	ldr	r2, [pc, #84]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c0:	e005      	b.n	800a7ce <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	4a12      	ldr	r2, [pc, #72]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a0f      	ldr	r2, [pc, #60]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7da:	f7f6 ffcf 	bl	800177c <HAL_GetTick>
 800a7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7e0:	e008      	b.n	800a7f4 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a7e2:	f7f6 ffcb 	bl	800177c <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d901      	bls.n	800a7f4 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e006      	b.n	800a802 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7f4:	4b06      	ldr	r3, [pc, #24]	; (800a810 <RCCEx_PLL2_Config+0x23c>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0f0      	beq.n	800a7e2 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	08013e74 	.word	0x08013e74
 800a810:	58024400 	.word	0x58024400
 800a814:	ffff0007 	.word	0xffff0007

0800a818 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <RCCEx_PLL3_Config+0x1e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b3f      	cmp	r3, #63	; 0x3f
 800a834:	d904      	bls.n	800a840 <RCCEx_PLL3_Config+0x28>
 800a836:	f640 21d3 	movw	r1, #2771	; 0xad3
 800a83a:	4887      	ldr	r0, [pc, #540]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a83c:	f7f6 fc50 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b03      	cmp	r3, #3
 800a846:	d904      	bls.n	800a852 <RCCEx_PLL3_Config+0x3a>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a850:	d904      	bls.n	800a85c <RCCEx_PLL3_Config+0x44>
 800a852:	f640 21d4 	movw	r1, #2772	; 0xad4
 800a856:	4880      	ldr	r0, [pc, #512]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a858:	f7f6 fc42 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <RCCEx_PLL3_Config+0x54>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	2b80      	cmp	r3, #128	; 0x80
 800a86a:	d904      	bls.n	800a876 <RCCEx_PLL3_Config+0x5e>
 800a86c:	f640 21d5 	movw	r1, #2773	; 0xad5
 800a870:	4879      	ldr	r0, [pc, #484]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a872:	f7f6 fc35 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <RCCEx_PLL3_Config+0x6e>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d904      	bls.n	800a890 <RCCEx_PLL3_Config+0x78>
 800a886:	f640 21d6 	movw	r1, #2774	; 0xad6
 800a88a:	4873      	ldr	r0, [pc, #460]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a88c:	f7f6 fc28 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <RCCEx_PLL3_Config+0x88>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	2b80      	cmp	r3, #128	; 0x80
 800a89e:	d904      	bls.n	800a8aa <RCCEx_PLL3_Config+0x92>
 800a8a0:	f640 21d7 	movw	r1, #2775	; 0xad7
 800a8a4:	486c      	ldr	r0, [pc, #432]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a8a6:	f7f6 fc1b 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <RCCEx_PLL3_Config+0xc2>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ba:	d00e      	beq.n	800a8da <RCCEx_PLL3_Config+0xc2>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8c4:	d009      	beq.n	800a8da <RCCEx_PLL3_Config+0xc2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8ce:	d004      	beq.n	800a8da <RCCEx_PLL3_Config+0xc2>
 800a8d0:	f640 21d8 	movw	r1, #2776	; 0xad8
 800a8d4:	4860      	ldr	r0, [pc, #384]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a8d6:	f7f6 fc03 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d009      	beq.n	800a8f6 <RCCEx_PLL3_Config+0xde>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ea:	d004      	beq.n	800a8f6 <RCCEx_PLL3_Config+0xde>
 800a8ec:	f640 21d9 	movw	r1, #2777	; 0xad9
 800a8f0:	4859      	ldr	r0, [pc, #356]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a8f2:	f7f6 fbf5 	bl	80010e0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fe:	d304      	bcc.n	800a90a <RCCEx_PLL3_Config+0xf2>
 800a900:	f640 21da 	movw	r1, #2778	; 0xada
 800a904:	4854      	ldr	r0, [pc, #336]	; (800aa58 <RCCEx_PLL3_Config+0x240>)
 800a906:	f7f6 fbeb 	bl	80010e0 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a90a:	4b54      	ldr	r3, [pc, #336]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b03      	cmp	r3, #3
 800a914:	d101      	bne.n	800a91a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e099      	b.n	800aa4e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a91a:	4b50      	ldr	r3, [pc, #320]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a4f      	ldr	r2, [pc, #316]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a926:	f7f6 ff29 	bl	800177c <HAL_GetTick>
 800a92a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a92c:	e008      	b.n	800a940 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a92e:	f7f6 ff25 	bl	800177c <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d901      	bls.n	800a940 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e086      	b.n	800aa4e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a940:	4b46      	ldr	r3, [pc, #280]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1f0      	bne.n	800a92e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a94c:	4b43      	ldr	r3, [pc, #268]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	051b      	lsls	r3, r3, #20
 800a95a:	4940      	ldr	r1, [pc, #256]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	628b      	str	r3, [r1, #40]	; 0x28
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	3b01      	subs	r3, #1
 800a966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	3b01      	subs	r3, #1
 800a970:	025b      	lsls	r3, r3, #9
 800a972:	b29b      	uxth	r3, r3
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	041b      	lsls	r3, r3, #16
 800a97e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a982:	431a      	orrs	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	3b01      	subs	r3, #1
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a990:	4932      	ldr	r1, [pc, #200]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a992:	4313      	orrs	r3, r2
 800a994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a996:	4b31      	ldr	r3, [pc, #196]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	492e      	ldr	r1, [pc, #184]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a9a8:	4b2c      	ldr	r3, [pc, #176]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	4929      	ldr	r1, [pc, #164]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a9ba:	4b28      	ldr	r3, [pc, #160]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	4a27      	ldr	r2, [pc, #156]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9c6:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ca:	4b25      	ldr	r3, [pc, #148]	; (800aa60 <RCCEx_PLL3_Config+0x248>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	69d2      	ldr	r2, [r2, #28]
 800a9d2:	00d2      	lsls	r2, r2, #3
 800a9d4:	4921      	ldr	r1, [pc, #132]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9da:	4b20      	ldr	r3, [pc, #128]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	4a1f      	ldr	r2, [pc, #124]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a9ec:	4b1b      	ldr	r3, [pc, #108]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	4a1a      	ldr	r2, [pc, #104]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800a9f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a9f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9f8:	e00f      	b.n	800aa1a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d106      	bne.n	800aa0e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa00:	4b16      	ldr	r3, [pc, #88]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	4a15      	ldr	r2, [pc, #84]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa0c:	e005      	b.n	800aa1a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	4a12      	ldr	r2, [pc, #72]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa1a:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a0f      	ldr	r2, [pc, #60]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa26:	f7f6 fea9 	bl	800177c <HAL_GetTick>
 800aa2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa2c:	e008      	b.n	800aa40 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aa2e:	f7f6 fea5 	bl	800177c <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d901      	bls.n	800aa40 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e006      	b.n	800aa4e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <RCCEx_PLL3_Config+0x244>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0f0      	beq.n	800aa2e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	08013e74 	.word	0x08013e74
 800aa5c:	58024400 	.word	0x58024400
 800aa60:	ffff0007 	.word	0xffff0007

0800aa64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e0a1      	b.n	800abba <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a52      	ldr	r2, [pc, #328]	; (800abc4 <HAL_TIM_Base_Init+0x160>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d045      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa88:	d040      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a4e      	ldr	r2, [pc, #312]	; (800abc8 <HAL_TIM_Base_Init+0x164>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d03b      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a4c      	ldr	r2, [pc, #304]	; (800abcc <HAL_TIM_Base_Init+0x168>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d036      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a4b      	ldr	r2, [pc, #300]	; (800abd0 <HAL_TIM_Base_Init+0x16c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d031      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a49      	ldr	r2, [pc, #292]	; (800abd4 <HAL_TIM_Base_Init+0x170>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d02c      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a48      	ldr	r2, [pc, #288]	; (800abd8 <HAL_TIM_Base_Init+0x174>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d027      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a46      	ldr	r2, [pc, #280]	; (800abdc <HAL_TIM_Base_Init+0x178>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d022      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a45      	ldr	r2, [pc, #276]	; (800abe0 <HAL_TIM_Base_Init+0x17c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d01d      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a43      	ldr	r2, [pc, #268]	; (800abe4 <HAL_TIM_Base_Init+0x180>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d018      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a42      	ldr	r2, [pc, #264]	; (800abe8 <HAL_TIM_Base_Init+0x184>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d013      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a40      	ldr	r2, [pc, #256]	; (800abec <HAL_TIM_Base_Init+0x188>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d00e      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a3f      	ldr	r2, [pc, #252]	; (800abf0 <HAL_TIM_Base_Init+0x18c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d009      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a3d      	ldr	r2, [pc, #244]	; (800abf4 <HAL_TIM_Base_Init+0x190>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d004      	beq.n	800ab0c <HAL_TIM_Base_Init+0xa8>
 800ab02:	f240 1115 	movw	r1, #277	; 0x115
 800ab06:	483c      	ldr	r0, [pc, #240]	; (800abf8 <HAL_TIM_Base_Init+0x194>)
 800ab08:	f7f6 faea 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d014      	beq.n	800ab3e <HAL_TIM_Base_Init+0xda>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	2b10      	cmp	r3, #16
 800ab1a:	d010      	beq.n	800ab3e <HAL_TIM_Base_Init+0xda>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b20      	cmp	r3, #32
 800ab22:	d00c      	beq.n	800ab3e <HAL_TIM_Base_Init+0xda>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d008      	beq.n	800ab3e <HAL_TIM_Base_Init+0xda>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	2b60      	cmp	r3, #96	; 0x60
 800ab32:	d004      	beq.n	800ab3e <HAL_TIM_Base_Init+0xda>
 800ab34:	f44f 718b 	mov.w	r1, #278	; 0x116
 800ab38:	482f      	ldr	r0, [pc, #188]	; (800abf8 <HAL_TIM_Base_Init+0x194>)
 800ab3a:	f7f6 fad1 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00e      	beq.n	800ab64 <HAL_TIM_Base_Init+0x100>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4e:	d009      	beq.n	800ab64 <HAL_TIM_Base_Init+0x100>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab58:	d004      	beq.n	800ab64 <HAL_TIM_Base_Init+0x100>
 800ab5a:	f240 1117 	movw	r1, #279	; 0x117
 800ab5e:	4826      	ldr	r0, [pc, #152]	; (800abf8 <HAL_TIM_Base_Init+0x194>)
 800ab60:	f7f6 fabe 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d008      	beq.n	800ab7e <HAL_TIM_Base_Init+0x11a>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	2b80      	cmp	r3, #128	; 0x80
 800ab72:	d004      	beq.n	800ab7e <HAL_TIM_Base_Init+0x11a>
 800ab74:	f44f 718c 	mov.w	r1, #280	; 0x118
 800ab78:	481f      	ldr	r0, [pc, #124]	; (800abf8 <HAL_TIM_Base_Init+0x194>)
 800ab7a:	f7f6 fab1 	bl	80010e0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d106      	bne.n	800ab98 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7f6 fc6c 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4619      	mov	r1, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	f000 fdf0 	bl	800b790 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	40010000 	.word	0x40010000
 800abc8:	40000400 	.word	0x40000400
 800abcc:	40000800 	.word	0x40000800
 800abd0:	40000c00 	.word	0x40000c00
 800abd4:	40001000 	.word	0x40001000
 800abd8:	40001400 	.word	0x40001400
 800abdc:	40010400 	.word	0x40010400
 800abe0:	40001800 	.word	0x40001800
 800abe4:	40001c00 	.word	0x40001c00
 800abe8:	40002000 	.word	0x40002000
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800
 800abf8:	08013eb0 	.word	0x08013eb0

0800abfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a35      	ldr	r2, [pc, #212]	; (800ace0 <HAL_TIM_Base_Start+0xe4>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d045      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac16:	d040      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a31      	ldr	r2, [pc, #196]	; (800ace4 <HAL_TIM_Base_Start+0xe8>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d03b      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a30      	ldr	r2, [pc, #192]	; (800ace8 <HAL_TIM_Base_Start+0xec>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d036      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a2e      	ldr	r2, [pc, #184]	; (800acec <HAL_TIM_Base_Start+0xf0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d031      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a2d      	ldr	r2, [pc, #180]	; (800acf0 <HAL_TIM_Base_Start+0xf4>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d02c      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a2b      	ldr	r2, [pc, #172]	; (800acf4 <HAL_TIM_Base_Start+0xf8>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d027      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a2a      	ldr	r2, [pc, #168]	; (800acf8 <HAL_TIM_Base_Start+0xfc>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d022      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a28      	ldr	r2, [pc, #160]	; (800acfc <HAL_TIM_Base_Start+0x100>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d01d      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a27      	ldr	r2, [pc, #156]	; (800ad00 <HAL_TIM_Base_Start+0x104>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d018      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a25      	ldr	r2, [pc, #148]	; (800ad04 <HAL_TIM_Base_Start+0x108>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d013      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a24      	ldr	r2, [pc, #144]	; (800ad08 <HAL_TIM_Base_Start+0x10c>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00e      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a22      	ldr	r2, [pc, #136]	; (800ad0c <HAL_TIM_Base_Start+0x110>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d009      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a21      	ldr	r2, [pc, #132]	; (800ad10 <HAL_TIM_Base_Start+0x114>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d004      	beq.n	800ac9a <HAL_TIM_Base_Start+0x9e>
 800ac90:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800ac94:	481f      	ldr	r0, [pc, #124]	; (800ad14 <HAL_TIM_Base_Start+0x118>)
 800ac96:	f7f6 fa23 	bl	80010e0 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_TIM_Base_Start+0x11c>)
 800acaa:	4013      	ands	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d00b      	beq.n	800accc <HAL_TIM_Base_Start+0xd0>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acba:	d007      	beq.n	800accc <HAL_TIM_Base_Start+0xd0>
  {
    __HAL_TIM_ENABLE(htim);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f042 0201 	orr.w	r2, r2, #1
 800acca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40000400 	.word	0x40000400
 800ace8:	40000800 	.word	0x40000800
 800acec:	40000c00 	.word	0x40000c00
 800acf0:	40001000 	.word	0x40001000
 800acf4:	40001400 	.word	0x40001400
 800acf8:	40010400 	.word	0x40010400
 800acfc:	40001800 	.word	0x40001800
 800ad00:	40001c00 	.word	0x40001c00
 800ad04:	40002000 	.word	0x40002000
 800ad08:	40014000 	.word	0x40014000
 800ad0c:	40014400 	.word	0x40014400
 800ad10:	40014800 	.word	0x40014800
 800ad14:	08013eb0 	.word	0x08013eb0
 800ad18:	00010007 	.word	0x00010007

0800ad1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e0a1      	b.n	800ae72 <HAL_TIM_OC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a52      	ldr	r2, [pc, #328]	; (800ae7c <HAL_TIM_OC_Init+0x160>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d045      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad40:	d040      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a4e      	ldr	r2, [pc, #312]	; (800ae80 <HAL_TIM_OC_Init+0x164>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d03b      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a4c      	ldr	r2, [pc, #304]	; (800ae84 <HAL_TIM_OC_Init+0x168>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d036      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a4b      	ldr	r2, [pc, #300]	; (800ae88 <HAL_TIM_OC_Init+0x16c>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d031      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a49      	ldr	r2, [pc, #292]	; (800ae8c <HAL_TIM_OC_Init+0x170>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d02c      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a48      	ldr	r2, [pc, #288]	; (800ae90 <HAL_TIM_OC_Init+0x174>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d027      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a46      	ldr	r2, [pc, #280]	; (800ae94 <HAL_TIM_OC_Init+0x178>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d022      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a45      	ldr	r2, [pc, #276]	; (800ae98 <HAL_TIM_OC_Init+0x17c>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d01d      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a43      	ldr	r2, [pc, #268]	; (800ae9c <HAL_TIM_OC_Init+0x180>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d018      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a42      	ldr	r2, [pc, #264]	; (800aea0 <HAL_TIM_OC_Init+0x184>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a40      	ldr	r2, [pc, #256]	; (800aea4 <HAL_TIM_OC_Init+0x188>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00e      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a3f      	ldr	r2, [pc, #252]	; (800aea8 <HAL_TIM_OC_Init+0x18c>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a3d      	ldr	r2, [pc, #244]	; (800aeac <HAL_TIM_OC_Init+0x190>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d004      	beq.n	800adc4 <HAL_TIM_OC_Init+0xa8>
 800adba:	f240 2161 	movw	r1, #609	; 0x261
 800adbe:	483c      	ldr	r0, [pc, #240]	; (800aeb0 <HAL_TIM_OC_Init+0x194>)
 800adc0:	f7f6 f98e 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d014      	beq.n	800adf6 <HAL_TIM_OC_Init+0xda>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	2b10      	cmp	r3, #16
 800add2:	d010      	beq.n	800adf6 <HAL_TIM_OC_Init+0xda>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	2b20      	cmp	r3, #32
 800adda:	d00c      	beq.n	800adf6 <HAL_TIM_OC_Init+0xda>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	2b40      	cmp	r3, #64	; 0x40
 800ade2:	d008      	beq.n	800adf6 <HAL_TIM_OC_Init+0xda>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	2b60      	cmp	r3, #96	; 0x60
 800adea:	d004      	beq.n	800adf6 <HAL_TIM_OC_Init+0xda>
 800adec:	f240 2162 	movw	r1, #610	; 0x262
 800adf0:	482f      	ldr	r0, [pc, #188]	; (800aeb0 <HAL_TIM_OC_Init+0x194>)
 800adf2:	f7f6 f975 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00e      	beq.n	800ae1c <HAL_TIM_OC_Init+0x100>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae06:	d009      	beq.n	800ae1c <HAL_TIM_OC_Init+0x100>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae10:	d004      	beq.n	800ae1c <HAL_TIM_OC_Init+0x100>
 800ae12:	f240 2163 	movw	r1, #611	; 0x263
 800ae16:	4826      	ldr	r0, [pc, #152]	; (800aeb0 <HAL_TIM_OC_Init+0x194>)
 800ae18:	f7f6 f962 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d008      	beq.n	800ae36 <HAL_TIM_OC_Init+0x11a>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	2b80      	cmp	r3, #128	; 0x80
 800ae2a:	d004      	beq.n	800ae36 <HAL_TIM_OC_Init+0x11a>
 800ae2c:	f44f 7119 	mov.w	r1, #612	; 0x264
 800ae30:	481f      	ldr	r0, [pc, #124]	; (800aeb0 <HAL_TIM_OC_Init+0x194>)
 800ae32:	f7f6 f955 	bl	80010e0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <HAL_TIM_OC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7f6 fad0 	bl	80013f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f000 fc94 	bl	800b790 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	40000400 	.word	0x40000400
 800ae84:	40000800 	.word	0x40000800
 800ae88:	40000c00 	.word	0x40000c00
 800ae8c:	40001000 	.word	0x40001000
 800ae90:	40001400 	.word	0x40001400
 800ae94:	40010400 	.word	0x40010400
 800ae98:	40001800 	.word	0x40001800
 800ae9c:	40001c00 	.word	0x40001c00
 800aea0:	40002000 	.word	0x40002000
 800aea4:	40014000 	.word	0x40014000
 800aea8:	40014400 	.word	0x40014400
 800aeac:	40014800 	.word	0x40014800
 800aeb0:	08013eb0 	.word	0x08013eb0

0800aeb4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4aa0      	ldr	r2, [pc, #640]	; (800b144 <HAL_TIM_OC_Start_IT+0x290>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d117      	bne.n	800aef8 <HAL_TIM_OC_Start_IT+0x44>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80ae 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	f000 80aa 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b08      	cmp	r3, #8
 800aedc:	f000 80a6 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b0c      	cmp	r3, #12
 800aee4:	f000 80a2 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b10      	cmp	r3, #16
 800aeec:	f000 809e 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b14      	cmp	r3, #20
 800aef4:	f000 809a 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af00:	d10f      	bne.n	800af22 <HAL_TIM_OC_Start_IT+0x6e>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8091 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	f000 808d 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b08      	cmp	r3, #8
 800af16:	f000 8089 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b0c      	cmp	r3, #12
 800af1e:	f000 8085 	beq.w	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a88      	ldr	r2, [pc, #544]	; (800b148 <HAL_TIM_OC_Start_IT+0x294>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d10b      	bne.n	800af44 <HAL_TIM_OC_Start_IT+0x90>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d07c      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b04      	cmp	r3, #4
 800af36:	d079      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	d076      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b0c      	cmp	r3, #12
 800af42:	d073      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a80      	ldr	r2, [pc, #512]	; (800b14c <HAL_TIM_OC_Start_IT+0x298>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10b      	bne.n	800af66 <HAL_TIM_OC_Start_IT+0xb2>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d06b      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d068      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d065      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b0c      	cmp	r3, #12
 800af64:	d062      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a79      	ldr	r2, [pc, #484]	; (800b150 <HAL_TIM_OC_Start_IT+0x29c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d10b      	bne.n	800af88 <HAL_TIM_OC_Start_IT+0xd4>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d05a      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d057      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d054      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b0c      	cmp	r3, #12
 800af86:	d051      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a71      	ldr	r2, [pc, #452]	; (800b154 <HAL_TIM_OC_Start_IT+0x2a0>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d111      	bne.n	800afb6 <HAL_TIM_OC_Start_IT+0x102>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d049      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	d046      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d043      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b0c      	cmp	r3, #12
 800afa8:	d040      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b10      	cmp	r3, #16
 800afae:	d03d      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b14      	cmp	r3, #20
 800afb4:	d03a      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a67      	ldr	r2, [pc, #412]	; (800b158 <HAL_TIM_OC_Start_IT+0x2a4>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d105      	bne.n	800afcc <HAL_TIM_OC_Start_IT+0x118>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d032      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d02f      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a62      	ldr	r2, [pc, #392]	; (800b15c <HAL_TIM_OC_Start_IT+0x2a8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d102      	bne.n	800afdc <HAL_TIM_OC_Start_IT+0x128>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d027      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a5f      	ldr	r2, [pc, #380]	; (800b160 <HAL_TIM_OC_Start_IT+0x2ac>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d102      	bne.n	800afec <HAL_TIM_OC_Start_IT+0x138>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01f      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a5c      	ldr	r2, [pc, #368]	; (800b164 <HAL_TIM_OC_Start_IT+0x2b0>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d105      	bne.n	800b002 <HAL_TIM_OC_Start_IT+0x14e>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d017      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b04      	cmp	r3, #4
 800b000:	d014      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a58      	ldr	r2, [pc, #352]	; (800b168 <HAL_TIM_OC_Start_IT+0x2b4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d102      	bne.n	800b012 <HAL_TIM_OC_Start_IT+0x15e>
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00c      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a55      	ldr	r2, [pc, #340]	; (800b16c <HAL_TIM_OC_Start_IT+0x2b8>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d102      	bne.n	800b022 <HAL_TIM_OC_Start_IT+0x16e>
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <HAL_TIM_OC_Start_IT+0x178>
 800b022:	f240 3123 	movw	r1, #803	; 0x323
 800b026:	4852      	ldr	r0, [pc, #328]	; (800b170 <HAL_TIM_OC_Start_IT+0x2bc>)
 800b028:	f7f6 f85a 	bl	80010e0 <assert_failed>

  switch (Channel)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b0c      	cmp	r3, #12
 800b030:	d840      	bhi.n	800b0b4 <HAL_TIM_OC_Start_IT+0x200>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <HAL_TIM_OC_Start_IT+0x184>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b06d 	.word	0x0800b06d
 800b03c:	0800b0b5 	.word	0x0800b0b5
 800b040:	0800b0b5 	.word	0x0800b0b5
 800b044:	0800b0b5 	.word	0x0800b0b5
 800b048:	0800b07f 	.word	0x0800b07f
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b0b5 	.word	0x0800b0b5
 800b054:	0800b0b5 	.word	0x0800b0b5
 800b058:	0800b091 	.word	0x0800b091
 800b05c:	0800b0b5 	.word	0x0800b0b5
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b0b5 	.word	0x0800b0b5
 800b068:	0800b0a3 	.word	0x0800b0a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0202 	orr.w	r2, r2, #2
 800b07a:	60da      	str	r2, [r3, #12]
      break;
 800b07c:	e01b      	b.n	800b0b6 <HAL_TIM_OC_Start_IT+0x202>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0204 	orr.w	r2, r2, #4
 800b08c:	60da      	str	r2, [r3, #12]
      break;
 800b08e:	e012      	b.n	800b0b6 <HAL_TIM_OC_Start_IT+0x202>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0208 	orr.w	r2, r2, #8
 800b09e:	60da      	str	r2, [r3, #12]
      break;
 800b0a0:	e009      	b.n	800b0b6 <HAL_TIM_OC_Start_IT+0x202>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f042 0210 	orr.w	r2, r2, #16
 800b0b0:	60da      	str	r2, [r3, #12]
      break;
 800b0b2:	e000      	b.n	800b0b6 <HAL_TIM_OC_Start_IT+0x202>
    }

    default:
      break;
 800b0b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 ff58 	bl	800bf74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1e      	ldr	r2, [pc, #120]	; (800b144 <HAL_TIM_OC_Start_IT+0x290>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d013      	beq.n	800b0f6 <HAL_TIM_OC_Start_IT+0x242>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a20      	ldr	r2, [pc, #128]	; (800b154 <HAL_TIM_OC_Start_IT+0x2a0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d00e      	beq.n	800b0f6 <HAL_TIM_OC_Start_IT+0x242>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a21      	ldr	r2, [pc, #132]	; (800b164 <HAL_TIM_OC_Start_IT+0x2b0>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d009      	beq.n	800b0f6 <HAL_TIM_OC_Start_IT+0x242>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a20      	ldr	r2, [pc, #128]	; (800b168 <HAL_TIM_OC_Start_IT+0x2b4>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d004      	beq.n	800b0f6 <HAL_TIM_OC_Start_IT+0x242>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a1e      	ldr	r2, [pc, #120]	; (800b16c <HAL_TIM_OC_Start_IT+0x2b8>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d101      	bne.n	800b0fa <HAL_TIM_OC_Start_IT+0x246>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <HAL_TIM_OC_Start_IT+0x248>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d007      	beq.n	800b110 <HAL_TIM_OC_Start_IT+0x25c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b10e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	4b17      	ldr	r3, [pc, #92]	; (800b174 <HAL_TIM_OC_Start_IT+0x2c0>)
 800b118:	4013      	ands	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b06      	cmp	r3, #6
 800b120:	d00b      	beq.n	800b13a <HAL_TIM_OC_Start_IT+0x286>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b128:	d007      	beq.n	800b13a <HAL_TIM_OC_Start_IT+0x286>
  {
    __HAL_TIM_ENABLE(htim);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f042 0201 	orr.w	r2, r2, #1
 800b138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	40010000 	.word	0x40010000
 800b148:	40000400 	.word	0x40000400
 800b14c:	40000800 	.word	0x40000800
 800b150:	40000c00 	.word	0x40000c00
 800b154:	40010400 	.word	0x40010400
 800b158:	40001800 	.word	0x40001800
 800b15c:	40001c00 	.word	0x40001c00
 800b160:	40002000 	.word	0x40002000
 800b164:	40014000 	.word	0x40014000
 800b168:	40014400 	.word	0x40014400
 800b16c:	40014800 	.word	0x40014800
 800b170:	08013eb0 	.word	0x08013eb0
 800b174:	00010007 	.word	0x00010007

0800b178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d122      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d11b      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0202 	mvn.w	r2, #2
 800b1a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	f003 0303 	and.w	r3, r3, #3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 faca 	bl	800b754 <HAL_TIM_IC_CaptureCallback>
 800b1c0:	e005      	b.n	800b1ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fabc 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 facd 	bl	800b768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	f003 0304 	and.w	r3, r3, #4
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d122      	bne.n	800b228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0304 	and.w	r3, r3, #4
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d11b      	bne.n	800b228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f06f 0204 	mvn.w	r2, #4
 800b1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 faa0 	bl	800b754 <HAL_TIM_IC_CaptureCallback>
 800b214:	e005      	b.n	800b222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fa92 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 faa3 	bl	800b768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b08      	cmp	r3, #8
 800b234:	d122      	bne.n	800b27c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b08      	cmp	r3, #8
 800b242:	d11b      	bne.n	800b27c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f06f 0208 	mvn.w	r2, #8
 800b24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2204      	movs	r2, #4
 800b252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	f003 0303 	and.w	r3, r3, #3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa76 	bl	800b754 <HAL_TIM_IC_CaptureCallback>
 800b268:	e005      	b.n	800b276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fa68 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fa79 	bl	800b768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	f003 0310 	and.w	r3, r3, #16
 800b286:	2b10      	cmp	r3, #16
 800b288:	d122      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b10      	cmp	r3, #16
 800b296:	d11b      	bne.n	800b2d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0210 	mvn.w	r2, #16
 800b2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa4c 	bl	800b754 <HAL_TIM_IC_CaptureCallback>
 800b2bc:	e005      	b.n	800b2ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa3e 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa4f 	bl	800b768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d10e      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d107      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f06f 0201 	mvn.w	r2, #1
 800b2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f004 fb98 	bl	800fa2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b306:	2b80      	cmp	r3, #128	; 0x80
 800b308:	d10e      	bne.n	800b328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b314:	2b80      	cmp	r3, #128	; 0x80
 800b316:	d107      	bne.n	800b328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 ffd8 	bl	800c2d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b336:	d10e      	bne.n	800b356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d107      	bne.n	800b356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 ffcb 	bl	800c2ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b360:	2b40      	cmp	r3, #64	; 0x40
 800b362:	d10e      	bne.n	800b382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d107      	bne.n	800b382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f9fd 	bl	800b77c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	f003 0320 	and.w	r3, r3, #32
 800b38c:	2b20      	cmp	r3, #32
 800b38e:	d10e      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d107      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f06f 0220 	mvn.w	r2, #32
 800b3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 ff8b 	bl	800c2c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d016      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d013      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b08      	cmp	r3, #8
 800b3d4:	d010      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b0c      	cmp	r3, #12
 800b3da:	d00d      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b10      	cmp	r3, #16
 800b3e0:	d00a      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b14      	cmp	r3, #20
 800b3e6:	d007      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b3c      	cmp	r3, #60	; 0x3c
 800b3ec:	d004      	beq.n	800b3f8 <HAL_TIM_OC_ConfigChannel+0x40>
 800b3ee:	f640 5155 	movw	r1, #3413	; 0xd55
 800b3f2:	488e      	ldr	r0, [pc, #568]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b3f4:	f7f5 fe74 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d022      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b10      	cmp	r3, #16
 800b406:	d01e      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d01a      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b30      	cmp	r3, #48	; 0x30
 800b416:	d016      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b50      	cmp	r3, #80	; 0x50
 800b41e:	d012      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d00e      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b430:	d009      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a7e      	ldr	r2, [pc, #504]	; (800b630 <HAL_TIM_OC_ConfigChannel+0x278>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d004      	beq.n	800b446 <HAL_TIM_OC_ConfigChannel+0x8e>
 800b43c:	f640 5156 	movw	r1, #3414	; 0xd56
 800b440:	487a      	ldr	r0, [pc, #488]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b442:	f7f5 fe4d 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d008      	beq.n	800b460 <HAL_TIM_OC_ConfigChannel+0xa8>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d004      	beq.n	800b460 <HAL_TIM_OC_ConfigChannel+0xa8>
 800b456:	f640 5157 	movw	r1, #3415	; 0xd57
 800b45a:	4874      	ldr	r0, [pc, #464]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b45c:	f7f5 fe40 	bl	80010e0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b466:	2b01      	cmp	r3, #1
 800b468:	d101      	bne.n	800b46e <HAL_TIM_OC_ConfigChannel+0xb6>
 800b46a:	2302      	movs	r3, #2
 800b46c:	e158      	b.n	800b720 <HAL_TIM_OC_ConfigChannel+0x368>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2202      	movs	r2, #2
 800b47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b14      	cmp	r3, #20
 800b482:	f200 8143 	bhi.w	800b70c <HAL_TIM_OC_ConfigChannel+0x354>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <HAL_TIM_OC_ConfigChannel+0xd4>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b4e1 	.word	0x0800b4e1
 800b490:	0800b70d 	.word	0x0800b70d
 800b494:	0800b70d 	.word	0x0800b70d
 800b498:	0800b70d 	.word	0x0800b70d
 800b49c:	0800b571 	.word	0x0800b571
 800b4a0:	0800b70d 	.word	0x0800b70d
 800b4a4:	0800b70d 	.word	0x0800b70d
 800b4a8:	0800b70d 	.word	0x0800b70d
 800b4ac:	0800b5d9 	.word	0x0800b5d9
 800b4b0:	0800b70d 	.word	0x0800b70d
 800b4b4:	0800b70d 	.word	0x0800b70d
 800b4b8:	0800b70d 	.word	0x0800b70d
 800b4bc:	0800b661 	.word	0x0800b661
 800b4c0:	0800b70d 	.word	0x0800b70d
 800b4c4:	0800b70d 	.word	0x0800b70d
 800b4c8:	0800b70d 	.word	0x0800b70d
 800b4cc:	0800b6b5 	.word	0x0800b6b5
 800b4d0:	0800b70d 	.word	0x0800b70d
 800b4d4:	0800b70d 	.word	0x0800b70d
 800b4d8:	0800b70d 	.word	0x0800b70d
 800b4dc:	0800b6e1 	.word	0x0800b6e1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a53      	ldr	r2, [pc, #332]	; (800b634 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d03b      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4f2:	d036      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a4f      	ldr	r2, [pc, #316]	; (800b638 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d031      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a4e      	ldr	r2, [pc, #312]	; (800b63c <HAL_TIM_OC_ConfigChannel+0x284>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d02c      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a4c      	ldr	r2, [pc, #304]	; (800b640 <HAL_TIM_OC_ConfigChannel+0x288>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d027      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a4b      	ldr	r2, [pc, #300]	; (800b644 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d022      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a49      	ldr	r2, [pc, #292]	; (800b648 <HAL_TIM_OC_ConfigChannel+0x290>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d01d      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a48      	ldr	r2, [pc, #288]	; (800b64c <HAL_TIM_OC_ConfigChannel+0x294>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d018      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a46      	ldr	r2, [pc, #280]	; (800b650 <HAL_TIM_OC_ConfigChannel+0x298>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d013      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a45      	ldr	r2, [pc, #276]	; (800b654 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d00e      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a43      	ldr	r2, [pc, #268]	; (800b658 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d009      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a42      	ldr	r2, [pc, #264]	; (800b65c <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d004      	beq.n	800b562 <HAL_TIM_OC_ConfigChannel+0x1aa>
 800b558:	f640 5163 	movw	r1, #3427	; 0xd63
 800b55c:	4833      	ldr	r0, [pc, #204]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b55e:	f7f5 fdbf 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 f9ab 	bl	800b8c4 <TIM_OC1_SetConfig>
      break;
 800b56e:	e0ce      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a2f      	ldr	r2, [pc, #188]	; (800b634 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d027      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b582:	d022      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a2b      	ldr	r2, [pc, #172]	; (800b638 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d01d      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a2a      	ldr	r2, [pc, #168]	; (800b63c <HAL_TIM_OC_ConfigChannel+0x284>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d018      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a28      	ldr	r2, [pc, #160]	; (800b640 <HAL_TIM_OC_ConfigChannel+0x288>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d013      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a27      	ldr	r2, [pc, #156]	; (800b644 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d00e      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a25      	ldr	r2, [pc, #148]	; (800b648 <HAL_TIM_OC_ConfigChannel+0x290>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d009      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a26      	ldr	r2, [pc, #152]	; (800b654 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d004      	beq.n	800b5ca <HAL_TIM_OC_ConfigChannel+0x212>
 800b5c0:	f640 516d 	movw	r1, #3437	; 0xd6d
 800b5c4:	4819      	ldr	r0, [pc, #100]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b5c6:	f7f5 fd8b 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fa31 	bl	800ba38 <TIM_OC2_SetConfig>
      break;
 800b5d6:	e09a      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a15      	ldr	r2, [pc, #84]	; (800b634 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d01d      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ea:	d018      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a11      	ldr	r2, [pc, #68]	; (800b638 <HAL_TIM_OC_ConfigChannel+0x280>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d013      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a10      	ldr	r2, [pc, #64]	; (800b63c <HAL_TIM_OC_ConfigChannel+0x284>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00e      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a0e      	ldr	r2, [pc, #56]	; (800b640 <HAL_TIM_OC_ConfigChannel+0x288>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d009      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a0d      	ldr	r2, [pc, #52]	; (800b644 <HAL_TIM_OC_ConfigChannel+0x28c>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d004      	beq.n	800b61e <HAL_TIM_OC_ConfigChannel+0x266>
 800b614:	f640 5177 	movw	r1, #3447	; 0xd77
 800b618:	4804      	ldr	r0, [pc, #16]	; (800b62c <HAL_TIM_OC_ConfigChannel+0x274>)
 800b61a:	f7f5 fd61 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fab9 	bl	800bb9c <TIM_OC3_SetConfig>
      break;
 800b62a:	e070      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
 800b62c:	08013eb0 	.word	0x08013eb0
 800b630:	00010010 	.word	0x00010010
 800b634:	40010000 	.word	0x40010000
 800b638:	40000400 	.word	0x40000400
 800b63c:	40000800 	.word	0x40000800
 800b640:	40000c00 	.word	0x40000c00
 800b644:	40010400 	.word	0x40010400
 800b648:	40001800 	.word	0x40001800
 800b64c:	40001c00 	.word	0x40001c00
 800b650:	40002000 	.word	0x40002000
 800b654:	40014000 	.word	0x40014000
 800b658:	40014400 	.word	0x40014400
 800b65c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a30      	ldr	r2, [pc, #192]	; (800b728 <HAL_TIM_OC_ConfigChannel+0x370>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d01d      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b672:	d018      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a2c      	ldr	r2, [pc, #176]	; (800b72c <HAL_TIM_OC_ConfigChannel+0x374>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d013      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a2b      	ldr	r2, [pc, #172]	; (800b730 <HAL_TIM_OC_ConfigChannel+0x378>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00e      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a29      	ldr	r2, [pc, #164]	; (800b734 <HAL_TIM_OC_ConfigChannel+0x37c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d009      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a28      	ldr	r2, [pc, #160]	; (800b738 <HAL_TIM_OC_ConfigChannel+0x380>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d004      	beq.n	800b6a6 <HAL_TIM_OC_ConfigChannel+0x2ee>
 800b69c:	f640 5181 	movw	r1, #3457	; 0xd81
 800b6a0:	4826      	ldr	r0, [pc, #152]	; (800b73c <HAL_TIM_OC_ConfigChannel+0x384>)
 800b6a2:	f7f5 fd1d 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fb25 	bl	800bcfc <TIM_OC4_SetConfig>
      break;
 800b6b2:	e02c      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a1b      	ldr	r2, [pc, #108]	; (800b728 <HAL_TIM_OC_ConfigChannel+0x370>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d009      	beq.n	800b6d2 <HAL_TIM_OC_ConfigChannel+0x31a>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <HAL_TIM_OC_ConfigChannel+0x380>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d004      	beq.n	800b6d2 <HAL_TIM_OC_ConfigChannel+0x31a>
 800b6c8:	f640 518b 	movw	r1, #3467	; 0xd8b
 800b6cc:	481b      	ldr	r0, [pc, #108]	; (800b73c <HAL_TIM_OC_ConfigChannel+0x384>)
 800b6ce:	f7f5 fd07 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68b9      	ldr	r1, [r7, #8]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fb85 	bl	800bde8 <TIM_OC5_SetConfig>
      break;
 800b6de:	e016      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a10      	ldr	r2, [pc, #64]	; (800b728 <HAL_TIM_OC_ConfigChannel+0x370>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d009      	beq.n	800b6fe <HAL_TIM_OC_ConfigChannel+0x346>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a12      	ldr	r2, [pc, #72]	; (800b738 <HAL_TIM_OC_ConfigChannel+0x380>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d004      	beq.n	800b6fe <HAL_TIM_OC_ConfigChannel+0x346>
 800b6f4:	f640 5195 	movw	r1, #3477	; 0xd95
 800b6f8:	4810      	ldr	r0, [pc, #64]	; (800b73c <HAL_TIM_OC_ConfigChannel+0x384>)
 800b6fa:	f7f5 fcf1 	bl	80010e0 <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68b9      	ldr	r1, [r7, #8]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fbd1 	bl	800beac <TIM_OC6_SetConfig>
      break;
 800b70a:	e000      	b.n	800b70e <HAL_TIM_OC_ConfigChannel+0x356>
    }

    default:
      break;
 800b70c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	40010000 	.word	0x40010000
 800b72c:	40000400 	.word	0x40000400
 800b730:	40000800 	.word	0x40000800
 800b734:	40000c00 	.word	0x40000c00
 800b738:	40010400 	.word	0x40010400
 800b73c:	08013eb0 	.word	0x08013eb0

0800b740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a40      	ldr	r2, [pc, #256]	; (800b8a4 <TIM_Base_SetConfig+0x114>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d013      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ae:	d00f      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a3d      	ldr	r2, [pc, #244]	; (800b8a8 <TIM_Base_SetConfig+0x118>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d00b      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a3c      	ldr	r2, [pc, #240]	; (800b8ac <TIM_Base_SetConfig+0x11c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d007      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a3b      	ldr	r2, [pc, #236]	; (800b8b0 <TIM_Base_SetConfig+0x120>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_Base_SetConfig+0x40>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a3a      	ldr	r2, [pc, #232]	; (800b8b4 <TIM_Base_SetConfig+0x124>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d108      	bne.n	800b7e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a2f      	ldr	r2, [pc, #188]	; (800b8a4 <TIM_Base_SetConfig+0x114>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d01f      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7f0:	d01b      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a2c      	ldr	r2, [pc, #176]	; (800b8a8 <TIM_Base_SetConfig+0x118>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d017      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a2b      	ldr	r2, [pc, #172]	; (800b8ac <TIM_Base_SetConfig+0x11c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d013      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a2a      	ldr	r2, [pc, #168]	; (800b8b0 <TIM_Base_SetConfig+0x120>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00f      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a29      	ldr	r2, [pc, #164]	; (800b8b4 <TIM_Base_SetConfig+0x124>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00b      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a28      	ldr	r2, [pc, #160]	; (800b8b8 <TIM_Base_SetConfig+0x128>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d007      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a27      	ldr	r2, [pc, #156]	; (800b8bc <TIM_Base_SetConfig+0x12c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d003      	beq.n	800b82a <TIM_Base_SetConfig+0x9a>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a26      	ldr	r2, [pc, #152]	; (800b8c0 <TIM_Base_SetConfig+0x130>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d108      	bne.n	800b83c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a10      	ldr	r2, [pc, #64]	; (800b8a4 <TIM_Base_SetConfig+0x114>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00f      	beq.n	800b888 <TIM_Base_SetConfig+0xf8>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a12      	ldr	r2, [pc, #72]	; (800b8b4 <TIM_Base_SetConfig+0x124>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00b      	beq.n	800b888 <TIM_Base_SetConfig+0xf8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a11      	ldr	r2, [pc, #68]	; (800b8b8 <TIM_Base_SetConfig+0x128>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d007      	beq.n	800b888 <TIM_Base_SetConfig+0xf8>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a10      	ldr	r2, [pc, #64]	; (800b8bc <TIM_Base_SetConfig+0x12c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d003      	beq.n	800b888 <TIM_Base_SetConfig+0xf8>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a0f      	ldr	r2, [pc, #60]	; (800b8c0 <TIM_Base_SetConfig+0x130>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d103      	bne.n	800b890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	615a      	str	r2, [r3, #20]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40000400 	.word	0x40000400
 800b8ac:	40000800 	.word	0x40000800
 800b8b0:	40000c00 	.word	0x40000c00
 800b8b4:	40010400 	.word	0x40010400
 800b8b8:	40014000 	.word	0x40014000
 800b8bc:	40014400 	.word	0x40014400
 800b8c0:	40014800 	.word	0x40014800

0800b8c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	f023 0201 	bic.w	r2, r3, #1
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4b4b      	ldr	r3, [pc, #300]	; (800ba1c <TIM_OC1_SetConfig+0x158>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	4313      	orrs	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f023 0302 	bic.w	r3, r3, #2
 800b90c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	4313      	orrs	r3, r2
 800b916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a41      	ldr	r2, [pc, #260]	; (800ba20 <TIM_OC1_SetConfig+0x15c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00f      	beq.n	800b940 <TIM_OC1_SetConfig+0x7c>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a40      	ldr	r2, [pc, #256]	; (800ba24 <TIM_OC1_SetConfig+0x160>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00b      	beq.n	800b940 <TIM_OC1_SetConfig+0x7c>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a3f      	ldr	r2, [pc, #252]	; (800ba28 <TIM_OC1_SetConfig+0x164>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d007      	beq.n	800b940 <TIM_OC1_SetConfig+0x7c>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a3e      	ldr	r2, [pc, #248]	; (800ba2c <TIM_OC1_SetConfig+0x168>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d003      	beq.n	800b940 <TIM_OC1_SetConfig+0x7c>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a3d      	ldr	r2, [pc, #244]	; (800ba30 <TIM_OC1_SetConfig+0x16c>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d119      	bne.n	800b974 <TIM_OC1_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d008      	beq.n	800b95a <TIM_OC1_SetConfig+0x96>
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	2b08      	cmp	r3, #8
 800b94e:	d004      	beq.n	800b95a <TIM_OC1_SetConfig+0x96>
 800b950:	f641 0102 	movw	r1, #6146	; 0x1802
 800b954:	4837      	ldr	r0, [pc, #220]	; (800ba34 <TIM_OC1_SetConfig+0x170>)
 800b956:	f7f5 fbc3 	bl	80010e0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f023 0308 	bic.w	r3, r3, #8
 800b960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	4313      	orrs	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f023 0304 	bic.w	r3, r3, #4
 800b972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <TIM_OC1_SetConfig+0x15c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d00f      	beq.n	800b99c <TIM_OC1_SetConfig+0xd8>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a29      	ldr	r2, [pc, #164]	; (800ba24 <TIM_OC1_SetConfig+0x160>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00b      	beq.n	800b99c <TIM_OC1_SetConfig+0xd8>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a28      	ldr	r2, [pc, #160]	; (800ba28 <TIM_OC1_SetConfig+0x164>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d007      	beq.n	800b99c <TIM_OC1_SetConfig+0xd8>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a27      	ldr	r2, [pc, #156]	; (800ba2c <TIM_OC1_SetConfig+0x168>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d003      	beq.n	800b99c <TIM_OC1_SetConfig+0xd8>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a26      	ldr	r2, [pc, #152]	; (800ba30 <TIM_OC1_SetConfig+0x16c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d12d      	bne.n	800b9f8 <TIM_OC1_SetConfig+0x134>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9a4:	d008      	beq.n	800b9b8 <TIM_OC1_SetConfig+0xf4>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <TIM_OC1_SetConfig+0xf4>
 800b9ae:	f641 010f 	movw	r1, #6159	; 0x180f
 800b9b2:	4820      	ldr	r0, [pc, #128]	; (800ba34 <TIM_OC1_SetConfig+0x170>)
 800b9b4:	f7f5 fb94 	bl	80010e0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9c0:	d008      	beq.n	800b9d4 <TIM_OC1_SetConfig+0x110>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d004      	beq.n	800b9d4 <TIM_OC1_SetConfig+0x110>
 800b9ca:	f641 0110 	movw	r1, #6160	; 0x1810
 800b9ce:	4819      	ldr	r0, [pc, #100]	; (800ba34 <TIM_OC1_SetConfig+0x170>)
 800b9d0:	f7f5 fb86 	bl	80010e0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	621a      	str	r2, [r3, #32]
}
 800ba12:	bf00      	nop
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	fffeff8f 	.word	0xfffeff8f
 800ba20:	40010000 	.word	0x40010000
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40014400 	.word	0x40014400
 800ba30:	40014800 	.word	0x40014800
 800ba34:	08013eb0 	.word	0x08013eb0

0800ba38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	f023 0210 	bic.w	r2, r3, #16
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4b47      	ldr	r3, [pc, #284]	; (800bb80 <TIM_OC2_SetConfig+0x148>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	021b      	lsls	r3, r3, #8
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f023 0320 	bic.w	r3, r3, #32
 800ba82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a3c      	ldr	r2, [pc, #240]	; (800bb84 <TIM_OC2_SetConfig+0x14c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d003      	beq.n	800baa0 <TIM_OC2_SetConfig+0x68>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a3b      	ldr	r2, [pc, #236]	; (800bb88 <TIM_OC2_SetConfig+0x150>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d11a      	bne.n	800bad6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d008      	beq.n	800baba <TIM_OC2_SetConfig+0x82>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	2b08      	cmp	r3, #8
 800baae:	d004      	beq.n	800baba <TIM_OC2_SetConfig+0x82>
 800bab0:	f641 014d 	movw	r1, #6221	; 0x184d
 800bab4:	4835      	ldr	r0, [pc, #212]	; (800bb8c <TIM_OC2_SetConfig+0x154>)
 800bab6:	f7f5 fb13 	bl	80010e0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	011b      	lsls	r3, r3, #4
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	4313      	orrs	r3, r2
 800bacc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a2a      	ldr	r2, [pc, #168]	; (800bb84 <TIM_OC2_SetConfig+0x14c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d00f      	beq.n	800bafe <TIM_OC2_SetConfig+0xc6>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a29      	ldr	r2, [pc, #164]	; (800bb88 <TIM_OC2_SetConfig+0x150>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d00b      	beq.n	800bafe <TIM_OC2_SetConfig+0xc6>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a29      	ldr	r2, [pc, #164]	; (800bb90 <TIM_OC2_SetConfig+0x158>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d007      	beq.n	800bafe <TIM_OC2_SetConfig+0xc6>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a28      	ldr	r2, [pc, #160]	; (800bb94 <TIM_OC2_SetConfig+0x15c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d003      	beq.n	800bafe <TIM_OC2_SetConfig+0xc6>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a27      	ldr	r2, [pc, #156]	; (800bb98 <TIM_OC2_SetConfig+0x160>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d12f      	bne.n	800bb5e <TIM_OC2_SetConfig+0x126>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb06:	d008      	beq.n	800bb1a <TIM_OC2_SetConfig+0xe2>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <TIM_OC2_SetConfig+0xe2>
 800bb10:	f641 015b 	movw	r1, #6235	; 0x185b
 800bb14:	481d      	ldr	r0, [pc, #116]	; (800bb8c <TIM_OC2_SetConfig+0x154>)
 800bb16:	f7f5 fae3 	bl	80010e0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb22:	d008      	beq.n	800bb36 <TIM_OC2_SetConfig+0xfe>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d004      	beq.n	800bb36 <TIM_OC2_SetConfig+0xfe>
 800bb2c:	f641 015c 	movw	r1, #6236	; 0x185c
 800bb30:	4816      	ldr	r0, [pc, #88]	; (800bb8c <TIM_OC2_SetConfig+0x154>)
 800bb32:	f7f5 fad5 	bl	80010e0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	621a      	str	r2, [r3, #32]
}
 800bb78:	bf00      	nop
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	feff8fff 	.word	0xfeff8fff
 800bb84:	40010000 	.word	0x40010000
 800bb88:	40010400 	.word	0x40010400
 800bb8c:	08013eb0 	.word	0x08013eb0
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40014400 	.word	0x40014400
 800bb98:	40014800 	.word	0x40014800

0800bb9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 0303 	bic.w	r3, r3, #3
 800bbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	021b      	lsls	r3, r3, #8
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a3b      	ldr	r2, [pc, #236]	; (800bce4 <TIM_OC3_SetConfig+0x148>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d003      	beq.n	800bc02 <TIM_OC3_SetConfig+0x66>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a3a      	ldr	r2, [pc, #232]	; (800bce8 <TIM_OC3_SetConfig+0x14c>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d11a      	bne.n	800bc38 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <TIM_OC3_SetConfig+0x80>
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	2b08      	cmp	r3, #8
 800bc10:	d004      	beq.n	800bc1c <TIM_OC3_SetConfig+0x80>
 800bc12:	f641 0198 	movw	r1, #6296	; 0x1898
 800bc16:	4835      	ldr	r0, [pc, #212]	; (800bcec <TIM_OC3_SetConfig+0x150>)
 800bc18:	f7f5 fa62 	bl	80010e0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	021b      	lsls	r3, r3, #8
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a2a      	ldr	r2, [pc, #168]	; (800bce4 <TIM_OC3_SetConfig+0x148>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00f      	beq.n	800bc60 <TIM_OC3_SetConfig+0xc4>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a29      	ldr	r2, [pc, #164]	; (800bce8 <TIM_OC3_SetConfig+0x14c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00b      	beq.n	800bc60 <TIM_OC3_SetConfig+0xc4>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a29      	ldr	r2, [pc, #164]	; (800bcf0 <TIM_OC3_SetConfig+0x154>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d007      	beq.n	800bc60 <TIM_OC3_SetConfig+0xc4>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a28      	ldr	r2, [pc, #160]	; (800bcf4 <TIM_OC3_SetConfig+0x158>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <TIM_OC3_SetConfig+0xc4>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a27      	ldr	r2, [pc, #156]	; (800bcf8 <TIM_OC3_SetConfig+0x15c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d12f      	bne.n	800bcc0 <TIM_OC3_SetConfig+0x124>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc68:	d008      	beq.n	800bc7c <TIM_OC3_SetConfig+0xe0>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d004      	beq.n	800bc7c <TIM_OC3_SetConfig+0xe0>
 800bc72:	f641 01a5 	movw	r1, #6309	; 0x18a5
 800bc76:	481d      	ldr	r0, [pc, #116]	; (800bcec <TIM_OC3_SetConfig+0x150>)
 800bc78:	f7f5 fa32 	bl	80010e0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc84:	d008      	beq.n	800bc98 <TIM_OC3_SetConfig+0xfc>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <TIM_OC3_SetConfig+0xfc>
 800bc8e:	f641 01a6 	movw	r1, #6310	; 0x18a6
 800bc92:	4816      	ldr	r0, [pc, #88]	; (800bcec <TIM_OC3_SetConfig+0x150>)
 800bc94:	f7f5 fa24 	bl	80010e0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	011b      	lsls	r3, r3, #4
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	011b      	lsls	r3, r3, #4
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	621a      	str	r2, [r3, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	40010000 	.word	0x40010000
 800bce8:	40010400 	.word	0x40010400
 800bcec:	08013eb0 	.word	0x08013eb0
 800bcf0:	40014000 	.word	0x40014000
 800bcf4:	40014400 	.word	0x40014400
 800bcf8:	40014800 	.word	0x40014800

0800bcfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	021b      	lsls	r3, r3, #8
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	031b      	lsls	r3, r3, #12
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <TIM_OC4_SetConfig+0xd4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d00f      	beq.n	800bd7c <TIM_OC4_SetConfig+0x80>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a1d      	ldr	r2, [pc, #116]	; (800bdd4 <TIM_OC4_SetConfig+0xd8>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d00b      	beq.n	800bd7c <TIM_OC4_SetConfig+0x80>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a1c      	ldr	r2, [pc, #112]	; (800bdd8 <TIM_OC4_SetConfig+0xdc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d007      	beq.n	800bd7c <TIM_OC4_SetConfig+0x80>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a1b      	ldr	r2, [pc, #108]	; (800bddc <TIM_OC4_SetConfig+0xe0>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d003      	beq.n	800bd7c <TIM_OC4_SetConfig+0x80>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <TIM_OC4_SetConfig+0xe4>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d117      	bne.n	800bdac <TIM_OC4_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	695b      	ldr	r3, [r3, #20]
 800bd80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd84:	d008      	beq.n	800bd98 <TIM_OC4_SetConfig+0x9c>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d004      	beq.n	800bd98 <TIM_OC4_SetConfig+0x9c>
 800bd8e:	f641 01e4 	movw	r1, #6372	; 0x18e4
 800bd92:	4814      	ldr	r0, [pc, #80]	; (800bde4 <TIM_OC4_SetConfig+0xe8>)
 800bd94:	f7f5 f9a4 	bl	80010e0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	019b      	lsls	r3, r3, #6
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	40010000 	.word	0x40010000
 800bdd4:	40010400 	.word	0x40010400
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800
 800bde4:	08013eb0 	.word	0x08013eb0

0800bde8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	4313      	orrs	r3, r2
 800be34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a17      	ldr	r2, [pc, #92]	; (800be98 <TIM_OC5_SetConfig+0xb0>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d00f      	beq.n	800be5e <TIM_OC5_SetConfig+0x76>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a16      	ldr	r2, [pc, #88]	; (800be9c <TIM_OC5_SetConfig+0xb4>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d00b      	beq.n	800be5e <TIM_OC5_SetConfig+0x76>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a15      	ldr	r2, [pc, #84]	; (800bea0 <TIM_OC5_SetConfig+0xb8>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d007      	beq.n	800be5e <TIM_OC5_SetConfig+0x76>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a14      	ldr	r2, [pc, #80]	; (800bea4 <TIM_OC5_SetConfig+0xbc>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d003      	beq.n	800be5e <TIM_OC5_SetConfig+0x76>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a13      	ldr	r2, [pc, #76]	; (800bea8 <TIM_OC5_SetConfig+0xc0>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d109      	bne.n	800be72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	021b      	lsls	r3, r3, #8
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	4313      	orrs	r3, r2
 800be70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	621a      	str	r2, [r3, #32]
}
 800be8c:	bf00      	nop
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	40010000 	.word	0x40010000
 800be9c:	40010400 	.word	0x40010400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40014400 	.word	0x40014400
 800bea8:	40014800 	.word	0x40014800

0800beac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	021b      	lsls	r3, r3, #8
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800beee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	051b      	lsls	r3, r3, #20
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	4313      	orrs	r3, r2
 800befa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a18      	ldr	r2, [pc, #96]	; (800bf60 <TIM_OC6_SetConfig+0xb4>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d00f      	beq.n	800bf24 <TIM_OC6_SetConfig+0x78>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a17      	ldr	r2, [pc, #92]	; (800bf64 <TIM_OC6_SetConfig+0xb8>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d00b      	beq.n	800bf24 <TIM_OC6_SetConfig+0x78>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a16      	ldr	r2, [pc, #88]	; (800bf68 <TIM_OC6_SetConfig+0xbc>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d007      	beq.n	800bf24 <TIM_OC6_SetConfig+0x78>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a15      	ldr	r2, [pc, #84]	; (800bf6c <TIM_OC6_SetConfig+0xc0>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d003      	beq.n	800bf24 <TIM_OC6_SetConfig+0x78>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a14      	ldr	r2, [pc, #80]	; (800bf70 <TIM_OC6_SetConfig+0xc4>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d109      	bne.n	800bf38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	029b      	lsls	r3, r3, #10
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	621a      	str	r2, [r3, #32]
}
 800bf52:	bf00      	nop
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	40010000 	.word	0x40010000
 800bf64:	40010400 	.word	0x40010400
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800

0800bf74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4a35      	ldr	r2, [pc, #212]	; (800c058 <TIM_CCxChannelCmd+0xe4>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d030      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf8e:	d02c      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a32      	ldr	r2, [pc, #200]	; (800c05c <TIM_CCxChannelCmd+0xe8>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d028      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4a31      	ldr	r2, [pc, #196]	; (800c060 <TIM_CCxChannelCmd+0xec>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d024      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4a30      	ldr	r2, [pc, #192]	; (800c064 <TIM_CCxChannelCmd+0xf0>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d020      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4a2f      	ldr	r2, [pc, #188]	; (800c068 <TIM_CCxChannelCmd+0xf4>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d01c      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a2e      	ldr	r2, [pc, #184]	; (800c06c <TIM_CCxChannelCmd+0xf8>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d018      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a2d      	ldr	r2, [pc, #180]	; (800c070 <TIM_CCxChannelCmd+0xfc>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d014      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4a2c      	ldr	r2, [pc, #176]	; (800c074 <TIM_CCxChannelCmd+0x100>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d010      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4a2b      	ldr	r2, [pc, #172]	; (800c078 <TIM_CCxChannelCmd+0x104>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00c      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4a2a      	ldr	r2, [pc, #168]	; (800c07c <TIM_CCxChannelCmd+0x108>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d008      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4a29      	ldr	r2, [pc, #164]	; (800c080 <TIM_CCxChannelCmd+0x10c>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d004      	beq.n	800bfea <TIM_CCxChannelCmd+0x76>
 800bfe0:	f641 3143 	movw	r1, #6979	; 0x1b43
 800bfe4:	4827      	ldr	r0, [pc, #156]	; (800c084 <TIM_CCxChannelCmd+0x110>)
 800bfe6:	f7f5 f87b 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d016      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d013      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b08      	cmp	r3, #8
 800bffa:	d010      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b0c      	cmp	r3, #12
 800c000:	d00d      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b10      	cmp	r3, #16
 800c006:	d00a      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2b14      	cmp	r3, #20
 800c00c:	d007      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b3c      	cmp	r3, #60	; 0x3c
 800c012:	d004      	beq.n	800c01e <TIM_CCxChannelCmd+0xaa>
 800c014:	f641 3144 	movw	r1, #6980	; 0x1b44
 800c018:	481a      	ldr	r0, [pc, #104]	; (800c084 <TIM_CCxChannelCmd+0x110>)
 800c01a:	f7f5 f861 	bl	80010e0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	f003 031f 	and.w	r3, r3, #31
 800c024:	2201      	movs	r2, #1
 800c026:	fa02 f303 	lsl.w	r3, r2, r3
 800c02a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a1a      	ldr	r2, [r3, #32]
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	43db      	mvns	r3, r3
 800c034:	401a      	ands	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6a1a      	ldr	r2, [r3, #32]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f003 031f 	and.w	r3, r3, #31
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	fa01 f303 	lsl.w	r3, r1, r3
 800c04a:	431a      	orrs	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	621a      	str	r2, [r3, #32]
}
 800c050:	bf00      	nop
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	40010000 	.word	0x40010000
 800c05c:	40000400 	.word	0x40000400
 800c060:	40000800 	.word	0x40000800
 800c064:	40000c00 	.word	0x40000c00
 800c068:	40010400 	.word	0x40010400
 800c06c:	40001800 	.word	0x40001800
 800c070:	40001c00 	.word	0x40001c00
 800c074:	40002000 	.word	0x40002000
 800c078:	40014000 	.word	0x40014000
 800c07c:	40014400 	.word	0x40014400
 800c080:	40014800 	.word	0x40014800
 800c084:	08013eb0 	.word	0x08013eb0

0800c088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a83      	ldr	r2, [pc, #524]	; (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d027      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a4:	d022      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a7f      	ldr	r2, [pc, #508]	; (800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d01d      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a7d      	ldr	r2, [pc, #500]	; (800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d018      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a7c      	ldr	r2, [pc, #496]	; (800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d013      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a7a      	ldr	r2, [pc, #488]	; (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d00e      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a79      	ldr	r2, [pc, #484]	; (800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d009      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a77      	ldr	r2, [pc, #476]	; (800c2bc <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800c0e2:	f240 6167 	movw	r1, #1639	; 0x667
 800c0e6:	4876      	ldr	r0, [pc, #472]	; (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800c0e8:	f7f4 fffa 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d020      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b10      	cmp	r3, #16
 800c0fa:	d01c      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b20      	cmp	r3, #32
 800c102:	d018      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b30      	cmp	r3, #48	; 0x30
 800c10a:	d014      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b40      	cmp	r3, #64	; 0x40
 800c112:	d010      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b50      	cmp	r3, #80	; 0x50
 800c11a:	d00c      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b60      	cmp	r3, #96	; 0x60
 800c122:	d008      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b70      	cmp	r3, #112	; 0x70
 800c12a:	d004      	beq.n	800c136 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c12c:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800c130:	4863      	ldr	r0, [pc, #396]	; (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800c132:	f7f4 ffd5 	bl	80010e0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	2b80      	cmp	r3, #128	; 0x80
 800c13c:	d008      	beq.n	800c150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c146:	f240 6169 	movw	r1, #1641	; 0x669
 800c14a:	485d      	ldr	r0, [pc, #372]	; (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800c14c:	f7f4 ffc8 	bl	80010e0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e09e      	b.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x214>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2202      	movs	r2, #2
 800c16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a48      	ldr	r2, [pc, #288]	; (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d004      	beq.n	800c192 <HAL_TIMEx_MasterConfigSynchronization+0x10a>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a49      	ldr	r2, [pc, #292]	; (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d161      	bne.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d054      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1a2:	d04f      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ac:	d04a      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1b6:	d045      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1c0:	d040      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c1ca:	d03b      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1d4:	d036      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1de:	d031      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800c1e8:	d02c      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1f2:	d027      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800c1fc:	d022      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c206:	d01d      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800c210:	d018      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c21a:	d013      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800c224:	d00e      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800c22e:	d009      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800c238:	d004      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800c23a:	f240 617b 	movw	r1, #1659	; 0x67b
 800c23e:	4820      	ldr	r0, [pc, #128]	; (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800c240:	f7f4 ff4e 	bl	80010e0 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c24a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	4313      	orrs	r3, r2
 800c254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c25c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4313      	orrs	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c26e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	4313      	orrs	r3, r2
 800c278:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	40010000 	.word	0x40010000
 800c2a8:	40000400 	.word	0x40000400
 800c2ac:	40000800 	.word	0x40000800
 800c2b0:	40000c00 	.word	0x40000c00
 800c2b4:	40010400 	.word	0x40010400
 800c2b8:	40001800 	.word	0x40001800
 800c2bc:	40014000 	.word	0x40014000
 800c2c0:	08013ee8 	.word	0x08013ee8

0800c2c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e0ab      	b.n	800c46a <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d032      	beq.n	800c380 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a55      	ldr	r2, [pc, #340]	; (800c474 <HAL_UART_Init+0x174>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d05f      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a53      	ldr	r2, [pc, #332]	; (800c478 <HAL_UART_Init+0x178>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d05a      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a52      	ldr	r2, [pc, #328]	; (800c47c <HAL_UART_Init+0x17c>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d055      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a50      	ldr	r2, [pc, #320]	; (800c480 <HAL_UART_Init+0x180>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d050      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a4f      	ldr	r2, [pc, #316]	; (800c484 <HAL_UART_Init+0x184>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d04b      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a4d      	ldr	r2, [pc, #308]	; (800c488 <HAL_UART_Init+0x188>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d046      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a4c      	ldr	r2, [pc, #304]	; (800c48c <HAL_UART_Init+0x18c>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d041      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a4a      	ldr	r2, [pc, #296]	; (800c490 <HAL_UART_Init+0x190>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d03c      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a49      	ldr	r2, [pc, #292]	; (800c494 <HAL_UART_Init+0x194>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d037      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c374:	f44f 7199 	mov.w	r1, #306	; 0x132
 800c378:	4847      	ldr	r0, [pc, #284]	; (800c498 <HAL_UART_Init+0x198>)
 800c37a:	f7f4 feb1 	bl	80010e0 <assert_failed>
 800c37e:	e031      	b.n	800c3e4 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a3b      	ldr	r2, [pc, #236]	; (800c474 <HAL_UART_Init+0x174>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d02c      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a3a      	ldr	r2, [pc, #232]	; (800c478 <HAL_UART_Init+0x178>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d027      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a38      	ldr	r2, [pc, #224]	; (800c47c <HAL_UART_Init+0x17c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d022      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a37      	ldr	r2, [pc, #220]	; (800c480 <HAL_UART_Init+0x180>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d01d      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a35      	ldr	r2, [pc, #212]	; (800c484 <HAL_UART_Init+0x184>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d018      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a34      	ldr	r2, [pc, #208]	; (800c488 <HAL_UART_Init+0x188>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d013      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a32      	ldr	r2, [pc, #200]	; (800c48c <HAL_UART_Init+0x18c>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d00e      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a31      	ldr	r2, [pc, #196]	; (800c490 <HAL_UART_Init+0x190>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d009      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a2f      	ldr	r2, [pc, #188]	; (800c494 <HAL_UART_Init+0x194>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d004      	beq.n	800c3e4 <HAL_UART_Init+0xe4>
 800c3da:	f240 1137 	movw	r1, #311	; 0x137
 800c3de:	482e      	ldr	r0, [pc, #184]	; (800c498 <HAL_UART_Init+0x198>)
 800c3e0:	f7f4 fe7e 	bl	80010e0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7f5 f8aa 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2224      	movs	r2, #36	; 0x24
 800c400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f022 0201 	bic.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f8ef 	bl	800c5f8 <UART_SetConfig>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e022      	b.n	800c46a <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f002 fb3d 	bl	800eaac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c440:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689a      	ldr	r2, [r3, #8]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c450:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f042 0201 	orr.w	r2, r2, #1
 800c460:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f002 fc98 	bl	800ed98 <UART_CheckIdleState>
 800c468:	4603      	mov	r3, r0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	40011000 	.word	0x40011000
 800c478:	40004400 	.word	0x40004400
 800c47c:	40004800 	.word	0x40004800
 800c480:	40004c00 	.word	0x40004c00
 800c484:	40005000 	.word	0x40005000
 800c488:	40011400 	.word	0x40011400
 800c48c:	40007800 	.word	0x40007800
 800c490:	40007c00 	.word	0x40007c00
 800c494:	58000c00 	.word	0x58000c00
 800c498:	08013f24 	.word	0x08013f24

0800c49c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b2:	2b20      	cmp	r3, #32
 800c4b4:	f040 8083 	bne.w	800c5be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <HAL_UART_Transmit+0x28>
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e07b      	b.n	800c5c0 <HAL_UART_Transmit+0x124>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d101      	bne.n	800c4d6 <HAL_UART_Transmit+0x3a>
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e074      	b.n	800c5c0 <HAL_UART_Transmit+0x124>
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2221      	movs	r2, #33	; 0x21
 800c4ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c4ee:	f7f5 f945 	bl	800177c <HAL_GetTick>
 800c4f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	88fa      	ldrh	r2, [r7, #6]
 800c4f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	88fa      	ldrh	r2, [r7, #6]
 800c500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c50c:	d108      	bne.n	800c520 <HAL_UART_Transmit+0x84>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d104      	bne.n	800c520 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	61bb      	str	r3, [r7, #24]
 800c51e:	e003      	b.n	800c528 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c524:	2300      	movs	r3, #0
 800c526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c528:	e02c      	b.n	800c584 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2200      	movs	r2, #0
 800c532:	2180      	movs	r1, #128	; 0x80
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f002 fc77 	bl	800ee28 <UART_WaitOnFlagUntilTimeout>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e03d      	b.n	800c5c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10b      	bne.n	800c562 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	3302      	adds	r3, #2
 800c55e:	61bb      	str	r3, [r7, #24]
 800c560:	e007      	b.n	800c572 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	3301      	adds	r3, #1
 800c570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c578:	b29b      	uxth	r3, r3
 800c57a:	3b01      	subs	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1cc      	bne.n	800c52a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2200      	movs	r2, #0
 800c598:	2140      	movs	r1, #64	; 0x40
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f002 fc44 	bl	800ee28 <UART_WaitOnFlagUntilTimeout>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	e00a      	b.n	800c5c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e000      	b.n	800c5c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c5be:	2302      	movs	r3, #2
  }
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint32_t temp1, temp2;
  temp1 = huart->gState;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5de:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	4313      	orrs	r3, r2
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	0000      	movs	r0, r0
 800c5f4:	0000      	movs	r0, r0
	...

0800c5f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c5fc:	b08e      	sub	sp, #56	; 0x38
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c602:	2300      	movs	r3, #0
 800c604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4a17      	ldr	r2, [pc, #92]	; (800c674 <UART_SetConfig+0x7c>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d904      	bls.n	800c624 <UART_SetConfig+0x2c>
 800c61a:	f640 21eb 	movw	r1, #2795	; 0xaeb
 800c61e:	4816      	ldr	r0, [pc, #88]	; (800c678 <UART_SetConfig+0x80>)
 800c620:	f7f4 fd5e 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c62c:	d00d      	beq.n	800c64a <UART_SetConfig+0x52>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <UART_SetConfig+0x52>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c63e:	d004      	beq.n	800c64a <UART_SetConfig+0x52>
 800c640:	f640 21ec 	movw	r1, #2796	; 0xaec
 800c644:	480c      	ldr	r0, [pc, #48]	; (800c678 <UART_SetConfig+0x80>)
 800c646:	f7f4 fd4b 	bl	80010e0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a0b      	ldr	r2, [pc, #44]	; (800c67c <UART_SetConfig+0x84>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d115      	bne.n	800c680 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d037      	beq.n	800c6cc <UART_SetConfig+0xd4>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c664:	d032      	beq.n	800c6cc <UART_SetConfig+0xd4>
 800c666:	f640 21ef 	movw	r1, #2799	; 0xaef
 800c66a:	4803      	ldr	r0, [pc, #12]	; (800c678 <UART_SetConfig+0x80>)
 800c66c:	f7f4 fd38 	bl	80010e0 <assert_failed>
 800c670:	e02c      	b.n	800c6cc <UART_SetConfig+0xd4>
 800c672:	bf00      	nop
 800c674:	00bebc20 	.word	0x00bebc20
 800c678:	08013f24 	.word	0x08013f24
 800c67c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c688:	d012      	beq.n	800c6b0 <UART_SetConfig+0xb8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00e      	beq.n	800c6b0 <UART_SetConfig+0xb8>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c69a:	d009      	beq.n	800c6b0 <UART_SetConfig+0xb8>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6a4:	d004      	beq.n	800c6b0 <UART_SetConfig+0xb8>
 800c6a6:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800c6aa:	48aa      	ldr	r0, [pc, #680]	; (800c954 <UART_SetConfig+0x35c>)
 800c6ac:	f7f4 fd18 	bl	80010e0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a1b      	ldr	r3, [r3, #32]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <UART_SetConfig+0xd4>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6c0:	d004      	beq.n	800c6cc <UART_SetConfig+0xd4>
 800c6c2:	f640 21f4 	movw	r1, #2804	; 0xaf4
 800c6c6:	48a3      	ldr	r0, [pc, #652]	; (800c954 <UART_SetConfig+0x35c>)
 800c6c8:	f7f4 fd0a 	bl	80010e0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00e      	beq.n	800c6f2 <UART_SetConfig+0xfa>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6dc:	d009      	beq.n	800c6f2 <UART_SetConfig+0xfa>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c6e6:	d004      	beq.n	800c6f2 <UART_SetConfig+0xfa>
 800c6e8:	f640 21f7 	movw	r1, #2807	; 0xaf7
 800c6ec:	4899      	ldr	r0, [pc, #612]	; (800c954 <UART_SetConfig+0x35c>)
 800c6ee:	f7f4 fcf7 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	f023 030c 	bic.w	r3, r3, #12
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d103      	bne.n	800c706 <UART_SetConfig+0x10e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d104      	bne.n	800c710 <UART_SetConfig+0x118>
 800c706:	f640 21f8 	movw	r1, #2808	; 0xaf8
 800c70a:	4892      	ldr	r0, [pc, #584]	; (800c954 <UART_SetConfig+0x35c>)
 800c70c:	f7f4 fce8 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d013      	beq.n	800c740 <UART_SetConfig+0x148>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c720:	d00e      	beq.n	800c740 <UART_SetConfig+0x148>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c72a:	d009      	beq.n	800c740 <UART_SetConfig+0x148>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c734:	d004      	beq.n	800c740 <UART_SetConfig+0x148>
 800c736:	f640 21f9 	movw	r1, #2809	; 0xaf9
 800c73a:	4886      	ldr	r0, [pc, #536]	; (800c954 <UART_SetConfig+0x35c>)
 800c73c:	f7f4 fcd0 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <UART_SetConfig+0x164>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c750:	d004      	beq.n	800c75c <UART_SetConfig+0x164>
 800c752:	f640 21fa 	movw	r1, #2810	; 0xafa
 800c756:	487f      	ldr	r0, [pc, #508]	; (800c954 <UART_SetConfig+0x35c>)
 800c758:	f7f4 fcc2 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	d030      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d02c      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c770:	2b02      	cmp	r3, #2
 800c772:	d028      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d024      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	2b04      	cmp	r3, #4
 800c782:	d020      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c788:	2b05      	cmp	r3, #5
 800c78a:	d01c      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c790:	2b06      	cmp	r3, #6
 800c792:	d018      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c798:	2b07      	cmp	r3, #7
 800c79a:	d014      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d010      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	2b09      	cmp	r3, #9
 800c7aa:	d00c      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	2b0a      	cmp	r3, #10
 800c7b2:	d008      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	2b0b      	cmp	r3, #11
 800c7ba:	d004      	beq.n	800c7c6 <UART_SetConfig+0x1ce>
 800c7bc:	f640 21fb 	movw	r1, #2811	; 0xafb
 800c7c0:	4864      	ldr	r0, [pc, #400]	; (800c954 <UART_SetConfig+0x35c>)
 800c7c2:	f7f4 fc8d 	bl	80010e0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	689a      	ldr	r2, [r3, #8]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	4b5a      	ldr	r3, [pc, #360]	; (800c958 <UART_SetConfig+0x360>)
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6812      	ldr	r2, [r2, #0]
 800c7f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7f8:	430b      	orrs	r3, r1
 800c7fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a4f      	ldr	r2, [pc, #316]	; (800c95c <UART_SetConfig+0x364>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d004      	beq.n	800c82c <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c828:	4313      	orrs	r3, r2
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	4b4b      	ldr	r3, [pc, #300]	; (800c960 <UART_SetConfig+0x368>)
 800c834:	4013      	ands	r3, r2
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	6812      	ldr	r2, [r2, #0]
 800c83a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c83c:	430b      	orrs	r3, r1
 800c83e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c846:	f023 010f 	bic.w	r1, r3, #15
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a42      	ldr	r2, [pc, #264]	; (800c964 <UART_SetConfig+0x36c>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	f040 8085 	bne.w	800c96c <UART_SetConfig+0x374>
 800c862:	4b41      	ldr	r3, [pc, #260]	; (800c968 <UART_SetConfig+0x370>)
 800c864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c86a:	2b28      	cmp	r3, #40	; 0x28
 800c86c:	d86c      	bhi.n	800c948 <UART_SetConfig+0x350>
 800c86e:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <UART_SetConfig+0x27c>)
 800c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c874:	0800c919 	.word	0x0800c919
 800c878:	0800c949 	.word	0x0800c949
 800c87c:	0800c949 	.word	0x0800c949
 800c880:	0800c949 	.word	0x0800c949
 800c884:	0800c949 	.word	0x0800c949
 800c888:	0800c949 	.word	0x0800c949
 800c88c:	0800c949 	.word	0x0800c949
 800c890:	0800c949 	.word	0x0800c949
 800c894:	0800c921 	.word	0x0800c921
 800c898:	0800c949 	.word	0x0800c949
 800c89c:	0800c949 	.word	0x0800c949
 800c8a0:	0800c949 	.word	0x0800c949
 800c8a4:	0800c949 	.word	0x0800c949
 800c8a8:	0800c949 	.word	0x0800c949
 800c8ac:	0800c949 	.word	0x0800c949
 800c8b0:	0800c949 	.word	0x0800c949
 800c8b4:	0800c929 	.word	0x0800c929
 800c8b8:	0800c949 	.word	0x0800c949
 800c8bc:	0800c949 	.word	0x0800c949
 800c8c0:	0800c949 	.word	0x0800c949
 800c8c4:	0800c949 	.word	0x0800c949
 800c8c8:	0800c949 	.word	0x0800c949
 800c8cc:	0800c949 	.word	0x0800c949
 800c8d0:	0800c949 	.word	0x0800c949
 800c8d4:	0800c931 	.word	0x0800c931
 800c8d8:	0800c949 	.word	0x0800c949
 800c8dc:	0800c949 	.word	0x0800c949
 800c8e0:	0800c949 	.word	0x0800c949
 800c8e4:	0800c949 	.word	0x0800c949
 800c8e8:	0800c949 	.word	0x0800c949
 800c8ec:	0800c949 	.word	0x0800c949
 800c8f0:	0800c949 	.word	0x0800c949
 800c8f4:	0800c939 	.word	0x0800c939
 800c8f8:	0800c949 	.word	0x0800c949
 800c8fc:	0800c949 	.word	0x0800c949
 800c900:	0800c949 	.word	0x0800c949
 800c904:	0800c949 	.word	0x0800c949
 800c908:	0800c949 	.word	0x0800c949
 800c90c:	0800c949 	.word	0x0800c949
 800c910:	0800c949 	.word	0x0800c949
 800c914:	0800c941 	.word	0x0800c941
 800c918:	2301      	movs	r3, #1
 800c91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91e:	e23b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c920:	2304      	movs	r3, #4
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e237      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c928:	2308      	movs	r3, #8
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e233      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c930:	2310      	movs	r3, #16
 800c932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c936:	e22f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c938:	2320      	movs	r3, #32
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e22b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c940:	2340      	movs	r3, #64	; 0x40
 800c942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c946:	e227      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94e:	bf00      	nop
 800c950:	e222      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c952:	bf00      	nop
 800c954:	08013f24 	.word	0x08013f24
 800c958:	cfff69f3 	.word	0xcfff69f3
 800c95c:	58000c00 	.word	0x58000c00
 800c960:	11fff4ff 	.word	0x11fff4ff
 800c964:	40011000 	.word	0x40011000
 800c968:	58024400 	.word	0x58024400
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4ac9      	ldr	r2, [pc, #804]	; (800cc98 <UART_SetConfig+0x6a0>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d131      	bne.n	800c9da <UART_SetConfig+0x3e2>
 800c976:	4bc9      	ldr	r3, [pc, #804]	; (800cc9c <UART_SetConfig+0x6a4>)
 800c978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c97a:	f003 0307 	and.w	r3, r3, #7
 800c97e:	2b05      	cmp	r3, #5
 800c980:	d826      	bhi.n	800c9d0 <UART_SetConfig+0x3d8>
 800c982:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <UART_SetConfig+0x390>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800c9a1 	.word	0x0800c9a1
 800c98c:	0800c9a9 	.word	0x0800c9a9
 800c990:	0800c9b1 	.word	0x0800c9b1
 800c994:	0800c9b9 	.word	0x0800c9b9
 800c998:	0800c9c1 	.word	0x0800c9c1
 800c99c:	0800c9c9 	.word	0x0800c9c9
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e1f7      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9a8:	2304      	movs	r3, #4
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e1f3      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9b0:	2308      	movs	r3, #8
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e1ef      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9b8:	2310      	movs	r3, #16
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e1eb      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9c0:	2320      	movs	r3, #32
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e1e7      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e1e3      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9d0:	2380      	movs	r3, #128	; 0x80
 800c9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d6:	bf00      	nop
 800c9d8:	e1de      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4ab0      	ldr	r2, [pc, #704]	; (800cca0 <UART_SetConfig+0x6a8>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d132      	bne.n	800ca4a <UART_SetConfig+0x452>
 800c9e4:	4bad      	ldr	r3, [pc, #692]	; (800cc9c <UART_SetConfig+0x6a4>)
 800c9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	2b05      	cmp	r3, #5
 800c9ee:	d827      	bhi.n	800ca40 <UART_SetConfig+0x448>
 800c9f0:	a201      	add	r2, pc, #4	; (adr r2, 800c9f8 <UART_SetConfig+0x400>)
 800c9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f6:	bf00      	nop
 800c9f8:	0800ca11 	.word	0x0800ca11
 800c9fc:	0800ca19 	.word	0x0800ca19
 800ca00:	0800ca21 	.word	0x0800ca21
 800ca04:	0800ca29 	.word	0x0800ca29
 800ca08:	0800ca31 	.word	0x0800ca31
 800ca0c:	0800ca39 	.word	0x0800ca39
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca16:	e1bf      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca18:	2304      	movs	r3, #4
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1e:	e1bb      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca20:	2308      	movs	r3, #8
 800ca22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca26:	e1b7      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2e:	e1b3      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca30:	2320      	movs	r3, #32
 800ca32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca36:	e1af      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca38:	2340      	movs	r3, #64	; 0x40
 800ca3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3e:	e1ab      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca40:	2380      	movs	r3, #128	; 0x80
 800ca42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca46:	bf00      	nop
 800ca48:	e1a6      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a95      	ldr	r2, [pc, #596]	; (800cca4 <UART_SetConfig+0x6ac>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d132      	bne.n	800caba <UART_SetConfig+0x4c2>
 800ca54:	4b91      	ldr	r3, [pc, #580]	; (800cc9c <UART_SetConfig+0x6a4>)
 800ca56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	2b05      	cmp	r3, #5
 800ca5e:	d827      	bhi.n	800cab0 <UART_SetConfig+0x4b8>
 800ca60:	a201      	add	r2, pc, #4	; (adr r2, 800ca68 <UART_SetConfig+0x470>)
 800ca62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca66:	bf00      	nop
 800ca68:	0800ca81 	.word	0x0800ca81
 800ca6c:	0800ca89 	.word	0x0800ca89
 800ca70:	0800ca91 	.word	0x0800ca91
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800caa1 	.word	0x0800caa1
 800ca7c:	0800caa9 	.word	0x0800caa9
 800ca80:	2300      	movs	r3, #0
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e187      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca88:	2304      	movs	r3, #4
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e183      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca90:	2308      	movs	r3, #8
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e17f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ca98:	2310      	movs	r3, #16
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e17b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800caa0:	2320      	movs	r3, #32
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e177      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caae:	e173      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cab0:	2380      	movs	r3, #128	; 0x80
 800cab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab6:	bf00      	nop
 800cab8:	e16e      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a7a      	ldr	r2, [pc, #488]	; (800cca8 <UART_SetConfig+0x6b0>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d132      	bne.n	800cb2a <UART_SetConfig+0x532>
 800cac4:	4b75      	ldr	r3, [pc, #468]	; (800cc9c <UART_SetConfig+0x6a4>)
 800cac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac8:	f003 0307 	and.w	r3, r3, #7
 800cacc:	2b05      	cmp	r3, #5
 800cace:	d827      	bhi.n	800cb20 <UART_SetConfig+0x528>
 800cad0:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x4e0>)
 800cad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad6:	bf00      	nop
 800cad8:	0800caf1 	.word	0x0800caf1
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb01 	.word	0x0800cb01
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb19 	.word	0x0800cb19
 800caf0:	2300      	movs	r3, #0
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf6:	e14f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800caf8:	2304      	movs	r3, #4
 800cafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafe:	e14b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb00:	2308      	movs	r3, #8
 800cb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb06:	e147      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb08:	2310      	movs	r3, #16
 800cb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0e:	e143      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb10:	2320      	movs	r3, #32
 800cb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb16:	e13f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1e:	e13b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb20:	2380      	movs	r3, #128	; 0x80
 800cb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb26:	bf00      	nop
 800cb28:	e136      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a5f      	ldr	r2, [pc, #380]	; (800ccac <UART_SetConfig+0x6b4>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d178      	bne.n	800cc26 <UART_SetConfig+0x62e>
 800cb34:	4b59      	ldr	r3, [pc, #356]	; (800cc9c <UART_SetConfig+0x6a4>)
 800cb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb3c:	2b28      	cmp	r3, #40	; 0x28
 800cb3e:	d86d      	bhi.n	800cc1c <UART_SetConfig+0x624>
 800cb40:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <UART_SetConfig+0x550>)
 800cb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb46:	bf00      	nop
 800cb48:	0800cbed 	.word	0x0800cbed
 800cb4c:	0800cc1d 	.word	0x0800cc1d
 800cb50:	0800cc1d 	.word	0x0800cc1d
 800cb54:	0800cc1d 	.word	0x0800cc1d
 800cb58:	0800cc1d 	.word	0x0800cc1d
 800cb5c:	0800cc1d 	.word	0x0800cc1d
 800cb60:	0800cc1d 	.word	0x0800cc1d
 800cb64:	0800cc1d 	.word	0x0800cc1d
 800cb68:	0800cbf5 	.word	0x0800cbf5
 800cb6c:	0800cc1d 	.word	0x0800cc1d
 800cb70:	0800cc1d 	.word	0x0800cc1d
 800cb74:	0800cc1d 	.word	0x0800cc1d
 800cb78:	0800cc1d 	.word	0x0800cc1d
 800cb7c:	0800cc1d 	.word	0x0800cc1d
 800cb80:	0800cc1d 	.word	0x0800cc1d
 800cb84:	0800cc1d 	.word	0x0800cc1d
 800cb88:	0800cbfd 	.word	0x0800cbfd
 800cb8c:	0800cc1d 	.word	0x0800cc1d
 800cb90:	0800cc1d 	.word	0x0800cc1d
 800cb94:	0800cc1d 	.word	0x0800cc1d
 800cb98:	0800cc1d 	.word	0x0800cc1d
 800cb9c:	0800cc1d 	.word	0x0800cc1d
 800cba0:	0800cc1d 	.word	0x0800cc1d
 800cba4:	0800cc1d 	.word	0x0800cc1d
 800cba8:	0800cc05 	.word	0x0800cc05
 800cbac:	0800cc1d 	.word	0x0800cc1d
 800cbb0:	0800cc1d 	.word	0x0800cc1d
 800cbb4:	0800cc1d 	.word	0x0800cc1d
 800cbb8:	0800cc1d 	.word	0x0800cc1d
 800cbbc:	0800cc1d 	.word	0x0800cc1d
 800cbc0:	0800cc1d 	.word	0x0800cc1d
 800cbc4:	0800cc1d 	.word	0x0800cc1d
 800cbc8:	0800cc0d 	.word	0x0800cc0d
 800cbcc:	0800cc1d 	.word	0x0800cc1d
 800cbd0:	0800cc1d 	.word	0x0800cc1d
 800cbd4:	0800cc1d 	.word	0x0800cc1d
 800cbd8:	0800cc1d 	.word	0x0800cc1d
 800cbdc:	0800cc1d 	.word	0x0800cc1d
 800cbe0:	0800cc1d 	.word	0x0800cc1d
 800cbe4:	0800cc1d 	.word	0x0800cc1d
 800cbe8:	0800cc15 	.word	0x0800cc15
 800cbec:	2301      	movs	r3, #1
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e0d1      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cbf4:	2304      	movs	r3, #4
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e0cd      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e0c9      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc04:	2310      	movs	r3, #16
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e0c5      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc12:	e0c1      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc14:	2340      	movs	r3, #64	; 0x40
 800cc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1a:	e0bd      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc1c:	2380      	movs	r3, #128	; 0x80
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc22:	bf00      	nop
 800cc24:	e0b8      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a21      	ldr	r2, [pc, #132]	; (800ccb0 <UART_SetConfig+0x6b8>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d141      	bne.n	800ccb4 <UART_SetConfig+0x6bc>
 800cc30:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <UART_SetConfig+0x6a4>)
 800cc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	d827      	bhi.n	800cc8c <UART_SetConfig+0x694>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <UART_SetConfig+0x64c>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cc5d 	.word	0x0800cc5d
 800cc48:	0800cc65 	.word	0x0800cc65
 800cc4c:	0800cc6d 	.word	0x0800cc6d
 800cc50:	0800cc75 	.word	0x0800cc75
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc85 	.word	0x0800cc85
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e099      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc64:	2304      	movs	r3, #4
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e095      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc6c:	2308      	movs	r3, #8
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e091      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc74:	2310      	movs	r3, #16
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e08d      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc7c:	2320      	movs	r3, #32
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e089      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc84:	2340      	movs	r3, #64	; 0x40
 800cc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8a:	e085      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc8c:	2380      	movs	r3, #128	; 0x80
 800cc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc92:	bf00      	nop
 800cc94:	e080      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cc96:	bf00      	nop
 800cc98:	40004400 	.word	0x40004400
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	40004800 	.word	0x40004800
 800cca4:	40004c00 	.word	0x40004c00
 800cca8:	40005000 	.word	0x40005000
 800ccac:	40011400 	.word	0x40011400
 800ccb0:	40007800 	.word	0x40007800
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a98      	ldr	r2, [pc, #608]	; (800cf1c <UART_SetConfig+0x924>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d131      	bne.n	800cd22 <UART_SetConfig+0x72a>
 800ccbe:	4b98      	ldr	r3, [pc, #608]	; (800cf20 <UART_SetConfig+0x928>)
 800ccc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b05      	cmp	r3, #5
 800ccc8:	d826      	bhi.n	800cd18 <UART_SetConfig+0x720>
 800ccca:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <UART_SetConfig+0x6d8>)
 800cccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd0:	0800cce9 	.word	0x0800cce9
 800ccd4:	0800ccf1 	.word	0x0800ccf1
 800ccd8:	0800ccf9 	.word	0x0800ccf9
 800ccdc:	0800cd01 	.word	0x0800cd01
 800cce0:	0800cd09 	.word	0x0800cd09
 800cce4:	0800cd11 	.word	0x0800cd11
 800cce8:	2300      	movs	r3, #0
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e053      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ccf0:	2304      	movs	r3, #4
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e04f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800ccf8:	2308      	movs	r3, #8
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e04b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd00:	2310      	movs	r3, #16
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e047      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd08:	2320      	movs	r3, #32
 800cd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0e:	e043      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd10:	2340      	movs	r3, #64	; 0x40
 800cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd16:	e03f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd18:	2380      	movs	r3, #128	; 0x80
 800cd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1e:	bf00      	nop
 800cd20:	e03a      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a7f      	ldr	r2, [pc, #508]	; (800cf24 <UART_SetConfig+0x92c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d132      	bne.n	800cd92 <UART_SetConfig+0x79a>
 800cd2c:	4b7c      	ldr	r3, [pc, #496]	; (800cf20 <UART_SetConfig+0x928>)
 800cd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd30:	f003 0307 	and.w	r3, r3, #7
 800cd34:	2b05      	cmp	r3, #5
 800cd36:	d827      	bhi.n	800cd88 <UART_SetConfig+0x790>
 800cd38:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <UART_SetConfig+0x748>)
 800cd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3e:	bf00      	nop
 800cd40:	0800cd59 	.word	0x0800cd59
 800cd44:	0800cd61 	.word	0x0800cd61
 800cd48:	0800cd69 	.word	0x0800cd69
 800cd4c:	0800cd71 	.word	0x0800cd71
 800cd50:	0800cd79 	.word	0x0800cd79
 800cd54:	0800cd81 	.word	0x0800cd81
 800cd58:	2302      	movs	r3, #2
 800cd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5e:	e01b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd60:	2304      	movs	r3, #4
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e017      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd68:	2308      	movs	r3, #8
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e013      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd70:	2310      	movs	r3, #16
 800cd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd76:	e00f      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd78:	2320      	movs	r3, #32
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e00b      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd80:	2340      	movs	r3, #64	; 0x40
 800cd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd86:	e007      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8e:	bf00      	nop
 800cd90:	e002      	b.n	800cd98 <UART_SetConfig+0x7a0>
 800cd92:	2380      	movs	r3, #128	; 0x80
 800cd94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a61      	ldr	r2, [pc, #388]	; (800cf24 <UART_SetConfig+0x92c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	f040 86f3 	bne.w	800db8a <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cda4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cda8:	2b08      	cmp	r3, #8
 800cdaa:	f000 80bd 	beq.w	800cf28 <UART_SetConfig+0x930>
 800cdae:	2b08      	cmp	r3, #8
 800cdb0:	dc04      	bgt.n	800cdbc <UART_SetConfig+0x7c4>
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d00c      	beq.n	800cdd0 <UART_SetConfig+0x7d8>
 800cdb6:	2b04      	cmp	r3, #4
 800cdb8:	d05b      	beq.n	800ce72 <UART_SetConfig+0x87a>
 800cdba:	e276      	b.n	800d2aa <UART_SetConfig+0xcb2>
 800cdbc:	2b20      	cmp	r3, #32
 800cdbe:	f000 81ad 	beq.w	800d11c <UART_SetConfig+0xb24>
 800cdc2:	2b40      	cmp	r3, #64	; 0x40
 800cdc4:	f000 821a 	beq.w	800d1fc <UART_SetConfig+0xc04>
 800cdc8:	2b10      	cmp	r3, #16
 800cdca:	f000 8101 	beq.w	800cfd0 <UART_SetConfig+0x9d8>
 800cdce:	e26c      	b.n	800d2aa <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cdd0:	f7fc ffea 	bl	8009da8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d044      	beq.n	800ce68 <UART_SetConfig+0x870>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d03e      	beq.n	800ce64 <UART_SetConfig+0x86c>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d038      	beq.n	800ce60 <UART_SetConfig+0x868>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d032      	beq.n	800ce5c <UART_SetConfig+0x864>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d02c      	beq.n	800ce58 <UART_SetConfig+0x860>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	2b05      	cmp	r3, #5
 800ce04:	d026      	beq.n	800ce54 <UART_SetConfig+0x85c>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	2b06      	cmp	r3, #6
 800ce0c:	d020      	beq.n	800ce50 <UART_SetConfig+0x858>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce12:	2b07      	cmp	r3, #7
 800ce14:	d01a      	beq.n	800ce4c <UART_SetConfig+0x854>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1a:	2b08      	cmp	r3, #8
 800ce1c:	d014      	beq.n	800ce48 <UART_SetConfig+0x850>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	2b09      	cmp	r3, #9
 800ce24:	d00e      	beq.n	800ce44 <UART_SetConfig+0x84c>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2a:	2b0a      	cmp	r3, #10
 800ce2c:	d008      	beq.n	800ce40 <UART_SetConfig+0x848>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce32:	2b0b      	cmp	r3, #11
 800ce34:	d102      	bne.n	800ce3c <UART_SetConfig+0x844>
 800ce36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce3a:	e016      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e014      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce40:	2380      	movs	r3, #128	; 0x80
 800ce42:	e012      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce44:	2340      	movs	r3, #64	; 0x40
 800ce46:	e010      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce48:	2320      	movs	r3, #32
 800ce4a:	e00e      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce4c:	2310      	movs	r3, #16
 800ce4e:	e00c      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce50:	230c      	movs	r3, #12
 800ce52:	e00a      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce54:	230a      	movs	r3, #10
 800ce56:	e008      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce58:	2308      	movs	r3, #8
 800ce5a:	e006      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce5c:	2306      	movs	r3, #6
 800ce5e:	e004      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce60:	2304      	movs	r3, #4
 800ce62:	e002      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce64:	2302      	movs	r3, #2
 800ce66:	e000      	b.n	800ce6a <UART_SetConfig+0x872>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce70:	e21f      	b.n	800d2b2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce72:	f107 0314 	add.w	r3, r7, #20
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fc ffac 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ce7c:	69ba      	ldr	r2, [r7, #24]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d044      	beq.n	800cf10 <UART_SetConfig+0x918>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d03e      	beq.n	800cf0c <UART_SetConfig+0x914>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d038      	beq.n	800cf08 <UART_SetConfig+0x910>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d032      	beq.n	800cf04 <UART_SetConfig+0x90c>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d02c      	beq.n	800cf00 <UART_SetConfig+0x908>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d026      	beq.n	800cefc <UART_SetConfig+0x904>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb2:	2b06      	cmp	r3, #6
 800ceb4:	d020      	beq.n	800cef8 <UART_SetConfig+0x900>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	d01a      	beq.n	800cef4 <UART_SetConfig+0x8fc>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	2b08      	cmp	r3, #8
 800cec4:	d014      	beq.n	800cef0 <UART_SetConfig+0x8f8>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	2b09      	cmp	r3, #9
 800cecc:	d00e      	beq.n	800ceec <UART_SetConfig+0x8f4>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	2b0a      	cmp	r3, #10
 800ced4:	d008      	beq.n	800cee8 <UART_SetConfig+0x8f0>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceda:	2b0b      	cmp	r3, #11
 800cedc:	d102      	bne.n	800cee4 <UART_SetConfig+0x8ec>
 800cede:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cee2:	e016      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e014      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cee8:	2380      	movs	r3, #128	; 0x80
 800ceea:	e012      	b.n	800cf12 <UART_SetConfig+0x91a>
 800ceec:	2340      	movs	r3, #64	; 0x40
 800ceee:	e010      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cef0:	2320      	movs	r3, #32
 800cef2:	e00e      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cef4:	2310      	movs	r3, #16
 800cef6:	e00c      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cef8:	230c      	movs	r3, #12
 800cefa:	e00a      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cefc:	230a      	movs	r3, #10
 800cefe:	e008      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cf00:	2308      	movs	r3, #8
 800cf02:	e006      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cf04:	2306      	movs	r3, #6
 800cf06:	e004      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	e002      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e000      	b.n	800cf12 <UART_SetConfig+0x91a>
 800cf10:	2301      	movs	r3, #1
 800cf12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf18:	e1cb      	b.n	800d2b2 <UART_SetConfig+0xcba>
 800cf1a:	bf00      	nop
 800cf1c:	40007c00 	.word	0x40007c00
 800cf20:	58024400 	.word	0x58024400
 800cf24:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf28:	f107 0308 	add.w	r3, r7, #8
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd f89d 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d044      	beq.n	800cfc6 <UART_SetConfig+0x9ce>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d03e      	beq.n	800cfc2 <UART_SetConfig+0x9ca>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d038      	beq.n	800cfbe <UART_SetConfig+0x9c6>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d032      	beq.n	800cfba <UART_SetConfig+0x9c2>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	2b04      	cmp	r3, #4
 800cf5a:	d02c      	beq.n	800cfb6 <UART_SetConfig+0x9be>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	2b05      	cmp	r3, #5
 800cf62:	d026      	beq.n	800cfb2 <UART_SetConfig+0x9ba>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	2b06      	cmp	r3, #6
 800cf6a:	d020      	beq.n	800cfae <UART_SetConfig+0x9b6>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	2b07      	cmp	r3, #7
 800cf72:	d01a      	beq.n	800cfaa <UART_SetConfig+0x9b2>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	2b08      	cmp	r3, #8
 800cf7a:	d014      	beq.n	800cfa6 <UART_SetConfig+0x9ae>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	2b09      	cmp	r3, #9
 800cf82:	d00e      	beq.n	800cfa2 <UART_SetConfig+0x9aa>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf88:	2b0a      	cmp	r3, #10
 800cf8a:	d008      	beq.n	800cf9e <UART_SetConfig+0x9a6>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	2b0b      	cmp	r3, #11
 800cf92:	d102      	bne.n	800cf9a <UART_SetConfig+0x9a2>
 800cf94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf98:	e016      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e014      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cf9e:	2380      	movs	r3, #128	; 0x80
 800cfa0:	e012      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfa2:	2340      	movs	r3, #64	; 0x40
 800cfa4:	e010      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfa6:	2320      	movs	r3, #32
 800cfa8:	e00e      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfaa:	2310      	movs	r3, #16
 800cfac:	e00c      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfae:	230c      	movs	r3, #12
 800cfb0:	e00a      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfb2:	230a      	movs	r3, #10
 800cfb4:	e008      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfb6:	2308      	movs	r3, #8
 800cfb8:	e006      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfba:	2306      	movs	r3, #6
 800cfbc:	e004      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfbe:	2304      	movs	r3, #4
 800cfc0:	e002      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	e000      	b.n	800cfc8 <UART_SetConfig+0x9d0>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cfce:	e170      	b.n	800d2b2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfd0:	4b79      	ldr	r3, [pc, #484]	; (800d1b8 <UART_SetConfig+0xbc0>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0320 	and.w	r3, r3, #32
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d054      	beq.n	800d086 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cfdc:	4b76      	ldr	r3, [pc, #472]	; (800d1b8 <UART_SetConfig+0xbc0>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	08db      	lsrs	r3, r3, #3
 800cfe2:	f003 0303 	and.w	r3, r3, #3
 800cfe6:	4a75      	ldr	r2, [pc, #468]	; (800d1bc <UART_SetConfig+0xbc4>)
 800cfe8:	40da      	lsrs	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d044      	beq.n	800d07c <UART_SetConfig+0xa84>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d03e      	beq.n	800d078 <UART_SetConfig+0xa80>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d038      	beq.n	800d074 <UART_SetConfig+0xa7c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	2b03      	cmp	r3, #3
 800d008:	d032      	beq.n	800d070 <UART_SetConfig+0xa78>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d02c      	beq.n	800d06c <UART_SetConfig+0xa74>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	2b05      	cmp	r3, #5
 800d018:	d026      	beq.n	800d068 <UART_SetConfig+0xa70>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	2b06      	cmp	r3, #6
 800d020:	d020      	beq.n	800d064 <UART_SetConfig+0xa6c>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	2b07      	cmp	r3, #7
 800d028:	d01a      	beq.n	800d060 <UART_SetConfig+0xa68>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	2b08      	cmp	r3, #8
 800d030:	d014      	beq.n	800d05c <UART_SetConfig+0xa64>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	2b09      	cmp	r3, #9
 800d038:	d00e      	beq.n	800d058 <UART_SetConfig+0xa60>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	2b0a      	cmp	r3, #10
 800d040:	d008      	beq.n	800d054 <UART_SetConfig+0xa5c>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	2b0b      	cmp	r3, #11
 800d048:	d102      	bne.n	800d050 <UART_SetConfig+0xa58>
 800d04a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d04e:	e016      	b.n	800d07e <UART_SetConfig+0xa86>
 800d050:	2301      	movs	r3, #1
 800d052:	e014      	b.n	800d07e <UART_SetConfig+0xa86>
 800d054:	2380      	movs	r3, #128	; 0x80
 800d056:	e012      	b.n	800d07e <UART_SetConfig+0xa86>
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	e010      	b.n	800d07e <UART_SetConfig+0xa86>
 800d05c:	2320      	movs	r3, #32
 800d05e:	e00e      	b.n	800d07e <UART_SetConfig+0xa86>
 800d060:	2310      	movs	r3, #16
 800d062:	e00c      	b.n	800d07e <UART_SetConfig+0xa86>
 800d064:	230c      	movs	r3, #12
 800d066:	e00a      	b.n	800d07e <UART_SetConfig+0xa86>
 800d068:	230a      	movs	r3, #10
 800d06a:	e008      	b.n	800d07e <UART_SetConfig+0xa86>
 800d06c:	2308      	movs	r3, #8
 800d06e:	e006      	b.n	800d07e <UART_SetConfig+0xa86>
 800d070:	2306      	movs	r3, #6
 800d072:	e004      	b.n	800d07e <UART_SetConfig+0xa86>
 800d074:	2304      	movs	r3, #4
 800d076:	e002      	b.n	800d07e <UART_SetConfig+0xa86>
 800d078:	2302      	movs	r3, #2
 800d07a:	e000      	b.n	800d07e <UART_SetConfig+0xa86>
 800d07c:	2301      	movs	r3, #1
 800d07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d082:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800d084:	e115      	b.n	800d2b2 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d043      	beq.n	800d116 <UART_SetConfig+0xb1e>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d092:	2b01      	cmp	r3, #1
 800d094:	d03d      	beq.n	800d112 <UART_SetConfig+0xb1a>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d037      	beq.n	800d10e <UART_SetConfig+0xb16>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d031      	beq.n	800d10a <UART_SetConfig+0xb12>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d02b      	beq.n	800d106 <UART_SetConfig+0xb0e>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b2:	2b05      	cmp	r3, #5
 800d0b4:	d025      	beq.n	800d102 <UART_SetConfig+0xb0a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	d01f      	beq.n	800d0fe <UART_SetConfig+0xb06>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	2b07      	cmp	r3, #7
 800d0c4:	d019      	beq.n	800d0fa <UART_SetConfig+0xb02>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ca:	2b08      	cmp	r3, #8
 800d0cc:	d013      	beq.n	800d0f6 <UART_SetConfig+0xafe>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	2b09      	cmp	r3, #9
 800d0d4:	d00d      	beq.n	800d0f2 <UART_SetConfig+0xafa>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	2b0a      	cmp	r3, #10
 800d0dc:	d007      	beq.n	800d0ee <UART_SetConfig+0xaf6>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e2:	2b0b      	cmp	r3, #11
 800d0e4:	d101      	bne.n	800d0ea <UART_SetConfig+0xaf2>
 800d0e6:	4b36      	ldr	r3, [pc, #216]	; (800d1c0 <UART_SetConfig+0xbc8>)
 800d0e8:	e016      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0ea:	4b34      	ldr	r3, [pc, #208]	; (800d1bc <UART_SetConfig+0xbc4>)
 800d0ec:	e014      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0ee:	4b35      	ldr	r3, [pc, #212]	; (800d1c4 <UART_SetConfig+0xbcc>)
 800d0f0:	e012      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0f2:	4b35      	ldr	r3, [pc, #212]	; (800d1c8 <UART_SetConfig+0xbd0>)
 800d0f4:	e010      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0f6:	4b35      	ldr	r3, [pc, #212]	; (800d1cc <UART_SetConfig+0xbd4>)
 800d0f8:	e00e      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0fa:	4b35      	ldr	r3, [pc, #212]	; (800d1d0 <UART_SetConfig+0xbd8>)
 800d0fc:	e00c      	b.n	800d118 <UART_SetConfig+0xb20>
 800d0fe:	4b35      	ldr	r3, [pc, #212]	; (800d1d4 <UART_SetConfig+0xbdc>)
 800d100:	e00a      	b.n	800d118 <UART_SetConfig+0xb20>
 800d102:	4b35      	ldr	r3, [pc, #212]	; (800d1d8 <UART_SetConfig+0xbe0>)
 800d104:	e008      	b.n	800d118 <UART_SetConfig+0xb20>
 800d106:	4b35      	ldr	r3, [pc, #212]	; (800d1dc <UART_SetConfig+0xbe4>)
 800d108:	e006      	b.n	800d118 <UART_SetConfig+0xb20>
 800d10a:	4b35      	ldr	r3, [pc, #212]	; (800d1e0 <UART_SetConfig+0xbe8>)
 800d10c:	e004      	b.n	800d118 <UART_SetConfig+0xb20>
 800d10e:	4b35      	ldr	r3, [pc, #212]	; (800d1e4 <UART_SetConfig+0xbec>)
 800d110:	e002      	b.n	800d118 <UART_SetConfig+0xb20>
 800d112:	4b35      	ldr	r3, [pc, #212]	; (800d1e8 <UART_SetConfig+0xbf0>)
 800d114:	e000      	b.n	800d118 <UART_SetConfig+0xb20>
 800d116:	4b29      	ldr	r3, [pc, #164]	; (800d1bc <UART_SetConfig+0xbc4>)
 800d118:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d11a:	e0ca      	b.n	800d2b2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d046      	beq.n	800d1b2 <UART_SetConfig+0xbba>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d040      	beq.n	800d1ae <UART_SetConfig+0xbb6>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2b02      	cmp	r3, #2
 800d132:	d03a      	beq.n	800d1aa <UART_SetConfig+0xbb2>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d034      	beq.n	800d1a6 <UART_SetConfig+0xbae>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d140:	2b04      	cmp	r3, #4
 800d142:	d02e      	beq.n	800d1a2 <UART_SetConfig+0xbaa>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d148:	2b05      	cmp	r3, #5
 800d14a:	d028      	beq.n	800d19e <UART_SetConfig+0xba6>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d150:	2b06      	cmp	r3, #6
 800d152:	d022      	beq.n	800d19a <UART_SetConfig+0xba2>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d158:	2b07      	cmp	r3, #7
 800d15a:	d01c      	beq.n	800d196 <UART_SetConfig+0xb9e>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	2b08      	cmp	r3, #8
 800d162:	d016      	beq.n	800d192 <UART_SetConfig+0xb9a>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	2b09      	cmp	r3, #9
 800d16a:	d00f      	beq.n	800d18c <UART_SetConfig+0xb94>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	2b0a      	cmp	r3, #10
 800d172:	d008      	beq.n	800d186 <UART_SetConfig+0xb8e>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	2b0b      	cmp	r3, #11
 800d17a:	d102      	bne.n	800d182 <UART_SetConfig+0xb8a>
 800d17c:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d180:	e018      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d182:	4b13      	ldr	r3, [pc, #76]	; (800d1d0 <UART_SetConfig+0xbd8>)
 800d184:	e016      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d186:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d18a:	e013      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d18c:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d190:	e010      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d192:	4b16      	ldr	r3, [pc, #88]	; (800d1ec <UART_SetConfig+0xbf4>)
 800d194:	e00e      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d196:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <UART_SetConfig+0xbc8>)
 800d198:	e00c      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d19a:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <UART_SetConfig+0xbf8>)
 800d19c:	e00a      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d19e:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <UART_SetConfig+0xbfc>)
 800d1a0:	e008      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d1a2:	4b08      	ldr	r3, [pc, #32]	; (800d1c4 <UART_SetConfig+0xbcc>)
 800d1a4:	e006      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <UART_SetConfig+0xc00>)
 800d1a8:	e004      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <UART_SetConfig+0xbd0>)
 800d1ac:	e002      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d1ae:	4b07      	ldr	r3, [pc, #28]	; (800d1cc <UART_SetConfig+0xbd4>)
 800d1b0:	e000      	b.n	800d1b4 <UART_SetConfig+0xbbc>
 800d1b2:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <UART_SetConfig+0xbd8>)
 800d1b4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d1b6:	e07c      	b.n	800d2b2 <UART_SetConfig+0xcba>
 800d1b8:	58024400 	.word	0x58024400
 800d1bc:	03d09000 	.word	0x03d09000
 800d1c0:	0003d090 	.word	0x0003d090
 800d1c4:	0007a120 	.word	0x0007a120
 800d1c8:	000f4240 	.word	0x000f4240
 800d1cc:	001e8480 	.word	0x001e8480
 800d1d0:	003d0900 	.word	0x003d0900
 800d1d4:	00516155 	.word	0x00516155
 800d1d8:	0061a800 	.word	0x0061a800
 800d1dc:	007a1200 	.word	0x007a1200
 800d1e0:	00a2c2aa 	.word	0x00a2c2aa
 800d1e4:	00f42400 	.word	0x00f42400
 800d1e8:	01e84800 	.word	0x01e84800
 800d1ec:	0001e848 	.word	0x0001e848
 800d1f0:	00051615 	.word	0x00051615
 800d1f4:	00061a80 	.word	0x00061a80
 800d1f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	d04e      	beq.n	800d2a2 <UART_SetConfig+0xcaa>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d047      	beq.n	800d29c <UART_SetConfig+0xca4>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d210:	2b02      	cmp	r3, #2
 800d212:	d040      	beq.n	800d296 <UART_SetConfig+0xc9e>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d039      	beq.n	800d290 <UART_SetConfig+0xc98>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d220:	2b04      	cmp	r3, #4
 800d222:	d032      	beq.n	800d28a <UART_SetConfig+0xc92>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d228:	2b05      	cmp	r3, #5
 800d22a:	d02b      	beq.n	800d284 <UART_SetConfig+0xc8c>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	2b06      	cmp	r3, #6
 800d232:	d024      	beq.n	800d27e <UART_SetConfig+0xc86>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d238:	2b07      	cmp	r3, #7
 800d23a:	d01d      	beq.n	800d278 <UART_SetConfig+0xc80>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b08      	cmp	r3, #8
 800d242:	d016      	beq.n	800d272 <UART_SetConfig+0xc7a>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	2b09      	cmp	r3, #9
 800d24a:	d00f      	beq.n	800d26c <UART_SetConfig+0xc74>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	2b0a      	cmp	r3, #10
 800d252:	d008      	beq.n	800d266 <UART_SetConfig+0xc6e>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d101      	bne.n	800d260 <UART_SetConfig+0xc68>
 800d25c:	2380      	movs	r3, #128	; 0x80
 800d25e:	e022      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d264:	e01f      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d26a:	e01c      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d270:	e019      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d276:	e016      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d27c:	e013      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d27e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d282:	e010      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d284:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d288:	e00d      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d28a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d28e:	e00a      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d290:	f241 5355 	movw	r3, #5461	; 0x1555
 800d294:	e007      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d29a:	e004      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d29c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d2a0:	e001      	b.n	800d2a6 <UART_SetConfig+0xcae>
 800d2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d2a8:	e003      	b.n	800d2b2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800d2b0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f001 83e4 	beq.w	800ea82 <UART_SetConfig+0x248a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d305      	bcc.n	800d2d6 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d904      	bls.n	800d2e0 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2dc:	f001 bbd1 	b.w	800ea82 <UART_SetConfig+0x248a>
      }
      else
      {
        switch (clocksource)
 800d2e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d2e4:	2b08      	cmp	r3, #8
 800d2e6:	f000 8153 	beq.w	800d590 <UART_SetConfig+0xf98>
 800d2ea:	2b08      	cmp	r3, #8
 800d2ec:	dc06      	bgt.n	800d2fc <UART_SetConfig+0xd04>
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d00f      	beq.n	800d312 <UART_SetConfig+0xd1a>
 800d2f2:	2b04      	cmp	r3, #4
 800d2f4:	f000 80ab 	beq.w	800d44e <UART_SetConfig+0xe56>
 800d2f8:	f000 bc30 	b.w	800db5c <UART_SetConfig+0x1564>
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	f000 832d 	beq.w	800d95c <UART_SetConfig+0x1364>
 800d302:	2b40      	cmp	r3, #64	; 0x40
 800d304:	f000 83a5 	beq.w	800da52 <UART_SetConfig+0x145a>
 800d308:	2b10      	cmp	r3, #16
 800d30a:	f000 81e2 	beq.w	800d6d2 <UART_SetConfig+0x10da>
 800d30e:	f000 bc25 	b.w	800db5c <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d312:	f7fc fd49 	bl	8009da8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d316:	4603      	mov	r3, r0
 800d318:	4618      	mov	r0, r3
 800d31a:	f04f 0100 	mov.w	r1, #0
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d322:	2b00      	cmp	r3, #0
 800d324:	d067      	beq.n	800d3f6 <UART_SetConfig+0xdfe>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d05e      	beq.n	800d3ec <UART_SetConfig+0xdf4>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	2b02      	cmp	r3, #2
 800d334:	d055      	beq.n	800d3e2 <UART_SetConfig+0xdea>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d04c      	beq.n	800d3d8 <UART_SetConfig+0xde0>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d342:	2b04      	cmp	r3, #4
 800d344:	d043      	beq.n	800d3ce <UART_SetConfig+0xdd6>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34a:	2b05      	cmp	r3, #5
 800d34c:	d03a      	beq.n	800d3c4 <UART_SetConfig+0xdcc>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	2b06      	cmp	r3, #6
 800d354:	d031      	beq.n	800d3ba <UART_SetConfig+0xdc2>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35a:	2b07      	cmp	r3, #7
 800d35c:	d028      	beq.n	800d3b0 <UART_SetConfig+0xdb8>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	2b08      	cmp	r3, #8
 800d364:	d01f      	beq.n	800d3a6 <UART_SetConfig+0xdae>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d016      	beq.n	800d39c <UART_SetConfig+0xda4>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	2b0a      	cmp	r3, #10
 800d374:	d00d      	beq.n	800d392 <UART_SetConfig+0xd9a>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	2b0b      	cmp	r3, #11
 800d37c:	d104      	bne.n	800d388 <UART_SetConfig+0xd90>
 800d37e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d382:	f04f 0400 	mov.w	r4, #0
 800d386:	e03a      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d388:	f04f 0301 	mov.w	r3, #1
 800d38c:	f04f 0400 	mov.w	r4, #0
 800d390:	e035      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d392:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d396:	f04f 0400 	mov.w	r4, #0
 800d39a:	e030      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d39c:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d3a0:	f04f 0400 	mov.w	r4, #0
 800d3a4:	e02b      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3a6:	f04f 0320 	mov.w	r3, #32
 800d3aa:	f04f 0400 	mov.w	r4, #0
 800d3ae:	e026      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3b0:	f04f 0310 	mov.w	r3, #16
 800d3b4:	f04f 0400 	mov.w	r4, #0
 800d3b8:	e021      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3ba:	f04f 030c 	mov.w	r3, #12
 800d3be:	f04f 0400 	mov.w	r4, #0
 800d3c2:	e01c      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3c4:	f04f 030a 	mov.w	r3, #10
 800d3c8:	f04f 0400 	mov.w	r4, #0
 800d3cc:	e017      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3ce:	f04f 0308 	mov.w	r3, #8
 800d3d2:	f04f 0400 	mov.w	r4, #0
 800d3d6:	e012      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3d8:	f04f 0306 	mov.w	r3, #6
 800d3dc:	f04f 0400 	mov.w	r4, #0
 800d3e0:	e00d      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3e2:	f04f 0304 	mov.w	r3, #4
 800d3e6:	f04f 0400 	mov.w	r4, #0
 800d3ea:	e008      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3ec:	f04f 0302 	mov.w	r3, #2
 800d3f0:	f04f 0400 	mov.w	r4, #0
 800d3f4:	e003      	b.n	800d3fe <UART_SetConfig+0xe06>
 800d3f6:	f04f 0301 	mov.w	r3, #1
 800d3fa:	f04f 0400 	mov.w	r4, #0
 800d3fe:	461a      	mov	r2, r3
 800d400:	4623      	mov	r3, r4
 800d402:	f7f2 ffc5 	bl	8000390 <__aeabi_uldivmod>
 800d406:	4603      	mov	r3, r0
 800d408:	460c      	mov	r4, r1
 800d40a:	4619      	mov	r1, r3
 800d40c:	4622      	mov	r2, r4
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	f04f 0400 	mov.w	r4, #0
 800d416:	0214      	lsls	r4, r2, #8
 800d418:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d41c:	020b      	lsls	r3, r1, #8
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	6852      	ldr	r2, [r2, #4]
 800d422:	0852      	lsrs	r2, r2, #1
 800d424:	4611      	mov	r1, r2
 800d426:	f04f 0200 	mov.w	r2, #0
 800d42a:	eb13 0b01 	adds.w	fp, r3, r1
 800d42e:	eb44 0c02 	adc.w	ip, r4, r2
 800d432:	4658      	mov	r0, fp
 800d434:	4661      	mov	r1, ip
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	f04f 0400 	mov.w	r4, #0
 800d43e:	461a      	mov	r2, r3
 800d440:	4623      	mov	r3, r4
 800d442:	f7f2 ffa5 	bl	8000390 <__aeabi_uldivmod>
 800d446:	4603      	mov	r3, r0
 800d448:	460c      	mov	r4, r1
 800d44a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d44c:	e38a      	b.n	800db64 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d44e:	f107 0314 	add.w	r3, r7, #20
 800d452:	4618      	mov	r0, r3
 800d454:	f7fc fcbe 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f04f 0100 	mov.w	r1, #0
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	2b00      	cmp	r3, #0
 800d466:	d067      	beq.n	800d538 <UART_SetConfig+0xf40>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d05e      	beq.n	800d52e <UART_SetConfig+0xf36>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	2b02      	cmp	r3, #2
 800d476:	d055      	beq.n	800d524 <UART_SetConfig+0xf2c>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d04c      	beq.n	800d51a <UART_SetConfig+0xf22>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	2b04      	cmp	r3, #4
 800d486:	d043      	beq.n	800d510 <UART_SetConfig+0xf18>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48c:	2b05      	cmp	r3, #5
 800d48e:	d03a      	beq.n	800d506 <UART_SetConfig+0xf0e>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	2b06      	cmp	r3, #6
 800d496:	d031      	beq.n	800d4fc <UART_SetConfig+0xf04>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	2b07      	cmp	r3, #7
 800d49e:	d028      	beq.n	800d4f2 <UART_SetConfig+0xefa>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d01f      	beq.n	800d4e8 <UART_SetConfig+0xef0>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	2b09      	cmp	r3, #9
 800d4ae:	d016      	beq.n	800d4de <UART_SetConfig+0xee6>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	2b0a      	cmp	r3, #10
 800d4b6:	d00d      	beq.n	800d4d4 <UART_SetConfig+0xedc>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4bc:	2b0b      	cmp	r3, #11
 800d4be:	d104      	bne.n	800d4ca <UART_SetConfig+0xed2>
 800d4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4c4:	f04f 0400 	mov.w	r4, #0
 800d4c8:	e03a      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4ca:	f04f 0301 	mov.w	r3, #1
 800d4ce:	f04f 0400 	mov.w	r4, #0
 800d4d2:	e035      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d4d8:	f04f 0400 	mov.w	r4, #0
 800d4dc:	e030      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4de:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d4e2:	f04f 0400 	mov.w	r4, #0
 800d4e6:	e02b      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4e8:	f04f 0320 	mov.w	r3, #32
 800d4ec:	f04f 0400 	mov.w	r4, #0
 800d4f0:	e026      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4f2:	f04f 0310 	mov.w	r3, #16
 800d4f6:	f04f 0400 	mov.w	r4, #0
 800d4fa:	e021      	b.n	800d540 <UART_SetConfig+0xf48>
 800d4fc:	f04f 030c 	mov.w	r3, #12
 800d500:	f04f 0400 	mov.w	r4, #0
 800d504:	e01c      	b.n	800d540 <UART_SetConfig+0xf48>
 800d506:	f04f 030a 	mov.w	r3, #10
 800d50a:	f04f 0400 	mov.w	r4, #0
 800d50e:	e017      	b.n	800d540 <UART_SetConfig+0xf48>
 800d510:	f04f 0308 	mov.w	r3, #8
 800d514:	f04f 0400 	mov.w	r4, #0
 800d518:	e012      	b.n	800d540 <UART_SetConfig+0xf48>
 800d51a:	f04f 0306 	mov.w	r3, #6
 800d51e:	f04f 0400 	mov.w	r4, #0
 800d522:	e00d      	b.n	800d540 <UART_SetConfig+0xf48>
 800d524:	f04f 0304 	mov.w	r3, #4
 800d528:	f04f 0400 	mov.w	r4, #0
 800d52c:	e008      	b.n	800d540 <UART_SetConfig+0xf48>
 800d52e:	f04f 0302 	mov.w	r3, #2
 800d532:	f04f 0400 	mov.w	r4, #0
 800d536:	e003      	b.n	800d540 <UART_SetConfig+0xf48>
 800d538:	f04f 0301 	mov.w	r3, #1
 800d53c:	f04f 0400 	mov.w	r4, #0
 800d540:	461a      	mov	r2, r3
 800d542:	4623      	mov	r3, r4
 800d544:	f7f2 ff24 	bl	8000390 <__aeabi_uldivmod>
 800d548:	4603      	mov	r3, r0
 800d54a:	460c      	mov	r4, r1
 800d54c:	4619      	mov	r1, r3
 800d54e:	4622      	mov	r2, r4
 800d550:	f04f 0300 	mov.w	r3, #0
 800d554:	f04f 0400 	mov.w	r4, #0
 800d558:	0214      	lsls	r4, r2, #8
 800d55a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d55e:	020b      	lsls	r3, r1, #8
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	6852      	ldr	r2, [r2, #4]
 800d564:	0852      	lsrs	r2, r2, #1
 800d566:	4611      	mov	r1, r2
 800d568:	f04f 0200 	mov.w	r2, #0
 800d56c:	eb13 0b01 	adds.w	fp, r3, r1
 800d570:	eb44 0c02 	adc.w	ip, r4, r2
 800d574:	4658      	mov	r0, fp
 800d576:	4661      	mov	r1, ip
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f04f 0400 	mov.w	r4, #0
 800d580:	461a      	mov	r2, r3
 800d582:	4623      	mov	r3, r4
 800d584:	f7f2 ff04 	bl	8000390 <__aeabi_uldivmod>
 800d588:	4603      	mov	r3, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d58e:	e2e9      	b.n	800db64 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d590:	f107 0308 	add.w	r3, r7, #8
 800d594:	4618      	mov	r0, r3
 800d596:	f7fc fd69 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f04f 0100 	mov.w	r1, #0
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d067      	beq.n	800d67a <UART_SetConfig+0x1082>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d05e      	beq.n	800d670 <UART_SetConfig+0x1078>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d055      	beq.n	800d666 <UART_SetConfig+0x106e>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d04c      	beq.n	800d65c <UART_SetConfig+0x1064>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d043      	beq.n	800d652 <UART_SetConfig+0x105a>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	2b05      	cmp	r3, #5
 800d5d0:	d03a      	beq.n	800d648 <UART_SetConfig+0x1050>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	2b06      	cmp	r3, #6
 800d5d8:	d031      	beq.n	800d63e <UART_SetConfig+0x1046>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	2b07      	cmp	r3, #7
 800d5e0:	d028      	beq.n	800d634 <UART_SetConfig+0x103c>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e6:	2b08      	cmp	r3, #8
 800d5e8:	d01f      	beq.n	800d62a <UART_SetConfig+0x1032>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d016      	beq.n	800d620 <UART_SetConfig+0x1028>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f6:	2b0a      	cmp	r3, #10
 800d5f8:	d00d      	beq.n	800d616 <UART_SetConfig+0x101e>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	2b0b      	cmp	r3, #11
 800d600:	d104      	bne.n	800d60c <UART_SetConfig+0x1014>
 800d602:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d606:	f04f 0400 	mov.w	r4, #0
 800d60a:	e03a      	b.n	800d682 <UART_SetConfig+0x108a>
 800d60c:	f04f 0301 	mov.w	r3, #1
 800d610:	f04f 0400 	mov.w	r4, #0
 800d614:	e035      	b.n	800d682 <UART_SetConfig+0x108a>
 800d616:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d61a:	f04f 0400 	mov.w	r4, #0
 800d61e:	e030      	b.n	800d682 <UART_SetConfig+0x108a>
 800d620:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d624:	f04f 0400 	mov.w	r4, #0
 800d628:	e02b      	b.n	800d682 <UART_SetConfig+0x108a>
 800d62a:	f04f 0320 	mov.w	r3, #32
 800d62e:	f04f 0400 	mov.w	r4, #0
 800d632:	e026      	b.n	800d682 <UART_SetConfig+0x108a>
 800d634:	f04f 0310 	mov.w	r3, #16
 800d638:	f04f 0400 	mov.w	r4, #0
 800d63c:	e021      	b.n	800d682 <UART_SetConfig+0x108a>
 800d63e:	f04f 030c 	mov.w	r3, #12
 800d642:	f04f 0400 	mov.w	r4, #0
 800d646:	e01c      	b.n	800d682 <UART_SetConfig+0x108a>
 800d648:	f04f 030a 	mov.w	r3, #10
 800d64c:	f04f 0400 	mov.w	r4, #0
 800d650:	e017      	b.n	800d682 <UART_SetConfig+0x108a>
 800d652:	f04f 0308 	mov.w	r3, #8
 800d656:	f04f 0400 	mov.w	r4, #0
 800d65a:	e012      	b.n	800d682 <UART_SetConfig+0x108a>
 800d65c:	f04f 0306 	mov.w	r3, #6
 800d660:	f04f 0400 	mov.w	r4, #0
 800d664:	e00d      	b.n	800d682 <UART_SetConfig+0x108a>
 800d666:	f04f 0304 	mov.w	r3, #4
 800d66a:	f04f 0400 	mov.w	r4, #0
 800d66e:	e008      	b.n	800d682 <UART_SetConfig+0x108a>
 800d670:	f04f 0302 	mov.w	r3, #2
 800d674:	f04f 0400 	mov.w	r4, #0
 800d678:	e003      	b.n	800d682 <UART_SetConfig+0x108a>
 800d67a:	f04f 0301 	mov.w	r3, #1
 800d67e:	f04f 0400 	mov.w	r4, #0
 800d682:	461a      	mov	r2, r3
 800d684:	4623      	mov	r3, r4
 800d686:	f7f2 fe83 	bl	8000390 <__aeabi_uldivmod>
 800d68a:	4603      	mov	r3, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	4619      	mov	r1, r3
 800d690:	4622      	mov	r2, r4
 800d692:	f04f 0300 	mov.w	r3, #0
 800d696:	f04f 0400 	mov.w	r4, #0
 800d69a:	0214      	lsls	r4, r2, #8
 800d69c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d6a0:	020b      	lsls	r3, r1, #8
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6852      	ldr	r2, [r2, #4]
 800d6a6:	0852      	lsrs	r2, r2, #1
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	f04f 0200 	mov.w	r2, #0
 800d6ae:	eb13 0b01 	adds.w	fp, r3, r1
 800d6b2:	eb44 0c02 	adc.w	ip, r4, r2
 800d6b6:	4658      	mov	r0, fp
 800d6b8:	4661      	mov	r1, ip
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f04f 0400 	mov.w	r4, #0
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	f7f2 fe63 	bl	8000390 <__aeabi_uldivmod>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d6d0:	e248      	b.n	800db64 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6d2:	4b97      	ldr	r3, [pc, #604]	; (800d930 <UART_SetConfig+0x1338>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 0320 	and.w	r3, r3, #32
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80a3 	beq.w	800d826 <UART_SetConfig+0x122e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6e0:	4b93      	ldr	r3, [pc, #588]	; (800d930 <UART_SetConfig+0x1338>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	08db      	lsrs	r3, r3, #3
 800d6e6:	f003 0303 	and.w	r3, r3, #3
 800d6ea:	4a92      	ldr	r2, [pc, #584]	; (800d934 <UART_SetConfig+0x133c>)
 800d6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f04f 0100 	mov.w	r1, #0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d067      	beq.n	800d7ce <UART_SetConfig+0x11d6>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d702:	2b01      	cmp	r3, #1
 800d704:	d05e      	beq.n	800d7c4 <UART_SetConfig+0x11cc>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d055      	beq.n	800d7ba <UART_SetConfig+0x11c2>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	2b03      	cmp	r3, #3
 800d714:	d04c      	beq.n	800d7b0 <UART_SetConfig+0x11b8>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d043      	beq.n	800d7a6 <UART_SetConfig+0x11ae>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d722:	2b05      	cmp	r3, #5
 800d724:	d03a      	beq.n	800d79c <UART_SetConfig+0x11a4>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	2b06      	cmp	r3, #6
 800d72c:	d031      	beq.n	800d792 <UART_SetConfig+0x119a>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d732:	2b07      	cmp	r3, #7
 800d734:	d028      	beq.n	800d788 <UART_SetConfig+0x1190>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73a:	2b08      	cmp	r3, #8
 800d73c:	d01f      	beq.n	800d77e <UART_SetConfig+0x1186>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	2b09      	cmp	r3, #9
 800d744:	d016      	beq.n	800d774 <UART_SetConfig+0x117c>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74a:	2b0a      	cmp	r3, #10
 800d74c:	d00d      	beq.n	800d76a <UART_SetConfig+0x1172>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d752:	2b0b      	cmp	r3, #11
 800d754:	d104      	bne.n	800d760 <UART_SetConfig+0x1168>
 800d756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d75a:	f04f 0400 	mov.w	r4, #0
 800d75e:	e03a      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d760:	f04f 0301 	mov.w	r3, #1
 800d764:	f04f 0400 	mov.w	r4, #0
 800d768:	e035      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d76a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d76e:	f04f 0400 	mov.w	r4, #0
 800d772:	e030      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d774:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d778:	f04f 0400 	mov.w	r4, #0
 800d77c:	e02b      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d77e:	f04f 0320 	mov.w	r3, #32
 800d782:	f04f 0400 	mov.w	r4, #0
 800d786:	e026      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d788:	f04f 0310 	mov.w	r3, #16
 800d78c:	f04f 0400 	mov.w	r4, #0
 800d790:	e021      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d792:	f04f 030c 	mov.w	r3, #12
 800d796:	f04f 0400 	mov.w	r4, #0
 800d79a:	e01c      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d79c:	f04f 030a 	mov.w	r3, #10
 800d7a0:	f04f 0400 	mov.w	r4, #0
 800d7a4:	e017      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d7a6:	f04f 0308 	mov.w	r3, #8
 800d7aa:	f04f 0400 	mov.w	r4, #0
 800d7ae:	e012      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d7b0:	f04f 0306 	mov.w	r3, #6
 800d7b4:	f04f 0400 	mov.w	r4, #0
 800d7b8:	e00d      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d7ba:	f04f 0304 	mov.w	r3, #4
 800d7be:	f04f 0400 	mov.w	r4, #0
 800d7c2:	e008      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d7c4:	f04f 0302 	mov.w	r3, #2
 800d7c8:	f04f 0400 	mov.w	r4, #0
 800d7cc:	e003      	b.n	800d7d6 <UART_SetConfig+0x11de>
 800d7ce:	f04f 0301 	mov.w	r3, #1
 800d7d2:	f04f 0400 	mov.w	r4, #0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4623      	mov	r3, r4
 800d7da:	f7f2 fdd9 	bl	8000390 <__aeabi_uldivmod>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4622      	mov	r2, r4
 800d7e6:	f04f 0300 	mov.w	r3, #0
 800d7ea:	f04f 0400 	mov.w	r4, #0
 800d7ee:	0214      	lsls	r4, r2, #8
 800d7f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d7f4:	020b      	lsls	r3, r1, #8
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	6852      	ldr	r2, [r2, #4]
 800d7fa:	0852      	lsrs	r2, r2, #1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	f04f 0200 	mov.w	r2, #0
 800d802:	eb13 0b01 	adds.w	fp, r3, r1
 800d806:	eb44 0c02 	adc.w	ip, r4, r2
 800d80a:	4658      	mov	r0, fp
 800d80c:	4661      	mov	r1, ip
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	f04f 0400 	mov.w	r4, #0
 800d816:	461a      	mov	r2, r3
 800d818:	4623      	mov	r3, r4
 800d81a:	f7f2 fdb9 	bl	8000390 <__aeabi_uldivmod>
 800d81e:	4603      	mov	r3, r0
 800d820:	460c      	mov	r4, r1
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800d824:	e19e      	b.n	800db64 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d05b      	beq.n	800d8e6 <UART_SetConfig+0x12ee>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	2b01      	cmp	r3, #1
 800d834:	d053      	beq.n	800d8de <UART_SetConfig+0x12e6>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d04b      	beq.n	800d8d6 <UART_SetConfig+0x12de>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d842:	2b03      	cmp	r3, #3
 800d844:	d043      	beq.n	800d8ce <UART_SetConfig+0x12d6>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d03b      	beq.n	800d8c6 <UART_SetConfig+0x12ce>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d852:	2b05      	cmp	r3, #5
 800d854:	d033      	beq.n	800d8be <UART_SetConfig+0x12c6>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85a:	2b06      	cmp	r3, #6
 800d85c:	d02b      	beq.n	800d8b6 <UART_SetConfig+0x12be>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d862:	2b07      	cmp	r3, #7
 800d864:	d023      	beq.n	800d8ae <UART_SetConfig+0x12b6>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86a:	2b08      	cmp	r3, #8
 800d86c:	d01b      	beq.n	800d8a6 <UART_SetConfig+0x12ae>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d872:	2b09      	cmp	r3, #9
 800d874:	d013      	beq.n	800d89e <UART_SetConfig+0x12a6>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	2b0a      	cmp	r3, #10
 800d87c:	d00b      	beq.n	800d896 <UART_SetConfig+0x129e>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d882:	2b0b      	cmp	r3, #11
 800d884:	d103      	bne.n	800d88e <UART_SetConfig+0x1296>
 800d886:	4b2b      	ldr	r3, [pc, #172]	; (800d934 <UART_SetConfig+0x133c>)
 800d888:	f04f 0400 	mov.w	r4, #0
 800d88c:	e02e      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d88e:	4b2a      	ldr	r3, [pc, #168]	; (800d938 <UART_SetConfig+0x1340>)
 800d890:	f04f 0403 	mov.w	r4, #3
 800d894:	e02a      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d896:	4b29      	ldr	r3, [pc, #164]	; (800d93c <UART_SetConfig+0x1344>)
 800d898:	f04f 0400 	mov.w	r4, #0
 800d89c:	e026      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d89e:	4b28      	ldr	r3, [pc, #160]	; (800d940 <UART_SetConfig+0x1348>)
 800d8a0:	f04f 0400 	mov.w	r4, #0
 800d8a4:	e022      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8a6:	4b27      	ldr	r3, [pc, #156]	; (800d944 <UART_SetConfig+0x134c>)
 800d8a8:	f04f 0400 	mov.w	r4, #0
 800d8ac:	e01e      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8ae:	4b26      	ldr	r3, [pc, #152]	; (800d948 <UART_SetConfig+0x1350>)
 800d8b0:	f04f 0400 	mov.w	r4, #0
 800d8b4:	e01a      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8b6:	a41a      	add	r4, pc, #104	; (adr r4, 800d920 <UART_SetConfig+0x1328>)
 800d8b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d8bc:	e016      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8be:	4b23      	ldr	r3, [pc, #140]	; (800d94c <UART_SetConfig+0x1354>)
 800d8c0:	f04f 0400 	mov.w	r4, #0
 800d8c4:	e012      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8c6:	4b22      	ldr	r3, [pc, #136]	; (800d950 <UART_SetConfig+0x1358>)
 800d8c8:	f04f 0400 	mov.w	r4, #0
 800d8cc:	e00e      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8ce:	a416      	add	r4, pc, #88	; (adr r4, 800d928 <UART_SetConfig+0x1330>)
 800d8d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d8d4:	e00a      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8d6:	4b1f      	ldr	r3, [pc, #124]	; (800d954 <UART_SetConfig+0x135c>)
 800d8d8:	f04f 0400 	mov.w	r4, #0
 800d8dc:	e006      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8de:	4b1e      	ldr	r3, [pc, #120]	; (800d958 <UART_SetConfig+0x1360>)
 800d8e0:	f04f 0401 	mov.w	r4, #1
 800d8e4:	e002      	b.n	800d8ec <UART_SetConfig+0x12f4>
 800d8e6:	4b14      	ldr	r3, [pc, #80]	; (800d938 <UART_SetConfig+0x1340>)
 800d8e8:	f04f 0403 	mov.w	r4, #3
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	6852      	ldr	r2, [r2, #4]
 800d8f0:	0852      	lsrs	r2, r2, #1
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	f04f 0200 	mov.w	r2, #0
 800d8f8:	eb13 0b01 	adds.w	fp, r3, r1
 800d8fc:	eb44 0c02 	adc.w	ip, r4, r2
 800d900:	4658      	mov	r0, fp
 800d902:	4661      	mov	r1, ip
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f04f 0400 	mov.w	r4, #0
 800d90c:	461a      	mov	r2, r3
 800d90e:	4623      	mov	r3, r4
 800d910:	f7f2 fd3e 	bl	8000390 <__aeabi_uldivmod>
 800d914:	4603      	mov	r3, r0
 800d916:	460c      	mov	r4, r1
 800d918:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d91a:	e123      	b.n	800db64 <UART_SetConfig+0x156c>
 800d91c:	f3af 8000 	nop.w
 800d920:	51615500 	.word	0x51615500
 800d924:	00000000 	.word	0x00000000
 800d928:	a2c2aa00 	.word	0xa2c2aa00
 800d92c:	00000000 	.word	0x00000000
 800d930:	58024400 	.word	0x58024400
 800d934:	03d09000 	.word	0x03d09000
 800d938:	d0900000 	.word	0xd0900000
 800d93c:	07a12000 	.word	0x07a12000
 800d940:	0f424000 	.word	0x0f424000
 800d944:	1e848000 	.word	0x1e848000
 800d948:	3d090000 	.word	0x3d090000
 800d94c:	61a80000 	.word	0x61a80000
 800d950:	7a120000 	.word	0x7a120000
 800d954:	f4240000 	.word	0xf4240000
 800d958:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	d05b      	beq.n	800da1c <UART_SetConfig+0x1424>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d053      	beq.n	800da14 <UART_SetConfig+0x141c>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d970:	2b02      	cmp	r3, #2
 800d972:	d04b      	beq.n	800da0c <UART_SetConfig+0x1414>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d043      	beq.n	800da04 <UART_SetConfig+0x140c>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d980:	2b04      	cmp	r3, #4
 800d982:	d03b      	beq.n	800d9fc <UART_SetConfig+0x1404>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d988:	2b05      	cmp	r3, #5
 800d98a:	d033      	beq.n	800d9f4 <UART_SetConfig+0x13fc>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	2b06      	cmp	r3, #6
 800d992:	d02b      	beq.n	800d9ec <UART_SetConfig+0x13f4>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	2b07      	cmp	r3, #7
 800d99a:	d023      	beq.n	800d9e4 <UART_SetConfig+0x13ec>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a0:	2b08      	cmp	r3, #8
 800d9a2:	d01b      	beq.n	800d9dc <UART_SetConfig+0x13e4>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	2b09      	cmp	r3, #9
 800d9aa:	d013      	beq.n	800d9d4 <UART_SetConfig+0x13dc>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b0:	2b0a      	cmp	r3, #10
 800d9b2:	d00b      	beq.n	800d9cc <UART_SetConfig+0x13d4>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	2b0b      	cmp	r3, #11
 800d9ba:	d103      	bne.n	800d9c4 <UART_SetConfig+0x13cc>
 800d9bc:	4bc0      	ldr	r3, [pc, #768]	; (800dcc0 <UART_SetConfig+0x16c8>)
 800d9be:	f04f 0400 	mov.w	r4, #0
 800d9c2:	e02e      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9c4:	4bbf      	ldr	r3, [pc, #764]	; (800dcc4 <UART_SetConfig+0x16cc>)
 800d9c6:	f04f 0400 	mov.w	r4, #0
 800d9ca:	e02a      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9cc:	4bbe      	ldr	r3, [pc, #760]	; (800dcc8 <UART_SetConfig+0x16d0>)
 800d9ce:	f04f 0400 	mov.w	r4, #0
 800d9d2:	e026      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9d4:	4bbd      	ldr	r3, [pc, #756]	; (800dccc <UART_SetConfig+0x16d4>)
 800d9d6:	f04f 0400 	mov.w	r4, #0
 800d9da:	e022      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9dc:	4bbc      	ldr	r3, [pc, #752]	; (800dcd0 <UART_SetConfig+0x16d8>)
 800d9de:	f04f 0400 	mov.w	r4, #0
 800d9e2:	e01e      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9e4:	4bbb      	ldr	r3, [pc, #748]	; (800dcd4 <UART_SetConfig+0x16dc>)
 800d9e6:	f04f 0400 	mov.w	r4, #0
 800d9ea:	e01a      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9ec:	a4b0      	add	r4, pc, #704	; (adr r4, 800dcb0 <UART_SetConfig+0x16b8>)
 800d9ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d9f2:	e016      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9f4:	4bb8      	ldr	r3, [pc, #736]	; (800dcd8 <UART_SetConfig+0x16e0>)
 800d9f6:	f04f 0400 	mov.w	r4, #0
 800d9fa:	e012      	b.n	800da22 <UART_SetConfig+0x142a>
 800d9fc:	4bb7      	ldr	r3, [pc, #732]	; (800dcdc <UART_SetConfig+0x16e4>)
 800d9fe:	f04f 0400 	mov.w	r4, #0
 800da02:	e00e      	b.n	800da22 <UART_SetConfig+0x142a>
 800da04:	a4ac      	add	r4, pc, #688	; (adr r4, 800dcb8 <UART_SetConfig+0x16c0>)
 800da06:	e9d4 3400 	ldrd	r3, r4, [r4]
 800da0a:	e00a      	b.n	800da22 <UART_SetConfig+0x142a>
 800da0c:	4bb4      	ldr	r3, [pc, #720]	; (800dce0 <UART_SetConfig+0x16e8>)
 800da0e:	f04f 0400 	mov.w	r4, #0
 800da12:	e006      	b.n	800da22 <UART_SetConfig+0x142a>
 800da14:	4bb3      	ldr	r3, [pc, #716]	; (800dce4 <UART_SetConfig+0x16ec>)
 800da16:	f04f 0400 	mov.w	r4, #0
 800da1a:	e002      	b.n	800da22 <UART_SetConfig+0x142a>
 800da1c:	4ba9      	ldr	r3, [pc, #676]	; (800dcc4 <UART_SetConfig+0x16cc>)
 800da1e:	f04f 0400 	mov.w	r4, #0
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6852      	ldr	r2, [r2, #4]
 800da26:	0852      	lsrs	r2, r2, #1
 800da28:	4611      	mov	r1, r2
 800da2a:	f04f 0200 	mov.w	r2, #0
 800da2e:	eb13 0b01 	adds.w	fp, r3, r1
 800da32:	eb44 0c02 	adc.w	ip, r4, r2
 800da36:	4658      	mov	r0, fp
 800da38:	4661      	mov	r1, ip
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f04f 0400 	mov.w	r4, #0
 800da42:	461a      	mov	r2, r3
 800da44:	4623      	mov	r3, r4
 800da46:	f7f2 fca3 	bl	8000390 <__aeabi_uldivmod>
 800da4a:	4603      	mov	r3, r0
 800da4c:	460c      	mov	r4, r1
 800da4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800da50:	e088      	b.n	800db64 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da56:	2b00      	cmp	r3, #0
 800da58:	d064      	beq.n	800db24 <UART_SetConfig+0x152c>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d05b      	beq.n	800db1a <UART_SetConfig+0x1522>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da66:	2b02      	cmp	r3, #2
 800da68:	d052      	beq.n	800db10 <UART_SetConfig+0x1518>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d04a      	beq.n	800db08 <UART_SetConfig+0x1510>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	2b04      	cmp	r3, #4
 800da78:	d041      	beq.n	800dafe <UART_SetConfig+0x1506>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	2b05      	cmp	r3, #5
 800da80:	d039      	beq.n	800daf6 <UART_SetConfig+0x14fe>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da86:	2b06      	cmp	r3, #6
 800da88:	d031      	beq.n	800daee <UART_SetConfig+0x14f6>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	2b07      	cmp	r3, #7
 800da90:	d028      	beq.n	800dae4 <UART_SetConfig+0x14ec>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da96:	2b08      	cmp	r3, #8
 800da98:	d01f      	beq.n	800dada <UART_SetConfig+0x14e2>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	2b09      	cmp	r3, #9
 800daa0:	d016      	beq.n	800dad0 <UART_SetConfig+0x14d8>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa6:	2b0a      	cmp	r3, #10
 800daa8:	d00d      	beq.n	800dac6 <UART_SetConfig+0x14ce>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daae:	2b0b      	cmp	r3, #11
 800dab0:	d104      	bne.n	800dabc <UART_SetConfig+0x14c4>
 800dab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dab6:	f04f 0400 	mov.w	r4, #0
 800daba:	e037      	b.n	800db2c <UART_SetConfig+0x1534>
 800dabc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dac0:	f04f 0400 	mov.w	r4, #0
 800dac4:	e032      	b.n	800db2c <UART_SetConfig+0x1534>
 800dac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800daca:	f04f 0400 	mov.w	r4, #0
 800dace:	e02d      	b.n	800db2c <UART_SetConfig+0x1534>
 800dad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dad4:	f04f 0400 	mov.w	r4, #0
 800dad8:	e028      	b.n	800db2c <UART_SetConfig+0x1534>
 800dada:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dade:	f04f 0400 	mov.w	r4, #0
 800dae2:	e023      	b.n	800db2c <UART_SetConfig+0x1534>
 800dae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dae8:	f04f 0400 	mov.w	r4, #0
 800daec:	e01e      	b.n	800db2c <UART_SetConfig+0x1534>
 800daee:	4b7e      	ldr	r3, [pc, #504]	; (800dce8 <UART_SetConfig+0x16f0>)
 800daf0:	f04f 0400 	mov.w	r4, #0
 800daf4:	e01a      	b.n	800db2c <UART_SetConfig+0x1534>
 800daf6:	4b7d      	ldr	r3, [pc, #500]	; (800dcec <UART_SetConfig+0x16f4>)
 800daf8:	f04f 0400 	mov.w	r4, #0
 800dafc:	e016      	b.n	800db2c <UART_SetConfig+0x1534>
 800dafe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800db02:	f04f 0400 	mov.w	r4, #0
 800db06:	e011      	b.n	800db2c <UART_SetConfig+0x1534>
 800db08:	4b79      	ldr	r3, [pc, #484]	; (800dcf0 <UART_SetConfig+0x16f8>)
 800db0a:	f04f 0400 	mov.w	r4, #0
 800db0e:	e00d      	b.n	800db2c <UART_SetConfig+0x1534>
 800db10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800db14:	f04f 0400 	mov.w	r4, #0
 800db18:	e008      	b.n	800db2c <UART_SetConfig+0x1534>
 800db1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db1e:	f04f 0400 	mov.w	r4, #0
 800db22:	e003      	b.n	800db2c <UART_SetConfig+0x1534>
 800db24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800db28:	f04f 0400 	mov.w	r4, #0
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	6852      	ldr	r2, [r2, #4]
 800db30:	0852      	lsrs	r2, r2, #1
 800db32:	4611      	mov	r1, r2
 800db34:	f04f 0200 	mov.w	r2, #0
 800db38:	eb13 0b01 	adds.w	fp, r3, r1
 800db3c:	eb44 0c02 	adc.w	ip, r4, r2
 800db40:	4658      	mov	r0, fp
 800db42:	4661      	mov	r1, ip
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f04f 0400 	mov.w	r4, #0
 800db4c:	461a      	mov	r2, r3
 800db4e:	4623      	mov	r3, r4
 800db50:	f7f2 fc1e 	bl	8000390 <__aeabi_uldivmod>
 800db54:	4603      	mov	r3, r0
 800db56:	460c      	mov	r4, r1
 800db58:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800db5a:	e003      	b.n	800db64 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800db62:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db6a:	d309      	bcc.n	800db80 <UART_SetConfig+0x1588>
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db72:	d205      	bcs.n	800db80 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db7a:	60da      	str	r2, [r3, #12]
 800db7c:	f000 bf81 	b.w	800ea82 <UART_SetConfig+0x248a>
        }
        else
        {
          ret = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db86:	f000 bf7c 	b.w	800ea82 <UART_SetConfig+0x248a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69db      	ldr	r3, [r3, #28]
 800db8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db92:	f040 83d8 	bne.w	800e346 <UART_SetConfig+0x1d4e>
  {
    switch (clocksource)
 800db96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db9a:	2b40      	cmp	r3, #64	; 0x40
 800db9c:	f200 83b1 	bhi.w	800e302 <UART_SetConfig+0x1d0a>
 800dba0:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <UART_SetConfig+0x15b0>)
 800dba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba6:	bf00      	nop
 800dba8:	0800dcf5 	.word	0x0800dcf5
 800dbac:	0800ddab 	.word	0x0800ddab
 800dbb0:	0800e303 	.word	0x0800e303
 800dbb4:	0800e303 	.word	0x0800e303
 800dbb8:	0800de61 	.word	0x0800de61
 800dbbc:	0800e303 	.word	0x0800e303
 800dbc0:	0800e303 	.word	0x0800e303
 800dbc4:	0800e303 	.word	0x0800e303
 800dbc8:	0800df1d 	.word	0x0800df1d
 800dbcc:	0800e303 	.word	0x0800e303
 800dbd0:	0800e303 	.word	0x0800e303
 800dbd4:	0800e303 	.word	0x0800e303
 800dbd8:	0800e303 	.word	0x0800e303
 800dbdc:	0800e303 	.word	0x0800e303
 800dbe0:	0800e303 	.word	0x0800e303
 800dbe4:	0800e303 	.word	0x0800e303
 800dbe8:	0800dfd9 	.word	0x0800dfd9
 800dbec:	0800e303 	.word	0x0800e303
 800dbf0:	0800e303 	.word	0x0800e303
 800dbf4:	0800e303 	.word	0x0800e303
 800dbf8:	0800e303 	.word	0x0800e303
 800dbfc:	0800e303 	.word	0x0800e303
 800dc00:	0800e303 	.word	0x0800e303
 800dc04:	0800e303 	.word	0x0800e303
 800dc08:	0800e303 	.word	0x0800e303
 800dc0c:	0800e303 	.word	0x0800e303
 800dc10:	0800e303 	.word	0x0800e303
 800dc14:	0800e303 	.word	0x0800e303
 800dc18:	0800e303 	.word	0x0800e303
 800dc1c:	0800e303 	.word	0x0800e303
 800dc20:	0800e303 	.word	0x0800e303
 800dc24:	0800e303 	.word	0x0800e303
 800dc28:	0800e14b 	.word	0x0800e14b
 800dc2c:	0800e303 	.word	0x0800e303
 800dc30:	0800e303 	.word	0x0800e303
 800dc34:	0800e303 	.word	0x0800e303
 800dc38:	0800e303 	.word	0x0800e303
 800dc3c:	0800e303 	.word	0x0800e303
 800dc40:	0800e303 	.word	0x0800e303
 800dc44:	0800e303 	.word	0x0800e303
 800dc48:	0800e303 	.word	0x0800e303
 800dc4c:	0800e303 	.word	0x0800e303
 800dc50:	0800e303 	.word	0x0800e303
 800dc54:	0800e303 	.word	0x0800e303
 800dc58:	0800e303 	.word	0x0800e303
 800dc5c:	0800e303 	.word	0x0800e303
 800dc60:	0800e303 	.word	0x0800e303
 800dc64:	0800e303 	.word	0x0800e303
 800dc68:	0800e303 	.word	0x0800e303
 800dc6c:	0800e303 	.word	0x0800e303
 800dc70:	0800e303 	.word	0x0800e303
 800dc74:	0800e303 	.word	0x0800e303
 800dc78:	0800e303 	.word	0x0800e303
 800dc7c:	0800e303 	.word	0x0800e303
 800dc80:	0800e303 	.word	0x0800e303
 800dc84:	0800e303 	.word	0x0800e303
 800dc88:	0800e303 	.word	0x0800e303
 800dc8c:	0800e303 	.word	0x0800e303
 800dc90:	0800e303 	.word	0x0800e303
 800dc94:	0800e303 	.word	0x0800e303
 800dc98:	0800e303 	.word	0x0800e303
 800dc9c:	0800e303 	.word	0x0800e303
 800dca0:	0800e303 	.word	0x0800e303
 800dca4:	0800e303 	.word	0x0800e303
 800dca8:	0800e241 	.word	0x0800e241
 800dcac:	f3af 8000 	nop.w
 800dcb0:	05161500 	.word	0x05161500
 800dcb4:	00000000 	.word	0x00000000
 800dcb8:	0a2c2a00 	.word	0x0a2c2a00
 800dcbc:	00000000 	.word	0x00000000
 800dcc0:	003d0900 	.word	0x003d0900
 800dcc4:	3d090000 	.word	0x3d090000
 800dcc8:	007a1200 	.word	0x007a1200
 800dccc:	00f42400 	.word	0x00f42400
 800dcd0:	01e84800 	.word	0x01e84800
 800dcd4:	03d09000 	.word	0x03d09000
 800dcd8:	061a8000 	.word	0x061a8000
 800dcdc:	07a12000 	.word	0x07a12000
 800dce0:	0f424000 	.word	0x0f424000
 800dce4:	1e848000 	.word	0x1e848000
 800dce8:	000aaa00 	.word	0x000aaa00
 800dcec:	000ccc00 	.word	0x000ccc00
 800dcf0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcf4:	f7fa fc78 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d044      	beq.n	800dd8c <UART_SetConfig+0x1794>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d03e      	beq.n	800dd88 <UART_SetConfig+0x1790>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d038      	beq.n	800dd84 <UART_SetConfig+0x178c>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d032      	beq.n	800dd80 <UART_SetConfig+0x1788>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2b04      	cmp	r3, #4
 800dd20:	d02c      	beq.n	800dd7c <UART_SetConfig+0x1784>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd26:	2b05      	cmp	r3, #5
 800dd28:	d026      	beq.n	800dd78 <UART_SetConfig+0x1780>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	2b06      	cmp	r3, #6
 800dd30:	d020      	beq.n	800dd74 <UART_SetConfig+0x177c>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd36:	2b07      	cmp	r3, #7
 800dd38:	d01a      	beq.n	800dd70 <UART_SetConfig+0x1778>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3e:	2b08      	cmp	r3, #8
 800dd40:	d014      	beq.n	800dd6c <UART_SetConfig+0x1774>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd46:	2b09      	cmp	r3, #9
 800dd48:	d00e      	beq.n	800dd68 <UART_SetConfig+0x1770>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b0a      	cmp	r3, #10
 800dd50:	d008      	beq.n	800dd64 <UART_SetConfig+0x176c>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	2b0b      	cmp	r3, #11
 800dd58:	d102      	bne.n	800dd60 <UART_SetConfig+0x1768>
 800dd5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd5e:	e016      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd60:	2301      	movs	r3, #1
 800dd62:	e014      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd64:	2380      	movs	r3, #128	; 0x80
 800dd66:	e012      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd68:	2340      	movs	r3, #64	; 0x40
 800dd6a:	e010      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	e00e      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd70:	2310      	movs	r3, #16
 800dd72:	e00c      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd74:	230c      	movs	r3, #12
 800dd76:	e00a      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd78:	230a      	movs	r3, #10
 800dd7a:	e008      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	e006      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd80:	2306      	movs	r3, #6
 800dd82:	e004      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd84:	2304      	movs	r3, #4
 800dd86:	e002      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e000      	b.n	800dd8e <UART_SetConfig+0x1796>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd92:	005a      	lsls	r2, r3, #1
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	085b      	lsrs	r3, r3, #1
 800dd9a:	441a      	add	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dda8:	e2af      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddaa:	f7fa fc33 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d044      	beq.n	800de42 <UART_SetConfig+0x184a>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d03e      	beq.n	800de3e <UART_SetConfig+0x1846>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d038      	beq.n	800de3a <UART_SetConfig+0x1842>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	d032      	beq.n	800de36 <UART_SetConfig+0x183e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	2b04      	cmp	r3, #4
 800ddd6:	d02c      	beq.n	800de32 <UART_SetConfig+0x183a>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	2b05      	cmp	r3, #5
 800ddde:	d026      	beq.n	800de2e <UART_SetConfig+0x1836>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde4:	2b06      	cmp	r3, #6
 800dde6:	d020      	beq.n	800de2a <UART_SetConfig+0x1832>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddec:	2b07      	cmp	r3, #7
 800ddee:	d01a      	beq.n	800de26 <UART_SetConfig+0x182e>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf4:	2b08      	cmp	r3, #8
 800ddf6:	d014      	beq.n	800de22 <UART_SetConfig+0x182a>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	2b09      	cmp	r3, #9
 800ddfe:	d00e      	beq.n	800de1e <UART_SetConfig+0x1826>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de04:	2b0a      	cmp	r3, #10
 800de06:	d008      	beq.n	800de1a <UART_SetConfig+0x1822>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0c:	2b0b      	cmp	r3, #11
 800de0e:	d102      	bne.n	800de16 <UART_SetConfig+0x181e>
 800de10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de14:	e016      	b.n	800de44 <UART_SetConfig+0x184c>
 800de16:	2301      	movs	r3, #1
 800de18:	e014      	b.n	800de44 <UART_SetConfig+0x184c>
 800de1a:	2380      	movs	r3, #128	; 0x80
 800de1c:	e012      	b.n	800de44 <UART_SetConfig+0x184c>
 800de1e:	2340      	movs	r3, #64	; 0x40
 800de20:	e010      	b.n	800de44 <UART_SetConfig+0x184c>
 800de22:	2320      	movs	r3, #32
 800de24:	e00e      	b.n	800de44 <UART_SetConfig+0x184c>
 800de26:	2310      	movs	r3, #16
 800de28:	e00c      	b.n	800de44 <UART_SetConfig+0x184c>
 800de2a:	230c      	movs	r3, #12
 800de2c:	e00a      	b.n	800de44 <UART_SetConfig+0x184c>
 800de2e:	230a      	movs	r3, #10
 800de30:	e008      	b.n	800de44 <UART_SetConfig+0x184c>
 800de32:	2308      	movs	r3, #8
 800de34:	e006      	b.n	800de44 <UART_SetConfig+0x184c>
 800de36:	2306      	movs	r3, #6
 800de38:	e004      	b.n	800de44 <UART_SetConfig+0x184c>
 800de3a:	2304      	movs	r3, #4
 800de3c:	e002      	b.n	800de44 <UART_SetConfig+0x184c>
 800de3e:	2302      	movs	r3, #2
 800de40:	e000      	b.n	800de44 <UART_SetConfig+0x184c>
 800de42:	2301      	movs	r3, #1
 800de44:	fbb2 f3f3 	udiv	r3, r2, r3
 800de48:	005a      	lsls	r2, r3, #1
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	441a      	add	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de5e:	e254      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de60:	f107 0314 	add.w	r3, r7, #20
 800de64:	4618      	mov	r0, r3
 800de66:	f7fb ffb5 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de6a:	69ba      	ldr	r2, [r7, #24]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d044      	beq.n	800defe <UART_SetConfig+0x1906>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d03e      	beq.n	800defa <UART_SetConfig+0x1902>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de80:	2b02      	cmp	r3, #2
 800de82:	d038      	beq.n	800def6 <UART_SetConfig+0x18fe>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de88:	2b03      	cmp	r3, #3
 800de8a:	d032      	beq.n	800def2 <UART_SetConfig+0x18fa>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	2b04      	cmp	r3, #4
 800de92:	d02c      	beq.n	800deee <UART_SetConfig+0x18f6>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	2b05      	cmp	r3, #5
 800de9a:	d026      	beq.n	800deea <UART_SetConfig+0x18f2>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d020      	beq.n	800dee6 <UART_SetConfig+0x18ee>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	d01a      	beq.n	800dee2 <UART_SetConfig+0x18ea>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	2b08      	cmp	r3, #8
 800deb2:	d014      	beq.n	800dede <UART_SetConfig+0x18e6>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb8:	2b09      	cmp	r3, #9
 800deba:	d00e      	beq.n	800deda <UART_SetConfig+0x18e2>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec0:	2b0a      	cmp	r3, #10
 800dec2:	d008      	beq.n	800ded6 <UART_SetConfig+0x18de>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	2b0b      	cmp	r3, #11
 800deca:	d102      	bne.n	800ded2 <UART_SetConfig+0x18da>
 800decc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ded0:	e016      	b.n	800df00 <UART_SetConfig+0x1908>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e014      	b.n	800df00 <UART_SetConfig+0x1908>
 800ded6:	2380      	movs	r3, #128	; 0x80
 800ded8:	e012      	b.n	800df00 <UART_SetConfig+0x1908>
 800deda:	2340      	movs	r3, #64	; 0x40
 800dedc:	e010      	b.n	800df00 <UART_SetConfig+0x1908>
 800dede:	2320      	movs	r3, #32
 800dee0:	e00e      	b.n	800df00 <UART_SetConfig+0x1908>
 800dee2:	2310      	movs	r3, #16
 800dee4:	e00c      	b.n	800df00 <UART_SetConfig+0x1908>
 800dee6:	230c      	movs	r3, #12
 800dee8:	e00a      	b.n	800df00 <UART_SetConfig+0x1908>
 800deea:	230a      	movs	r3, #10
 800deec:	e008      	b.n	800df00 <UART_SetConfig+0x1908>
 800deee:	2308      	movs	r3, #8
 800def0:	e006      	b.n	800df00 <UART_SetConfig+0x1908>
 800def2:	2306      	movs	r3, #6
 800def4:	e004      	b.n	800df00 <UART_SetConfig+0x1908>
 800def6:	2304      	movs	r3, #4
 800def8:	e002      	b.n	800df00 <UART_SetConfig+0x1908>
 800defa:	2302      	movs	r3, #2
 800defc:	e000      	b.n	800df00 <UART_SetConfig+0x1908>
 800defe:	2301      	movs	r3, #1
 800df00:	fbb2 f3f3 	udiv	r3, r2, r3
 800df04:	005a      	lsls	r2, r3, #1
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	085b      	lsrs	r3, r3, #1
 800df0c:	441a      	add	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	fbb2 f3f3 	udiv	r3, r2, r3
 800df16:	b29b      	uxth	r3, r3
 800df18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df1a:	e1f6      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df1c:	f107 0308 	add.w	r3, r7, #8
 800df20:	4618      	mov	r0, r3
 800df22:	f7fc f8a3 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d044      	beq.n	800dfba <UART_SetConfig+0x19c2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	2b01      	cmp	r3, #1
 800df36:	d03e      	beq.n	800dfb6 <UART_SetConfig+0x19be>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d038      	beq.n	800dfb2 <UART_SetConfig+0x19ba>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	2b03      	cmp	r3, #3
 800df46:	d032      	beq.n	800dfae <UART_SetConfig+0x19b6>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d02c      	beq.n	800dfaa <UART_SetConfig+0x19b2>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	2b05      	cmp	r3, #5
 800df56:	d026      	beq.n	800dfa6 <UART_SetConfig+0x19ae>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5c:	2b06      	cmp	r3, #6
 800df5e:	d020      	beq.n	800dfa2 <UART_SetConfig+0x19aa>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df64:	2b07      	cmp	r3, #7
 800df66:	d01a      	beq.n	800df9e <UART_SetConfig+0x19a6>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	d014      	beq.n	800df9a <UART_SetConfig+0x19a2>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df74:	2b09      	cmp	r3, #9
 800df76:	d00e      	beq.n	800df96 <UART_SetConfig+0x199e>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	2b0a      	cmp	r3, #10
 800df7e:	d008      	beq.n	800df92 <UART_SetConfig+0x199a>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df84:	2b0b      	cmp	r3, #11
 800df86:	d102      	bne.n	800df8e <UART_SetConfig+0x1996>
 800df88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df8c:	e016      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800df8e:	2301      	movs	r3, #1
 800df90:	e014      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800df92:	2380      	movs	r3, #128	; 0x80
 800df94:	e012      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800df96:	2340      	movs	r3, #64	; 0x40
 800df98:	e010      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800df9a:	2320      	movs	r3, #32
 800df9c:	e00e      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800df9e:	2310      	movs	r3, #16
 800dfa0:	e00c      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	e00a      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfa6:	230a      	movs	r3, #10
 800dfa8:	e008      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfaa:	2308      	movs	r3, #8
 800dfac:	e006      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfae:	2306      	movs	r3, #6
 800dfb0:	e004      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfb2:	2304      	movs	r3, #4
 800dfb4:	e002      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	e000      	b.n	800dfbc <UART_SetConfig+0x19c4>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc0:	005a      	lsls	r2, r3, #1
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	085b      	lsrs	r3, r3, #1
 800dfc8:	441a      	add	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfd6:	e198      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfd8:	4b87      	ldr	r3, [pc, #540]	; (800e1f8 <UART_SetConfig+0x1c00>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 0320 	and.w	r3, r3, #32
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d05e      	beq.n	800e0a2 <UART_SetConfig+0x1aaa>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfe4:	4b84      	ldr	r3, [pc, #528]	; (800e1f8 <UART_SetConfig+0x1c00>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	08db      	lsrs	r3, r3, #3
 800dfea:	f003 0303 	and.w	r3, r3, #3
 800dfee:	4a83      	ldr	r2, [pc, #524]	; (800e1fc <UART_SetConfig+0x1c04>)
 800dff0:	40da      	lsrs	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d044      	beq.n	800e084 <UART_SetConfig+0x1a8c>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d03e      	beq.n	800e080 <UART_SetConfig+0x1a88>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	2b02      	cmp	r3, #2
 800e008:	d038      	beq.n	800e07c <UART_SetConfig+0x1a84>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d032      	beq.n	800e078 <UART_SetConfig+0x1a80>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e016:	2b04      	cmp	r3, #4
 800e018:	d02c      	beq.n	800e074 <UART_SetConfig+0x1a7c>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b05      	cmp	r3, #5
 800e020:	d026      	beq.n	800e070 <UART_SetConfig+0x1a78>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	2b06      	cmp	r3, #6
 800e028:	d020      	beq.n	800e06c <UART_SetConfig+0x1a74>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	2b07      	cmp	r3, #7
 800e030:	d01a      	beq.n	800e068 <UART_SetConfig+0x1a70>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e036:	2b08      	cmp	r3, #8
 800e038:	d014      	beq.n	800e064 <UART_SetConfig+0x1a6c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	2b09      	cmp	r3, #9
 800e040:	d00e      	beq.n	800e060 <UART_SetConfig+0x1a68>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	2b0a      	cmp	r3, #10
 800e048:	d008      	beq.n	800e05c <UART_SetConfig+0x1a64>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	2b0b      	cmp	r3, #11
 800e050:	d102      	bne.n	800e058 <UART_SetConfig+0x1a60>
 800e052:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e056:	e016      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e058:	2301      	movs	r3, #1
 800e05a:	e014      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e05c:	2380      	movs	r3, #128	; 0x80
 800e05e:	e012      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e060:	2340      	movs	r3, #64	; 0x40
 800e062:	e010      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e064:	2320      	movs	r3, #32
 800e066:	e00e      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e068:	2310      	movs	r3, #16
 800e06a:	e00c      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e06c:	230c      	movs	r3, #12
 800e06e:	e00a      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e070:	230a      	movs	r3, #10
 800e072:	e008      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e074:	2308      	movs	r3, #8
 800e076:	e006      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e078:	2306      	movs	r3, #6
 800e07a:	e004      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e07c:	2304      	movs	r3, #4
 800e07e:	e002      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e080:	2302      	movs	r3, #2
 800e082:	e000      	b.n	800e086 <UART_SetConfig+0x1a8e>
 800e084:	2301      	movs	r3, #1
 800e086:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08a:	005a      	lsls	r2, r3, #1
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	085b      	lsrs	r3, r3, #1
 800e092:	441a      	add	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	fbb2 f3f3 	udiv	r3, r2, r3
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e0a0:	e133      	b.n	800e30a <UART_SetConfig+0x1d12>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d043      	beq.n	800e132 <UART_SetConfig+0x1b3a>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d03d      	beq.n	800e12e <UART_SetConfig+0x1b36>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d037      	beq.n	800e12a <UART_SetConfig+0x1b32>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d031      	beq.n	800e126 <UART_SetConfig+0x1b2e>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	d02b      	beq.n	800e122 <UART_SetConfig+0x1b2a>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d025      	beq.n	800e11e <UART_SetConfig+0x1b26>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d6:	2b06      	cmp	r3, #6
 800e0d8:	d01f      	beq.n	800e11a <UART_SetConfig+0x1b22>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	d019      	beq.n	800e116 <UART_SetConfig+0x1b1e>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2b08      	cmp	r3, #8
 800e0e8:	d013      	beq.n	800e112 <UART_SetConfig+0x1b1a>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	2b09      	cmp	r3, #9
 800e0f0:	d00d      	beq.n	800e10e <UART_SetConfig+0x1b16>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b0a      	cmp	r3, #10
 800e0f8:	d007      	beq.n	800e10a <UART_SetConfig+0x1b12>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b0b      	cmp	r3, #11
 800e100:	d101      	bne.n	800e106 <UART_SetConfig+0x1b0e>
 800e102:	4b3f      	ldr	r3, [pc, #252]	; (800e200 <UART_SetConfig+0x1c08>)
 800e104:	e016      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e106:	4b3f      	ldr	r3, [pc, #252]	; (800e204 <UART_SetConfig+0x1c0c>)
 800e108:	e014      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e10a:	4b3f      	ldr	r3, [pc, #252]	; (800e208 <UART_SetConfig+0x1c10>)
 800e10c:	e012      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e10e:	4b3f      	ldr	r3, [pc, #252]	; (800e20c <UART_SetConfig+0x1c14>)
 800e110:	e010      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e112:	4b3f      	ldr	r3, [pc, #252]	; (800e210 <UART_SetConfig+0x1c18>)
 800e114:	e00e      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e116:	4b3f      	ldr	r3, [pc, #252]	; (800e214 <UART_SetConfig+0x1c1c>)
 800e118:	e00c      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e11a:	4b3f      	ldr	r3, [pc, #252]	; (800e218 <UART_SetConfig+0x1c20>)
 800e11c:	e00a      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e11e:	4b3f      	ldr	r3, [pc, #252]	; (800e21c <UART_SetConfig+0x1c24>)
 800e120:	e008      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e122:	4b3f      	ldr	r3, [pc, #252]	; (800e220 <UART_SetConfig+0x1c28>)
 800e124:	e006      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e126:	4b3f      	ldr	r3, [pc, #252]	; (800e224 <UART_SetConfig+0x1c2c>)
 800e128:	e004      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e12a:	4b3f      	ldr	r3, [pc, #252]	; (800e228 <UART_SetConfig+0x1c30>)
 800e12c:	e002      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e12e:	4b33      	ldr	r3, [pc, #204]	; (800e1fc <UART_SetConfig+0x1c04>)
 800e130:	e000      	b.n	800e134 <UART_SetConfig+0x1b3c>
 800e132:	4b34      	ldr	r3, [pc, #208]	; (800e204 <UART_SetConfig+0x1c0c>)
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	6852      	ldr	r2, [r2, #4]
 800e138:	0852      	lsrs	r2, r2, #1
 800e13a:	441a      	add	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	fbb2 f3f3 	udiv	r3, r2, r3
 800e144:	b29b      	uxth	r3, r3
 800e146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e148:	e0df      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d045      	beq.n	800e1de <UART_SetConfig+0x1be6>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	2b01      	cmp	r3, #1
 800e158:	d03f      	beq.n	800e1da <UART_SetConfig+0x1be2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d039      	beq.n	800e1d6 <UART_SetConfig+0x1bde>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	2b03      	cmp	r3, #3
 800e168:	d033      	beq.n	800e1d2 <UART_SetConfig+0x1bda>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d02d      	beq.n	800e1ce <UART_SetConfig+0x1bd6>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	2b05      	cmp	r3, #5
 800e178:	d027      	beq.n	800e1ca <UART_SetConfig+0x1bd2>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b06      	cmp	r3, #6
 800e180:	d021      	beq.n	800e1c6 <UART_SetConfig+0x1bce>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b07      	cmp	r3, #7
 800e188:	d01b      	beq.n	800e1c2 <UART_SetConfig+0x1bca>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d015      	beq.n	800e1be <UART_SetConfig+0x1bc6>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b09      	cmp	r3, #9
 800e198:	d00f      	beq.n	800e1ba <UART_SetConfig+0x1bc2>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b0a      	cmp	r3, #10
 800e1a0:	d008      	beq.n	800e1b4 <UART_SetConfig+0x1bbc>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	2b0b      	cmp	r3, #11
 800e1a8:	d102      	bne.n	800e1b0 <UART_SetConfig+0x1bb8>
 800e1aa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e1ae:	e017      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1b0:	4b18      	ldr	r3, [pc, #96]	; (800e214 <UART_SetConfig+0x1c1c>)
 800e1b2:	e015      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e1b8:	e012      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1ba:	4b1c      	ldr	r3, [pc, #112]	; (800e22c <UART_SetConfig+0x1c34>)
 800e1bc:	e010      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1be:	4b1c      	ldr	r3, [pc, #112]	; (800e230 <UART_SetConfig+0x1c38>)
 800e1c0:	e00e      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1c2:	4b0f      	ldr	r3, [pc, #60]	; (800e200 <UART_SetConfig+0x1c08>)
 800e1c4:	e00c      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1c6:	4b1b      	ldr	r3, [pc, #108]	; (800e234 <UART_SetConfig+0x1c3c>)
 800e1c8:	e00a      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1ca:	4b1b      	ldr	r3, [pc, #108]	; (800e238 <UART_SetConfig+0x1c40>)
 800e1cc:	e008      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <UART_SetConfig+0x1c10>)
 800e1d0:	e006      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1d2:	4b1a      	ldr	r3, [pc, #104]	; (800e23c <UART_SetConfig+0x1c44>)
 800e1d4:	e004      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <UART_SetConfig+0x1c14>)
 800e1d8:	e002      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1da:	4b0d      	ldr	r3, [pc, #52]	; (800e210 <UART_SetConfig+0x1c18>)
 800e1dc:	e000      	b.n	800e1e0 <UART_SetConfig+0x1be8>
 800e1de:	4b0d      	ldr	r3, [pc, #52]	; (800e214 <UART_SetConfig+0x1c1c>)
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	6852      	ldr	r2, [r2, #4]
 800e1e4:	0852      	lsrs	r2, r2, #1
 800e1e6:	441a      	add	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1f4:	e089      	b.n	800e30a <UART_SetConfig+0x1d12>
 800e1f6:	bf00      	nop
 800e1f8:	58024400 	.word	0x58024400
 800e1fc:	03d09000 	.word	0x03d09000
 800e200:	0007a120 	.word	0x0007a120
 800e204:	07a12000 	.word	0x07a12000
 800e208:	000f4240 	.word	0x000f4240
 800e20c:	001e8480 	.word	0x001e8480
 800e210:	003d0900 	.word	0x003d0900
 800e214:	007a1200 	.word	0x007a1200
 800e218:	00a2c2aa 	.word	0x00a2c2aa
 800e21c:	00c35000 	.word	0x00c35000
 800e220:	00f42400 	.word	0x00f42400
 800e224:	01458554 	.word	0x01458554
 800e228:	01e84800 	.word	0x01e84800
 800e22c:	0001e848 	.word	0x0001e848
 800e230:	0003d090 	.word	0x0003d090
 800e234:	000a2c2a 	.word	0x000a2c2a
 800e238:	000c3500 	.word	0x000c3500
 800e23c:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d04f      	beq.n	800e2e8 <UART_SetConfig+0x1cf0>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d048      	beq.n	800e2e2 <UART_SetConfig+0x1cea>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	2b02      	cmp	r3, #2
 800e256:	d041      	beq.n	800e2dc <UART_SetConfig+0x1ce4>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b03      	cmp	r3, #3
 800e25e:	d03a      	beq.n	800e2d6 <UART_SetConfig+0x1cde>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	2b04      	cmp	r3, #4
 800e266:	d033      	beq.n	800e2d0 <UART_SetConfig+0x1cd8>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b05      	cmp	r3, #5
 800e26e:	d02c      	beq.n	800e2ca <UART_SetConfig+0x1cd2>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b06      	cmp	r3, #6
 800e276:	d025      	beq.n	800e2c4 <UART_SetConfig+0x1ccc>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b07      	cmp	r3, #7
 800e27e:	d01e      	beq.n	800e2be <UART_SetConfig+0x1cc6>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b08      	cmp	r3, #8
 800e286:	d017      	beq.n	800e2b8 <UART_SetConfig+0x1cc0>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	2b09      	cmp	r3, #9
 800e28e:	d010      	beq.n	800e2b2 <UART_SetConfig+0x1cba>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b0a      	cmp	r3, #10
 800e296:	d009      	beq.n	800e2ac <UART_SetConfig+0x1cb4>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29c:	2b0b      	cmp	r3, #11
 800e29e:	d102      	bne.n	800e2a6 <UART_SetConfig+0x1cae>
 800e2a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2a4:	e022      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e2aa:	e01f      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2b0:	e01c      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b6:	e019      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2bc:	e016      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2c2:	e013      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2c4:	f241 5354 	movw	r3, #5460	; 0x1554
 800e2c8:	e010      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2ca:	f641 1398 	movw	r3, #6552	; 0x1998
 800e2ce:	e00d      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2d4:	e00a      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2d6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800e2da:	e007      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e2e0:	e004      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2e6:	e001      	b.n	800e2ec <UART_SetConfig+0x1cf4>
 800e2e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6852      	ldr	r2, [r2, #4]
 800e2f0:	0852      	lsrs	r2, r2, #1
 800e2f2:	441a      	add	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e300:	e003      	b.n	800e30a <UART_SetConfig+0x1d12>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800e308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	2b0f      	cmp	r3, #15
 800e30e:	d916      	bls.n	800e33e <UART_SetConfig+0x1d46>
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e316:	d212      	bcs.n	800e33e <UART_SetConfig+0x1d46>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	f023 030f 	bic.w	r3, r3, #15
 800e320:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	085b      	lsrs	r3, r3, #1
 800e326:	b29b      	uxth	r3, r3
 800e328:	f003 0307 	and.w	r3, r3, #7
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e330:	4313      	orrs	r3, r2
 800e332:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e33a:	60da      	str	r2, [r3, #12]
 800e33c:	e3a1      	b.n	800ea82 <UART_SetConfig+0x248a>
    }
    else
    {
      ret = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e344:	e39d      	b.n	800ea82 <UART_SetConfig+0x248a>
    }
  }
  else
  {
    switch (clocksource)
 800e346:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e34a:	2b40      	cmp	r3, #64	; 0x40
 800e34c:	f200 8386 	bhi.w	800ea5c <UART_SetConfig+0x2464>
 800e350:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <UART_SetConfig+0x1d60>)
 800e352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e356:	bf00      	nop
 800e358:	0800e45d 	.word	0x0800e45d
 800e35c:	0800e511 	.word	0x0800e511
 800e360:	0800ea5d 	.word	0x0800ea5d
 800e364:	0800ea5d 	.word	0x0800ea5d
 800e368:	0800e5c5 	.word	0x0800e5c5
 800e36c:	0800ea5d 	.word	0x0800ea5d
 800e370:	0800ea5d 	.word	0x0800ea5d
 800e374:	0800ea5d 	.word	0x0800ea5d
 800e378:	0800e67f 	.word	0x0800e67f
 800e37c:	0800ea5d 	.word	0x0800ea5d
 800e380:	0800ea5d 	.word	0x0800ea5d
 800e384:	0800ea5d 	.word	0x0800ea5d
 800e388:	0800ea5d 	.word	0x0800ea5d
 800e38c:	0800ea5d 	.word	0x0800ea5d
 800e390:	0800ea5d 	.word	0x0800ea5d
 800e394:	0800ea5d 	.word	0x0800ea5d
 800e398:	0800e739 	.word	0x0800e739
 800e39c:	0800ea5d 	.word	0x0800ea5d
 800e3a0:	0800ea5d 	.word	0x0800ea5d
 800e3a4:	0800ea5d 	.word	0x0800ea5d
 800e3a8:	0800ea5d 	.word	0x0800ea5d
 800e3ac:	0800ea5d 	.word	0x0800ea5d
 800e3b0:	0800ea5d 	.word	0x0800ea5d
 800e3b4:	0800ea5d 	.word	0x0800ea5d
 800e3b8:	0800ea5d 	.word	0x0800ea5d
 800e3bc:	0800ea5d 	.word	0x0800ea5d
 800e3c0:	0800ea5d 	.word	0x0800ea5d
 800e3c4:	0800ea5d 	.word	0x0800ea5d
 800e3c8:	0800ea5d 	.word	0x0800ea5d
 800e3cc:	0800ea5d 	.word	0x0800ea5d
 800e3d0:	0800ea5d 	.word	0x0800ea5d
 800e3d4:	0800ea5d 	.word	0x0800ea5d
 800e3d8:	0800e8a9 	.word	0x0800e8a9
 800e3dc:	0800ea5d 	.word	0x0800ea5d
 800e3e0:	0800ea5d 	.word	0x0800ea5d
 800e3e4:	0800ea5d 	.word	0x0800ea5d
 800e3e8:	0800ea5d 	.word	0x0800ea5d
 800e3ec:	0800ea5d 	.word	0x0800ea5d
 800e3f0:	0800ea5d 	.word	0x0800ea5d
 800e3f4:	0800ea5d 	.word	0x0800ea5d
 800e3f8:	0800ea5d 	.word	0x0800ea5d
 800e3fc:	0800ea5d 	.word	0x0800ea5d
 800e400:	0800ea5d 	.word	0x0800ea5d
 800e404:	0800ea5d 	.word	0x0800ea5d
 800e408:	0800ea5d 	.word	0x0800ea5d
 800e40c:	0800ea5d 	.word	0x0800ea5d
 800e410:	0800ea5d 	.word	0x0800ea5d
 800e414:	0800ea5d 	.word	0x0800ea5d
 800e418:	0800ea5d 	.word	0x0800ea5d
 800e41c:	0800ea5d 	.word	0x0800ea5d
 800e420:	0800ea5d 	.word	0x0800ea5d
 800e424:	0800ea5d 	.word	0x0800ea5d
 800e428:	0800ea5d 	.word	0x0800ea5d
 800e42c:	0800ea5d 	.word	0x0800ea5d
 800e430:	0800ea5d 	.word	0x0800ea5d
 800e434:	0800ea5d 	.word	0x0800ea5d
 800e438:	0800ea5d 	.word	0x0800ea5d
 800e43c:	0800ea5d 	.word	0x0800ea5d
 800e440:	0800ea5d 	.word	0x0800ea5d
 800e444:	0800ea5d 	.word	0x0800ea5d
 800e448:	0800ea5d 	.word	0x0800ea5d
 800e44c:	0800ea5d 	.word	0x0800ea5d
 800e450:	0800ea5d 	.word	0x0800ea5d
 800e454:	0800ea5d 	.word	0x0800ea5d
 800e458:	0800e99d 	.word	0x0800e99d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e45c:	f7fa f8c4 	bl	80085e8 <HAL_RCC_GetPCLK1Freq>
 800e460:	4602      	mov	r2, r0
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e466:	2b00      	cmp	r3, #0
 800e468:	d044      	beq.n	800e4f4 <UART_SetConfig+0x1efc>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d03e      	beq.n	800e4f0 <UART_SetConfig+0x1ef8>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e476:	2b02      	cmp	r3, #2
 800e478:	d038      	beq.n	800e4ec <UART_SetConfig+0x1ef4>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47e:	2b03      	cmp	r3, #3
 800e480:	d032      	beq.n	800e4e8 <UART_SetConfig+0x1ef0>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	2b04      	cmp	r3, #4
 800e488:	d02c      	beq.n	800e4e4 <UART_SetConfig+0x1eec>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48e:	2b05      	cmp	r3, #5
 800e490:	d026      	beq.n	800e4e0 <UART_SetConfig+0x1ee8>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e496:	2b06      	cmp	r3, #6
 800e498:	d020      	beq.n	800e4dc <UART_SetConfig+0x1ee4>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49e:	2b07      	cmp	r3, #7
 800e4a0:	d01a      	beq.n	800e4d8 <UART_SetConfig+0x1ee0>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a6:	2b08      	cmp	r3, #8
 800e4a8:	d014      	beq.n	800e4d4 <UART_SetConfig+0x1edc>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ae:	2b09      	cmp	r3, #9
 800e4b0:	d00e      	beq.n	800e4d0 <UART_SetConfig+0x1ed8>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b6:	2b0a      	cmp	r3, #10
 800e4b8:	d008      	beq.n	800e4cc <UART_SetConfig+0x1ed4>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4be:	2b0b      	cmp	r3, #11
 800e4c0:	d102      	bne.n	800e4c8 <UART_SetConfig+0x1ed0>
 800e4c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4c6:	e016      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e014      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4cc:	2380      	movs	r3, #128	; 0x80
 800e4ce:	e012      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	e010      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4d4:	2320      	movs	r3, #32
 800e4d6:	e00e      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4d8:	2310      	movs	r3, #16
 800e4da:	e00c      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4dc:	230c      	movs	r3, #12
 800e4de:	e00a      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4e0:	230a      	movs	r3, #10
 800e4e2:	e008      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4e4:	2308      	movs	r3, #8
 800e4e6:	e006      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4e8:	2306      	movs	r3, #6
 800e4ea:	e004      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4ec:	2304      	movs	r3, #4
 800e4ee:	e002      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e000      	b.n	800e4f6 <UART_SetConfig+0x1efe>
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	085b      	lsrs	r3, r3, #1
 800e500:	441a      	add	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	fbb2 f3f3 	udiv	r3, r2, r3
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e50e:	e2a9      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e510:	f7fa f880 	bl	8008614 <HAL_RCC_GetPCLK2Freq>
 800e514:	4602      	mov	r2, r0
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d044      	beq.n	800e5a8 <UART_SetConfig+0x1fb0>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	2b01      	cmp	r3, #1
 800e524:	d03e      	beq.n	800e5a4 <UART_SetConfig+0x1fac>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d038      	beq.n	800e5a0 <UART_SetConfig+0x1fa8>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e532:	2b03      	cmp	r3, #3
 800e534:	d032      	beq.n	800e59c <UART_SetConfig+0x1fa4>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	d02c      	beq.n	800e598 <UART_SetConfig+0x1fa0>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e542:	2b05      	cmp	r3, #5
 800e544:	d026      	beq.n	800e594 <UART_SetConfig+0x1f9c>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54a:	2b06      	cmp	r3, #6
 800e54c:	d020      	beq.n	800e590 <UART_SetConfig+0x1f98>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e552:	2b07      	cmp	r3, #7
 800e554:	d01a      	beq.n	800e58c <UART_SetConfig+0x1f94>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55a:	2b08      	cmp	r3, #8
 800e55c:	d014      	beq.n	800e588 <UART_SetConfig+0x1f90>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	2b09      	cmp	r3, #9
 800e564:	d00e      	beq.n	800e584 <UART_SetConfig+0x1f8c>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56a:	2b0a      	cmp	r3, #10
 800e56c:	d008      	beq.n	800e580 <UART_SetConfig+0x1f88>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e572:	2b0b      	cmp	r3, #11
 800e574:	d102      	bne.n	800e57c <UART_SetConfig+0x1f84>
 800e576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e57a:	e016      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e014      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e580:	2380      	movs	r3, #128	; 0x80
 800e582:	e012      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e584:	2340      	movs	r3, #64	; 0x40
 800e586:	e010      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e588:	2320      	movs	r3, #32
 800e58a:	e00e      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e58c:	2310      	movs	r3, #16
 800e58e:	e00c      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e590:	230c      	movs	r3, #12
 800e592:	e00a      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e594:	230a      	movs	r3, #10
 800e596:	e008      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e598:	2308      	movs	r3, #8
 800e59a:	e006      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e59c:	2306      	movs	r3, #6
 800e59e:	e004      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e5a0:	2304      	movs	r3, #4
 800e5a2:	e002      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e5a4:	2302      	movs	r3, #2
 800e5a6:	e000      	b.n	800e5aa <UART_SetConfig+0x1fb2>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	441a      	add	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5c2:	e24f      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5c4:	f107 0314 	add.w	r3, r7, #20
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fb fc03 	bl	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5ce:	69ba      	ldr	r2, [r7, #24]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d044      	beq.n	800e662 <UART_SetConfig+0x206a>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d03e      	beq.n	800e65e <UART_SetConfig+0x2066>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d038      	beq.n	800e65a <UART_SetConfig+0x2062>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d032      	beq.n	800e656 <UART_SetConfig+0x205e>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	d02c      	beq.n	800e652 <UART_SetConfig+0x205a>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fc:	2b05      	cmp	r3, #5
 800e5fe:	d026      	beq.n	800e64e <UART_SetConfig+0x2056>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e604:	2b06      	cmp	r3, #6
 800e606:	d020      	beq.n	800e64a <UART_SetConfig+0x2052>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	d01a      	beq.n	800e646 <UART_SetConfig+0x204e>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	2b08      	cmp	r3, #8
 800e616:	d014      	beq.n	800e642 <UART_SetConfig+0x204a>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	2b09      	cmp	r3, #9
 800e61e:	d00e      	beq.n	800e63e <UART_SetConfig+0x2046>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	2b0a      	cmp	r3, #10
 800e626:	d008      	beq.n	800e63a <UART_SetConfig+0x2042>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62c:	2b0b      	cmp	r3, #11
 800e62e:	d102      	bne.n	800e636 <UART_SetConfig+0x203e>
 800e630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e634:	e016      	b.n	800e664 <UART_SetConfig+0x206c>
 800e636:	2301      	movs	r3, #1
 800e638:	e014      	b.n	800e664 <UART_SetConfig+0x206c>
 800e63a:	2380      	movs	r3, #128	; 0x80
 800e63c:	e012      	b.n	800e664 <UART_SetConfig+0x206c>
 800e63e:	2340      	movs	r3, #64	; 0x40
 800e640:	e010      	b.n	800e664 <UART_SetConfig+0x206c>
 800e642:	2320      	movs	r3, #32
 800e644:	e00e      	b.n	800e664 <UART_SetConfig+0x206c>
 800e646:	2310      	movs	r3, #16
 800e648:	e00c      	b.n	800e664 <UART_SetConfig+0x206c>
 800e64a:	230c      	movs	r3, #12
 800e64c:	e00a      	b.n	800e664 <UART_SetConfig+0x206c>
 800e64e:	230a      	movs	r3, #10
 800e650:	e008      	b.n	800e664 <UART_SetConfig+0x206c>
 800e652:	2308      	movs	r3, #8
 800e654:	e006      	b.n	800e664 <UART_SetConfig+0x206c>
 800e656:	2306      	movs	r3, #6
 800e658:	e004      	b.n	800e664 <UART_SetConfig+0x206c>
 800e65a:	2304      	movs	r3, #4
 800e65c:	e002      	b.n	800e664 <UART_SetConfig+0x206c>
 800e65e:	2302      	movs	r3, #2
 800e660:	e000      	b.n	800e664 <UART_SetConfig+0x206c>
 800e662:	2301      	movs	r3, #1
 800e664:	fbb2 f2f3 	udiv	r2, r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	085b      	lsrs	r3, r3, #1
 800e66e:	441a      	add	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	fbb2 f3f3 	udiv	r3, r2, r3
 800e678:	b29b      	uxth	r3, r3
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e67c:	e1f2      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e67e:	f107 0308 	add.w	r3, r7, #8
 800e682:	4618      	mov	r0, r3
 800e684:	f7fb fcf2 	bl	800a06c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d044      	beq.n	800e71c <UART_SetConfig+0x2124>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e696:	2b01      	cmp	r3, #1
 800e698:	d03e      	beq.n	800e718 <UART_SetConfig+0x2120>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d038      	beq.n	800e714 <UART_SetConfig+0x211c>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d032      	beq.n	800e710 <UART_SetConfig+0x2118>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d02c      	beq.n	800e70c <UART_SetConfig+0x2114>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b6:	2b05      	cmp	r3, #5
 800e6b8:	d026      	beq.n	800e708 <UART_SetConfig+0x2110>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6be:	2b06      	cmp	r3, #6
 800e6c0:	d020      	beq.n	800e704 <UART_SetConfig+0x210c>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c6:	2b07      	cmp	r3, #7
 800e6c8:	d01a      	beq.n	800e700 <UART_SetConfig+0x2108>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ce:	2b08      	cmp	r3, #8
 800e6d0:	d014      	beq.n	800e6fc <UART_SetConfig+0x2104>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d6:	2b09      	cmp	r3, #9
 800e6d8:	d00e      	beq.n	800e6f8 <UART_SetConfig+0x2100>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	2b0a      	cmp	r3, #10
 800e6e0:	d008      	beq.n	800e6f4 <UART_SetConfig+0x20fc>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	2b0b      	cmp	r3, #11
 800e6e8:	d102      	bne.n	800e6f0 <UART_SetConfig+0x20f8>
 800e6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ee:	e016      	b.n	800e71e <UART_SetConfig+0x2126>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e014      	b.n	800e71e <UART_SetConfig+0x2126>
 800e6f4:	2380      	movs	r3, #128	; 0x80
 800e6f6:	e012      	b.n	800e71e <UART_SetConfig+0x2126>
 800e6f8:	2340      	movs	r3, #64	; 0x40
 800e6fa:	e010      	b.n	800e71e <UART_SetConfig+0x2126>
 800e6fc:	2320      	movs	r3, #32
 800e6fe:	e00e      	b.n	800e71e <UART_SetConfig+0x2126>
 800e700:	2310      	movs	r3, #16
 800e702:	e00c      	b.n	800e71e <UART_SetConfig+0x2126>
 800e704:	230c      	movs	r3, #12
 800e706:	e00a      	b.n	800e71e <UART_SetConfig+0x2126>
 800e708:	230a      	movs	r3, #10
 800e70a:	e008      	b.n	800e71e <UART_SetConfig+0x2126>
 800e70c:	2308      	movs	r3, #8
 800e70e:	e006      	b.n	800e71e <UART_SetConfig+0x2126>
 800e710:	2306      	movs	r3, #6
 800e712:	e004      	b.n	800e71e <UART_SetConfig+0x2126>
 800e714:	2304      	movs	r3, #4
 800e716:	e002      	b.n	800e71e <UART_SetConfig+0x2126>
 800e718:	2302      	movs	r3, #2
 800e71a:	e000      	b.n	800e71e <UART_SetConfig+0x2126>
 800e71c:	2301      	movs	r3, #1
 800e71e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	085b      	lsrs	r3, r3, #1
 800e728:	441a      	add	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e732:	b29b      	uxth	r3, r3
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e736:	e195      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e738:	4b87      	ldr	r3, [pc, #540]	; (800e958 <UART_SetConfig+0x2360>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0320 	and.w	r3, r3, #32
 800e740:	2b00      	cmp	r3, #0
 800e742:	d05d      	beq.n	800e800 <UART_SetConfig+0x2208>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e744:	4b84      	ldr	r3, [pc, #528]	; (800e958 <UART_SetConfig+0x2360>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	08db      	lsrs	r3, r3, #3
 800e74a:	f003 0303 	and.w	r3, r3, #3
 800e74e:	4a83      	ldr	r2, [pc, #524]	; (800e95c <UART_SetConfig+0x2364>)
 800e750:	40da      	lsrs	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	d044      	beq.n	800e7e4 <UART_SetConfig+0x21ec>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d03e      	beq.n	800e7e0 <UART_SetConfig+0x21e8>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e766:	2b02      	cmp	r3, #2
 800e768:	d038      	beq.n	800e7dc <UART_SetConfig+0x21e4>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d032      	beq.n	800e7d8 <UART_SetConfig+0x21e0>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e776:	2b04      	cmp	r3, #4
 800e778:	d02c      	beq.n	800e7d4 <UART_SetConfig+0x21dc>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77e:	2b05      	cmp	r3, #5
 800e780:	d026      	beq.n	800e7d0 <UART_SetConfig+0x21d8>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	2b06      	cmp	r3, #6
 800e788:	d020      	beq.n	800e7cc <UART_SetConfig+0x21d4>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	2b07      	cmp	r3, #7
 800e790:	d01a      	beq.n	800e7c8 <UART_SetConfig+0x21d0>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e796:	2b08      	cmp	r3, #8
 800e798:	d014      	beq.n	800e7c4 <UART_SetConfig+0x21cc>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79e:	2b09      	cmp	r3, #9
 800e7a0:	d00e      	beq.n	800e7c0 <UART_SetConfig+0x21c8>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	2b0a      	cmp	r3, #10
 800e7a8:	d008      	beq.n	800e7bc <UART_SetConfig+0x21c4>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ae:	2b0b      	cmp	r3, #11
 800e7b0:	d102      	bne.n	800e7b8 <UART_SetConfig+0x21c0>
 800e7b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7b6:	e016      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e014      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7bc:	2380      	movs	r3, #128	; 0x80
 800e7be:	e012      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7c0:	2340      	movs	r3, #64	; 0x40
 800e7c2:	e010      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7c4:	2320      	movs	r3, #32
 800e7c6:	e00e      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7c8:	2310      	movs	r3, #16
 800e7ca:	e00c      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7cc:	230c      	movs	r3, #12
 800e7ce:	e00a      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7d0:	230a      	movs	r3, #10
 800e7d2:	e008      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	e006      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7d8:	2306      	movs	r3, #6
 800e7da:	e004      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7dc:	2304      	movs	r3, #4
 800e7de:	e002      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	e000      	b.n	800e7e6 <UART_SetConfig+0x21ee>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	085b      	lsrs	r3, r3, #1
 800e7f0:	441a      	add	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e7fe:	e131      	b.n	800ea64 <UART_SetConfig+0x246c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e804:	2b00      	cmp	r3, #0
 800e806:	d043      	beq.n	800e890 <UART_SetConfig+0x2298>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d03d      	beq.n	800e88c <UART_SetConfig+0x2294>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e814:	2b02      	cmp	r3, #2
 800e816:	d037      	beq.n	800e888 <UART_SetConfig+0x2290>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d031      	beq.n	800e884 <UART_SetConfig+0x228c>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e824:	2b04      	cmp	r3, #4
 800e826:	d02b      	beq.n	800e880 <UART_SetConfig+0x2288>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82c:	2b05      	cmp	r3, #5
 800e82e:	d025      	beq.n	800e87c <UART_SetConfig+0x2284>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	2b06      	cmp	r3, #6
 800e836:	d01f      	beq.n	800e878 <UART_SetConfig+0x2280>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83c:	2b07      	cmp	r3, #7
 800e83e:	d019      	beq.n	800e874 <UART_SetConfig+0x227c>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e844:	2b08      	cmp	r3, #8
 800e846:	d013      	beq.n	800e870 <UART_SetConfig+0x2278>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	d00d      	beq.n	800e86c <UART_SetConfig+0x2274>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e854:	2b0a      	cmp	r3, #10
 800e856:	d007      	beq.n	800e868 <UART_SetConfig+0x2270>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85c:	2b0b      	cmp	r3, #11
 800e85e:	d101      	bne.n	800e864 <UART_SetConfig+0x226c>
 800e860:	4b3f      	ldr	r3, [pc, #252]	; (800e960 <UART_SetConfig+0x2368>)
 800e862:	e016      	b.n	800e892 <UART_SetConfig+0x229a>
 800e864:	4b3d      	ldr	r3, [pc, #244]	; (800e95c <UART_SetConfig+0x2364>)
 800e866:	e014      	b.n	800e892 <UART_SetConfig+0x229a>
 800e868:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <UART_SetConfig+0x236c>)
 800e86a:	e012      	b.n	800e892 <UART_SetConfig+0x229a>
 800e86c:	4b3e      	ldr	r3, [pc, #248]	; (800e968 <UART_SetConfig+0x2370>)
 800e86e:	e010      	b.n	800e892 <UART_SetConfig+0x229a>
 800e870:	4b3e      	ldr	r3, [pc, #248]	; (800e96c <UART_SetConfig+0x2374>)
 800e872:	e00e      	b.n	800e892 <UART_SetConfig+0x229a>
 800e874:	4b3e      	ldr	r3, [pc, #248]	; (800e970 <UART_SetConfig+0x2378>)
 800e876:	e00c      	b.n	800e892 <UART_SetConfig+0x229a>
 800e878:	4b3e      	ldr	r3, [pc, #248]	; (800e974 <UART_SetConfig+0x237c>)
 800e87a:	e00a      	b.n	800e892 <UART_SetConfig+0x229a>
 800e87c:	4b3e      	ldr	r3, [pc, #248]	; (800e978 <UART_SetConfig+0x2380>)
 800e87e:	e008      	b.n	800e892 <UART_SetConfig+0x229a>
 800e880:	4b3e      	ldr	r3, [pc, #248]	; (800e97c <UART_SetConfig+0x2384>)
 800e882:	e006      	b.n	800e892 <UART_SetConfig+0x229a>
 800e884:	4b3e      	ldr	r3, [pc, #248]	; (800e980 <UART_SetConfig+0x2388>)
 800e886:	e004      	b.n	800e892 <UART_SetConfig+0x229a>
 800e888:	4b3e      	ldr	r3, [pc, #248]	; (800e984 <UART_SetConfig+0x238c>)
 800e88a:	e002      	b.n	800e892 <UART_SetConfig+0x229a>
 800e88c:	4b3e      	ldr	r3, [pc, #248]	; (800e988 <UART_SetConfig+0x2390>)
 800e88e:	e000      	b.n	800e892 <UART_SetConfig+0x229a>
 800e890:	4b32      	ldr	r3, [pc, #200]	; (800e95c <UART_SetConfig+0x2364>)
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	6852      	ldr	r2, [r2, #4]
 800e896:	0852      	lsrs	r2, r2, #1
 800e898:	441a      	add	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8a6:	e0dd      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d046      	beq.n	800e93e <UART_SetConfig+0x2346>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d040      	beq.n	800e93a <UART_SetConfig+0x2342>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d03a      	beq.n	800e936 <UART_SetConfig+0x233e>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d034      	beq.n	800e932 <UART_SetConfig+0x233a>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	d02e      	beq.n	800e92e <UART_SetConfig+0x2336>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d4:	2b05      	cmp	r3, #5
 800e8d6:	d028      	beq.n	800e92a <UART_SetConfig+0x2332>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8dc:	2b06      	cmp	r3, #6
 800e8de:	d022      	beq.n	800e926 <UART_SetConfig+0x232e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e4:	2b07      	cmp	r3, #7
 800e8e6:	d01c      	beq.n	800e922 <UART_SetConfig+0x232a>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ec:	2b08      	cmp	r3, #8
 800e8ee:	d016      	beq.n	800e91e <UART_SetConfig+0x2326>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f4:	2b09      	cmp	r3, #9
 800e8f6:	d00f      	beq.n	800e918 <UART_SetConfig+0x2320>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fc:	2b0a      	cmp	r3, #10
 800e8fe:	d008      	beq.n	800e912 <UART_SetConfig+0x231a>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	2b0b      	cmp	r3, #11
 800e906:	d102      	bne.n	800e90e <UART_SetConfig+0x2316>
 800e908:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e90c:	e018      	b.n	800e940 <UART_SetConfig+0x2348>
 800e90e:	4b18      	ldr	r3, [pc, #96]	; (800e970 <UART_SetConfig+0x2378>)
 800e910:	e016      	b.n	800e940 <UART_SetConfig+0x2348>
 800e912:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e916:	e013      	b.n	800e940 <UART_SetConfig+0x2348>
 800e918:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e91c:	e010      	b.n	800e940 <UART_SetConfig+0x2348>
 800e91e:	4b1b      	ldr	r3, [pc, #108]	; (800e98c <UART_SetConfig+0x2394>)
 800e920:	e00e      	b.n	800e940 <UART_SetConfig+0x2348>
 800e922:	4b0f      	ldr	r3, [pc, #60]	; (800e960 <UART_SetConfig+0x2368>)
 800e924:	e00c      	b.n	800e940 <UART_SetConfig+0x2348>
 800e926:	4b1a      	ldr	r3, [pc, #104]	; (800e990 <UART_SetConfig+0x2398>)
 800e928:	e00a      	b.n	800e940 <UART_SetConfig+0x2348>
 800e92a:	4b1a      	ldr	r3, [pc, #104]	; (800e994 <UART_SetConfig+0x239c>)
 800e92c:	e008      	b.n	800e940 <UART_SetConfig+0x2348>
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <UART_SetConfig+0x236c>)
 800e930:	e006      	b.n	800e940 <UART_SetConfig+0x2348>
 800e932:	4b19      	ldr	r3, [pc, #100]	; (800e998 <UART_SetConfig+0x23a0>)
 800e934:	e004      	b.n	800e940 <UART_SetConfig+0x2348>
 800e936:	4b0c      	ldr	r3, [pc, #48]	; (800e968 <UART_SetConfig+0x2370>)
 800e938:	e002      	b.n	800e940 <UART_SetConfig+0x2348>
 800e93a:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <UART_SetConfig+0x2374>)
 800e93c:	e000      	b.n	800e940 <UART_SetConfig+0x2348>
 800e93e:	4b0c      	ldr	r3, [pc, #48]	; (800e970 <UART_SetConfig+0x2378>)
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	6852      	ldr	r2, [r2, #4]
 800e944:	0852      	lsrs	r2, r2, #1
 800e946:	441a      	add	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e950:	b29b      	uxth	r3, r3
 800e952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e954:	e086      	b.n	800ea64 <UART_SetConfig+0x246c>
 800e956:	bf00      	nop
 800e958:	58024400 	.word	0x58024400
 800e95c:	03d09000 	.word	0x03d09000
 800e960:	0003d090 	.word	0x0003d090
 800e964:	0007a120 	.word	0x0007a120
 800e968:	000f4240 	.word	0x000f4240
 800e96c:	001e8480 	.word	0x001e8480
 800e970:	003d0900 	.word	0x003d0900
 800e974:	00516155 	.word	0x00516155
 800e978:	0061a800 	.word	0x0061a800
 800e97c:	007a1200 	.word	0x007a1200
 800e980:	00a2c2aa 	.word	0x00a2c2aa
 800e984:	00f42400 	.word	0x00f42400
 800e988:	01e84800 	.word	0x01e84800
 800e98c:	0001e848 	.word	0x0001e848
 800e990:	00051615 	.word	0x00051615
 800e994:	00061a80 	.word	0x00061a80
 800e998:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d04e      	beq.n	800ea42 <UART_SetConfig+0x244a>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d047      	beq.n	800ea3c <UART_SetConfig+0x2444>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d040      	beq.n	800ea36 <UART_SetConfig+0x243e>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d039      	beq.n	800ea30 <UART_SetConfig+0x2438>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d032      	beq.n	800ea2a <UART_SetConfig+0x2432>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c8:	2b05      	cmp	r3, #5
 800e9ca:	d02b      	beq.n	800ea24 <UART_SetConfig+0x242c>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d0:	2b06      	cmp	r3, #6
 800e9d2:	d024      	beq.n	800ea1e <UART_SetConfig+0x2426>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d8:	2b07      	cmp	r3, #7
 800e9da:	d01d      	beq.n	800ea18 <UART_SetConfig+0x2420>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e0:	2b08      	cmp	r3, #8
 800e9e2:	d016      	beq.n	800ea12 <UART_SetConfig+0x241a>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	d00f      	beq.n	800ea0c <UART_SetConfig+0x2414>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f0:	2b0a      	cmp	r3, #10
 800e9f2:	d008      	beq.n	800ea06 <UART_SetConfig+0x240e>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	2b0b      	cmp	r3, #11
 800e9fa:	d101      	bne.n	800ea00 <UART_SetConfig+0x2408>
 800e9fc:	2380      	movs	r3, #128	; 0x80
 800e9fe:	e022      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea04:	e01f      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea0a:	e01c      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea10:	e019      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea16:	e016      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea1c:	e013      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea1e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ea22:	e010      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea24:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ea28:	e00d      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea2e:	e00a      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea30:	f241 5355 	movw	r3, #5461	; 0x1555
 800ea34:	e007      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea3a:	e004      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea40:	e001      	b.n	800ea46 <UART_SetConfig+0x244e>
 800ea42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	6852      	ldr	r2, [r2, #4]
 800ea4a:	0852      	lsrs	r2, r2, #1
 800ea4c:	441a      	add	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea5a:	e003      	b.n	800ea64 <UART_SetConfig+0x246c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800ea62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	2b0f      	cmp	r3, #15
 800ea68:	d908      	bls.n	800ea7c <UART_SetConfig+0x2484>
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea70:	d204      	bcs.n	800ea7c <UART_SetConfig+0x2484>
    {
      huart->Instance->BRR = usartdiv;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea78:	60da      	str	r2, [r3, #12]
 800ea7a:	e002      	b.n	800ea82 <UART_SetConfig+0x248a>
    }
    else
    {
      ret = HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ea9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3738      	adds	r7, #56	; 0x38
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800eaac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab8:	2bff      	cmp	r3, #255	; 0xff
 800eaba:	d904      	bls.n	800eac6 <UART_AdvFeatureConfig+0x1a>
 800eabc:	f640 31ff 	movw	r1, #3071	; 0xbff
 800eac0:	4899      	ldr	r0, [pc, #612]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800eac2:	f7f2 fb0d 	bl	80010e0 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d018      	beq.n	800eb04 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d009      	beq.n	800eaee <UART_AdvFeatureConfig+0x42>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eae2:	d004      	beq.n	800eaee <UART_AdvFeatureConfig+0x42>
 800eae4:	f640 4104 	movw	r1, #3076	; 0xc04
 800eae8:	488f      	ldr	r0, [pc, #572]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800eaea:	f7f2 faf9 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d018      	beq.n	800eb42 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d009      	beq.n	800eb2c <UART_AdvFeatureConfig+0x80>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb20:	d004      	beq.n	800eb2c <UART_AdvFeatureConfig+0x80>
 800eb22:	f640 410b 	movw	r1, #3083	; 0xc0b
 800eb26:	4880      	ldr	r0, [pc, #512]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800eb28:	f7f2 fada 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb46:	f003 0304 	and.w	r3, r3, #4
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d018      	beq.n	800eb80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <UART_AdvFeatureConfig+0xbe>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb5e:	d004      	beq.n	800eb6a <UART_AdvFeatureConfig+0xbe>
 800eb60:	f640 4112 	movw	r1, #3090	; 0xc12
 800eb64:	4870      	ldr	r0, [pc, #448]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800eb66:	f7f2 fabb 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	430a      	orrs	r2, r1
 800eb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb84:	f003 0308 	and.w	r3, r3, #8
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d018      	beq.n	800ebbe <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <UART_AdvFeatureConfig+0xfc>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb9c:	d004      	beq.n	800eba8 <UART_AdvFeatureConfig+0xfc>
 800eb9e:	f640 4119 	movw	r1, #3097	; 0xc19
 800eba2:	4861      	ldr	r0, [pc, #388]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800eba4:	f7f2 fa9c 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	f003 0310 	and.w	r3, r3, #16
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d018      	beq.n	800ebfc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d009      	beq.n	800ebe6 <UART_AdvFeatureConfig+0x13a>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebda:	d004      	beq.n	800ebe6 <UART_AdvFeatureConfig+0x13a>
 800ebdc:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800ebe0:	4851      	ldr	r0, [pc, #324]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800ebe2:	f7f2 fa7d 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	430a      	orrs	r2, r1
 800ebfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec00:	f003 0320 	and.w	r3, r3, #32
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d018      	beq.n	800ec3a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d009      	beq.n	800ec24 <UART_AdvFeatureConfig+0x178>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec18:	d004      	beq.n	800ec24 <UART_AdvFeatureConfig+0x178>
 800ec1a:	f640 4127 	movw	r1, #3111	; 0xc27
 800ec1e:	4842      	ldr	r0, [pc, #264]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800ec20:	f7f2 fa5e 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	430a      	orrs	r2, r1
 800ec38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 8082 	beq.w	800ed4c <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a37      	ldr	r2, [pc, #220]	; (800ed2c <UART_AdvFeatureConfig+0x280>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d027      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a36      	ldr	r2, [pc, #216]	; (800ed30 <UART_AdvFeatureConfig+0x284>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d022      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a34      	ldr	r2, [pc, #208]	; (800ed34 <UART_AdvFeatureConfig+0x288>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d01d      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a33      	ldr	r2, [pc, #204]	; (800ed38 <UART_AdvFeatureConfig+0x28c>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d018      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a31      	ldr	r2, [pc, #196]	; (800ed3c <UART_AdvFeatureConfig+0x290>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d013      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a30      	ldr	r2, [pc, #192]	; (800ed40 <UART_AdvFeatureConfig+0x294>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d00e      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a2e      	ldr	r2, [pc, #184]	; (800ed44 <UART_AdvFeatureConfig+0x298>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d009      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4a2d      	ldr	r2, [pc, #180]	; (800ed48 <UART_AdvFeatureConfig+0x29c>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d004      	beq.n	800eca2 <UART_AdvFeatureConfig+0x1f6>
 800ec98:	f640 412e 	movw	r1, #3118	; 0xc2e
 800ec9c:	4822      	ldr	r0, [pc, #136]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800ec9e:	f7f2 fa1f 	bl	80010e0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d009      	beq.n	800ecbe <UART_AdvFeatureConfig+0x212>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecb2:	d004      	beq.n	800ecbe <UART_AdvFeatureConfig+0x212>
 800ecb4:	f640 412f 	movw	r1, #3119	; 0xc2f
 800ecb8:	481b      	ldr	r0, [pc, #108]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800ecba:	f7f2 fa11 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecdc:	d136      	bne.n	800ed4c <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d013      	beq.n	800ed0e <UART_AdvFeatureConfig+0x262>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecee:	d00e      	beq.n	800ed0e <UART_AdvFeatureConfig+0x262>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecf8:	d009      	beq.n	800ed0e <UART_AdvFeatureConfig+0x262>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed02:	d004      	beq.n	800ed0e <UART_AdvFeatureConfig+0x262>
 800ed04:	f640 4134 	movw	r1, #3124	; 0xc34
 800ed08:	4807      	ldr	r0, [pc, #28]	; (800ed28 <UART_AdvFeatureConfig+0x27c>)
 800ed0a:	f7f2 f9e9 	bl	80010e0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	430a      	orrs	r2, r1
 800ed22:	605a      	str	r2, [r3, #4]
 800ed24:	e012      	b.n	800ed4c <UART_AdvFeatureConfig+0x2a0>
 800ed26:	bf00      	nop
 800ed28:	08013f24 	.word	0x08013f24
 800ed2c:	40011000 	.word	0x40011000
 800ed30:	40004400 	.word	0x40004400
 800ed34:	40004800 	.word	0x40004800
 800ed38:	40004c00 	.word	0x40004c00
 800ed3c:	40005000 	.word	0x40005000
 800ed40:	40011400 	.word	0x40011400
 800ed44:	40007800 	.word	0x40007800
 800ed48:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d018      	beq.n	800ed8a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d009      	beq.n	800ed74 <UART_AdvFeatureConfig+0x2c8>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ed68:	d004      	beq.n	800ed74 <UART_AdvFeatureConfig+0x2c8>
 800ed6a:	f640 413c 	movw	r1, #3132	; 0xc3c
 800ed6e:	4809      	ldr	r0, [pc, #36]	; (800ed94 <UART_AdvFeatureConfig+0x2e8>)
 800ed70:	f7f2 f9b6 	bl	80010e0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	430a      	orrs	r2, r1
 800ed88:	605a      	str	r2, [r3, #4]
  }
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	08013f24 	.word	0x08013f24

0800ed98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b086      	sub	sp, #24
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800eda8:	f7f2 fce8 	bl	800177c <HAL_GetTick>
 800edac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 0308 	and.w	r3, r3, #8
 800edb8:	2b08      	cmp	r3, #8
 800edba:	d10e      	bne.n	800edda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edc0:	9300      	str	r3, [sp, #0]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f82c 	bl	800ee28 <UART_WaitOnFlagUntilTimeout>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	e022      	b.n	800ee20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0304 	and.w	r3, r3, #4
 800ede4:	2b04      	cmp	r3, #4
 800ede6:	d10e      	bne.n	800ee06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ede8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f816 	bl	800ee28 <UART_WaitOnFlagUntilTimeout>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e00c      	b.n	800ee20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2220      	movs	r2, #32
 800ee0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2220      	movs	r2, #32
 800ee12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	603b      	str	r3, [r7, #0]
 800ee34:	4613      	mov	r3, r2
 800ee36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee38:	e02c      	b.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee40:	d028      	beq.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee42:	f7f2 fc9b 	bl	800177c <HAL_GetTick>
 800ee46:	4602      	mov	r2, r0
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	1ad3      	subs	r3, r2, r3
 800ee4c:	69ba      	ldr	r2, [r7, #24]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d302      	bcc.n	800ee58 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d11d      	bne.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ee66:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	689a      	ldr	r2, [r3, #8]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f022 0201 	bic.w	r2, r2, #1
 800ee76:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2220      	movs	r2, #32
 800ee84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ee90:	2303      	movs	r3, #3
 800ee92:	e00f      	b.n	800eeb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	69da      	ldr	r2, [r3, #28]
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	bf0c      	ite	eq
 800eea4:	2301      	moveq	r3, #1
 800eea6:	2300      	movne	r3, #0
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	461a      	mov	r2, r3
 800eeac:	79fb      	ldrb	r3, [r7, #7]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d0c3      	beq.n	800ee3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a2e      	ldr	r2, [pc, #184]	; (800ef84 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d027      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a2d      	ldr	r2, [pc, #180]	; (800ef88 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d022      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a2b      	ldr	r2, [pc, #172]	; (800ef8c <HAL_UARTEx_DisableFifoMode+0xd0>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d01d      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a2a      	ldr	r2, [pc, #168]	; (800ef90 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d018      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a28      	ldr	r2, [pc, #160]	; (800ef94 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d013      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a27      	ldr	r2, [pc, #156]	; (800ef98 <HAL_UARTEx_DisableFifoMode+0xdc>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d00e      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a25      	ldr	r2, [pc, #148]	; (800ef9c <HAL_UARTEx_DisableFifoMode+0xe0>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d009      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a24      	ldr	r2, [pc, #144]	; (800efa0 <HAL_UARTEx_DisableFifoMode+0xe4>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d004      	beq.n	800ef1e <HAL_UARTEx_DisableFifoMode+0x62>
 800ef14:	f240 2113 	movw	r1, #531	; 0x213
 800ef18:	4822      	ldr	r0, [pc, #136]	; (800efa4 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800ef1a:	f7f2 f8e1 	bl	80010e0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d101      	bne.n	800ef2c <HAL_UARTEx_DisableFifoMode+0x70>
 800ef28:	2302      	movs	r3, #2
 800ef2a:	e027      	b.n	800ef7c <HAL_UARTEx_DisableFifoMode+0xc0>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2224      	movs	r2, #36	; 0x24
 800ef38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f022 0201 	bic.w	r2, r2, #1
 800ef52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ef5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2220      	movs	r2, #32
 800ef6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	40011000 	.word	0x40011000
 800ef88:	40004400 	.word	0x40004400
 800ef8c:	40004800 	.word	0x40004800
 800ef90:	40004c00 	.word	0x40004c00
 800ef94:	40005000 	.word	0x40005000
 800ef98:	40011400 	.word	0x40011400
 800ef9c:	40007800 	.word	0x40007800
 800efa0:	40007c00 	.word	0x40007c00
 800efa4:	08013f60 	.word	0x08013f60

0800efa8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a40      	ldr	r2, [pc, #256]	; (800f0b8 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d027      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a3e      	ldr	r2, [pc, #248]	; (800f0bc <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d022      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a3d      	ldr	r2, [pc, #244]	; (800f0c0 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d01d      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a3b      	ldr	r2, [pc, #236]	; (800f0c4 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d018      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a3a      	ldr	r2, [pc, #232]	; (800f0c8 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d013      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a38      	ldr	r2, [pc, #224]	; (800f0cc <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d00e      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a37      	ldr	r2, [pc, #220]	; (800f0d0 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d009      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a35      	ldr	r2, [pc, #212]	; (800f0d4 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d004      	beq.n	800f00c <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800f002:	f240 2141 	movw	r1, #577	; 0x241
 800f006:	4834      	ldr	r0, [pc, #208]	; (800f0d8 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800f008:	f7f2 f86a 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d018      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f018:	d014      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f020:	d010      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f028:	d00c      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f030:	d008      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800f038:	d004      	beq.n	800f044 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800f03a:	f240 2142 	movw	r1, #578	; 0x242
 800f03e:	4826      	ldr	r0, [pc, #152]	; (800f0d8 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800f040:	f7f2 f84e 	bl	80010e0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d101      	bne.n	800f052 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800f04e:	2302      	movs	r3, #2
 800f050:	e02d      	b.n	800f0ae <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2224      	movs	r2, #36	; 0x24
 800f05e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f022 0201 	bic.w	r2, r2, #1
 800f078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	683a      	ldr	r2, [r7, #0]
 800f08a:	430a      	orrs	r2, r1
 800f08c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f8be 	bl	800f210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2220      	movs	r2, #32
 800f0a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	40011000 	.word	0x40011000
 800f0bc:	40004400 	.word	0x40004400
 800f0c0:	40004800 	.word	0x40004800
 800f0c4:	40004c00 	.word	0x40004c00
 800f0c8:	40005000 	.word	0x40005000
 800f0cc:	40011400 	.word	0x40011400
 800f0d0:	40007800 	.word	0x40007800
 800f0d4:	40007c00 	.word	0x40007c00
 800f0d8:	08013f60 	.word	0x08013f60

0800f0dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a40      	ldr	r2, [pc, #256]	; (800f1ec <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d027      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a3e      	ldr	r2, [pc, #248]	; (800f1f0 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d022      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a3d      	ldr	r2, [pc, #244]	; (800f1f4 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d01d      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a3b      	ldr	r2, [pc, #236]	; (800f1f8 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d018      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a3a      	ldr	r2, [pc, #232]	; (800f1fc <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d013      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a38      	ldr	r2, [pc, #224]	; (800f200 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d00e      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a37      	ldr	r2, [pc, #220]	; (800f204 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d009      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a35      	ldr	r2, [pc, #212]	; (800f208 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d004      	beq.n	800f140 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800f136:	f240 2172 	movw	r1, #626	; 0x272
 800f13a:	4834      	ldr	r0, [pc, #208]	; (800f20c <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800f13c:	f7f1 ffd0 	bl	80010e0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d018      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f14c:	d014      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f154:	d010      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800f15c:	d00c      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f164:	d008      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800f16c:	d004      	beq.n	800f178 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800f16e:	f240 2173 	movw	r1, #627	; 0x273
 800f172:	4826      	ldr	r0, [pc, #152]	; (800f20c <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800f174:	f7f1 ffb4 	bl	80010e0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d101      	bne.n	800f186 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800f182:	2302      	movs	r3, #2
 800f184:	e02d      	b.n	800f1e2 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2224      	movs	r2, #36	; 0x24
 800f192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f022 0201 	bic.w	r2, r2, #1
 800f1ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f824 	bl	800f210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2220      	movs	r2, #32
 800f1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	40011000 	.word	0x40011000
 800f1f0:	40004400 	.word	0x40004400
 800f1f4:	40004800 	.word	0x40004800
 800f1f8:	40004c00 	.word	0x40004c00
 800f1fc:	40005000 	.word	0x40005000
 800f200:	40011400 	.word	0x40011400
 800f204:	40007800 	.word	0x40007800
 800f208:	40007c00 	.word	0x40007c00
 800f20c:	08013f60 	.word	0x08013f60

0800f210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f210:	b480      	push	{r7}
 800f212:	b089      	sub	sp, #36	; 0x24
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800f218:	4a2f      	ldr	r2, [pc, #188]	; (800f2d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800f21a:	f107 0314 	add.w	r3, r7, #20
 800f21e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f222:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800f226:	4a2d      	ldr	r2, [pc, #180]	; (800f2dc <UARTEx_SetNbDataToProcess+0xcc>)
 800f228:	f107 030c 	add.w	r3, r7, #12
 800f22c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f230:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d108      	bne.n	800f24e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f24c:	e03d      	b.n	800f2ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f24e:	2308      	movs	r3, #8
 800f250:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f252:	2308      	movs	r3, #8
 800f254:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	0e5b      	lsrs	r3, r3, #25
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	f003 0307 	and.w	r3, r3, #7
 800f264:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	0f5b      	lsrs	r3, r3, #29
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	f003 0307 	and.w	r3, r3, #7
 800f274:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800f276:	7fbb      	ldrb	r3, [r7, #30]
 800f278:	7f3a      	ldrb	r2, [r7, #28]
 800f27a:	f107 0120 	add.w	r1, r7, #32
 800f27e:	440a      	add	r2, r1
 800f280:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f284:	fb02 f303 	mul.w	r3, r2, r3
 800f288:	7f3a      	ldrb	r2, [r7, #28]
 800f28a:	f107 0120 	add.w	r1, r7, #32
 800f28e:	440a      	add	r2, r1
 800f290:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f294:	fb93 f3f2 	sdiv	r3, r3, r2
 800f298:	b29a      	uxth	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800f2a0:	7ffb      	ldrb	r3, [r7, #31]
 800f2a2:	7f7a      	ldrb	r2, [r7, #29]
 800f2a4:	f107 0120 	add.w	r1, r7, #32
 800f2a8:	440a      	add	r2, r1
 800f2aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f2ae:	fb02 f303 	mul.w	r3, r2, r3
 800f2b2:	7f7a      	ldrb	r2, [r7, #29]
 800f2b4:	f107 0120 	add.w	r1, r7, #32
 800f2b8:	440a      	add	r2, r1
 800f2ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f2be:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f2ca:	bf00      	nop
 800f2cc:	3724      	adds	r7, #36	; 0x24
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	08013f9c 	.word	0x08013f9c
 800f2dc:	08013fa4 	.word	0x08013fa4

0800f2e0 <cisInit>:
void cisCalibration(void);

/* Private user code ---------------------------------------------------------*/

void cisInit(void)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	af00      	add	r7, sp, #0
	cisADC_Init();
 800f2e4:	f000 f8e4 	bl	800f4b0 <cisADC_Init>
	cisTIM_Init(CIS_CLK_FREQ);
 800f2e8:	4804      	ldr	r0, [pc, #16]	; (800f2fc <cisInit+0x1c>)
 800f2ea:	f000 f85d 	bl	800f3a8 <cisTIM_Init>
	HAL_Delay(100);
 800f2ee:	2064      	movs	r0, #100	; 0x64
 800f2f0:	f7f2 fa50 	bl	8001794 <HAL_Delay>
	cisCalibration();
 800f2f4:	f000 f804 	bl	800f300 <cisCalibration>
}
 800f2f8:	bf00      	nop
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	00061a80 	.word	0x00061a80

0800f300 <cisCalibration>:

void cisCalibration(void)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	607b      	str	r3, [r7, #4]

	printf("/***** START CIS CALIBRATION *****/\n");
 800f30a:	481b      	ldr	r0, [pc, #108]	; (800f378 <cisCalibration+0x78>)
 800f30c:	f001 fb50 	bl	80109b0 <puts>
	calibration_state = CAL_ON;
 800f310:	4b1a      	ldr	r3, [pc, #104]	; (800f37c <cisCalibration+0x7c>)
 800f312:	2200      	movs	r2, #0
 800f314:	701a      	strb	r2, [r3, #0]

	while (cnt < CIS_CAL_CYCLE)
 800f316:	e00a      	b.n	800f32e <cisCalibration+0x2e>
	{
		if (calibration_state != CAL_ON)
 800f318:	4b18      	ldr	r3, [pc, #96]	; (800f37c <cisCalibration+0x7c>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <cisCalibration+0x2e>
		{
			cnt++;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3301      	adds	r3, #1
 800f326:	607b      	str	r3, [r7, #4]
			calibration_state = CAL_ON;
 800f328:	4b14      	ldr	r3, [pc, #80]	; (800f37c <cisCalibration+0x7c>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	701a      	strb	r2, [r3, #0]
	while (cnt < CIS_CAL_CYCLE)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b09      	cmp	r3, #9
 800f332:	d9f1      	bls.n	800f318 <cisCalibration+0x18>
		}
	}
	calibration_state = CAL_OFF;
 800f334:	4b11      	ldr	r3, [pc, #68]	; (800f37c <cisCalibration+0x7c>)
 800f336:	2201      	movs	r2, #1
 800f338:	701a      	strb	r2, [r3, #0]

	for (uint32_t i = 0; i < CIS_PIXELS_NB; i++)
 800f33a:	2300      	movs	r3, #0
 800f33c:	603b      	str	r3, [r7, #0]
 800f33e:	e00e      	b.n	800f35e <cisCalibration+0x5e>
	{
		cis_adc_offset[i] /= CIS_CAL_CYCLE;
 800f340:	4a0f      	ldr	r2, [pc, #60]	; (800f380 <cisCalibration+0x80>)
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f348:	4a0e      	ldr	r2, [pc, #56]	; (800f384 <cisCalibration+0x84>)
 800f34a:	fba2 2303 	umull	r2, r3, r2, r3
 800f34e:	08da      	lsrs	r2, r3, #3
 800f350:	490b      	ldr	r1, [pc, #44]	; (800f380 <cisCalibration+0x80>)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i = 0; i < CIS_PIXELS_NB; i++)
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	3301      	adds	r3, #1
 800f35c:	603b      	str	r3, [r7, #0]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f241 421b 	movw	r2, #5147	; 0x141b
 800f364:	4293      	cmp	r3, r2
 800f366:	d9eb      	bls.n	800f340 <cisCalibration+0x40>
	}
	printf("/******** END CALIBRATION ********/\n");
 800f368:	4807      	ldr	r0, [pc, #28]	; (800f388 <cisCalibration+0x88>)
 800f36a:	f001 fb21 	bl	80109b0 <puts>
}
 800f36e:	bf00      	nop
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	08013fac 	.word	0x08013fac
 800f37c:	24000028 	.word	0x24000028
 800f380:	2400529c 	.word	0x2400529c
 800f384:	cccccccd 	.word	0xcccccccd
 800f388:	08013fd0 	.word	0x08013fd0

0800f38c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	4603      	mov	r3, r0
 800f394:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != GPIO_PIN_13)
 800f396:	88fb      	ldrh	r3, [r7, #6]
 800f398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
		return;

//	cisCalibration();
}
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <cisTIM_Init>:
 * @brief  Init CIS clock Frequency
 * @param  sampling_frequency
 * @retval Error
 */
int32_t cisTIM_Init(uint32_t cis_clk_freq)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08c      	sub	sp, #48	; 0x30
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
	HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800f3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	605a      	str	r2, [r3, #4]
	HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800f3ba:	f107 0314 	add.w	r3, r7, #20
 800f3be:	2200      	movs	r2, #0
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	605a      	str	r2, [r3, #4]
 800f3c4:	609a      	str	r2, [r3, #8]
 800f3c6:	60da      	str	r2, [r3, #12]
	HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 800f3c8:	f107 0308 	add.w	r3, r7, #8
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	601a      	str	r2, [r3, #0]
 800f3d0:	605a      	str	r2, [r3, #4]
 800f3d2:	609a      	str	r2, [r3, #8]

	uint32_t uwPrescalerValue = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	62fb      	str	r3, [r7, #44]	; 0x2c

	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 2) / (cis_clk_freq));
 800f3d8:	4b32      	ldr	r3, [pc, #200]	; (800f4a4 <cisTIM_Init+0xfc>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	085a      	lsrs	r2, r3, #1
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	hhrtim.Instance = HRTIM1;
 800f3e6:	4b30      	ldr	r3, [pc, #192]	; (800f4a8 <cisTIM_Init+0x100>)
 800f3e8:	4a30      	ldr	r2, [pc, #192]	; (800f4ac <cisTIM_Init+0x104>)
 800f3ea:	601a      	str	r2, [r3, #0]
	hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800f3ec:	4b2e      	ldr	r3, [pc, #184]	; (800f4a8 <cisTIM_Init+0x100>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	605a      	str	r2, [r3, #4]
	hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800f3f2:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <cisTIM_Init+0x100>)
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	609a      	str	r2, [r3, #8]
	if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800f3f8:	482b      	ldr	r0, [pc, #172]	; (800f4a8 <cisTIM_Init+0x100>)
 800f3fa:	f7f7 f9db 	bl	80067b4 <HAL_HRTIM_Init>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d001      	beq.n	800f408 <cisTIM_Init+0x60>
	{
		Error_Handler();
 800f404:	f7f1 fe64 	bl	80010d0 <Error_Handler>
	}
	pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 800f408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
	pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERA_PERIOD;
 800f40e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_HRTIM_ADCTriggerConfig(&hhrtim, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 800f414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f418:	461a      	mov	r2, r3
 800f41a:	2101      	movs	r1, #1
 800f41c:	4822      	ldr	r0, [pc, #136]	; (800f4a8 <cisTIM_Init+0x100>)
 800f41e:	f7f7 fcd5 	bl	8006dcc <HAL_HRTIM_ADCTriggerConfig>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <cisTIM_Init+0x84>
	{
		Error_Handler();
 800f428:	f7f1 fe52 	bl	80010d0 <Error_Handler>
	}
	/*-------------------------------------------------------------------------------------*/
	pTimeBaseCfg.Period = uwPrescalerValue;
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	617b      	str	r3, [r7, #20]
	pTimeBaseCfg.RepetitionCounter = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	61bb      	str	r3, [r7, #24]
	pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800f434:	2305      	movs	r3, #5
 800f436:	61fb      	str	r3, [r7, #28]
	pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800f438:	2308      	movs	r3, #8
 800f43a:	623b      	str	r3, [r7, #32]
	if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800f43c:	f107 0314 	add.w	r3, r7, #20
 800f440:	461a      	mov	r2, r3
 800f442:	2100      	movs	r1, #0
 800f444:	4818      	ldr	r0, [pc, #96]	; (800f4a8 <cisTIM_Init+0x100>)
 800f446:	f7f7 fadb 	bl	8006a00 <HAL_HRTIM_TimeBaseConfig>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <cisTIM_Init+0xac>
	{
		Error_Handler();
 800f450:	f7f1 fe3e 	bl	80010d0 <Error_Handler>
	}

	pTimeBaseCfg.Period = uwPrescalerValue;
 800f454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f456:	617b      	str	r3, [r7, #20]

	/*-------------------------------------------------------------------------------------*/
	pSimplePWMChannelCfg.Pulse = uwPrescalerValue / 2;
 800f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45a:	085b      	lsrs	r3, r3, #1
 800f45c:	60bb      	str	r3, [r7, #8]
	pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800f45e:	2302      	movs	r3, #2
 800f460:	60fb      	str	r3, [r7, #12]
	pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800f462:	2308      	movs	r3, #8
 800f464:	613b      	str	r3, [r7, #16]
	if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pSimplePWMChannelCfg) != HAL_OK)
 800f466:	f107 0308 	add.w	r3, r7, #8
 800f46a:	2201      	movs	r2, #1
 800f46c:	2100      	movs	r1, #0
 800f46e:	480e      	ldr	r0, [pc, #56]	; (800f4a8 <cisTIM_Init+0x100>)
 800f470:	f7f7 fb3e 	bl	8006af0 <HAL_HRTIM_SimplePWMChannelConfig>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <cisTIM_Init+0xd6>
	{
		Error_Handler();
 800f47a:	f7f1 fe29 	bl	80010d0 <Error_Handler>
	}

	/*-------------------------------------------------------------------------------------*/
	HAL_HRTIM_MspPostInit(&hhrtim);
 800f47e:	480a      	ldr	r0, [pc, #40]	; (800f4a8 <cisTIM_Init+0x100>)
 800f480:	f7f1 fc38 	bl	8000cf4 <HAL_HRTIM_MspPostInit>

	/*##-7- Start PWM signals generation ########################################################*/
	if (HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1) != HAL_OK)
 800f484:	2201      	movs	r2, #1
 800f486:	2100      	movs	r1, #0
 800f488:	4807      	ldr	r0, [pc, #28]	; (800f4a8 <cisTIM_Init+0x100>)
 800f48a:	f7f7 fc2f 	bl	8006cec <HAL_HRTIM_SimplePWMStart>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d001      	beq.n	800f498 <cisTIM_Init+0xf0>
	{
		Error_Handler();
 800f494:	f7f1 fe1c 	bl	80010d0 <Error_Handler>
	}

	return 0;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3730      	adds	r7, #48	; 0x30
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	24000000 	.word	0x24000000
 800f4a8:	2400bb14 	.word	0x2400bb14
 800f4ac:	40017400 	.word	0x40017400

0800f4b0 <cisADC_Init>:

void cisADC_Init(void)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08a      	sub	sp, #40	; 0x28
 800f4b4:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 800f4b6:	f107 031c 	add.w	r3, r7, #28
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	605a      	str	r2, [r3, #4]
 800f4c0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800f4c2:	463b      	mov	r3, r7
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]
 800f4c8:	605a      	str	r2, [r3, #4]
 800f4ca:	609a      	str	r2, [r3, #8]
 800f4cc:	60da      	str	r2, [r3, #12]
 800f4ce:	611a      	str	r2, [r3, #16]
 800f4d0:	615a      	str	r2, [r3, #20]
 800f4d2:	619a      	str	r2, [r3, #24]

	/* Common config */
	hadc1.Instance = ADC1;
 800f4d4:	4b3c      	ldr	r3, [pc, #240]	; (800f5c8 <cisADC_Init+0x118>)
 800f4d6:	4a3d      	ldr	r2, [pc, #244]	; (800f5cc <cisADC_Init+0x11c>)
 800f4d8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800f4da:	4b3b      	ldr	r3, [pc, #236]	; (800f5c8 <cisADC_Init+0x118>)
 800f4dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f4e0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800f4e2:	4b39      	ldr	r3, [pc, #228]	; (800f5c8 <cisADC_Init+0x118>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800f4e8:	4b37      	ldr	r3, [pc, #220]	; (800f5c8 <cisADC_Init+0x118>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f4ee:	4b36      	ldr	r3, [pc, #216]	; (800f5c8 <cisADC_Init+0x118>)
 800f4f0:	2204      	movs	r2, #4
 800f4f2:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800f4f4:	4b34      	ldr	r3, [pc, #208]	; (800f5c8 <cisADC_Init+0x118>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800f4fa:	4b33      	ldr	r3, [pc, #204]	; (800f5c8 <cisADC_Init+0x118>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 800f500:	4b31      	ldr	r3, [pc, #196]	; (800f5c8 <cisADC_Init+0x118>)
 800f502:	2201      	movs	r2, #1
 800f504:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f506:	4b30      	ldr	r3, [pc, #192]	; (800f5c8 <cisADC_Init+0x118>)
 800f508:	2200      	movs	r2, #0
 800f50a:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HR1_ADCTRG1;
 800f50c:	4b2e      	ldr	r3, [pc, #184]	; (800f5c8 <cisADC_Init+0x118>)
 800f50e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f512:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f514:	4b2c      	ldr	r3, [pc, #176]	; (800f5c8 <cisADC_Init+0x118>)
 800f516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f51a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800f51c:	4b2a      	ldr	r3, [pc, #168]	; (800f5c8 <cisADC_Init+0x118>)
 800f51e:	2200      	movs	r2, #0
 800f520:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800f522:	4b29      	ldr	r3, [pc, #164]	; (800f5c8 <cisADC_Init+0x118>)
 800f524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f528:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800f52a:	4b27      	ldr	r3, [pc, #156]	; (800f5c8 <cisADC_Init+0x118>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800f530:	4b25      	ldr	r3, [pc, #148]	; (800f5c8 <cisADC_Init+0x118>)
 800f532:	2200      	movs	r2, #0
 800f534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f538:	4823      	ldr	r0, [pc, #140]	; (800f5c8 <cisADC_Init+0x118>)
 800f53a:	f7f2 fb73 	bl	8001c24 <HAL_ADC_Init>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <cisADC_Init+0x98>
	{
		Error_Handler();
 800f544:	f7f1 fdc4 	bl	80010d0 <Error_Handler>
	}
	/* Configure the ADC multi-mode */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800f548:	2300      	movs	r3, #0
 800f54a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800f54c:	f107 031c 	add.w	r3, r7, #28
 800f550:	4619      	mov	r1, r3
 800f552:	481d      	ldr	r0, [pc, #116]	; (800f5c8 <cisADC_Init+0x118>)
 800f554:	f7f4 fbb2 	bl	8003cbc <HAL_ADCEx_MultiModeConfigChannel>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <cisADC_Init+0xb2>
	{
		Error_Handler();
 800f55e:	f7f1 fdb7 	bl	80010d0 <Error_Handler>
	}
	/* Configure Regular Channel */
	sConfig.Channel = ADC_CHANNEL_5;
 800f562:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <cisADC_Init+0x120>)
 800f564:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800f566:	2306      	movs	r3, #6
 800f568:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800f56a:	2301      	movs	r3, #1
 800f56c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800f56e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f572:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800f574:	2304      	movs	r3, #4
 800f576:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800f578:	2300      	movs	r3, #0
 800f57a:	617b      	str	r3, [r7, #20]
	sConfig.OffsetRightShift = DISABLE;
 800f57c:	2300      	movs	r3, #0
 800f57e:	763b      	strb	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 800f580:	2300      	movs	r3, #0
 800f582:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f584:	463b      	mov	r3, r7
 800f586:	4619      	mov	r1, r3
 800f588:	480f      	ldr	r0, [pc, #60]	; (800f5c8 <cisADC_Init+0x118>)
 800f58a:	f7f3 faf3 	bl	8002b74 <HAL_ADC_ConfigChannel>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <cisADC_Init+0xe8>
	{
		Error_Handler();
 800f594:	f7f1 fd9c 	bl	80010d0 <Error_Handler>
	}
	/* ### Start calibration ############################################ */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800f598:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f59c:	2100      	movs	r1, #0
 800f59e:	480a      	ldr	r0, [pc, #40]	; (800f5c8 <cisADC_Init+0x118>)
 800f5a0:	f7f4 facc 	bl	8003b3c <HAL_ADCEx_Calibration_Start>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <cisADC_Init+0xfe>
	{
		Error_Handler();
 800f5aa:	f7f1 fd91 	bl	80010d0 <Error_Handler>
	}

	/* ### Start conversion in DMA mode ################################# */
	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 800f5ae:	4806      	ldr	r0, [pc, #24]	; (800f5c8 <cisADC_Init+0x118>)
 800f5b0:	f7f2 feea 	bl	8002388 <HAL_ADC_Start_IT>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <cisADC_Init+0x10e>
	{
		Error_Handler();
 800f5ba:	f7f1 fd89 	bl	80010d0 <Error_Handler>
//	/* ### Start conversion in DMA mode ################################# */
//	if (HAL_ADC_Start(&hadc2) != HAL_OK)
//	{
//		Error_Handler();
//	}
}
 800f5be:	bf00      	nop
 800f5c0:	3728      	adds	r7, #40	; 0x28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	2400ba9c 	.word	0x2400ba9c
 800f5cc:	40022000 	.word	0x40022000
 800f5d0:	14f00020 	.word	0x14f00020

0800f5d4 <HAL_ADC_ConvCpltCallback>:
 * @brief  End of conversion callback in non blocking mode
 * @param  hadc : hadc handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
//	if (hadc != &hadc1)
//		return;

#ifdef DEBUG_CIS
	++cis_dbg_cnt;
 800f5dc:	4b7b      	ldr	r3, [pc, #492]	; (800f7cc <HAL_ADC_ConvCpltCallback+0x1f8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	4a7a      	ldr	r2, [pc, #488]	; (800f7cc <HAL_ADC_ConvCpltCallback+0x1f8>)
 800f5e4:	6013      	str	r3, [r2, #0]
	static uint32_t callback_cnt = 0;
	static uint32_t cnt = 0;
	static bool cal_state = FALSE;
	static enum cisReadStep cis_read_step = START_PULSE;

	switch (callback_cnt)
 800f5e6:	4b7a      	ldr	r3, [pc, #488]	; (800f7d0 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2b46      	cmp	r3, #70	; 0x46
 800f5ec:	d019      	beq.n	800f622 <HAL_ADC_ConvCpltCallback+0x4e>
 800f5ee:	2b46      	cmp	r3, #70	; 0x46
 800f5f0:	d804      	bhi.n	800f5fc <HAL_ADC_ConvCpltCallback+0x28>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00d      	beq.n	800f612 <HAL_ADC_ConvCpltCallback+0x3e>
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d00f      	beq.n	800f61a <HAL_ADC_ConvCpltCallback+0x46>
 800f5fa:	e049      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
 800f5fc:	f241 426e 	movw	r2, #5230	; 0x146e
 800f600:	4293      	cmp	r3, r2
 800f602:	d031      	beq.n	800f668 <HAL_ADC_ConvCpltCallback+0x94>
 800f604:	f241 42d2 	movw	r2, #5330	; 0x14d2
 800f608:	4293      	cmp	r3, r2
 800f60a:	d037      	beq.n	800f67c <HAL_ADC_ConvCpltCallback+0xa8>
 800f60c:	2b52      	cmp	r3, #82	; 0x52
 800f60e:	d00c      	beq.n	800f62a <HAL_ADC_ConvCpltCallback+0x56>
 800f610:	e03e      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	{
	case 0:
		cis_read_step = START_PULSE;
 800f612:	4b70      	ldr	r3, [pc, #448]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f614:	2200      	movs	r2, #0
 800f616:	701a      	strb	r2, [r3, #0]
		break;
 800f618:	e03a      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	case CIS_SP_TICK:
		cis_read_step = INIT_ZONE;
 800f61a:	4b6e      	ldr	r3, [pc, #440]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	701a      	strb	r2, [r3, #0]
		break;
 800f620:	e036      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	case CIS_INIT_TICK:
		cis_read_step = CAL_ZONE;
 800f622:	4b6c      	ldr	r3, [pc, #432]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f624:	2202      	movs	r2, #2
 800f626:	701a      	strb	r2, [r3, #0]
		break;
 800f628:	e032      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	case CIS_CAL_TICK:
		cis_read_step = DATA_ZONE;
 800f62a:	4b6a      	ldr	r3, [pc, #424]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f62c:	2203      	movs	r2, #3
 800f62e:	701a      	strb	r2, [r3, #0]
		cis_adc_cal /= CIS_CAL_CLK_CNT;
 800f630:	4b69      	ldr	r3, [pc, #420]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a69      	ldr	r2, [pc, #420]	; (800f7dc <HAL_ADC_ConvCpltCallback+0x208>)
 800f636:	fb82 1203 	smull	r1, r2, r2, r3
 800f63a:	1052      	asrs	r2, r2, #1
 800f63c:	17db      	asrs	r3, r3, #31
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	4a65      	ldr	r2, [pc, #404]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f642:	6013      	str	r3, [r2, #0]
#ifdef DEBUG_CIS
		//		printf("C %d\n", (int)cis_adc_cal);
		cis_dbg_data_cal = cis_adc_cal;
 800f644:	4b64      	ldr	r3, [pc, #400]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	461a      	mov	r2, r3
 800f64a:	4b65      	ldr	r3, [pc, #404]	; (800f7e0 <HAL_ADC_ConvCpltCallback+0x20c>)
 800f64c:	601a      	str	r2, [r3, #0]
#endif
		if (calibration_state != CAL_OFF)
 800f64e:	4b65      	ldr	r3, [pc, #404]	; (800f7e4 <HAL_ADC_ConvCpltCallback+0x210>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	b2db      	uxtb	r3, r3
 800f654:	2b01      	cmp	r3, #1
 800f656:	d003      	beq.n	800f660 <HAL_ADC_ConvCpltCallback+0x8c>
		{
			cal_state = TRUE;
 800f658:	4b63      	ldr	r3, [pc, #396]	; (800f7e8 <HAL_ADC_ConvCpltCallback+0x214>)
 800f65a:	2201      	movs	r2, #1
 800f65c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			cal_state = OFF;
		}
		break;
 800f65e:	e017      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
			cal_state = OFF;
 800f660:	4b61      	ldr	r3, [pc, #388]	; (800f7e8 <HAL_ADC_ConvCpltCallback+0x214>)
 800f662:	2200      	movs	r2, #0
 800f664:	701a      	strb	r2, [r3, #0]
		break;
 800f666:	e013      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	case CIS_DATA_TICK:
		cis_read_step = END_ZONE;
 800f668:	4b5a      	ldr	r3, [pc, #360]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f66a:	2204      	movs	r2, #4
 800f66c:	701a      	strb	r2, [r3, #0]
		pixel_cnt = 0;
 800f66e:	4b5f      	ldr	r3, [pc, #380]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f670:	2200      	movs	r2, #0
 800f672:	601a      	str	r2, [r3, #0]
		cis_adc_cal = 0;
 800f674:	4b58      	ldr	r3, [pc, #352]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f676:	2200      	movs	r2, #0
 800f678:	601a      	str	r2, [r3, #0]
		break;
 800f67a:	e009      	b.n	800f690 <HAL_ADC_ConvCpltCallback+0xbc>
	case CIS_END_TICK:
		calibration_state = CAL_OFF;
 800f67c:	4b59      	ldr	r3, [pc, #356]	; (800f7e4 <HAL_ADC_ConvCpltCallback+0x210>)
 800f67e:	2201      	movs	r2, #1
 800f680:	701a      	strb	r2, [r3, #0]
		cis_read_step = START_PULSE;
 800f682:	4b54      	ldr	r3, [pc, #336]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f684:	2200      	movs	r2, #0
 800f686:	701a      	strb	r2, [r3, #0]
		callback_cnt = 0;
 800f688:	4b51      	ldr	r3, [pc, #324]	; (800f7d0 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
		return;
 800f68e:	e09a      	b.n	800f7c6 <HAL_ADC_ConvCpltCallback+0x1f2>
		break;
	}


	++callback_cnt;
 800f690:	4b4f      	ldr	r3, [pc, #316]	; (800f7d0 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3301      	adds	r3, #1
 800f696:	4a4e      	ldr	r2, [pc, #312]	; (800f7d0 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800f698:	6013      	str	r3, [r2, #0]

	switch (cis_read_step)
 800f69a:	4b4e      	ldr	r3, [pc, #312]	; (800f7d4 <HAL_ADC_ConvCpltCallback+0x200>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	f200 8091 	bhi.w	800f7c6 <HAL_ADC_ConvCpltCallback+0x1f2>
 800f6a4:	a201      	add	r2, pc, #4	; (adr r2, 800f6ac <HAL_ADC_ConvCpltCallback+0xd8>)
 800f6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6aa:	bf00      	nop
 800f6ac:	0800f6c1 	.word	0x0800f6c1
 800f6b0:	0800f6cd 	.word	0x0800f6cd
 800f6b4:	0800f6d9 	.word	0x0800f6d9
 800f6b8:	0800f6ef 	.word	0x0800f6ef
 800f6bc:	0800f7c7 	.word	0x0800f7c7
	{
	case START_PULSE:
		HAL_GPIO_WritePin(CIS_SP_GPIO_Port, CIS_SP_Pin, GPIO_PIN_SET);
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	2110      	movs	r1, #16
 800f6c4:	484a      	ldr	r0, [pc, #296]	; (800f7f0 <HAL_ADC_ConvCpltCallback+0x21c>)
 800f6c6:	f7f7 f829 	bl	800671c <HAL_GPIO_WritePin>
		break;
 800f6ca:	e07c      	b.n	800f7c6 <HAL_ADC_ConvCpltCallback+0x1f2>
	case INIT_ZONE:
		HAL_GPIO_WritePin(CIS_SP_GPIO_Port, CIS_SP_Pin, GPIO_PIN_RESET);
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	2110      	movs	r1, #16
 800f6d0:	4847      	ldr	r0, [pc, #284]	; (800f7f0 <HAL_ADC_ConvCpltCallback+0x21c>)
 800f6d2:	f7f7 f823 	bl	800671c <HAL_GPIO_WritePin>
		break;
 800f6d6:	e076      	b.n	800f7c6 <HAL_ADC_ConvCpltCallback+0x1f2>
	case CAL_ZONE:
		cis_adc_cal += 1;// HAL_ADC_GetValue(&hadc2);
 800f6d8:	4b3f      	ldr	r3, [pc, #252]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	4a3e      	ldr	r2, [pc, #248]	; (800f7d8 <HAL_ADC_ConvCpltCallback+0x204>)
 800f6e0:	6013      	str	r3, [r2, #0]
		++cnt;
 800f6e2:	4b44      	ldr	r3, [pc, #272]	; (800f7f4 <HAL_ADC_ConvCpltCallback+0x220>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	4a42      	ldr	r2, [pc, #264]	; (800f7f4 <HAL_ADC_ConvCpltCallback+0x220>)
 800f6ea:	6013      	str	r3, [r2, #0]
		break;
 800f6ec:	e06b      	b.n	800f7c6 <HAL_ADC_ConvCpltCallback+0x1f2>
	case DATA_ZONE:
		temp_data += HAL_ADC_GetValue(&hadc1);
 800f6ee:	4842      	ldr	r0, [pc, #264]	; (800f7f8 <HAL_ADC_ConvCpltCallback+0x224>)
 800f6f0:	f7f2 ffa4 	bl	800263c <HAL_ADC_GetValue>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	4b41      	ldr	r3, [pc, #260]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	4b3f      	ldr	r3, [pc, #252]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f700:	601a      	str	r2, [r3, #0]
#ifdef DEBUG_CIS
		//		printf("D %d\n", (int)HAL_ADC_GetValue(&hadc1));
		cis_dbg_data = HAL_ADC_GetValue(&hadc1);
 800f702:	483d      	ldr	r0, [pc, #244]	; (800f7f8 <HAL_ADC_ConvCpltCallback+0x224>)
 800f704:	f7f2 ff9a 	bl	800263c <HAL_ADC_GetValue>
 800f708:	4602      	mov	r2, r0
 800f70a:	4b3d      	ldr	r3, [pc, #244]	; (800f800 <HAL_ADC_ConvCpltCallback+0x22c>)
 800f70c:	601a      	str	r2, [r3, #0]
#endif
		if (pixel_per_comma < PIXEL_PER_COMMA)
 800f70e:	4b3d      	ldr	r3, [pc, #244]	; (800f804 <HAL_ADC_ConvCpltCallback+0x230>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b0d      	cmp	r3, #13
 800f714:	d805      	bhi.n	800f722 <HAL_ADC_ConvCpltCallback+0x14e>
		{
			++pixel_per_comma;
 800f716:	4b3b      	ldr	r3, [pc, #236]	; (800f804 <HAL_ADC_ConvCpltCallback+0x230>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	4a39      	ldr	r2, [pc, #228]	; (800f804 <HAL_ADC_ConvCpltCallback+0x230>)
 800f71e:	6013      	str	r3, [r2, #0]
			}
			++pixel_cnt;
			pixel_per_comma = 0;
			temp_data = 0;
		}
		break;
 800f720:	e050      	b.n	800f7c4 <HAL_ADC_ConvCpltCallback+0x1f0>
			if (cal_state == TRUE)
 800f722:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <HAL_ADC_ConvCpltCallback+0x214>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d015      	beq.n	800f756 <HAL_ADC_ConvCpltCallback+0x182>
				cis_adc_offset[pixel_cnt] += (temp_data / PIXEL_PER_COMMA);
 800f72a:	4b30      	ldr	r3, [pc, #192]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a36      	ldr	r2, [pc, #216]	; (800f808 <HAL_ADC_ConvCpltCallback+0x234>)
 800f730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f734:	4b31      	ldr	r3, [pc, #196]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4934      	ldr	r1, [pc, #208]	; (800f80c <HAL_ADC_ConvCpltCallback+0x238>)
 800f73a:	fb81 0103 	smull	r0, r1, r1, r3
 800f73e:	4419      	add	r1, r3
 800f740:	10c9      	asrs	r1, r1, #3
 800f742:	17db      	asrs	r3, r3, #31
 800f744:	1acb      	subs	r3, r1, r3
 800f746:	4619      	mov	r1, r3
 800f748:	4b28      	ldr	r3, [pc, #160]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	440a      	add	r2, r1
 800f74e:	492e      	ldr	r1, [pc, #184]	; (800f808 <HAL_ADC_ConvCpltCallback+0x234>)
 800f750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f754:	e02b      	b.n	800f7ae <HAL_ADC_ConvCpltCallback+0x1da>
				if (cis_adc_offset[pixel_cnt] > (temp_data / PIXEL_PER_COMMA))
 800f756:	4b25      	ldr	r3, [pc, #148]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a2b      	ldr	r2, [pc, #172]	; (800f808 <HAL_ADC_ConvCpltCallback+0x234>)
 800f75c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f760:	4b26      	ldr	r3, [pc, #152]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4929      	ldr	r1, [pc, #164]	; (800f80c <HAL_ADC_ConvCpltCallback+0x238>)
 800f766:	fb81 0103 	smull	r0, r1, r1, r3
 800f76a:	4419      	add	r1, r3
 800f76c:	10c9      	asrs	r1, r1, #3
 800f76e:	17db      	asrs	r3, r3, #31
 800f770:	1acb      	subs	r3, r1, r3
 800f772:	429a      	cmp	r2, r3
 800f774:	d915      	bls.n	800f7a2 <HAL_ADC_ConvCpltCallback+0x1ce>
					cis_adc_data[pixel_cnt] = cis_adc_offset[pixel_cnt] - (temp_data / PIXEL_PER_COMMA);
 800f776:	4b1d      	ldr	r3, [pc, #116]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a23      	ldr	r2, [pc, #140]	; (800f808 <HAL_ADC_ConvCpltCallback+0x234>)
 800f77c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f780:	4b1e      	ldr	r3, [pc, #120]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4921      	ldr	r1, [pc, #132]	; (800f80c <HAL_ADC_ConvCpltCallback+0x238>)
 800f786:	fb81 0103 	smull	r0, r1, r1, r3
 800f78a:	4419      	add	r1, r3
 800f78c:	10c9      	asrs	r1, r1, #3
 800f78e:	17db      	asrs	r3, r3, #31
 800f790:	1acb      	subs	r3, r1, r3
 800f792:	4619      	mov	r1, r3
 800f794:	4b15      	ldr	r3, [pc, #84]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	1a52      	subs	r2, r2, r1
 800f79a:	491d      	ldr	r1, [pc, #116]	; (800f810 <HAL_ADC_ConvCpltCallback+0x23c>)
 800f79c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f7a0:	e005      	b.n	800f7ae <HAL_ADC_ConvCpltCallback+0x1da>
					cis_adc_data[pixel_cnt] = 0;
 800f7a2:	4b12      	ldr	r3, [pc, #72]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a1a      	ldr	r2, [pc, #104]	; (800f810 <HAL_ADC_ConvCpltCallback+0x23c>)
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			++pixel_cnt;
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	4a0d      	ldr	r2, [pc, #52]	; (800f7ec <HAL_ADC_ConvCpltCallback+0x218>)
 800f7b6:	6013      	str	r3, [r2, #0]
			pixel_per_comma = 0;
 800f7b8:	4b12      	ldr	r3, [pc, #72]	; (800f804 <HAL_ADC_ConvCpltCallback+0x230>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	601a      	str	r2, [r3, #0]
			temp_data = 0;
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <HAL_ADC_ConvCpltCallback+0x228>)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
		break;
 800f7c4:	bf00      	nop
	case END_ZONE:
		break;
	}
}
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	2400a30c 	.word	0x2400a30c
 800f7d0:	2400a318 	.word	0x2400a318
 800f7d4:	2400a31c 	.word	0x2400a31c
 800f7d8:	2400a320 	.word	0x2400a320
 800f7dc:	2aaaaaab 	.word	0x2aaaaaab
 800f7e0:	2400a310 	.word	0x2400a310
 800f7e4:	24000028 	.word	0x24000028
 800f7e8:	2400a324 	.word	0x2400a324
 800f7ec:	2400a328 	.word	0x2400a328
 800f7f0:	58021000 	.word	0x58021000
 800f7f4:	2400a32c 	.word	0x2400a32c
 800f7f8:	2400ba9c 	.word	0x2400ba9c
 800f7fc:	2400a330 	.word	0x2400a330
 800f800:	2400a314 	.word	0x2400a314
 800f804:	2400a334 	.word	0x2400a334
 800f808:	2400529c 	.word	0x2400529c
 800f80c:	92492493 	.word	0x92492493
 800f810:	2400022c 	.word	0x2400022c

0800f814 <synth_init>:
 * @brief  synth init.
 * @param
 * @retval Error
 */
int32_t synth_init(void)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af02      	add	r7, sp, #8
	uint32_t buffer_len = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	607b      	str	r3, [r7, #4]

	buffer_len = init_waves(&unitary_waveform, waves);
 800f81e:	492a      	ldr	r1, [pc, #168]	; (800f8c8 <synth_init+0xb4>)
 800f820:	482a      	ldr	r0, [pc, #168]	; (800f8cc <synth_init+0xb8>)
 800f822:	f000 f9d5 	bl	800fbd0 <init_waves>
 800f826:	6078      	str	r0, [r7, #4]
	{
		printf("RAM overflow");
		return -1;
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4619      	mov	r1, r3
 800f82c:	4828      	ldr	r0, [pc, #160]	; (800f8d0 <synth_init+0xbc>)
 800f82e:	f001 f84b 	bl	80108c8 <iprintf>

#ifdef PRINT_FREQUENCY
	printf("FREQ = %0.2f, SIZE = %d, OCTAVE = %d\n", waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 800f832:	4b25      	ldr	r3, [pc, #148]	; (800f8c8 <synth_init+0xb4>)
 800f834:	edd3 7a03 	vldr	s15, [r3, #12]
 800f838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f83c:	4b22      	ldr	r3, [pc, #136]	; (800f8c8 <synth_init+0xb4>)
 800f83e:	88db      	ldrh	r3, [r3, #6]
 800f840:	461a      	mov	r2, r3
 800f842:	4b21      	ldr	r3, [pc, #132]	; (800f8c8 <synth_init+0xb4>)
 800f844:	891b      	ldrh	r3, [r3, #8]
 800f846:	9301      	str	r3, [sp, #4]
 800f848:	9200      	str	r2, [sp, #0]
 800f84a:	ec53 2b17 	vmov	r2, r3, d7
 800f84e:	4821      	ldr	r0, [pc, #132]	; (800f8d4 <synth_init+0xc0>)
 800f850:	f001 f83a 	bl	80108c8 <iprintf>
	printf("FREQ = %0.2f, SIZE = %d, OCTAVE = %d\n", waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size, (int)waves[NUMBER_OF_NOTES - 1].octave_coeff);
 800f854:	4a1c      	ldr	r2, [pc, #112]	; (800f8c8 <synth_init+0xb4>)
 800f856:	f241 63ec 	movw	r3, #5868	; 0x16ec
 800f85a:	4413      	add	r3, r2
 800f85c:	edd3 7a00 	vldr	s15, [r3]
 800f860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f864:	4a18      	ldr	r2, [pc, #96]	; (800f8c8 <synth_init+0xb4>)
 800f866:	f241 63e6 	movw	r3, #5862	; 0x16e6
 800f86a:	4413      	add	r3, r2
 800f86c:	881b      	ldrh	r3, [r3, #0]
 800f86e:	4619      	mov	r1, r3
 800f870:	4a15      	ldr	r2, [pc, #84]	; (800f8c8 <synth_init+0xb4>)
 800f872:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800f876:	4413      	add	r3, r2
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	9100      	str	r1, [sp, #0]
 800f87e:	ec53 2b17 	vmov	r2, r3, d7
 800f882:	4814      	ldr	r0, [pc, #80]	; (800f8d4 <synth_init+0xc0>)
 800f884:	f001 f820 	bl	80108c8 <iprintf>
//	}
//	printf("---- END ----");
//	while(1);
#endif

	if (initDacTimer(DAC_TIME_FREQ) != 0)
 800f888:	f64a 4044 	movw	r0, #44100	; 0xac44
 800f88c:	f000 f826 	bl	800f8dc <initDacTimer>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <synth_init+0x86>
	{
		Error_Handler();
 800f896:	f7f1 fc1b 	bl	80010d0 <Error_Handler>
	}
	if (initSamplingTimer(SAMPLING_FREQUENCY) != 0)
 800f89a:	f64a 4044 	movw	r0, #44100	; 0xac44
 800f89e:	f000 f86b 	bl	800f978 <initSamplingTimer>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d001      	beq.n	800f8ac <synth_init+0x98>
	{
		Error_Handler();
 800f8a8:	f7f1 fc12 	bl	80010d0 <Error_Handler>
	}

	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <synth_init+0xc4>)
 800f8b0:	f7f4 fcc6 	bl	8004240 <HAL_DAC_Start>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <synth_init+0xaa>
	{
		Error_Handler();
 800f8ba:	f7f1 fc09 	bl	80010d0 <Error_Handler>
//	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1400);//1489 1,2V
//	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK)
//	{
//		Error_Handler();
//	}
	return 0;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	2400a33c 	.word	0x2400a33c
 800f8cc:	2400a338 	.word	0x2400a338
 800f8d0:	08013ff4 	.word	0x08013ff4
 800f8d4:	08014008 	.word	0x08014008
 800f8d8:	2400bb00 	.word	0x2400bb00

0800f8dc <initDacTimer>:
 * @brief  Init and set DAC frequency
 * @param  freq
 * @retval Error
 */
int32_t initDacTimer(uint32_t freq)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
	TIM_MasterConfigTypeDef sMasterConfig;
	uint32_t uwPrescalerValue = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	617b      	str	r3, [r7, #20]

	/* Compute the prescaler value */
	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 2) / (freq * 10));
 800f8e8:	4b20      	ldr	r3, [pc, #128]	; (800f96c <initDacTimer+0x90>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	0859      	lsrs	r1, r3, #1
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800f8fc:	617b      	str	r3, [r7, #20]

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 800f8fe:	4b1c      	ldr	r3, [pc, #112]	; (800f970 <initDacTimer+0x94>)
 800f900:	4a1c      	ldr	r2, [pc, #112]	; (800f974 <initDacTimer+0x98>)
 800f902:	601a      	str	r2, [r3, #0]
	htim6.Init.Period            = 10 - 1;
 800f904:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <initDacTimer+0x94>)
 800f906:	2209      	movs	r2, #9
 800f908:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler         = uwPrescalerValue;
 800f90a:	4a19      	ldr	r2, [pc, #100]	; (800f970 <initDacTimer+0x94>)
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	6053      	str	r3, [r2, #4]
	htim6.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800f910:	4b17      	ldr	r3, [pc, #92]	; (800f970 <initDacTimer+0x94>)
 800f912:	2200      	movs	r2, #0
 800f914:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800f916:	4b16      	ldr	r3, [pc, #88]	; (800f970 <initDacTimer+0x94>)
 800f918:	2200      	movs	r2, #0
 800f91a:	609a      	str	r2, [r3, #8]
	htim6.Init.RepetitionCounter = 0;
 800f91c:	4b14      	ldr	r3, [pc, #80]	; (800f970 <initDacTimer+0x94>)
 800f91e:	2200      	movs	r2, #0
 800f920:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f922:	4813      	ldr	r0, [pc, #76]	; (800f970 <initDacTimer+0x94>)
 800f924:	f7fb f89e 	bl	800aa64 <HAL_TIM_Base_Init>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <initDacTimer+0x56>
	{
		Error_Handler();
 800f92e:	f7f1 fbcf 	bl	80010d0 <Error_Handler>
	}

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f932:	2320      	movs	r3, #32
 800f934:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f936:	2300      	movs	r3, #0
 800f938:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f93a:	f107 0308 	add.w	r3, r7, #8
 800f93e:	4619      	mov	r1, r3
 800f940:	480b      	ldr	r0, [pc, #44]	; (800f970 <initDacTimer+0x94>)
 800f942:	f7fc fba1 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d001      	beq.n	800f950 <initDacTimer+0x74>
	{
		Error_Handler();
 800f94c:	f7f1 fbc0 	bl	80010d0 <Error_Handler>
	}

	/*##-2- Enable TIM peripheral counter ######################################*/
	if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 800f950:	4807      	ldr	r0, [pc, #28]	; (800f970 <initDacTimer+0x94>)
 800f952:	f7fb f953 	bl	800abfc <HAL_TIM_Base_Start>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d001      	beq.n	800f960 <initDacTimer+0x84>
	{
		Error_Handler();
 800f95c:	f7f1 fbb8 	bl	80010d0 <Error_Handler>
	}
	return 0;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3718      	adds	r7, #24
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	24000000 	.word	0x24000000
 800f970:	2400bc30 	.word	0x2400bc30
 800f974:	40001000 	.word	0x40001000

0800f978 <initSamplingTimer>:
 * @brief  Init sampling frequency timer and set it
 * @param  sampling_frequency
 * @retval Error
 */
int32_t initSamplingTimer(uint32_t sampling_freq)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08a      	sub	sp, #40	; 0x28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC;

	uint32_t uwPrescalerValue = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	627b      	str	r3, [r7, #36]	; 0x24

	/* Compute the prescaler value */
	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 2) / (sampling_freq));
 800f984:	4b26      	ldr	r3, [pc, #152]	; (800fa20 <initSamplingTimer+0xa8>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	085a      	lsrs	r2, r3, #1
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f990:	627b      	str	r3, [r7, #36]	; 0x24

	htim15.Instance = TIM15;
 800f992:	4b24      	ldr	r3, [pc, #144]	; (800fa24 <initSamplingTimer+0xac>)
 800f994:	4a24      	ldr	r2, [pc, #144]	; (800fa28 <initSamplingTimer+0xb0>)
 800f996:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 800f998:	4b22      	ldr	r3, [pc, #136]	; (800fa24 <initSamplingTimer+0xac>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f99e:	4b21      	ldr	r3, [pc, #132]	; (800fa24 <initSamplingTimer+0xac>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = uwPrescalerValue;
 800f9a4:	4a1f      	ldr	r2, [pc, #124]	; (800fa24 <initSamplingTimer+0xac>)
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	60d3      	str	r3, [r2, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800f9aa:	4b1e      	ldr	r3, [pc, #120]	; (800fa24 <initSamplingTimer+0xac>)
 800f9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9b0:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 800f9b2:	4b1c      	ldr	r3, [pc, #112]	; (800fa24 <initSamplingTimer+0xac>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f9b8:	4b1a      	ldr	r3, [pc, #104]	; (800fa24 <initSamplingTimer+0xac>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 800f9be:	4819      	ldr	r0, [pc, #100]	; (800fa24 <initSamplingTimer+0xac>)
 800f9c0:	f7fb f9ac 	bl	800ad1c <HAL_TIM_OC_Init>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <initSamplingTimer+0x56>
	{
		Error_Handler();
 800f9ca:	f7f1 fb81 	bl	80010d0 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800f9ce:	2330      	movs	r3, #48	; 0x30
 800f9d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = uwPrescalerValue;
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	613b      	str	r3, [r7, #16]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f9ea:	f107 0308 	add.w	r3, r7, #8
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	480c      	ldr	r0, [pc, #48]	; (800fa24 <initSamplingTimer+0xac>)
 800f9f4:	f7fb fce0 	bl	800b3b8 <HAL_TIM_OC_ConfigChannel>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <initSamplingTimer+0x8a>
	{
		Error_Handler();
 800f9fe:	f7f1 fb67 	bl	80010d0 <Error_Handler>
	}

	//	/* Start channel 1 in Output compare mode */
	if (HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1) != HAL_OK)
 800fa02:	2100      	movs	r1, #0
 800fa04:	4807      	ldr	r0, [pc, #28]	; (800fa24 <initSamplingTimer+0xac>)
 800fa06:	f7fb fa55 	bl	800aeb4 <HAL_TIM_OC_Start_IT>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <initSamplingTimer+0x9c>
	{
		Error_Handler();
 800fa10:	f7f1 fb5e 	bl	80010d0 <Error_Handler>
	{
		/* Starting Error */
		return -4;
	}
#endif
	return 0;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3728      	adds	r7, #40	; 0x28
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	24000000 	.word	0x24000000
 800fa24:	2400bbf0 	.word	0x2400bbf0
 800fa28:	40014000 	.word	0x40014000

0800fa2c <HAL_TIM_PeriodElapsedCallback>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b088      	sub	sp, #32
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
	uint32_t signal_summation = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	61fb      	str	r3, [r7, #28]
	uint32_t signal_power_summation = 0;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	61bb      	str	r3, [r7, #24]
	uint32_t new_idx;
	uint32_t max_power = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	613b      	str	r3, [r7, #16]

	//	if (htim != &htim15)
	//		return;

	//Summation for all pixel
	for (int32_t pix = NUMBER_OF_NOTES; --pix >= 0;)
 800fa40:	f240 136f 	movw	r3, #367	; 0x16f
 800fa44:	60fb      	str	r3, [r7, #12]
 800fa46:	e05d      	b.n	800fb04 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		//test for CIS presence
		if (cis_adc_data[pix] > SENSIVITY_THRESHOLD)
 800fa48:	4a44      	ldr	r2, [pc, #272]	; (800fb5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa50:	2b0a      	cmp	r3, #10
 800fa52:	d957      	bls.n	800fb04 <HAL_TIM_PeriodElapsedCallback+0xd8>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[pix].current_idx + waves[pix].octave_coeff);
 800fa54:	4a42      	ldr	r2, [pc, #264]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	011b      	lsls	r3, r3, #4
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	4619      	mov	r1, r3
 800fa62:	4a3f      	ldr	r2, [pc, #252]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	011b      	lsls	r3, r3, #4
 800fa68:	4413      	add	r3, r2
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	440b      	add	r3, r1
 800fa70:	617b      	str	r3, [r7, #20]
			if (new_idx > waves[pix].aera_size)
 800fa72:	4a3b      	ldr	r2, [pc, #236]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	4413      	add	r3, r2
 800fa7a:	3306      	adds	r3, #6
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d909      	bls.n	800fa9a <HAL_TIM_PeriodElapsedCallback+0x6e>
				new_idx -= waves[pix].aera_size;
 800fa86:	4a36      	ldr	r2, [pc, #216]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	4413      	add	r3, r2
 800fa8e:	3306      	adds	r3, #6
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	461a      	mov	r2, r3
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	1a9b      	subs	r3, r3, r2
 800fa98:	617b      	str	r3, [r7, #20]

			waves[pix].current_idx = new_idx;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	b299      	uxth	r1, r3
 800fa9e:	4a30      	ldr	r2, [pc, #192]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	011b      	lsls	r3, r3, #4
 800faa4:	4413      	add	r3, r2
 800faa6:	3304      	adds	r3, #4
 800faa8:	460a      	mov	r2, r1
 800faaa:	801a      	strh	r2, [r3, #0]

			signal_summation += (*(waves[pix].start_ptr + waves[pix].current_idx) * cis_adc_data[pix]) >> 16;
 800faac:	4a2c      	ldr	r2, [pc, #176]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	011b      	lsls	r3, r3, #4
 800fab2:	4413      	add	r3, r2
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	492a      	ldr	r1, [pc, #168]	; (800fb60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	011b      	lsls	r3, r3, #4
 800fabc:	440b      	add	r3, r1
 800fabe:	3304      	adds	r3, #4
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	4619      	mov	r1, r3
 800faca:	4a24      	ldr	r2, [pc, #144]	; (800fb5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad2:	fb03 f301 	mul.w	r3, r3, r1
 800fad6:	0c1b      	lsrs	r3, r3, #16
 800fad8:	69fa      	ldr	r2, [r7, #28]
 800fada:	4413      	add	r3, r2
 800fadc:	61fb      	str	r3, [r7, #28]

			//read equivalent power of current pixel
			signal_power_summation += (cis_adc_data[pix]);
 800fade:	4a1f      	ldr	r2, [pc, #124]	; (800fb5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fae6:	69ba      	ldr	r2, [r7, #24]
 800fae8:	4413      	add	r3, r2
 800faea:	61bb      	str	r3, [r7, #24]
			if (cis_adc_data[pix] > max_power)
 800faec:	4a1b      	ldr	r2, [pc, #108]	; (800fb5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faf4:	693a      	ldr	r2, [r7, #16]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d204      	bcs.n	800fb04 <HAL_TIM_PeriodElapsedCallback+0xd8>
				max_power = cis_adc_data[pix];
 800fafa:	4a18      	ldr	r2, [pc, #96]	; (800fb5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb02:	613b      	str	r3, [r7, #16]
	for (int32_t pix = NUMBER_OF_NOTES; --pix >= 0;)
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3b01      	subs	r3, #1
 800fb08:	60fb      	str	r3, [r7, #12]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	da9b      	bge.n	800fa48 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
	}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)(signal_summation * ((double)max_power / signal_power_summation)) >> 4);
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	ee07 3a90 	vmov	s15, r3
 800fb16:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	ee07 3a90 	vmov	s15, r3
 800fb20:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	ee07 3a90 	vmov	s15, r3
 800fb2a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800fb2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800fb32:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fb36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fb3a:	ee17 3a90 	vmov	r3, s15
 800fb3e:	091b      	lsrs	r3, r3, #4
 800fb40:	2200      	movs	r2, #0
 800fb42:	2100      	movs	r1, #0
 800fb44:	4807      	ldr	r0, [pc, #28]	; (800fb64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800fb46:	f7f4 fbd3 	bl	80042f0 <HAL_DAC_SetValue>
//	printf ("%d\n",(uint32_t)(signal_summation * ((double)max_power / signal_power_summation)) >> 4);

	++rfft_cnt;
 800fb4a:	4b07      	ldr	r3, [pc, #28]	; (800fb68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	4a05      	ldr	r2, [pc, #20]	; (800fb68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800fb52:	6013      	str	r3, [r2, #0]
}
 800fb54:	bf00      	nop
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	2400022c 	.word	0x2400022c
 800fb60:	2400a33c 	.word	0x2400a33c
 800fb64:	2400bb00 	.word	0x2400bb00
 800fb68:	2400ba2c 	.word	0x2400ba2c
 800fb6c:	00000000 	.word	0x00000000

0800fb70 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
	frequency =  START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	ee07 3a90 	vmov	s15, r3
 800fb84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fb88:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800fbc0 <calculate_frequency+0x50>
 800fb8c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fb90:	eeb0 1b45 	vmov.f64	d1, d5
 800fb94:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800fb98:	f002 fce6 	bl	8012568 <pow>
 800fb9c:	eeb0 6b40 	vmov.f64	d6, d0
 800fba0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800fbc8 <calculate_frequency+0x58>
 800fba4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fba8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fbac:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	ee07 3a90 	vmov	s15, r3
}
 800fbb6:	eeb0 0a67 	vmov.f32	s0, s15
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	00000000 	.word	0x00000000
 800fbc4:	404b0000 	.word	0x404b0000
 800fbc8:	00000000 	.word	0x00000000
 800fbcc:	404e0000 	.word	0x404e0000

0800fbd0 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves( __IO uint16_t **unitary_waveform, struct wave *waves)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	ed2d 8b02 	vpush	{d8}
 800fbd6:	b08c      	sub	sp, #48	; 0x30
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 800fbea:	2300      	movs	r3, #0
 800fbec:	623b      	str	r3, [r7, #32]
 800fbee:	e014      	b.n	800fc1a <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 800fbf0:	6a38      	ldr	r0, [r7, #32]
 800fbf2:	f7ff ffbd 	bl	800fb70 <calculate_frequency>
 800fbf6:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 800fbfa:	eddf 6a8d 	vldr	s13, [pc, #564]	; 800fe30 <init_waves+0x260>
 800fbfe:	ed97 7a02 	vldr	s14, [r7, #8]
 800fc02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc0a:	ee17 2a90 	vmov	r2, s15
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	4413      	add	r3, r2
 800fc12:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	3301      	adds	r3, #1
 800fc18:	623b      	str	r3, [r7, #32]
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	ee07 3a90 	vmov	s15, r3
 800fc20:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fc24:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800fe18 <init_waves+0x248>
 800fc28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc30:	d4de      	bmi.n	800fbf0 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f952 	bl	800fee0 <malloc>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	461a      	mov	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d102      	bne.n	800fc52 <init_waves+0x82>
	{
		return -1;
 800fc4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc50:	e0db      	b.n	800fe0a <init_waves+0x23a>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 800fc52:	2300      	movs	r3, #0
 800fc54:	61fb      	str	r3, [r7, #28]
 800fc56:	e0bf      	b.n	800fdd8 <init_waves+0x208>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 800fc58:	69f8      	ldr	r0, [r7, #28]
 800fc5a:	f7ff ff89 	bl	800fb70 <calculate_frequency>
 800fc5e:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 800fc62:	eddf 6a73 	vldr	s13, [pc, #460]	; 800fe30 <init_waves+0x260>
 800fc66:	ed97 7a04 	vldr	s14, [r7, #16]
 800fc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc72:	ee17 3a90 	vmov	r3, s15
 800fc76:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 800fc78:	2300      	movs	r3, #0
 800fc7a:	61bb      	str	r3, [r7, #24]
 800fc7c:	e038      	b.n	800fcf0 <init_waves+0x120>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 800fc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d231      	bcs.n	800fcea <init_waves+0x11a>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = (sin((x * 2.00 * PI) / current_aera_size) + 1.00) * WAVE_AMP_RESOLUTION / 2.00;
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	ee07 3a90 	vmov	s15, r3
 800fc8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fc90:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fc94:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800fe20 <init_waves+0x250>
 800fc98:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fca6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800fcaa:	eeb0 0b45 	vmov.f64	d0, d5
 800fcae:	f002 fc1f 	bl	80124f0 <sin>
 800fcb2:	eeb0 6b40 	vmov.f64	d6, d0
 800fcb6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fcba:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fcbe:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 800fe28 <init_waves+0x258>
 800fcc2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fcc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fcca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fcdc:	ee17 2a90 	vmov	r2, s15
 800fce0:	b292      	uxth	r2, r2
 800fce2:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	3301      	adds	r3, #1
 800fce8:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	3301      	adds	r3, #1
 800fcee:	61bb      	str	r3, [r7, #24]
 800fcf0:	69ba      	ldr	r2, [r7, #24]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d3c2      	bcc.n	800fc7e <init_waves+0xae>
			}
		}

		//for each octave_coeff (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave < MAX_OCTAVE_NUMBER; octave++)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	617b      	str	r3, [r7, #20]
 800fcfc:	e066      	b.n	800fdcc <init_waves+0x1fc>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	ee07 3a90 	vmov	s15, r3
 800fd04:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	ee07 3a90 	vmov	s15, r3
 800fd0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd12:	ed9f 5b41 	vldr	d5, [pc, #260]	; 800fe18 <init_waves+0x248>
 800fd16:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fd1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fd22:	ee17 3a90 	vmov	r3, s15
 800fd26:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 800fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2a:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 800fd2e:	d84a      	bhi.n	800fdc6 <init_waves+0x1f6>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 800fd30:	edd7 7a04 	vldr	s15, [r7, #16]
 800fd34:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	ee07 3a90 	vmov	s15, r3
 800fd3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd42:	eeb0 1b47 	vmov.f64	d1, d7
 800fd46:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800fd4a:	f002 fc0d 	bl	8012568 <pow>
 800fd4e:	eeb0 7b40 	vmov.f64	d7, d0
 800fd52:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	011b      	lsls	r3, r3, #4
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fd62:	edc3 7a03 	vstr	s15, [r3, #12]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	ee07 3a90 	vmov	s15, r3
 800fd6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd70:	eeb0 1b47 	vmov.f64	d1, d7
 800fd74:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800fd78:	f002 fbf6 	bl	8012568 <pow>
 800fd7c:	eeb0 7b40 	vmov.f64	d7, d0
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	683a      	ldr	r2, [r7, #0]
 800fd86:	4413      	add	r3, r2
 800fd88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800fd8c:	ee17 2a90 	vmov	r2, s15
 800fd90:	b292      	uxth	r2, r2
 800fd92:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	011b      	lsls	r3, r3, #4
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	b292      	uxth	r2, r2
 800fda0:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6819      	ldr	r1, [r3, #0]
 800fda6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	005a      	lsls	r2, r3, #1
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	011b      	lsls	r3, r3, #4
 800fdb2:	6838      	ldr	r0, [r7, #0]
 800fdb4:	4403      	add	r3, r0
 800fdb6:	440a      	add	r2, r1
 800fdb8:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	011b      	lsls	r3, r3, #4
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave < MAX_OCTAVE_NUMBER; octave++)
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	617b      	str	r3, [r7, #20]
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2b09      	cmp	r3, #9
 800fdd0:	d995      	bls.n	800fcfe <init_waves+0x12e>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	61fb      	str	r3, [r7, #28]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	ee07 3a90 	vmov	s15, r3
 800fdde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fde2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800fe18 <init_waves+0x248>
 800fde6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	f53f af33 	bmi.w	800fc58 <init_waves+0x88>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 800fdf8:	d806      	bhi.n	800fe08 <init_waves+0x238>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	480d      	ldr	r0, [pc, #52]	; (800fe34 <init_waves+0x264>)
 800fe00:	f000 fd62 	bl	80108c8 <iprintf>
		Error_Handler();
 800fe04:	f7f1 f964 	bl	80010d0 <Error_Handler>
	}

	return buffer_len;
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3730      	adds	r7, #48	; 0x30
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	ecbd 8b02 	vpop	{d8}
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	404b0000 	.word	0x404b0000
 800fe20:	54442eea 	.word	0x54442eea
 800fe24:	400921fb 	.word	0x400921fb
 800fe28:	00000000 	.word	0x00000000
 800fe2c:	40efffe0 	.word	0x40efffe0
 800fe30:	472c4400 	.word	0x472c4400
 800fe34:	08014030 	.word	0x08014030

0800fe38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800fe38:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fe70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fe3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800fe3e:	e003      	b.n	800fe48 <LoopCopyDataInit>

0800fe40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fe40:	4b0c      	ldr	r3, [pc, #48]	; (800fe74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fe42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fe44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fe46:	3104      	adds	r1, #4

0800fe48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800fe48:	480b      	ldr	r0, [pc, #44]	; (800fe78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800fe4a:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800fe4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800fe4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800fe50:	d3f6      	bcc.n	800fe40 <CopyDataInit>
  ldr  r2, =_sbss
 800fe52:	4a0b      	ldr	r2, [pc, #44]	; (800fe80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800fe54:	e002      	b.n	800fe5c <LoopFillZerobss>

0800fe56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800fe56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800fe58:	f842 3b04 	str.w	r3, [r2], #4

0800fe5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800fe5c:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800fe5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800fe60:	d3f9      	bcc.n	800fe56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fe62:	f7f1 fa63 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fe66:	f000 f817 	bl	800fe98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fe6a:	f7f0 ffdf 	bl	8000e2c <main>
  bx  lr    
 800fe6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800fe70:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800fe74:	08014560 	.word	0x08014560
  ldr  r0, =_sdata
 800fe78:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800fe7c:	24000200 	.word	0x24000200
  ldr  r2, =_sbss
 800fe80:	24000200 	.word	0x24000200
  ldr  r3, = _ebss
 800fe84:	2400bdb8 	.word	0x2400bdb8

0800fe88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fe88:	e7fe      	b.n	800fe88 <ADC3_IRQHandler>
	...

0800fe8c <__errno>:
 800fe8c:	4b01      	ldr	r3, [pc, #4]	; (800fe94 <__errno+0x8>)
 800fe8e:	6818      	ldr	r0, [r3, #0]
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	2400002c 	.word	0x2400002c

0800fe98 <__libc_init_array>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	4e0d      	ldr	r6, [pc, #52]	; (800fed0 <__libc_init_array+0x38>)
 800fe9c:	4c0d      	ldr	r4, [pc, #52]	; (800fed4 <__libc_init_array+0x3c>)
 800fe9e:	1ba4      	subs	r4, r4, r6
 800fea0:	10a4      	asrs	r4, r4, #2
 800fea2:	2500      	movs	r5, #0
 800fea4:	42a5      	cmp	r5, r4
 800fea6:	d109      	bne.n	800febc <__libc_init_array+0x24>
 800fea8:	4e0b      	ldr	r6, [pc, #44]	; (800fed8 <__libc_init_array+0x40>)
 800feaa:	4c0c      	ldr	r4, [pc, #48]	; (800fedc <__libc_init_array+0x44>)
 800feac:	f003 fe66 	bl	8013b7c <_init>
 800feb0:	1ba4      	subs	r4, r4, r6
 800feb2:	10a4      	asrs	r4, r4, #2
 800feb4:	2500      	movs	r5, #0
 800feb6:	42a5      	cmp	r5, r4
 800feb8:	d105      	bne.n	800fec6 <__libc_init_array+0x2e>
 800feba:	bd70      	pop	{r4, r5, r6, pc}
 800febc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fec0:	4798      	blx	r3
 800fec2:	3501      	adds	r5, #1
 800fec4:	e7ee      	b.n	800fea4 <__libc_init_array+0xc>
 800fec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800feca:	4798      	blx	r3
 800fecc:	3501      	adds	r5, #1
 800fece:	e7f2      	b.n	800feb6 <__libc_init_array+0x1e>
 800fed0:	08014558 	.word	0x08014558
 800fed4:	08014558 	.word	0x08014558
 800fed8:	08014558 	.word	0x08014558
 800fedc:	0801455c 	.word	0x0801455c

0800fee0 <malloc>:
 800fee0:	4b02      	ldr	r3, [pc, #8]	; (800feec <malloc+0xc>)
 800fee2:	4601      	mov	r1, r0
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	f000 b859 	b.w	800ff9c <_malloc_r>
 800feea:	bf00      	nop
 800feec:	2400002c 	.word	0x2400002c

0800fef0 <memset>:
 800fef0:	4402      	add	r2, r0
 800fef2:	4603      	mov	r3, r0
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d100      	bne.n	800fefa <memset+0xa>
 800fef8:	4770      	bx	lr
 800fefa:	f803 1b01 	strb.w	r1, [r3], #1
 800fefe:	e7f9      	b.n	800fef4 <memset+0x4>

0800ff00 <_free_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4605      	mov	r5, r0
 800ff04:	2900      	cmp	r1, #0
 800ff06:	d045      	beq.n	800ff94 <_free_r+0x94>
 800ff08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff0c:	1f0c      	subs	r4, r1, #4
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	bfb8      	it	lt
 800ff12:	18e4      	addlt	r4, r4, r3
 800ff14:	f001 fdf3 	bl	8011afe <__malloc_lock>
 800ff18:	4a1f      	ldr	r2, [pc, #124]	; (800ff98 <_free_r+0x98>)
 800ff1a:	6813      	ldr	r3, [r2, #0]
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	b933      	cbnz	r3, 800ff2e <_free_r+0x2e>
 800ff20:	6063      	str	r3, [r4, #4]
 800ff22:	6014      	str	r4, [r2, #0]
 800ff24:	4628      	mov	r0, r5
 800ff26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2a:	f001 bde9 	b.w	8011b00 <__malloc_unlock>
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	d90c      	bls.n	800ff4c <_free_r+0x4c>
 800ff32:	6821      	ldr	r1, [r4, #0]
 800ff34:	1862      	adds	r2, r4, r1
 800ff36:	4293      	cmp	r3, r2
 800ff38:	bf04      	itt	eq
 800ff3a:	681a      	ldreq	r2, [r3, #0]
 800ff3c:	685b      	ldreq	r3, [r3, #4]
 800ff3e:	6063      	str	r3, [r4, #4]
 800ff40:	bf04      	itt	eq
 800ff42:	1852      	addeq	r2, r2, r1
 800ff44:	6022      	streq	r2, [r4, #0]
 800ff46:	6004      	str	r4, [r0, #0]
 800ff48:	e7ec      	b.n	800ff24 <_free_r+0x24>
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	b10a      	cbz	r2, 800ff54 <_free_r+0x54>
 800ff50:	42a2      	cmp	r2, r4
 800ff52:	d9fa      	bls.n	800ff4a <_free_r+0x4a>
 800ff54:	6819      	ldr	r1, [r3, #0]
 800ff56:	1858      	adds	r0, r3, r1
 800ff58:	42a0      	cmp	r0, r4
 800ff5a:	d10b      	bne.n	800ff74 <_free_r+0x74>
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	4401      	add	r1, r0
 800ff60:	1858      	adds	r0, r3, r1
 800ff62:	4282      	cmp	r2, r0
 800ff64:	6019      	str	r1, [r3, #0]
 800ff66:	d1dd      	bne.n	800ff24 <_free_r+0x24>
 800ff68:	6810      	ldr	r0, [r2, #0]
 800ff6a:	6852      	ldr	r2, [r2, #4]
 800ff6c:	605a      	str	r2, [r3, #4]
 800ff6e:	4401      	add	r1, r0
 800ff70:	6019      	str	r1, [r3, #0]
 800ff72:	e7d7      	b.n	800ff24 <_free_r+0x24>
 800ff74:	d902      	bls.n	800ff7c <_free_r+0x7c>
 800ff76:	230c      	movs	r3, #12
 800ff78:	602b      	str	r3, [r5, #0]
 800ff7a:	e7d3      	b.n	800ff24 <_free_r+0x24>
 800ff7c:	6820      	ldr	r0, [r4, #0]
 800ff7e:	1821      	adds	r1, r4, r0
 800ff80:	428a      	cmp	r2, r1
 800ff82:	bf04      	itt	eq
 800ff84:	6811      	ldreq	r1, [r2, #0]
 800ff86:	6852      	ldreq	r2, [r2, #4]
 800ff88:	6062      	str	r2, [r4, #4]
 800ff8a:	bf04      	itt	eq
 800ff8c:	1809      	addeq	r1, r1, r0
 800ff8e:	6021      	streq	r1, [r4, #0]
 800ff90:	605c      	str	r4, [r3, #4]
 800ff92:	e7c7      	b.n	800ff24 <_free_r+0x24>
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop
 800ff98:	2400ba30 	.word	0x2400ba30

0800ff9c <_malloc_r>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	1ccd      	adds	r5, r1, #3
 800ffa0:	f025 0503 	bic.w	r5, r5, #3
 800ffa4:	3508      	adds	r5, #8
 800ffa6:	2d0c      	cmp	r5, #12
 800ffa8:	bf38      	it	cc
 800ffaa:	250c      	movcc	r5, #12
 800ffac:	2d00      	cmp	r5, #0
 800ffae:	4606      	mov	r6, r0
 800ffb0:	db01      	blt.n	800ffb6 <_malloc_r+0x1a>
 800ffb2:	42a9      	cmp	r1, r5
 800ffb4:	d903      	bls.n	800ffbe <_malloc_r+0x22>
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	6033      	str	r3, [r6, #0]
 800ffba:	2000      	movs	r0, #0
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	f001 fd9e 	bl	8011afe <__malloc_lock>
 800ffc2:	4a21      	ldr	r2, [pc, #132]	; (8010048 <_malloc_r+0xac>)
 800ffc4:	6814      	ldr	r4, [r2, #0]
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	b991      	cbnz	r1, 800fff0 <_malloc_r+0x54>
 800ffca:	4c20      	ldr	r4, [pc, #128]	; (801004c <_malloc_r+0xb0>)
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	b91b      	cbnz	r3, 800ffd8 <_malloc_r+0x3c>
 800ffd0:	4630      	mov	r0, r6
 800ffd2:	f000 fcf5 	bl	80109c0 <_sbrk_r>
 800ffd6:	6020      	str	r0, [r4, #0]
 800ffd8:	4629      	mov	r1, r5
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f000 fcf0 	bl	80109c0 <_sbrk_r>
 800ffe0:	1c43      	adds	r3, r0, #1
 800ffe2:	d124      	bne.n	801002e <_malloc_r+0x92>
 800ffe4:	230c      	movs	r3, #12
 800ffe6:	6033      	str	r3, [r6, #0]
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f001 fd89 	bl	8011b00 <__malloc_unlock>
 800ffee:	e7e4      	b.n	800ffba <_malloc_r+0x1e>
 800fff0:	680b      	ldr	r3, [r1, #0]
 800fff2:	1b5b      	subs	r3, r3, r5
 800fff4:	d418      	bmi.n	8010028 <_malloc_r+0x8c>
 800fff6:	2b0b      	cmp	r3, #11
 800fff8:	d90f      	bls.n	801001a <_malloc_r+0x7e>
 800fffa:	600b      	str	r3, [r1, #0]
 800fffc:	50cd      	str	r5, [r1, r3]
 800fffe:	18cc      	adds	r4, r1, r3
 8010000:	4630      	mov	r0, r6
 8010002:	f001 fd7d 	bl	8011b00 <__malloc_unlock>
 8010006:	f104 000b 	add.w	r0, r4, #11
 801000a:	1d23      	adds	r3, r4, #4
 801000c:	f020 0007 	bic.w	r0, r0, #7
 8010010:	1ac3      	subs	r3, r0, r3
 8010012:	d0d3      	beq.n	800ffbc <_malloc_r+0x20>
 8010014:	425a      	negs	r2, r3
 8010016:	50e2      	str	r2, [r4, r3]
 8010018:	e7d0      	b.n	800ffbc <_malloc_r+0x20>
 801001a:	428c      	cmp	r4, r1
 801001c:	684b      	ldr	r3, [r1, #4]
 801001e:	bf16      	itet	ne
 8010020:	6063      	strne	r3, [r4, #4]
 8010022:	6013      	streq	r3, [r2, #0]
 8010024:	460c      	movne	r4, r1
 8010026:	e7eb      	b.n	8010000 <_malloc_r+0x64>
 8010028:	460c      	mov	r4, r1
 801002a:	6849      	ldr	r1, [r1, #4]
 801002c:	e7cc      	b.n	800ffc8 <_malloc_r+0x2c>
 801002e:	1cc4      	adds	r4, r0, #3
 8010030:	f024 0403 	bic.w	r4, r4, #3
 8010034:	42a0      	cmp	r0, r4
 8010036:	d005      	beq.n	8010044 <_malloc_r+0xa8>
 8010038:	1a21      	subs	r1, r4, r0
 801003a:	4630      	mov	r0, r6
 801003c:	f000 fcc0 	bl	80109c0 <_sbrk_r>
 8010040:	3001      	adds	r0, #1
 8010042:	d0cf      	beq.n	800ffe4 <_malloc_r+0x48>
 8010044:	6025      	str	r5, [r4, #0]
 8010046:	e7db      	b.n	8010000 <_malloc_r+0x64>
 8010048:	2400ba30 	.word	0x2400ba30
 801004c:	2400ba34 	.word	0x2400ba34

08010050 <__cvt>:
 8010050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010052:	ed2d 8b02 	vpush	{d8}
 8010056:	eeb0 8b40 	vmov.f64	d8, d0
 801005a:	b085      	sub	sp, #20
 801005c:	4617      	mov	r7, r2
 801005e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010062:	ee18 2a90 	vmov	r2, s17
 8010066:	f025 0520 	bic.w	r5, r5, #32
 801006a:	2a00      	cmp	r2, #0
 801006c:	bfb6      	itet	lt
 801006e:	222d      	movlt	r2, #45	; 0x2d
 8010070:	2200      	movge	r2, #0
 8010072:	eeb1 8b40 	vneglt.f64	d8, d0
 8010076:	2d46      	cmp	r5, #70	; 0x46
 8010078:	460c      	mov	r4, r1
 801007a:	701a      	strb	r2, [r3, #0]
 801007c:	d004      	beq.n	8010088 <__cvt+0x38>
 801007e:	2d45      	cmp	r5, #69	; 0x45
 8010080:	d100      	bne.n	8010084 <__cvt+0x34>
 8010082:	3401      	adds	r4, #1
 8010084:	2102      	movs	r1, #2
 8010086:	e000      	b.n	801008a <__cvt+0x3a>
 8010088:	2103      	movs	r1, #3
 801008a:	ab03      	add	r3, sp, #12
 801008c:	9301      	str	r3, [sp, #4]
 801008e:	ab02      	add	r3, sp, #8
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	4622      	mov	r2, r4
 8010094:	4633      	mov	r3, r6
 8010096:	eeb0 0b48 	vmov.f64	d0, d8
 801009a:	f000 fded 	bl	8010c78 <_dtoa_r>
 801009e:	2d47      	cmp	r5, #71	; 0x47
 80100a0:	d101      	bne.n	80100a6 <__cvt+0x56>
 80100a2:	07fb      	lsls	r3, r7, #31
 80100a4:	d51e      	bpl.n	80100e4 <__cvt+0x94>
 80100a6:	2d46      	cmp	r5, #70	; 0x46
 80100a8:	eb00 0304 	add.w	r3, r0, r4
 80100ac:	d10c      	bne.n	80100c8 <__cvt+0x78>
 80100ae:	7802      	ldrb	r2, [r0, #0]
 80100b0:	2a30      	cmp	r2, #48	; 0x30
 80100b2:	d107      	bne.n	80100c4 <__cvt+0x74>
 80100b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100bc:	bf1c      	itt	ne
 80100be:	f1c4 0401 	rsbne	r4, r4, #1
 80100c2:	6034      	strne	r4, [r6, #0]
 80100c4:	6832      	ldr	r2, [r6, #0]
 80100c6:	4413      	add	r3, r2
 80100c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	d007      	beq.n	80100e2 <__cvt+0x92>
 80100d2:	2130      	movs	r1, #48	; 0x30
 80100d4:	9a03      	ldr	r2, [sp, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d204      	bcs.n	80100e4 <__cvt+0x94>
 80100da:	1c54      	adds	r4, r2, #1
 80100dc:	9403      	str	r4, [sp, #12]
 80100de:	7011      	strb	r1, [r2, #0]
 80100e0:	e7f8      	b.n	80100d4 <__cvt+0x84>
 80100e2:	9303      	str	r3, [sp, #12]
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100e8:	1a1b      	subs	r3, r3, r0
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	b005      	add	sp, #20
 80100ee:	ecbd 8b02 	vpop	{d8}
 80100f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100f4 <__exponent>:
 80100f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100f6:	2900      	cmp	r1, #0
 80100f8:	4604      	mov	r4, r0
 80100fa:	bfba      	itte	lt
 80100fc:	4249      	neglt	r1, r1
 80100fe:	232d      	movlt	r3, #45	; 0x2d
 8010100:	232b      	movge	r3, #43	; 0x2b
 8010102:	2909      	cmp	r1, #9
 8010104:	f804 2b02 	strb.w	r2, [r4], #2
 8010108:	7043      	strb	r3, [r0, #1]
 801010a:	dd20      	ble.n	801014e <__exponent+0x5a>
 801010c:	f10d 0307 	add.w	r3, sp, #7
 8010110:	461f      	mov	r7, r3
 8010112:	260a      	movs	r6, #10
 8010114:	fb91 f5f6 	sdiv	r5, r1, r6
 8010118:	fb06 1115 	mls	r1, r6, r5, r1
 801011c:	3130      	adds	r1, #48	; 0x30
 801011e:	2d09      	cmp	r5, #9
 8010120:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010124:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010128:	4629      	mov	r1, r5
 801012a:	dc09      	bgt.n	8010140 <__exponent+0x4c>
 801012c:	3130      	adds	r1, #48	; 0x30
 801012e:	3b02      	subs	r3, #2
 8010130:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010134:	42bb      	cmp	r3, r7
 8010136:	4622      	mov	r2, r4
 8010138:	d304      	bcc.n	8010144 <__exponent+0x50>
 801013a:	1a10      	subs	r0, r2, r0
 801013c:	b003      	add	sp, #12
 801013e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010140:	4613      	mov	r3, r2
 8010142:	e7e7      	b.n	8010114 <__exponent+0x20>
 8010144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010148:	f804 2b01 	strb.w	r2, [r4], #1
 801014c:	e7f2      	b.n	8010134 <__exponent+0x40>
 801014e:	2330      	movs	r3, #48	; 0x30
 8010150:	4419      	add	r1, r3
 8010152:	7083      	strb	r3, [r0, #2]
 8010154:	1d02      	adds	r2, r0, #4
 8010156:	70c1      	strb	r1, [r0, #3]
 8010158:	e7ef      	b.n	801013a <__exponent+0x46>
 801015a:	0000      	movs	r0, r0
 801015c:	0000      	movs	r0, r0
	...

08010160 <_printf_float>:
 8010160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	b08d      	sub	sp, #52	; 0x34
 8010166:	460c      	mov	r4, r1
 8010168:	4616      	mov	r6, r2
 801016a:	461f      	mov	r7, r3
 801016c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010170:	4605      	mov	r5, r0
 8010172:	f001 fc47 	bl	8011a04 <_localeconv_r>
 8010176:	f8d0 b000 	ldr.w	fp, [r0]
 801017a:	4658      	mov	r0, fp
 801017c:	f7f0 f8b0 	bl	80002e0 <strlen>
 8010180:	2300      	movs	r3, #0
 8010182:	930a      	str	r3, [sp, #40]	; 0x28
 8010184:	f8d8 3000 	ldr.w	r3, [r8]
 8010188:	9005      	str	r0, [sp, #20]
 801018a:	3307      	adds	r3, #7
 801018c:	f023 0307 	bic.w	r3, r3, #7
 8010190:	f103 0108 	add.w	r1, r3, #8
 8010194:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010198:	6822      	ldr	r2, [r4, #0]
 801019a:	f8c8 1000 	str.w	r1, [r8]
 801019e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80101a6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010430 <_printf_float+0x2d0>
 80101aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80101ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80101b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	dd24      	ble.n	8010206 <_printf_float+0xa6>
 80101bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	d502      	bpl.n	80101cc <_printf_float+0x6c>
 80101c6:	232d      	movs	r3, #45	; 0x2d
 80101c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101cc:	499a      	ldr	r1, [pc, #616]	; (8010438 <_printf_float+0x2d8>)
 80101ce:	4b9b      	ldr	r3, [pc, #620]	; (801043c <_printf_float+0x2dc>)
 80101d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80101d4:	bf8c      	ite	hi
 80101d6:	4688      	movhi	r8, r1
 80101d8:	4698      	movls	r8, r3
 80101da:	f022 0204 	bic.w	r2, r2, #4
 80101de:	2303      	movs	r3, #3
 80101e0:	6123      	str	r3, [r4, #16]
 80101e2:	6022      	str	r2, [r4, #0]
 80101e4:	f04f 0a00 	mov.w	sl, #0
 80101e8:	9700      	str	r7, [sp, #0]
 80101ea:	4633      	mov	r3, r6
 80101ec:	aa0b      	add	r2, sp, #44	; 0x2c
 80101ee:	4621      	mov	r1, r4
 80101f0:	4628      	mov	r0, r5
 80101f2:	f000 f9e1 	bl	80105b8 <_printf_common>
 80101f6:	3001      	adds	r0, #1
 80101f8:	f040 8089 	bne.w	801030e <_printf_float+0x1ae>
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010200:	b00d      	add	sp, #52	; 0x34
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	eeb4 0b40 	vcmp.f64	d0, d0
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	d702      	bvc.n	8010216 <_printf_float+0xb6>
 8010210:	498b      	ldr	r1, [pc, #556]	; (8010440 <_printf_float+0x2e0>)
 8010212:	4b8c      	ldr	r3, [pc, #560]	; (8010444 <_printf_float+0x2e4>)
 8010214:	e7dc      	b.n	80101d0 <_printf_float+0x70>
 8010216:	6861      	ldr	r1, [r4, #4]
 8010218:	1c4b      	adds	r3, r1, #1
 801021a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801021e:	ab0a      	add	r3, sp, #40	; 0x28
 8010220:	a809      	add	r0, sp, #36	; 0x24
 8010222:	d13b      	bne.n	801029c <_printf_float+0x13c>
 8010224:	2106      	movs	r1, #6
 8010226:	6061      	str	r1, [r4, #4]
 8010228:	f04f 0c00 	mov.w	ip, #0
 801022c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010230:	e9cd 0900 	strd	r0, r9, [sp]
 8010234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010238:	6022      	str	r2, [r4, #0]
 801023a:	6861      	ldr	r1, [r4, #4]
 801023c:	4628      	mov	r0, r5
 801023e:	f7ff ff07 	bl	8010050 <__cvt>
 8010242:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010246:	2b47      	cmp	r3, #71	; 0x47
 8010248:	4680      	mov	r8, r0
 801024a:	d109      	bne.n	8010260 <_printf_float+0x100>
 801024c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801024e:	1cd8      	adds	r0, r3, #3
 8010250:	db02      	blt.n	8010258 <_printf_float+0xf8>
 8010252:	6862      	ldr	r2, [r4, #4]
 8010254:	4293      	cmp	r3, r2
 8010256:	dd47      	ble.n	80102e8 <_printf_float+0x188>
 8010258:	f1a9 0902 	sub.w	r9, r9, #2
 801025c:	fa5f f989 	uxtb.w	r9, r9
 8010260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010266:	d824      	bhi.n	80102b2 <_printf_float+0x152>
 8010268:	3901      	subs	r1, #1
 801026a:	464a      	mov	r2, r9
 801026c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010270:	9109      	str	r1, [sp, #36]	; 0x24
 8010272:	f7ff ff3f 	bl	80100f4 <__exponent>
 8010276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010278:	1813      	adds	r3, r2, r0
 801027a:	2a01      	cmp	r2, #1
 801027c:	4682      	mov	sl, r0
 801027e:	6123      	str	r3, [r4, #16]
 8010280:	dc02      	bgt.n	8010288 <_printf_float+0x128>
 8010282:	6822      	ldr	r2, [r4, #0]
 8010284:	07d1      	lsls	r1, r2, #31
 8010286:	d501      	bpl.n	801028c <_printf_float+0x12c>
 8010288:	3301      	adds	r3, #1
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010290:	2b00      	cmp	r3, #0
 8010292:	d0a9      	beq.n	80101e8 <_printf_float+0x88>
 8010294:	232d      	movs	r3, #45	; 0x2d
 8010296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801029a:	e7a5      	b.n	80101e8 <_printf_float+0x88>
 801029c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80102a0:	f000 8178 	beq.w	8010594 <_printf_float+0x434>
 80102a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80102a8:	d1be      	bne.n	8010228 <_printf_float+0xc8>
 80102aa:	2900      	cmp	r1, #0
 80102ac:	d1bc      	bne.n	8010228 <_printf_float+0xc8>
 80102ae:	2101      	movs	r1, #1
 80102b0:	e7b9      	b.n	8010226 <_printf_float+0xc6>
 80102b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80102b6:	d119      	bne.n	80102ec <_printf_float+0x18c>
 80102b8:	2900      	cmp	r1, #0
 80102ba:	6863      	ldr	r3, [r4, #4]
 80102bc:	dd0c      	ble.n	80102d8 <_printf_float+0x178>
 80102be:	6121      	str	r1, [r4, #16]
 80102c0:	b913      	cbnz	r3, 80102c8 <_printf_float+0x168>
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	07d2      	lsls	r2, r2, #31
 80102c6:	d502      	bpl.n	80102ce <_printf_float+0x16e>
 80102c8:	3301      	adds	r3, #1
 80102ca:	440b      	add	r3, r1
 80102cc:	6123      	str	r3, [r4, #16]
 80102ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80102d2:	f04f 0a00 	mov.w	sl, #0
 80102d6:	e7d9      	b.n	801028c <_printf_float+0x12c>
 80102d8:	b913      	cbnz	r3, 80102e0 <_printf_float+0x180>
 80102da:	6822      	ldr	r2, [r4, #0]
 80102dc:	07d0      	lsls	r0, r2, #31
 80102de:	d501      	bpl.n	80102e4 <_printf_float+0x184>
 80102e0:	3302      	adds	r3, #2
 80102e2:	e7f3      	b.n	80102cc <_printf_float+0x16c>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e7f1      	b.n	80102cc <_printf_float+0x16c>
 80102e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80102ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102f0:	4293      	cmp	r3, r2
 80102f2:	db05      	blt.n	8010300 <_printf_float+0x1a0>
 80102f4:	6822      	ldr	r2, [r4, #0]
 80102f6:	6123      	str	r3, [r4, #16]
 80102f8:	07d1      	lsls	r1, r2, #31
 80102fa:	d5e8      	bpl.n	80102ce <_printf_float+0x16e>
 80102fc:	3301      	adds	r3, #1
 80102fe:	e7e5      	b.n	80102cc <_printf_float+0x16c>
 8010300:	2b00      	cmp	r3, #0
 8010302:	bfd4      	ite	le
 8010304:	f1c3 0302 	rsble	r3, r3, #2
 8010308:	2301      	movgt	r3, #1
 801030a:	4413      	add	r3, r2
 801030c:	e7de      	b.n	80102cc <_printf_float+0x16c>
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	055a      	lsls	r2, r3, #21
 8010312:	d407      	bmi.n	8010324 <_printf_float+0x1c4>
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	4642      	mov	r2, r8
 8010318:	4631      	mov	r1, r6
 801031a:	4628      	mov	r0, r5
 801031c:	47b8      	blx	r7
 801031e:	3001      	adds	r0, #1
 8010320:	d12a      	bne.n	8010378 <_printf_float+0x218>
 8010322:	e76b      	b.n	80101fc <_printf_float+0x9c>
 8010324:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010328:	f240 80de 	bls.w	80104e8 <_printf_float+0x388>
 801032c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010330:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	d133      	bne.n	80103a2 <_printf_float+0x242>
 801033a:	2301      	movs	r3, #1
 801033c:	4a42      	ldr	r2, [pc, #264]	; (8010448 <_printf_float+0x2e8>)
 801033e:	4631      	mov	r1, r6
 8010340:	4628      	mov	r0, r5
 8010342:	47b8      	blx	r7
 8010344:	3001      	adds	r0, #1
 8010346:	f43f af59 	beq.w	80101fc <_printf_float+0x9c>
 801034a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801034e:	429a      	cmp	r2, r3
 8010350:	db02      	blt.n	8010358 <_printf_float+0x1f8>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	07d8      	lsls	r0, r3, #31
 8010356:	d50f      	bpl.n	8010378 <_printf_float+0x218>
 8010358:	9b05      	ldr	r3, [sp, #20]
 801035a:	465a      	mov	r2, fp
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	f43f af4a 	beq.w	80101fc <_printf_float+0x9c>
 8010368:	f04f 0800 	mov.w	r8, #0
 801036c:	f104 091a 	add.w	r9, r4, #26
 8010370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010372:	3b01      	subs	r3, #1
 8010374:	4543      	cmp	r3, r8
 8010376:	dc09      	bgt.n	801038c <_printf_float+0x22c>
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	079b      	lsls	r3, r3, #30
 801037c:	f100 8105 	bmi.w	801058a <_printf_float+0x42a>
 8010380:	68e0      	ldr	r0, [r4, #12]
 8010382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010384:	4298      	cmp	r0, r3
 8010386:	bfb8      	it	lt
 8010388:	4618      	movlt	r0, r3
 801038a:	e739      	b.n	8010200 <_printf_float+0xa0>
 801038c:	2301      	movs	r3, #1
 801038e:	464a      	mov	r2, r9
 8010390:	4631      	mov	r1, r6
 8010392:	4628      	mov	r0, r5
 8010394:	47b8      	blx	r7
 8010396:	3001      	adds	r0, #1
 8010398:	f43f af30 	beq.w	80101fc <_printf_float+0x9c>
 801039c:	f108 0801 	add.w	r8, r8, #1
 80103a0:	e7e6      	b.n	8010370 <_printf_float+0x210>
 80103a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	dc2b      	bgt.n	8010400 <_printf_float+0x2a0>
 80103a8:	2301      	movs	r3, #1
 80103aa:	4a27      	ldr	r2, [pc, #156]	; (8010448 <_printf_float+0x2e8>)
 80103ac:	4631      	mov	r1, r6
 80103ae:	4628      	mov	r0, r5
 80103b0:	47b8      	blx	r7
 80103b2:	3001      	adds	r0, #1
 80103b4:	f43f af22 	beq.w	80101fc <_printf_float+0x9c>
 80103b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ba:	b923      	cbnz	r3, 80103c6 <_printf_float+0x266>
 80103bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103be:	b913      	cbnz	r3, 80103c6 <_printf_float+0x266>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	07d9      	lsls	r1, r3, #31
 80103c4:	d5d8      	bpl.n	8010378 <_printf_float+0x218>
 80103c6:	9b05      	ldr	r3, [sp, #20]
 80103c8:	465a      	mov	r2, fp
 80103ca:	4631      	mov	r1, r6
 80103cc:	4628      	mov	r0, r5
 80103ce:	47b8      	blx	r7
 80103d0:	3001      	adds	r0, #1
 80103d2:	f43f af13 	beq.w	80101fc <_printf_float+0x9c>
 80103d6:	f04f 0900 	mov.w	r9, #0
 80103da:	f104 0a1a 	add.w	sl, r4, #26
 80103de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e0:	425b      	negs	r3, r3
 80103e2:	454b      	cmp	r3, r9
 80103e4:	dc01      	bgt.n	80103ea <_printf_float+0x28a>
 80103e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e8:	e795      	b.n	8010316 <_printf_float+0x1b6>
 80103ea:	2301      	movs	r3, #1
 80103ec:	4652      	mov	r2, sl
 80103ee:	4631      	mov	r1, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f af01 	beq.w	80101fc <_printf_float+0x9c>
 80103fa:	f109 0901 	add.w	r9, r9, #1
 80103fe:	e7ee      	b.n	80103de <_printf_float+0x27e>
 8010400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010404:	429a      	cmp	r2, r3
 8010406:	bfa8      	it	ge
 8010408:	461a      	movge	r2, r3
 801040a:	2a00      	cmp	r2, #0
 801040c:	4691      	mov	r9, r2
 801040e:	dd07      	ble.n	8010420 <_printf_float+0x2c0>
 8010410:	4613      	mov	r3, r2
 8010412:	4631      	mov	r1, r6
 8010414:	4642      	mov	r2, r8
 8010416:	4628      	mov	r0, r5
 8010418:	47b8      	blx	r7
 801041a:	3001      	adds	r0, #1
 801041c:	f43f aeee 	beq.w	80101fc <_printf_float+0x9c>
 8010420:	f104 031a 	add.w	r3, r4, #26
 8010424:	f04f 0a00 	mov.w	sl, #0
 8010428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801042c:	9307      	str	r3, [sp, #28]
 801042e:	e017      	b.n	8010460 <_printf_float+0x300>
 8010430:	ffffffff 	.word	0xffffffff
 8010434:	7fefffff 	.word	0x7fefffff
 8010438:	08014078 	.word	0x08014078
 801043c:	08014074 	.word	0x08014074
 8010440:	08014080 	.word	0x08014080
 8010444:	0801407c 	.word	0x0801407c
 8010448:	08014084 	.word	0x08014084
 801044c:	2301      	movs	r3, #1
 801044e:	9a07      	ldr	r2, [sp, #28]
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f aed0 	beq.w	80101fc <_printf_float+0x9c>
 801045c:	f10a 0a01 	add.w	sl, sl, #1
 8010460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010462:	9306      	str	r3, [sp, #24]
 8010464:	eba3 0309 	sub.w	r3, r3, r9
 8010468:	4553      	cmp	r3, sl
 801046a:	dcef      	bgt.n	801044c <_printf_float+0x2ec>
 801046c:	9b06      	ldr	r3, [sp, #24]
 801046e:	4498      	add	r8, r3
 8010470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010474:	429a      	cmp	r2, r3
 8010476:	db15      	blt.n	80104a4 <_printf_float+0x344>
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	07da      	lsls	r2, r3, #31
 801047c:	d412      	bmi.n	80104a4 <_printf_float+0x344>
 801047e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010480:	9a06      	ldr	r2, [sp, #24]
 8010482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010484:	1a9a      	subs	r2, r3, r2
 8010486:	eba3 0a01 	sub.w	sl, r3, r1
 801048a:	4592      	cmp	sl, r2
 801048c:	bfa8      	it	ge
 801048e:	4692      	movge	sl, r2
 8010490:	f1ba 0f00 	cmp.w	sl, #0
 8010494:	dc0e      	bgt.n	80104b4 <_printf_float+0x354>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801049e:	f104 091a 	add.w	r9, r4, #26
 80104a2:	e019      	b.n	80104d8 <_printf_float+0x378>
 80104a4:	9b05      	ldr	r3, [sp, #20]
 80104a6:	465a      	mov	r2, fp
 80104a8:	4631      	mov	r1, r6
 80104aa:	4628      	mov	r0, r5
 80104ac:	47b8      	blx	r7
 80104ae:	3001      	adds	r0, #1
 80104b0:	d1e5      	bne.n	801047e <_printf_float+0x31e>
 80104b2:	e6a3      	b.n	80101fc <_printf_float+0x9c>
 80104b4:	4653      	mov	r3, sl
 80104b6:	4642      	mov	r2, r8
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	47b8      	blx	r7
 80104be:	3001      	adds	r0, #1
 80104c0:	d1e9      	bne.n	8010496 <_printf_float+0x336>
 80104c2:	e69b      	b.n	80101fc <_printf_float+0x9c>
 80104c4:	2301      	movs	r3, #1
 80104c6:	464a      	mov	r2, r9
 80104c8:	4631      	mov	r1, r6
 80104ca:	4628      	mov	r0, r5
 80104cc:	47b8      	blx	r7
 80104ce:	3001      	adds	r0, #1
 80104d0:	f43f ae94 	beq.w	80101fc <_printf_float+0x9c>
 80104d4:	f108 0801 	add.w	r8, r8, #1
 80104d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104dc:	1a9b      	subs	r3, r3, r2
 80104de:	eba3 030a 	sub.w	r3, r3, sl
 80104e2:	4543      	cmp	r3, r8
 80104e4:	dcee      	bgt.n	80104c4 <_printf_float+0x364>
 80104e6:	e747      	b.n	8010378 <_printf_float+0x218>
 80104e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104ea:	2a01      	cmp	r2, #1
 80104ec:	dc01      	bgt.n	80104f2 <_printf_float+0x392>
 80104ee:	07db      	lsls	r3, r3, #31
 80104f0:	d539      	bpl.n	8010566 <_printf_float+0x406>
 80104f2:	2301      	movs	r3, #1
 80104f4:	4642      	mov	r2, r8
 80104f6:	4631      	mov	r1, r6
 80104f8:	4628      	mov	r0, r5
 80104fa:	47b8      	blx	r7
 80104fc:	3001      	adds	r0, #1
 80104fe:	f43f ae7d 	beq.w	80101fc <_printf_float+0x9c>
 8010502:	9b05      	ldr	r3, [sp, #20]
 8010504:	465a      	mov	r2, fp
 8010506:	4631      	mov	r1, r6
 8010508:	4628      	mov	r0, r5
 801050a:	47b8      	blx	r7
 801050c:	3001      	adds	r0, #1
 801050e:	f108 0801 	add.w	r8, r8, #1
 8010512:	f43f ae73 	beq.w	80101fc <_printf_float+0x9c>
 8010516:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801051a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801051c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010524:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010528:	d018      	beq.n	801055c <_printf_float+0x3fc>
 801052a:	4642      	mov	r2, r8
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	d10e      	bne.n	8010554 <_printf_float+0x3f4>
 8010536:	e661      	b.n	80101fc <_printf_float+0x9c>
 8010538:	2301      	movs	r3, #1
 801053a:	464a      	mov	r2, r9
 801053c:	4631      	mov	r1, r6
 801053e:	4628      	mov	r0, r5
 8010540:	47b8      	blx	r7
 8010542:	3001      	adds	r0, #1
 8010544:	f43f ae5a 	beq.w	80101fc <_printf_float+0x9c>
 8010548:	f108 0801 	add.w	r8, r8, #1
 801054c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054e:	3b01      	subs	r3, #1
 8010550:	4543      	cmp	r3, r8
 8010552:	dcf1      	bgt.n	8010538 <_printf_float+0x3d8>
 8010554:	4653      	mov	r3, sl
 8010556:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801055a:	e6dd      	b.n	8010318 <_printf_float+0x1b8>
 801055c:	f04f 0800 	mov.w	r8, #0
 8010560:	f104 091a 	add.w	r9, r4, #26
 8010564:	e7f2      	b.n	801054c <_printf_float+0x3ec>
 8010566:	2301      	movs	r3, #1
 8010568:	e7df      	b.n	801052a <_printf_float+0x3ca>
 801056a:	2301      	movs	r3, #1
 801056c:	464a      	mov	r2, r9
 801056e:	4631      	mov	r1, r6
 8010570:	4628      	mov	r0, r5
 8010572:	47b8      	blx	r7
 8010574:	3001      	adds	r0, #1
 8010576:	f43f ae41 	beq.w	80101fc <_printf_float+0x9c>
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	68e3      	ldr	r3, [r4, #12]
 8010580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010582:	1a9b      	subs	r3, r3, r2
 8010584:	4543      	cmp	r3, r8
 8010586:	dcf0      	bgt.n	801056a <_printf_float+0x40a>
 8010588:	e6fa      	b.n	8010380 <_printf_float+0x220>
 801058a:	f04f 0800 	mov.w	r8, #0
 801058e:	f104 0919 	add.w	r9, r4, #25
 8010592:	e7f4      	b.n	801057e <_printf_float+0x41e>
 8010594:	2900      	cmp	r1, #0
 8010596:	f43f ae8a 	beq.w	80102ae <_printf_float+0x14e>
 801059a:	f04f 0c00 	mov.w	ip, #0
 801059e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80105a2:	e9cd 0900 	strd	r0, r9, [sp]
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff fd4f 	bl	8010050 <__cvt>
 80105b2:	4680      	mov	r8, r0
 80105b4:	e64a      	b.n	801024c <_printf_float+0xec>
 80105b6:	bf00      	nop

080105b8 <_printf_common>:
 80105b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105bc:	4691      	mov	r9, r2
 80105be:	461f      	mov	r7, r3
 80105c0:	688a      	ldr	r2, [r1, #8]
 80105c2:	690b      	ldr	r3, [r1, #16]
 80105c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105c8:	4293      	cmp	r3, r2
 80105ca:	bfb8      	it	lt
 80105cc:	4613      	movlt	r3, r2
 80105ce:	f8c9 3000 	str.w	r3, [r9]
 80105d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105d6:	4606      	mov	r6, r0
 80105d8:	460c      	mov	r4, r1
 80105da:	b112      	cbz	r2, 80105e2 <_printf_common+0x2a>
 80105dc:	3301      	adds	r3, #1
 80105de:	f8c9 3000 	str.w	r3, [r9]
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	0699      	lsls	r1, r3, #26
 80105e6:	bf42      	ittt	mi
 80105e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80105ec:	3302      	addmi	r3, #2
 80105ee:	f8c9 3000 	strmi.w	r3, [r9]
 80105f2:	6825      	ldr	r5, [r4, #0]
 80105f4:	f015 0506 	ands.w	r5, r5, #6
 80105f8:	d107      	bne.n	801060a <_printf_common+0x52>
 80105fa:	f104 0a19 	add.w	sl, r4, #25
 80105fe:	68e3      	ldr	r3, [r4, #12]
 8010600:	f8d9 2000 	ldr.w	r2, [r9]
 8010604:	1a9b      	subs	r3, r3, r2
 8010606:	42ab      	cmp	r3, r5
 8010608:	dc28      	bgt.n	801065c <_printf_common+0xa4>
 801060a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	3300      	adds	r3, #0
 8010612:	bf18      	it	ne
 8010614:	2301      	movne	r3, #1
 8010616:	0692      	lsls	r2, r2, #26
 8010618:	d42d      	bmi.n	8010676 <_printf_common+0xbe>
 801061a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801061e:	4639      	mov	r1, r7
 8010620:	4630      	mov	r0, r6
 8010622:	47c0      	blx	r8
 8010624:	3001      	adds	r0, #1
 8010626:	d020      	beq.n	801066a <_printf_common+0xb2>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	68e5      	ldr	r5, [r4, #12]
 801062c:	f8d9 2000 	ldr.w	r2, [r9]
 8010630:	f003 0306 	and.w	r3, r3, #6
 8010634:	2b04      	cmp	r3, #4
 8010636:	bf08      	it	eq
 8010638:	1aad      	subeq	r5, r5, r2
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	6922      	ldr	r2, [r4, #16]
 801063e:	bf0c      	ite	eq
 8010640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010644:	2500      	movne	r5, #0
 8010646:	4293      	cmp	r3, r2
 8010648:	bfc4      	itt	gt
 801064a:	1a9b      	subgt	r3, r3, r2
 801064c:	18ed      	addgt	r5, r5, r3
 801064e:	f04f 0900 	mov.w	r9, #0
 8010652:	341a      	adds	r4, #26
 8010654:	454d      	cmp	r5, r9
 8010656:	d11a      	bne.n	801068e <_printf_common+0xd6>
 8010658:	2000      	movs	r0, #0
 801065a:	e008      	b.n	801066e <_printf_common+0xb6>
 801065c:	2301      	movs	r3, #1
 801065e:	4652      	mov	r2, sl
 8010660:	4639      	mov	r1, r7
 8010662:	4630      	mov	r0, r6
 8010664:	47c0      	blx	r8
 8010666:	3001      	adds	r0, #1
 8010668:	d103      	bne.n	8010672 <_printf_common+0xba>
 801066a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010672:	3501      	adds	r5, #1
 8010674:	e7c3      	b.n	80105fe <_printf_common+0x46>
 8010676:	18e1      	adds	r1, r4, r3
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	2030      	movs	r0, #48	; 0x30
 801067c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010680:	4422      	add	r2, r4
 8010682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801068a:	3302      	adds	r3, #2
 801068c:	e7c5      	b.n	801061a <_printf_common+0x62>
 801068e:	2301      	movs	r3, #1
 8010690:	4622      	mov	r2, r4
 8010692:	4639      	mov	r1, r7
 8010694:	4630      	mov	r0, r6
 8010696:	47c0      	blx	r8
 8010698:	3001      	adds	r0, #1
 801069a:	d0e6      	beq.n	801066a <_printf_common+0xb2>
 801069c:	f109 0901 	add.w	r9, r9, #1
 80106a0:	e7d8      	b.n	8010654 <_printf_common+0x9c>
	...

080106a4 <_printf_i>:
 80106a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80106ac:	460c      	mov	r4, r1
 80106ae:	7e09      	ldrb	r1, [r1, #24]
 80106b0:	b085      	sub	sp, #20
 80106b2:	296e      	cmp	r1, #110	; 0x6e
 80106b4:	4617      	mov	r7, r2
 80106b6:	4606      	mov	r6, r0
 80106b8:	4698      	mov	r8, r3
 80106ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106bc:	f000 80b3 	beq.w	8010826 <_printf_i+0x182>
 80106c0:	d822      	bhi.n	8010708 <_printf_i+0x64>
 80106c2:	2963      	cmp	r1, #99	; 0x63
 80106c4:	d036      	beq.n	8010734 <_printf_i+0x90>
 80106c6:	d80a      	bhi.n	80106de <_printf_i+0x3a>
 80106c8:	2900      	cmp	r1, #0
 80106ca:	f000 80b9 	beq.w	8010840 <_printf_i+0x19c>
 80106ce:	2958      	cmp	r1, #88	; 0x58
 80106d0:	f000 8083 	beq.w	80107da <_printf_i+0x136>
 80106d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80106dc:	e032      	b.n	8010744 <_printf_i+0xa0>
 80106de:	2964      	cmp	r1, #100	; 0x64
 80106e0:	d001      	beq.n	80106e6 <_printf_i+0x42>
 80106e2:	2969      	cmp	r1, #105	; 0x69
 80106e4:	d1f6      	bne.n	80106d4 <_printf_i+0x30>
 80106e6:	6820      	ldr	r0, [r4, #0]
 80106e8:	6813      	ldr	r3, [r2, #0]
 80106ea:	0605      	lsls	r5, r0, #24
 80106ec:	f103 0104 	add.w	r1, r3, #4
 80106f0:	d52a      	bpl.n	8010748 <_printf_i+0xa4>
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6011      	str	r1, [r2, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	da03      	bge.n	8010702 <_printf_i+0x5e>
 80106fa:	222d      	movs	r2, #45	; 0x2d
 80106fc:	425b      	negs	r3, r3
 80106fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010702:	486f      	ldr	r0, [pc, #444]	; (80108c0 <_printf_i+0x21c>)
 8010704:	220a      	movs	r2, #10
 8010706:	e039      	b.n	801077c <_printf_i+0xd8>
 8010708:	2973      	cmp	r1, #115	; 0x73
 801070a:	f000 809d 	beq.w	8010848 <_printf_i+0x1a4>
 801070e:	d808      	bhi.n	8010722 <_printf_i+0x7e>
 8010710:	296f      	cmp	r1, #111	; 0x6f
 8010712:	d020      	beq.n	8010756 <_printf_i+0xb2>
 8010714:	2970      	cmp	r1, #112	; 0x70
 8010716:	d1dd      	bne.n	80106d4 <_printf_i+0x30>
 8010718:	6823      	ldr	r3, [r4, #0]
 801071a:	f043 0320 	orr.w	r3, r3, #32
 801071e:	6023      	str	r3, [r4, #0]
 8010720:	e003      	b.n	801072a <_printf_i+0x86>
 8010722:	2975      	cmp	r1, #117	; 0x75
 8010724:	d017      	beq.n	8010756 <_printf_i+0xb2>
 8010726:	2978      	cmp	r1, #120	; 0x78
 8010728:	d1d4      	bne.n	80106d4 <_printf_i+0x30>
 801072a:	2378      	movs	r3, #120	; 0x78
 801072c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010730:	4864      	ldr	r0, [pc, #400]	; (80108c4 <_printf_i+0x220>)
 8010732:	e055      	b.n	80107e0 <_printf_i+0x13c>
 8010734:	6813      	ldr	r3, [r2, #0]
 8010736:	1d19      	adds	r1, r3, #4
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6011      	str	r1, [r2, #0]
 801073c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010744:	2301      	movs	r3, #1
 8010746:	e08c      	b.n	8010862 <_printf_i+0x1be>
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	6011      	str	r1, [r2, #0]
 801074c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010750:	bf18      	it	ne
 8010752:	b21b      	sxthne	r3, r3
 8010754:	e7cf      	b.n	80106f6 <_printf_i+0x52>
 8010756:	6813      	ldr	r3, [r2, #0]
 8010758:	6825      	ldr	r5, [r4, #0]
 801075a:	1d18      	adds	r0, r3, #4
 801075c:	6010      	str	r0, [r2, #0]
 801075e:	0628      	lsls	r0, r5, #24
 8010760:	d501      	bpl.n	8010766 <_printf_i+0xc2>
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	e002      	b.n	801076c <_printf_i+0xc8>
 8010766:	0668      	lsls	r0, r5, #25
 8010768:	d5fb      	bpl.n	8010762 <_printf_i+0xbe>
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	4854      	ldr	r0, [pc, #336]	; (80108c0 <_printf_i+0x21c>)
 801076e:	296f      	cmp	r1, #111	; 0x6f
 8010770:	bf14      	ite	ne
 8010772:	220a      	movne	r2, #10
 8010774:	2208      	moveq	r2, #8
 8010776:	2100      	movs	r1, #0
 8010778:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801077c:	6865      	ldr	r5, [r4, #4]
 801077e:	60a5      	str	r5, [r4, #8]
 8010780:	2d00      	cmp	r5, #0
 8010782:	f2c0 8095 	blt.w	80108b0 <_printf_i+0x20c>
 8010786:	6821      	ldr	r1, [r4, #0]
 8010788:	f021 0104 	bic.w	r1, r1, #4
 801078c:	6021      	str	r1, [r4, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d13d      	bne.n	801080e <_printf_i+0x16a>
 8010792:	2d00      	cmp	r5, #0
 8010794:	f040 808e 	bne.w	80108b4 <_printf_i+0x210>
 8010798:	4665      	mov	r5, ip
 801079a:	2a08      	cmp	r2, #8
 801079c:	d10b      	bne.n	80107b6 <_printf_i+0x112>
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	07db      	lsls	r3, r3, #31
 80107a2:	d508      	bpl.n	80107b6 <_printf_i+0x112>
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	6862      	ldr	r2, [r4, #4]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	bfde      	ittt	le
 80107ac:	2330      	movle	r3, #48	; 0x30
 80107ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80107b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80107b6:	ebac 0305 	sub.w	r3, ip, r5
 80107ba:	6123      	str	r3, [r4, #16]
 80107bc:	f8cd 8000 	str.w	r8, [sp]
 80107c0:	463b      	mov	r3, r7
 80107c2:	aa03      	add	r2, sp, #12
 80107c4:	4621      	mov	r1, r4
 80107c6:	4630      	mov	r0, r6
 80107c8:	f7ff fef6 	bl	80105b8 <_printf_common>
 80107cc:	3001      	adds	r0, #1
 80107ce:	d14d      	bne.n	801086c <_printf_i+0x1c8>
 80107d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107d4:	b005      	add	sp, #20
 80107d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107da:	4839      	ldr	r0, [pc, #228]	; (80108c0 <_printf_i+0x21c>)
 80107dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80107e0:	6813      	ldr	r3, [r2, #0]
 80107e2:	6821      	ldr	r1, [r4, #0]
 80107e4:	1d1d      	adds	r5, r3, #4
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6015      	str	r5, [r2, #0]
 80107ea:	060a      	lsls	r2, r1, #24
 80107ec:	d50b      	bpl.n	8010806 <_printf_i+0x162>
 80107ee:	07ca      	lsls	r2, r1, #31
 80107f0:	bf44      	itt	mi
 80107f2:	f041 0120 	orrmi.w	r1, r1, #32
 80107f6:	6021      	strmi	r1, [r4, #0]
 80107f8:	b91b      	cbnz	r3, 8010802 <_printf_i+0x15e>
 80107fa:	6822      	ldr	r2, [r4, #0]
 80107fc:	f022 0220 	bic.w	r2, r2, #32
 8010800:	6022      	str	r2, [r4, #0]
 8010802:	2210      	movs	r2, #16
 8010804:	e7b7      	b.n	8010776 <_printf_i+0xd2>
 8010806:	064d      	lsls	r5, r1, #25
 8010808:	bf48      	it	mi
 801080a:	b29b      	uxthmi	r3, r3
 801080c:	e7ef      	b.n	80107ee <_printf_i+0x14a>
 801080e:	4665      	mov	r5, ip
 8010810:	fbb3 f1f2 	udiv	r1, r3, r2
 8010814:	fb02 3311 	mls	r3, r2, r1, r3
 8010818:	5cc3      	ldrb	r3, [r0, r3]
 801081a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801081e:	460b      	mov	r3, r1
 8010820:	2900      	cmp	r1, #0
 8010822:	d1f5      	bne.n	8010810 <_printf_i+0x16c>
 8010824:	e7b9      	b.n	801079a <_printf_i+0xf6>
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	6825      	ldr	r5, [r4, #0]
 801082a:	6961      	ldr	r1, [r4, #20]
 801082c:	1d18      	adds	r0, r3, #4
 801082e:	6010      	str	r0, [r2, #0]
 8010830:	0628      	lsls	r0, r5, #24
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	d501      	bpl.n	801083a <_printf_i+0x196>
 8010836:	6019      	str	r1, [r3, #0]
 8010838:	e002      	b.n	8010840 <_printf_i+0x19c>
 801083a:	066a      	lsls	r2, r5, #25
 801083c:	d5fb      	bpl.n	8010836 <_printf_i+0x192>
 801083e:	8019      	strh	r1, [r3, #0]
 8010840:	2300      	movs	r3, #0
 8010842:	6123      	str	r3, [r4, #16]
 8010844:	4665      	mov	r5, ip
 8010846:	e7b9      	b.n	80107bc <_printf_i+0x118>
 8010848:	6813      	ldr	r3, [r2, #0]
 801084a:	1d19      	adds	r1, r3, #4
 801084c:	6011      	str	r1, [r2, #0]
 801084e:	681d      	ldr	r5, [r3, #0]
 8010850:	6862      	ldr	r2, [r4, #4]
 8010852:	2100      	movs	r1, #0
 8010854:	4628      	mov	r0, r5
 8010856:	f7ef fd4b 	bl	80002f0 <memchr>
 801085a:	b108      	cbz	r0, 8010860 <_printf_i+0x1bc>
 801085c:	1b40      	subs	r0, r0, r5
 801085e:	6060      	str	r0, [r4, #4]
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	6123      	str	r3, [r4, #16]
 8010864:	2300      	movs	r3, #0
 8010866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801086a:	e7a7      	b.n	80107bc <_printf_i+0x118>
 801086c:	6923      	ldr	r3, [r4, #16]
 801086e:	462a      	mov	r2, r5
 8010870:	4639      	mov	r1, r7
 8010872:	4630      	mov	r0, r6
 8010874:	47c0      	blx	r8
 8010876:	3001      	adds	r0, #1
 8010878:	d0aa      	beq.n	80107d0 <_printf_i+0x12c>
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	079b      	lsls	r3, r3, #30
 801087e:	d413      	bmi.n	80108a8 <_printf_i+0x204>
 8010880:	68e0      	ldr	r0, [r4, #12]
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	4298      	cmp	r0, r3
 8010886:	bfb8      	it	lt
 8010888:	4618      	movlt	r0, r3
 801088a:	e7a3      	b.n	80107d4 <_printf_i+0x130>
 801088c:	2301      	movs	r3, #1
 801088e:	464a      	mov	r2, r9
 8010890:	4639      	mov	r1, r7
 8010892:	4630      	mov	r0, r6
 8010894:	47c0      	blx	r8
 8010896:	3001      	adds	r0, #1
 8010898:	d09a      	beq.n	80107d0 <_printf_i+0x12c>
 801089a:	3501      	adds	r5, #1
 801089c:	68e3      	ldr	r3, [r4, #12]
 801089e:	9a03      	ldr	r2, [sp, #12]
 80108a0:	1a9b      	subs	r3, r3, r2
 80108a2:	42ab      	cmp	r3, r5
 80108a4:	dcf2      	bgt.n	801088c <_printf_i+0x1e8>
 80108a6:	e7eb      	b.n	8010880 <_printf_i+0x1dc>
 80108a8:	2500      	movs	r5, #0
 80108aa:	f104 0919 	add.w	r9, r4, #25
 80108ae:	e7f5      	b.n	801089c <_printf_i+0x1f8>
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1ac      	bne.n	801080e <_printf_i+0x16a>
 80108b4:	7803      	ldrb	r3, [r0, #0]
 80108b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108be:	e76c      	b.n	801079a <_printf_i+0xf6>
 80108c0:	08014086 	.word	0x08014086
 80108c4:	08014097 	.word	0x08014097

080108c8 <iprintf>:
 80108c8:	b40f      	push	{r0, r1, r2, r3}
 80108ca:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <iprintf+0x2c>)
 80108cc:	b513      	push	{r0, r1, r4, lr}
 80108ce:	681c      	ldr	r4, [r3, #0]
 80108d0:	b124      	cbz	r4, 80108dc <iprintf+0x14>
 80108d2:	69a3      	ldr	r3, [r4, #24]
 80108d4:	b913      	cbnz	r3, 80108dc <iprintf+0x14>
 80108d6:	4620      	mov	r0, r4
 80108d8:	f001 f80a 	bl	80118f0 <__sinit>
 80108dc:	ab05      	add	r3, sp, #20
 80108de:	9a04      	ldr	r2, [sp, #16]
 80108e0:	68a1      	ldr	r1, [r4, #8]
 80108e2:	9301      	str	r3, [sp, #4]
 80108e4:	4620      	mov	r0, r4
 80108e6:	f001 fc1f 	bl	8012128 <_vfiprintf_r>
 80108ea:	b002      	add	sp, #8
 80108ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f0:	b004      	add	sp, #16
 80108f2:	4770      	bx	lr
 80108f4:	2400002c 	.word	0x2400002c

080108f8 <_puts_r>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	460e      	mov	r6, r1
 80108fc:	4605      	mov	r5, r0
 80108fe:	b118      	cbz	r0, 8010908 <_puts_r+0x10>
 8010900:	6983      	ldr	r3, [r0, #24]
 8010902:	b90b      	cbnz	r3, 8010908 <_puts_r+0x10>
 8010904:	f000 fff4 	bl	80118f0 <__sinit>
 8010908:	69ab      	ldr	r3, [r5, #24]
 801090a:	68ac      	ldr	r4, [r5, #8]
 801090c:	b913      	cbnz	r3, 8010914 <_puts_r+0x1c>
 801090e:	4628      	mov	r0, r5
 8010910:	f000 ffee 	bl	80118f0 <__sinit>
 8010914:	4b23      	ldr	r3, [pc, #140]	; (80109a4 <_puts_r+0xac>)
 8010916:	429c      	cmp	r4, r3
 8010918:	d117      	bne.n	801094a <_puts_r+0x52>
 801091a:	686c      	ldr	r4, [r5, #4]
 801091c:	89a3      	ldrh	r3, [r4, #12]
 801091e:	071b      	lsls	r3, r3, #28
 8010920:	d51d      	bpl.n	801095e <_puts_r+0x66>
 8010922:	6923      	ldr	r3, [r4, #16]
 8010924:	b1db      	cbz	r3, 801095e <_puts_r+0x66>
 8010926:	3e01      	subs	r6, #1
 8010928:	68a3      	ldr	r3, [r4, #8]
 801092a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801092e:	3b01      	subs	r3, #1
 8010930:	60a3      	str	r3, [r4, #8]
 8010932:	b9e9      	cbnz	r1, 8010970 <_puts_r+0x78>
 8010934:	2b00      	cmp	r3, #0
 8010936:	da2e      	bge.n	8010996 <_puts_r+0x9e>
 8010938:	4622      	mov	r2, r4
 801093a:	210a      	movs	r1, #10
 801093c:	4628      	mov	r0, r5
 801093e:	f000 f84f 	bl	80109e0 <__swbuf_r>
 8010942:	3001      	adds	r0, #1
 8010944:	d011      	beq.n	801096a <_puts_r+0x72>
 8010946:	200a      	movs	r0, #10
 8010948:	e011      	b.n	801096e <_puts_r+0x76>
 801094a:	4b17      	ldr	r3, [pc, #92]	; (80109a8 <_puts_r+0xb0>)
 801094c:	429c      	cmp	r4, r3
 801094e:	d101      	bne.n	8010954 <_puts_r+0x5c>
 8010950:	68ac      	ldr	r4, [r5, #8]
 8010952:	e7e3      	b.n	801091c <_puts_r+0x24>
 8010954:	4b15      	ldr	r3, [pc, #84]	; (80109ac <_puts_r+0xb4>)
 8010956:	429c      	cmp	r4, r3
 8010958:	bf08      	it	eq
 801095a:	68ec      	ldreq	r4, [r5, #12]
 801095c:	e7de      	b.n	801091c <_puts_r+0x24>
 801095e:	4621      	mov	r1, r4
 8010960:	4628      	mov	r0, r5
 8010962:	f000 f88f 	bl	8010a84 <__swsetup_r>
 8010966:	2800      	cmp	r0, #0
 8010968:	d0dd      	beq.n	8010926 <_puts_r+0x2e>
 801096a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801096e:	bd70      	pop	{r4, r5, r6, pc}
 8010970:	2b00      	cmp	r3, #0
 8010972:	da04      	bge.n	801097e <_puts_r+0x86>
 8010974:	69a2      	ldr	r2, [r4, #24]
 8010976:	429a      	cmp	r2, r3
 8010978:	dc06      	bgt.n	8010988 <_puts_r+0x90>
 801097a:	290a      	cmp	r1, #10
 801097c:	d004      	beq.n	8010988 <_puts_r+0x90>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	1c5a      	adds	r2, r3, #1
 8010982:	6022      	str	r2, [r4, #0]
 8010984:	7019      	strb	r1, [r3, #0]
 8010986:	e7cf      	b.n	8010928 <_puts_r+0x30>
 8010988:	4622      	mov	r2, r4
 801098a:	4628      	mov	r0, r5
 801098c:	f000 f828 	bl	80109e0 <__swbuf_r>
 8010990:	3001      	adds	r0, #1
 8010992:	d1c9      	bne.n	8010928 <_puts_r+0x30>
 8010994:	e7e9      	b.n	801096a <_puts_r+0x72>
 8010996:	6823      	ldr	r3, [r4, #0]
 8010998:	200a      	movs	r0, #10
 801099a:	1c5a      	adds	r2, r3, #1
 801099c:	6022      	str	r2, [r4, #0]
 801099e:	7018      	strb	r0, [r3, #0]
 80109a0:	e7e5      	b.n	801096e <_puts_r+0x76>
 80109a2:	bf00      	nop
 80109a4:	080140d8 	.word	0x080140d8
 80109a8:	080140f8 	.word	0x080140f8
 80109ac:	080140b8 	.word	0x080140b8

080109b0 <puts>:
 80109b0:	4b02      	ldr	r3, [pc, #8]	; (80109bc <puts+0xc>)
 80109b2:	4601      	mov	r1, r0
 80109b4:	6818      	ldr	r0, [r3, #0]
 80109b6:	f7ff bf9f 	b.w	80108f8 <_puts_r>
 80109ba:	bf00      	nop
 80109bc:	2400002c 	.word	0x2400002c

080109c0 <_sbrk_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4c06      	ldr	r4, [pc, #24]	; (80109dc <_sbrk_r+0x1c>)
 80109c4:	2300      	movs	r3, #0
 80109c6:	4605      	mov	r5, r0
 80109c8:	4608      	mov	r0, r1
 80109ca:	6023      	str	r3, [r4, #0]
 80109cc:	f7f0 fc4e 	bl	800126c <_sbrk>
 80109d0:	1c43      	adds	r3, r0, #1
 80109d2:	d102      	bne.n	80109da <_sbrk_r+0x1a>
 80109d4:	6823      	ldr	r3, [r4, #0]
 80109d6:	b103      	cbz	r3, 80109da <_sbrk_r+0x1a>
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	bd38      	pop	{r3, r4, r5, pc}
 80109dc:	2400bdb4 	.word	0x2400bdb4

080109e0 <__swbuf_r>:
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e2:	460e      	mov	r6, r1
 80109e4:	4614      	mov	r4, r2
 80109e6:	4605      	mov	r5, r0
 80109e8:	b118      	cbz	r0, 80109f2 <__swbuf_r+0x12>
 80109ea:	6983      	ldr	r3, [r0, #24]
 80109ec:	b90b      	cbnz	r3, 80109f2 <__swbuf_r+0x12>
 80109ee:	f000 ff7f 	bl	80118f0 <__sinit>
 80109f2:	4b21      	ldr	r3, [pc, #132]	; (8010a78 <__swbuf_r+0x98>)
 80109f4:	429c      	cmp	r4, r3
 80109f6:	d12a      	bne.n	8010a4e <__swbuf_r+0x6e>
 80109f8:	686c      	ldr	r4, [r5, #4]
 80109fa:	69a3      	ldr	r3, [r4, #24]
 80109fc:	60a3      	str	r3, [r4, #8]
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	071a      	lsls	r2, r3, #28
 8010a02:	d52e      	bpl.n	8010a62 <__swbuf_r+0x82>
 8010a04:	6923      	ldr	r3, [r4, #16]
 8010a06:	b363      	cbz	r3, 8010a62 <__swbuf_r+0x82>
 8010a08:	6923      	ldr	r3, [r4, #16]
 8010a0a:	6820      	ldr	r0, [r4, #0]
 8010a0c:	1ac0      	subs	r0, r0, r3
 8010a0e:	6963      	ldr	r3, [r4, #20]
 8010a10:	b2f6      	uxtb	r6, r6
 8010a12:	4283      	cmp	r3, r0
 8010a14:	4637      	mov	r7, r6
 8010a16:	dc04      	bgt.n	8010a22 <__swbuf_r+0x42>
 8010a18:	4621      	mov	r1, r4
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f000 fefe 	bl	801181c <_fflush_r>
 8010a20:	bb28      	cbnz	r0, 8010a6e <__swbuf_r+0x8e>
 8010a22:	68a3      	ldr	r3, [r4, #8]
 8010a24:	3b01      	subs	r3, #1
 8010a26:	60a3      	str	r3, [r4, #8]
 8010a28:	6823      	ldr	r3, [r4, #0]
 8010a2a:	1c5a      	adds	r2, r3, #1
 8010a2c:	6022      	str	r2, [r4, #0]
 8010a2e:	701e      	strb	r6, [r3, #0]
 8010a30:	6963      	ldr	r3, [r4, #20]
 8010a32:	3001      	adds	r0, #1
 8010a34:	4283      	cmp	r3, r0
 8010a36:	d004      	beq.n	8010a42 <__swbuf_r+0x62>
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	07db      	lsls	r3, r3, #31
 8010a3c:	d519      	bpl.n	8010a72 <__swbuf_r+0x92>
 8010a3e:	2e0a      	cmp	r6, #10
 8010a40:	d117      	bne.n	8010a72 <__swbuf_r+0x92>
 8010a42:	4621      	mov	r1, r4
 8010a44:	4628      	mov	r0, r5
 8010a46:	f000 fee9 	bl	801181c <_fflush_r>
 8010a4a:	b190      	cbz	r0, 8010a72 <__swbuf_r+0x92>
 8010a4c:	e00f      	b.n	8010a6e <__swbuf_r+0x8e>
 8010a4e:	4b0b      	ldr	r3, [pc, #44]	; (8010a7c <__swbuf_r+0x9c>)
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d101      	bne.n	8010a58 <__swbuf_r+0x78>
 8010a54:	68ac      	ldr	r4, [r5, #8]
 8010a56:	e7d0      	b.n	80109fa <__swbuf_r+0x1a>
 8010a58:	4b09      	ldr	r3, [pc, #36]	; (8010a80 <__swbuf_r+0xa0>)
 8010a5a:	429c      	cmp	r4, r3
 8010a5c:	bf08      	it	eq
 8010a5e:	68ec      	ldreq	r4, [r5, #12]
 8010a60:	e7cb      	b.n	80109fa <__swbuf_r+0x1a>
 8010a62:	4621      	mov	r1, r4
 8010a64:	4628      	mov	r0, r5
 8010a66:	f000 f80d 	bl	8010a84 <__swsetup_r>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	d0cc      	beq.n	8010a08 <__swbuf_r+0x28>
 8010a6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010a72:	4638      	mov	r0, r7
 8010a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a76:	bf00      	nop
 8010a78:	080140d8 	.word	0x080140d8
 8010a7c:	080140f8 	.word	0x080140f8
 8010a80:	080140b8 	.word	0x080140b8

08010a84 <__swsetup_r>:
 8010a84:	4b32      	ldr	r3, [pc, #200]	; (8010b50 <__swsetup_r+0xcc>)
 8010a86:	b570      	push	{r4, r5, r6, lr}
 8010a88:	681d      	ldr	r5, [r3, #0]
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	b125      	cbz	r5, 8010a9a <__swsetup_r+0x16>
 8010a90:	69ab      	ldr	r3, [r5, #24]
 8010a92:	b913      	cbnz	r3, 8010a9a <__swsetup_r+0x16>
 8010a94:	4628      	mov	r0, r5
 8010a96:	f000 ff2b 	bl	80118f0 <__sinit>
 8010a9a:	4b2e      	ldr	r3, [pc, #184]	; (8010b54 <__swsetup_r+0xd0>)
 8010a9c:	429c      	cmp	r4, r3
 8010a9e:	d10f      	bne.n	8010ac0 <__swsetup_r+0x3c>
 8010aa0:	686c      	ldr	r4, [r5, #4]
 8010aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	0715      	lsls	r5, r2, #28
 8010aaa:	d42c      	bmi.n	8010b06 <__swsetup_r+0x82>
 8010aac:	06d0      	lsls	r0, r2, #27
 8010aae:	d411      	bmi.n	8010ad4 <__swsetup_r+0x50>
 8010ab0:	2209      	movs	r2, #9
 8010ab2:	6032      	str	r2, [r6, #0]
 8010ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010abe:	e03e      	b.n	8010b3e <__swsetup_r+0xba>
 8010ac0:	4b25      	ldr	r3, [pc, #148]	; (8010b58 <__swsetup_r+0xd4>)
 8010ac2:	429c      	cmp	r4, r3
 8010ac4:	d101      	bne.n	8010aca <__swsetup_r+0x46>
 8010ac6:	68ac      	ldr	r4, [r5, #8]
 8010ac8:	e7eb      	b.n	8010aa2 <__swsetup_r+0x1e>
 8010aca:	4b24      	ldr	r3, [pc, #144]	; (8010b5c <__swsetup_r+0xd8>)
 8010acc:	429c      	cmp	r4, r3
 8010ace:	bf08      	it	eq
 8010ad0:	68ec      	ldreq	r4, [r5, #12]
 8010ad2:	e7e6      	b.n	8010aa2 <__swsetup_r+0x1e>
 8010ad4:	0751      	lsls	r1, r2, #29
 8010ad6:	d512      	bpl.n	8010afe <__swsetup_r+0x7a>
 8010ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ada:	b141      	cbz	r1, 8010aee <__swsetup_r+0x6a>
 8010adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ae0:	4299      	cmp	r1, r3
 8010ae2:	d002      	beq.n	8010aea <__swsetup_r+0x66>
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	f7ff fa0b 	bl	800ff00 <_free_r>
 8010aea:	2300      	movs	r3, #0
 8010aec:	6363      	str	r3, [r4, #52]	; 0x34
 8010aee:	89a3      	ldrh	r3, [r4, #12]
 8010af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010af4:	81a3      	strh	r3, [r4, #12]
 8010af6:	2300      	movs	r3, #0
 8010af8:	6063      	str	r3, [r4, #4]
 8010afa:	6923      	ldr	r3, [r4, #16]
 8010afc:	6023      	str	r3, [r4, #0]
 8010afe:	89a3      	ldrh	r3, [r4, #12]
 8010b00:	f043 0308 	orr.w	r3, r3, #8
 8010b04:	81a3      	strh	r3, [r4, #12]
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	b94b      	cbnz	r3, 8010b1e <__swsetup_r+0x9a>
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b14:	d003      	beq.n	8010b1e <__swsetup_r+0x9a>
 8010b16:	4621      	mov	r1, r4
 8010b18:	4630      	mov	r0, r6
 8010b1a:	f000 ffa5 	bl	8011a68 <__smakebuf_r>
 8010b1e:	89a2      	ldrh	r2, [r4, #12]
 8010b20:	f012 0301 	ands.w	r3, r2, #1
 8010b24:	d00c      	beq.n	8010b40 <__swsetup_r+0xbc>
 8010b26:	2300      	movs	r3, #0
 8010b28:	60a3      	str	r3, [r4, #8]
 8010b2a:	6963      	ldr	r3, [r4, #20]
 8010b2c:	425b      	negs	r3, r3
 8010b2e:	61a3      	str	r3, [r4, #24]
 8010b30:	6923      	ldr	r3, [r4, #16]
 8010b32:	b953      	cbnz	r3, 8010b4a <__swsetup_r+0xc6>
 8010b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010b3c:	d1ba      	bne.n	8010ab4 <__swsetup_r+0x30>
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	0792      	lsls	r2, r2, #30
 8010b42:	bf58      	it	pl
 8010b44:	6963      	ldrpl	r3, [r4, #20]
 8010b46:	60a3      	str	r3, [r4, #8]
 8010b48:	e7f2      	b.n	8010b30 <__swsetup_r+0xac>
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	e7f7      	b.n	8010b3e <__swsetup_r+0xba>
 8010b4e:	bf00      	nop
 8010b50:	2400002c 	.word	0x2400002c
 8010b54:	080140d8 	.word	0x080140d8
 8010b58:	080140f8 	.word	0x080140f8
 8010b5c:	080140b8 	.word	0x080140b8

08010b60 <quorem>:
 8010b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	6903      	ldr	r3, [r0, #16]
 8010b66:	690c      	ldr	r4, [r1, #16]
 8010b68:	42a3      	cmp	r3, r4
 8010b6a:	4680      	mov	r8, r0
 8010b6c:	f2c0 8082 	blt.w	8010c74 <quorem+0x114>
 8010b70:	3c01      	subs	r4, #1
 8010b72:	f101 0714 	add.w	r7, r1, #20
 8010b76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010b7a:	f100 0614 	add.w	r6, r0, #20
 8010b7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010b82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010b86:	eb06 030c 	add.w	r3, r6, ip
 8010b8a:	3501      	adds	r5, #1
 8010b8c:	eb07 090c 	add.w	r9, r7, ip
 8010b90:	9301      	str	r3, [sp, #4]
 8010b92:	fbb0 f5f5 	udiv	r5, r0, r5
 8010b96:	b395      	cbz	r5, 8010bfe <quorem+0x9e>
 8010b98:	f04f 0a00 	mov.w	sl, #0
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	46b6      	mov	lr, r6
 8010ba0:	46d3      	mov	fp, sl
 8010ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8010ba6:	b293      	uxth	r3, r2
 8010ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8010bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	ebab 0303 	sub.w	r3, fp, r3
 8010bb6:	0c12      	lsrs	r2, r2, #16
 8010bb8:	f8de b000 	ldr.w	fp, [lr]
 8010bbc:	fb05 a202 	mla	r2, r5, r2, sl
 8010bc0:	fa13 f38b 	uxtah	r3, r3, fp
 8010bc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010bc8:	fa1f fb82 	uxth.w	fp, r2
 8010bcc:	f8de 2000 	ldr.w	r2, [lr]
 8010bd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bde:	4581      	cmp	r9, r0
 8010be0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010be4:	f84e 3b04 	str.w	r3, [lr], #4
 8010be8:	d2db      	bcs.n	8010ba2 <quorem+0x42>
 8010bea:	f856 300c 	ldr.w	r3, [r6, ip]
 8010bee:	b933      	cbnz	r3, 8010bfe <quorem+0x9e>
 8010bf0:	9b01      	ldr	r3, [sp, #4]
 8010bf2:	3b04      	subs	r3, #4
 8010bf4:	429e      	cmp	r6, r3
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	d330      	bcc.n	8010c5c <quorem+0xfc>
 8010bfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8010bfe:	4640      	mov	r0, r8
 8010c00:	f001 f994 	bl	8011f2c <__mcmp>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	db25      	blt.n	8010c54 <quorem+0xf4>
 8010c08:	3501      	adds	r5, #1
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f04f 0c00 	mov.w	ip, #0
 8010c10:	f857 2b04 	ldr.w	r2, [r7], #4
 8010c14:	f8d0 e000 	ldr.w	lr, [r0]
 8010c18:	b293      	uxth	r3, r2
 8010c1a:	ebac 0303 	sub.w	r3, ip, r3
 8010c1e:	0c12      	lsrs	r2, r2, #16
 8010c20:	fa13 f38e 	uxtah	r3, r3, lr
 8010c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c32:	45b9      	cmp	r9, r7
 8010c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010c38:	f840 3b04 	str.w	r3, [r0], #4
 8010c3c:	d2e8      	bcs.n	8010c10 <quorem+0xb0>
 8010c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010c42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010c46:	b92a      	cbnz	r2, 8010c54 <quorem+0xf4>
 8010c48:	3b04      	subs	r3, #4
 8010c4a:	429e      	cmp	r6, r3
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	d30b      	bcc.n	8010c68 <quorem+0x108>
 8010c50:	f8c8 4010 	str.w	r4, [r8, #16]
 8010c54:	4628      	mov	r0, r5
 8010c56:	b003      	add	sp, #12
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5c:	6812      	ldr	r2, [r2, #0]
 8010c5e:	3b04      	subs	r3, #4
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	d1ca      	bne.n	8010bfa <quorem+0x9a>
 8010c64:	3c01      	subs	r4, #1
 8010c66:	e7c5      	b.n	8010bf4 <quorem+0x94>
 8010c68:	6812      	ldr	r2, [r2, #0]
 8010c6a:	3b04      	subs	r3, #4
 8010c6c:	2a00      	cmp	r2, #0
 8010c6e:	d1ef      	bne.n	8010c50 <quorem+0xf0>
 8010c70:	3c01      	subs	r4, #1
 8010c72:	e7ea      	b.n	8010c4a <quorem+0xea>
 8010c74:	2000      	movs	r0, #0
 8010c76:	e7ee      	b.n	8010c56 <quorem+0xf6>

08010c78 <_dtoa_r>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	ec57 6b10 	vmov	r6, r7, d0
 8010c80:	b095      	sub	sp, #84	; 0x54
 8010c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c84:	9108      	str	r1, [sp, #32]
 8010c86:	4604      	mov	r4, r0
 8010c88:	920a      	str	r2, [sp, #40]	; 0x28
 8010c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8010c8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8010c90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010c94:	b93d      	cbnz	r5, 8010ca6 <_dtoa_r+0x2e>
 8010c96:	2010      	movs	r0, #16
 8010c98:	f7ff f922 	bl	800fee0 <malloc>
 8010c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8010c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ca2:	6005      	str	r5, [r0, #0]
 8010ca4:	60c5      	str	r5, [r0, #12]
 8010ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ca8:	6819      	ldr	r1, [r3, #0]
 8010caa:	b151      	cbz	r1, 8010cc2 <_dtoa_r+0x4a>
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	604a      	str	r2, [r1, #4]
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4093      	lsls	r3, r2
 8010cb4:	608b      	str	r3, [r1, #8]
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 ff57 	bl	8011b6a <_Bfree>
 8010cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	1e3b      	subs	r3, r7, #0
 8010cc4:	bfb9      	ittee	lt
 8010cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010cca:	9303      	strlt	r3, [sp, #12]
 8010ccc:	2300      	movge	r3, #0
 8010cce:	f8c8 3000 	strge.w	r3, [r8]
 8010cd2:	9d03      	ldr	r5, [sp, #12]
 8010cd4:	4bac      	ldr	r3, [pc, #688]	; (8010f88 <_dtoa_r+0x310>)
 8010cd6:	bfbc      	itt	lt
 8010cd8:	2201      	movlt	r2, #1
 8010cda:	f8c8 2000 	strlt.w	r2, [r8]
 8010cde:	43ab      	bics	r3, r5
 8010ce0:	d11b      	bne.n	8010d1a <_dtoa_r+0xa2>
 8010ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ce4:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ce8:	6013      	str	r3, [r2, #0]
 8010cea:	9b02      	ldr	r3, [sp, #8]
 8010cec:	b923      	cbnz	r3, 8010cf8 <_dtoa_r+0x80>
 8010cee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010cf2:	2d00      	cmp	r5, #0
 8010cf4:	f000 84dd 	beq.w	80116b2 <_dtoa_r+0xa3a>
 8010cf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010cfa:	b953      	cbnz	r3, 8010d12 <_dtoa_r+0x9a>
 8010cfc:	4ba3      	ldr	r3, [pc, #652]	; (8010f8c <_dtoa_r+0x314>)
 8010cfe:	e020      	b.n	8010d42 <_dtoa_r+0xca>
 8010d00:	4ba3      	ldr	r3, [pc, #652]	; (8010f90 <_dtoa_r+0x318>)
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	3308      	adds	r3, #8
 8010d06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010d08:	6013      	str	r3, [r2, #0]
 8010d0a:	9804      	ldr	r0, [sp, #16]
 8010d0c:	b015      	add	sp, #84	; 0x54
 8010d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d12:	4b9e      	ldr	r3, [pc, #632]	; (8010f8c <_dtoa_r+0x314>)
 8010d14:	9304      	str	r3, [sp, #16]
 8010d16:	3303      	adds	r3, #3
 8010d18:	e7f5      	b.n	8010d06 <_dtoa_r+0x8e>
 8010d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010d2a:	d10c      	bne.n	8010d46 <_dtoa_r+0xce>
 8010d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d2e:	2301      	movs	r3, #1
 8010d30:	6013      	str	r3, [r2, #0]
 8010d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 84b9 	beq.w	80116ac <_dtoa_r+0xa34>
 8010d3a:	4b96      	ldr	r3, [pc, #600]	; (8010f94 <_dtoa_r+0x31c>)
 8010d3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010d3e:	6013      	str	r3, [r2, #0]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	9304      	str	r3, [sp, #16]
 8010d44:	e7e1      	b.n	8010d0a <_dtoa_r+0x92>
 8010d46:	a913      	add	r1, sp, #76	; 0x4c
 8010d48:	aa12      	add	r2, sp, #72	; 0x48
 8010d4a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f001 f963 	bl	801201a <__d2b>
 8010d54:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8010d58:	9001      	str	r0, [sp, #4]
 8010d5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010d5c:	2e00      	cmp	r6, #0
 8010d5e:	d046      	beq.n	8010dee <_dtoa_r+0x176>
 8010d60:	9805      	ldr	r0, [sp, #20]
 8010d62:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8010d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d6a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8010d6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010d72:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8010d76:	2700      	movs	r7, #0
 8010d78:	ee07 aa90 	vmov	s15, sl
 8010d7c:	ec43 2b16 	vmov	d6, r2, r3
 8010d80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010d84:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8010f70 <_dtoa_r+0x2f8>
 8010d88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010d90:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8010f78 <_dtoa_r+0x300>
 8010d94:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010d98:	eeb0 7b46 	vmov.f64	d7, d6
 8010d9c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8010f80 <_dtoa_r+0x308>
 8010da0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010da4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010da8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db0:	ee16 ba90 	vmov	fp, s13
 8010db4:	d508      	bpl.n	8010dc8 <_dtoa_r+0x150>
 8010db6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010dba:	eeb4 6b47 	vcmp.f64	d6, d7
 8010dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc2:	bf18      	it	ne
 8010dc4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8010dc8:	f1bb 0f16 	cmp.w	fp, #22
 8010dcc:	d834      	bhi.n	8010e38 <_dtoa_r+0x1c0>
 8010dce:	4b72      	ldr	r3, [pc, #456]	; (8010f98 <_dtoa_r+0x320>)
 8010dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010dd4:	ed93 7b00 	vldr	d7, [r3]
 8010dd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ddc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de4:	dd01      	ble.n	8010dea <_dtoa_r+0x172>
 8010de6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010dea:	2300      	movs	r3, #0
 8010dec:	e025      	b.n	8010e3a <_dtoa_r+0x1c2>
 8010dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010df0:	eb01 0a03 	add.w	sl, r1, r3
 8010df4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8010df8:	2b20      	cmp	r3, #32
 8010dfa:	dd17      	ble.n	8010e2c <_dtoa_r+0x1b4>
 8010dfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8010e00:	9a02      	ldr	r2, [sp, #8]
 8010e02:	409d      	lsls	r5, r3
 8010e04:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8010e08:	fa22 f303 	lsr.w	r3, r2, r3
 8010e0c:	432b      	orrs	r3, r5
 8010e0e:	ee07 3a90 	vmov	s15, r3
 8010e12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010e16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010e1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010e1e:	9805      	ldr	r0, [sp, #20]
 8010e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e24:	2701      	movs	r7, #1
 8010e26:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8010e2a:	e7a5      	b.n	8010d78 <_dtoa_r+0x100>
 8010e2c:	9a02      	ldr	r2, [sp, #8]
 8010e2e:	f1c3 0320 	rsb	r3, r3, #32
 8010e32:	fa02 f303 	lsl.w	r3, r2, r3
 8010e36:	e7ea      	b.n	8010e0e <_dtoa_r+0x196>
 8010e38:	2301      	movs	r3, #1
 8010e3a:	eba1 0a0a 	sub.w	sl, r1, sl
 8010e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8010e40:	f1ba 0301 	subs.w	r3, sl, #1
 8010e44:	9307      	str	r3, [sp, #28]
 8010e46:	bf43      	ittte	mi
 8010e48:	2300      	movmi	r3, #0
 8010e4a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8010e4e:	9307      	strmi	r3, [sp, #28]
 8010e50:	f04f 0a00 	movpl.w	sl, #0
 8010e54:	f1bb 0f00 	cmp.w	fp, #0
 8010e58:	db19      	blt.n	8010e8e <_dtoa_r+0x216>
 8010e5a:	9b07      	ldr	r3, [sp, #28]
 8010e5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010e60:	445b      	add	r3, fp
 8010e62:	9307      	str	r3, [sp, #28]
 8010e64:	f04f 0800 	mov.w	r8, #0
 8010e68:	9b08      	ldr	r3, [sp, #32]
 8010e6a:	2b09      	cmp	r3, #9
 8010e6c:	d866      	bhi.n	8010f3c <_dtoa_r+0x2c4>
 8010e6e:	2b05      	cmp	r3, #5
 8010e70:	bfc4      	itt	gt
 8010e72:	3b04      	subgt	r3, #4
 8010e74:	9308      	strgt	r3, [sp, #32]
 8010e76:	9b08      	ldr	r3, [sp, #32]
 8010e78:	f1a3 0302 	sub.w	r3, r3, #2
 8010e7c:	bfcc      	ite	gt
 8010e7e:	2500      	movgt	r5, #0
 8010e80:	2501      	movle	r5, #1
 8010e82:	2b03      	cmp	r3, #3
 8010e84:	d866      	bhi.n	8010f54 <_dtoa_r+0x2dc>
 8010e86:	e8df f003 	tbb	[pc, r3]
 8010e8a:	5755      	.short	0x5755
 8010e8c:	4909      	.short	0x4909
 8010e8e:	2300      	movs	r3, #0
 8010e90:	ebaa 0a0b 	sub.w	sl, sl, fp
 8010e94:	f1cb 0800 	rsb	r8, fp, #0
 8010e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e9a:	e7e5      	b.n	8010e68 <_dtoa_r+0x1f0>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	dd59      	ble.n	8010f5a <_dtoa_r+0x2e2>
 8010ea6:	9306      	str	r3, [sp, #24]
 8010ea8:	4699      	mov	r9, r3
 8010eaa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010eac:	2200      	movs	r2, #0
 8010eae:	6072      	str	r2, [r6, #4]
 8010eb0:	2204      	movs	r2, #4
 8010eb2:	f102 0014 	add.w	r0, r2, #20
 8010eb6:	4298      	cmp	r0, r3
 8010eb8:	6871      	ldr	r1, [r6, #4]
 8010eba:	d953      	bls.n	8010f64 <_dtoa_r+0x2ec>
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f000 fe20 	bl	8011b02 <_Balloc>
 8010ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ec4:	6030      	str	r0, [r6, #0]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	9304      	str	r3, [sp, #16]
 8010eca:	f1b9 0f0e 	cmp.w	r9, #14
 8010ece:	f200 80c2 	bhi.w	8011056 <_dtoa_r+0x3de>
 8010ed2:	2d00      	cmp	r5, #0
 8010ed4:	f000 80bf 	beq.w	8011056 <_dtoa_r+0x3de>
 8010ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010edc:	f1bb 0f00 	cmp.w	fp, #0
 8010ee0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8010ee4:	f340 80e6 	ble.w	80110b4 <_dtoa_r+0x43c>
 8010ee8:	4a2b      	ldr	r2, [pc, #172]	; (8010f98 <_dtoa_r+0x320>)
 8010eea:	f00b 030f 	and.w	r3, fp, #15
 8010eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ef2:	ed93 7b00 	vldr	d7, [r3]
 8010ef6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8010efa:	06da      	lsls	r2, r3, #27
 8010efc:	f140 80d8 	bpl.w	80110b0 <_dtoa_r+0x438>
 8010f00:	4a26      	ldr	r2, [pc, #152]	; (8010f9c <_dtoa_r+0x324>)
 8010f02:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8010f06:	ed92 6b08 	vldr	d6, [r2, #32]
 8010f0a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010f0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010f12:	f003 030f 	and.w	r3, r3, #15
 8010f16:	2203      	movs	r2, #3
 8010f18:	4920      	ldr	r1, [pc, #128]	; (8010f9c <_dtoa_r+0x324>)
 8010f1a:	e04a      	b.n	8010fb2 <_dtoa_r+0x33a>
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f22:	445b      	add	r3, fp
 8010f24:	f103 0901 	add.w	r9, r3, #1
 8010f28:	9306      	str	r3, [sp, #24]
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	bfb8      	it	lt
 8010f30:	2301      	movlt	r3, #1
 8010f32:	e7ba      	b.n	8010eaa <_dtoa_r+0x232>
 8010f34:	2300      	movs	r3, #0
 8010f36:	e7b2      	b.n	8010e9e <_dtoa_r+0x226>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	e7f0      	b.n	8010f1e <_dtoa_r+0x2a6>
 8010f3c:	2501      	movs	r5, #1
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8010f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f48:	9306      	str	r3, [sp, #24]
 8010f4a:	4699      	mov	r9, r3
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	2312      	movs	r3, #18
 8010f50:	920a      	str	r2, [sp, #40]	; 0x28
 8010f52:	e7aa      	b.n	8010eaa <_dtoa_r+0x232>
 8010f54:	2301      	movs	r3, #1
 8010f56:	9309      	str	r3, [sp, #36]	; 0x24
 8010f58:	e7f4      	b.n	8010f44 <_dtoa_r+0x2cc>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	9306      	str	r3, [sp, #24]
 8010f5e:	4699      	mov	r9, r3
 8010f60:	461a      	mov	r2, r3
 8010f62:	e7f5      	b.n	8010f50 <_dtoa_r+0x2d8>
 8010f64:	3101      	adds	r1, #1
 8010f66:	6071      	str	r1, [r6, #4]
 8010f68:	0052      	lsls	r2, r2, #1
 8010f6a:	e7a2      	b.n	8010eb2 <_dtoa_r+0x23a>
 8010f6c:	f3af 8000 	nop.w
 8010f70:	636f4361 	.word	0x636f4361
 8010f74:	3fd287a7 	.word	0x3fd287a7
 8010f78:	8b60c8b3 	.word	0x8b60c8b3
 8010f7c:	3fc68a28 	.word	0x3fc68a28
 8010f80:	509f79fb 	.word	0x509f79fb
 8010f84:	3fd34413 	.word	0x3fd34413
 8010f88:	7ff00000 	.word	0x7ff00000
 8010f8c:	080140b1 	.word	0x080140b1
 8010f90:	080140a8 	.word	0x080140a8
 8010f94:	08014085 	.word	0x08014085
 8010f98:	08014140 	.word	0x08014140
 8010f9c:	08014118 	.word	0x08014118
 8010fa0:	07de      	lsls	r6, r3, #31
 8010fa2:	d504      	bpl.n	8010fae <_dtoa_r+0x336>
 8010fa4:	ed91 6b00 	vldr	d6, [r1]
 8010fa8:	3201      	adds	r2, #1
 8010faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fae:	105b      	asrs	r3, r3, #1
 8010fb0:	3108      	adds	r1, #8
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1f4      	bne.n	8010fa0 <_dtoa_r+0x328>
 8010fb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010fba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010fbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f000 80a7 	beq.w	8011118 <_dtoa_r+0x4a0>
 8010fca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fda:	f140 809d 	bpl.w	8011118 <_dtoa_r+0x4a0>
 8010fde:	f1b9 0f00 	cmp.w	r9, #0
 8010fe2:	f000 8099 	beq.w	8011118 <_dtoa_r+0x4a0>
 8010fe6:	9b06      	ldr	r3, [sp, #24]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	dd30      	ble.n	801104e <_dtoa_r+0x3d6>
 8010fec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ff8:	9d06      	ldr	r5, [sp, #24]
 8010ffa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8010ffe:	3201      	adds	r2, #1
 8011000:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011004:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011008:	ee07 2a90 	vmov	s15, r2
 801100c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011010:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011014:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011018:	9a03      	ldr	r2, [sp, #12]
 801101a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801101e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8011022:	2d00      	cmp	r5, #0
 8011024:	d17b      	bne.n	801111e <_dtoa_r+0x4a6>
 8011026:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801102a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801102e:	ec41 0b17 	vmov	d7, r0, r1
 8011032:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103a:	f300 8253 	bgt.w	80114e4 <_dtoa_r+0x86c>
 801103e:	eeb1 7b47 	vneg.f64	d7, d7
 8011042:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104a:	f100 8249 	bmi.w	80114e0 <_dtoa_r+0x868>
 801104e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011052:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011058:	2b00      	cmp	r3, #0
 801105a:	f2c0 8119 	blt.w	8011290 <_dtoa_r+0x618>
 801105e:	f1bb 0f0e 	cmp.w	fp, #14
 8011062:	f300 8115 	bgt.w	8011290 <_dtoa_r+0x618>
 8011066:	4bc3      	ldr	r3, [pc, #780]	; (8011374 <_dtoa_r+0x6fc>)
 8011068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801106c:	ed93 6b00 	vldr	d6, [r3]
 8011070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011072:	2b00      	cmp	r3, #0
 8011074:	f280 80ba 	bge.w	80111ec <_dtoa_r+0x574>
 8011078:	f1b9 0f00 	cmp.w	r9, #0
 801107c:	f300 80b6 	bgt.w	80111ec <_dtoa_r+0x574>
 8011080:	f040 822d 	bne.w	80114de <_dtoa_r+0x866>
 8011084:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011088:	ee26 6b07 	vmul.f64	d6, d6, d7
 801108c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011098:	464d      	mov	r5, r9
 801109a:	464f      	mov	r7, r9
 801109c:	f280 8204 	bge.w	80114a8 <_dtoa_r+0x830>
 80110a0:	9b04      	ldr	r3, [sp, #16]
 80110a2:	9a04      	ldr	r2, [sp, #16]
 80110a4:	1c5e      	adds	r6, r3, #1
 80110a6:	2331      	movs	r3, #49	; 0x31
 80110a8:	7013      	strb	r3, [r2, #0]
 80110aa:	f10b 0b01 	add.w	fp, fp, #1
 80110ae:	e1ff      	b.n	80114b0 <_dtoa_r+0x838>
 80110b0:	2202      	movs	r2, #2
 80110b2:	e731      	b.n	8010f18 <_dtoa_r+0x2a0>
 80110b4:	d02e      	beq.n	8011114 <_dtoa_r+0x49c>
 80110b6:	f1cb 0300 	rsb	r3, fp, #0
 80110ba:	4aae      	ldr	r2, [pc, #696]	; (8011374 <_dtoa_r+0x6fc>)
 80110bc:	f003 010f 	and.w	r1, r3, #15
 80110c0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80110c4:	ed92 7b00 	vldr	d7, [r2]
 80110c8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80110cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80110d0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80110d4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80110d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80110dc:	49a6      	ldr	r1, [pc, #664]	; (8011378 <_dtoa_r+0x700>)
 80110de:	111b      	asrs	r3, r3, #4
 80110e0:	2000      	movs	r0, #0
 80110e2:	2202      	movs	r2, #2
 80110e4:	b93b      	cbnz	r3, 80110f6 <_dtoa_r+0x47e>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f43f af6b 	beq.w	8010fc2 <_dtoa_r+0x34a>
 80110ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80110f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110f4:	e765      	b.n	8010fc2 <_dtoa_r+0x34a>
 80110f6:	07dd      	lsls	r5, r3, #31
 80110f8:	d509      	bpl.n	801110e <_dtoa_r+0x496>
 80110fa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80110fe:	ed91 7b00 	vldr	d7, [r1]
 8011102:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011106:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801110a:	3201      	adds	r2, #1
 801110c:	2001      	movs	r0, #1
 801110e:	105b      	asrs	r3, r3, #1
 8011110:	3108      	adds	r1, #8
 8011112:	e7e7      	b.n	80110e4 <_dtoa_r+0x46c>
 8011114:	2202      	movs	r2, #2
 8011116:	e754      	b.n	8010fc2 <_dtoa_r+0x34a>
 8011118:	465b      	mov	r3, fp
 801111a:	464d      	mov	r5, r9
 801111c:	e770      	b.n	8011000 <_dtoa_r+0x388>
 801111e:	4a95      	ldr	r2, [pc, #596]	; (8011374 <_dtoa_r+0x6fc>)
 8011120:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8011124:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801112a:	ec41 0b17 	vmov	d7, r0, r1
 801112e:	b35a      	cbz	r2, 8011188 <_dtoa_r+0x510>
 8011130:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011134:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011138:	9e04      	ldr	r6, [sp, #16]
 801113a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801113e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011142:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011146:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801114a:	ee14 2a90 	vmov	r2, s9
 801114e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011152:	3230      	adds	r2, #48	; 0x30
 8011154:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011160:	f806 2b01 	strb.w	r2, [r6], #1
 8011164:	d43b      	bmi.n	80111de <_dtoa_r+0x566>
 8011166:	ee32 5b46 	vsub.f64	d5, d2, d6
 801116a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011172:	d472      	bmi.n	801125a <_dtoa_r+0x5e2>
 8011174:	9a04      	ldr	r2, [sp, #16]
 8011176:	1ab2      	subs	r2, r6, r2
 8011178:	4295      	cmp	r5, r2
 801117a:	f77f af68 	ble.w	801104e <_dtoa_r+0x3d6>
 801117e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011182:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011186:	e7de      	b.n	8011146 <_dtoa_r+0x4ce>
 8011188:	9a04      	ldr	r2, [sp, #16]
 801118a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801118e:	1956      	adds	r6, r2, r5
 8011190:	4611      	mov	r1, r2
 8011192:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011196:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801119a:	ee14 2a90 	vmov	r2, s9
 801119e:	3230      	adds	r2, #48	; 0x30
 80111a0:	f801 2b01 	strb.w	r2, [r1], #1
 80111a4:	42b1      	cmp	r1, r6
 80111a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80111aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80111ae:	d11a      	bne.n	80111e6 <_dtoa_r+0x56e>
 80111b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80111b4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80111b8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80111bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c0:	dc4b      	bgt.n	801125a <_dtoa_r+0x5e2>
 80111c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80111c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	f57f af3e 	bpl.w	801104e <_dtoa_r+0x3d6>
 80111d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80111d6:	2a30      	cmp	r2, #48	; 0x30
 80111d8:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 80111dc:	d001      	beq.n	80111e2 <_dtoa_r+0x56a>
 80111de:	469b      	mov	fp, r3
 80111e0:	e02a      	b.n	8011238 <_dtoa_r+0x5c0>
 80111e2:	460e      	mov	r6, r1
 80111e4:	e7f5      	b.n	80111d2 <_dtoa_r+0x55a>
 80111e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80111ea:	e7d4      	b.n	8011196 <_dtoa_r+0x51e>
 80111ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111f0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80111f4:	9e04      	ldr	r6, [sp, #16]
 80111f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80111fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80111fe:	ee15 3a10 	vmov	r3, s10
 8011202:	3330      	adds	r3, #48	; 0x30
 8011204:	f806 3b01 	strb.w	r3, [r6], #1
 8011208:	9b04      	ldr	r3, [sp, #16]
 801120a:	1af3      	subs	r3, r6, r3
 801120c:	4599      	cmp	r9, r3
 801120e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011212:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011216:	d133      	bne.n	8011280 <_dtoa_r+0x608>
 8011218:	ee37 7b07 	vadd.f64	d7, d7, d7
 801121c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011224:	dc18      	bgt.n	8011258 <_dtoa_r+0x5e0>
 8011226:	eeb4 7b46 	vcmp.f64	d7, d6
 801122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122e:	d103      	bne.n	8011238 <_dtoa_r+0x5c0>
 8011230:	ee15 3a10 	vmov	r3, s10
 8011234:	07db      	lsls	r3, r3, #31
 8011236:	d40f      	bmi.n	8011258 <_dtoa_r+0x5e0>
 8011238:	9901      	ldr	r1, [sp, #4]
 801123a:	4620      	mov	r0, r4
 801123c:	f000 fc95 	bl	8011b6a <_Bfree>
 8011240:	2300      	movs	r3, #0
 8011242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011244:	7033      	strb	r3, [r6, #0]
 8011246:	f10b 0301 	add.w	r3, fp, #1
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801124e:	2b00      	cmp	r3, #0
 8011250:	f43f ad5b 	beq.w	8010d0a <_dtoa_r+0x92>
 8011254:	601e      	str	r6, [r3, #0]
 8011256:	e558      	b.n	8010d0a <_dtoa_r+0x92>
 8011258:	465b      	mov	r3, fp
 801125a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801125e:	2939      	cmp	r1, #57	; 0x39
 8011260:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8011264:	d106      	bne.n	8011274 <_dtoa_r+0x5fc>
 8011266:	9904      	ldr	r1, [sp, #16]
 8011268:	4291      	cmp	r1, r2
 801126a:	d107      	bne.n	801127c <_dtoa_r+0x604>
 801126c:	2230      	movs	r2, #48	; 0x30
 801126e:	700a      	strb	r2, [r1, #0]
 8011270:	3301      	adds	r3, #1
 8011272:	460a      	mov	r2, r1
 8011274:	7811      	ldrb	r1, [r2, #0]
 8011276:	3101      	adds	r1, #1
 8011278:	7011      	strb	r1, [r2, #0]
 801127a:	e7b0      	b.n	80111de <_dtoa_r+0x566>
 801127c:	4616      	mov	r6, r2
 801127e:	e7ec      	b.n	801125a <_dtoa_r+0x5e2>
 8011280:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128c:	d1b3      	bne.n	80111f6 <_dtoa_r+0x57e>
 801128e:	e7d3      	b.n	8011238 <_dtoa_r+0x5c0>
 8011290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011292:	2a00      	cmp	r2, #0
 8011294:	f000 808d 	beq.w	80113b2 <_dtoa_r+0x73a>
 8011298:	9a08      	ldr	r2, [sp, #32]
 801129a:	2a01      	cmp	r2, #1
 801129c:	dc72      	bgt.n	8011384 <_dtoa_r+0x70c>
 801129e:	2f00      	cmp	r7, #0
 80112a0:	d06c      	beq.n	801137c <_dtoa_r+0x704>
 80112a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80112a6:	4645      	mov	r5, r8
 80112a8:	4656      	mov	r6, sl
 80112aa:	9a07      	ldr	r2, [sp, #28]
 80112ac:	2101      	movs	r1, #1
 80112ae:	441a      	add	r2, r3
 80112b0:	4620      	mov	r0, r4
 80112b2:	449a      	add	sl, r3
 80112b4:	9207      	str	r2, [sp, #28]
 80112b6:	f000 fcf8 	bl	8011caa <__i2b>
 80112ba:	4607      	mov	r7, r0
 80112bc:	2e00      	cmp	r6, #0
 80112be:	dd0b      	ble.n	80112d8 <_dtoa_r+0x660>
 80112c0:	9b07      	ldr	r3, [sp, #28]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	dd08      	ble.n	80112d8 <_dtoa_r+0x660>
 80112c6:	42b3      	cmp	r3, r6
 80112c8:	9a07      	ldr	r2, [sp, #28]
 80112ca:	bfa8      	it	ge
 80112cc:	4633      	movge	r3, r6
 80112ce:	ebaa 0a03 	sub.w	sl, sl, r3
 80112d2:	1af6      	subs	r6, r6, r3
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	9307      	str	r3, [sp, #28]
 80112d8:	f1b8 0f00 	cmp.w	r8, #0
 80112dc:	d01d      	beq.n	801131a <_dtoa_r+0x6a2>
 80112de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d06a      	beq.n	80113ba <_dtoa_r+0x742>
 80112e4:	b18d      	cbz	r5, 801130a <_dtoa_r+0x692>
 80112e6:	4639      	mov	r1, r7
 80112e8:	462a      	mov	r2, r5
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fd7c 	bl	8011de8 <__pow5mult>
 80112f0:	9a01      	ldr	r2, [sp, #4]
 80112f2:	4601      	mov	r1, r0
 80112f4:	4607      	mov	r7, r0
 80112f6:	4620      	mov	r0, r4
 80112f8:	f000 fce0 	bl	8011cbc <__multiply>
 80112fc:	9901      	ldr	r1, [sp, #4]
 80112fe:	900c      	str	r0, [sp, #48]	; 0x30
 8011300:	4620      	mov	r0, r4
 8011302:	f000 fc32 	bl	8011b6a <_Bfree>
 8011306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	ebb8 0205 	subs.w	r2, r8, r5
 801130e:	d004      	beq.n	801131a <_dtoa_r+0x6a2>
 8011310:	9901      	ldr	r1, [sp, #4]
 8011312:	4620      	mov	r0, r4
 8011314:	f000 fd68 	bl	8011de8 <__pow5mult>
 8011318:	9001      	str	r0, [sp, #4]
 801131a:	2101      	movs	r1, #1
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fcc4 	bl	8011caa <__i2b>
 8011322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011324:	4605      	mov	r5, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	f000 81ca 	beq.w	80116c0 <_dtoa_r+0xa48>
 801132c:	461a      	mov	r2, r3
 801132e:	4601      	mov	r1, r0
 8011330:	4620      	mov	r0, r4
 8011332:	f000 fd59 	bl	8011de8 <__pow5mult>
 8011336:	9b08      	ldr	r3, [sp, #32]
 8011338:	2b01      	cmp	r3, #1
 801133a:	4605      	mov	r5, r0
 801133c:	dc44      	bgt.n	80113c8 <_dtoa_r+0x750>
 801133e:	9b02      	ldr	r3, [sp, #8]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d13c      	bne.n	80113be <_dtoa_r+0x746>
 8011344:	9b03      	ldr	r3, [sp, #12]
 8011346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801134a:	2b00      	cmp	r3, #0
 801134c:	d137      	bne.n	80113be <_dtoa_r+0x746>
 801134e:	9b03      	ldr	r3, [sp, #12]
 8011350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011354:	0d1b      	lsrs	r3, r3, #20
 8011356:	051b      	lsls	r3, r3, #20
 8011358:	2b00      	cmp	r3, #0
 801135a:	d033      	beq.n	80113c4 <_dtoa_r+0x74c>
 801135c:	9b07      	ldr	r3, [sp, #28]
 801135e:	3301      	adds	r3, #1
 8011360:	f10a 0a01 	add.w	sl, sl, #1
 8011364:	9307      	str	r3, [sp, #28]
 8011366:	f04f 0801 	mov.w	r8, #1
 801136a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801136c:	bb73      	cbnz	r3, 80113cc <_dtoa_r+0x754>
 801136e:	2001      	movs	r0, #1
 8011370:	e034      	b.n	80113dc <_dtoa_r+0x764>
 8011372:	bf00      	nop
 8011374:	08014140 	.word	0x08014140
 8011378:	08014118 	.word	0x08014118
 801137c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801137e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011382:	e790      	b.n	80112a6 <_dtoa_r+0x62e>
 8011384:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8011388:	45a8      	cmp	r8, r5
 801138a:	bfbf      	itttt	lt
 801138c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801138e:	eba5 0808 	sublt.w	r8, r5, r8
 8011392:	4443      	addlt	r3, r8
 8011394:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011396:	bfb6      	itet	lt
 8011398:	46a8      	movlt	r8, r5
 801139a:	eba8 0505 	subge.w	r5, r8, r5
 801139e:	2500      	movlt	r5, #0
 80113a0:	f1b9 0f00 	cmp.w	r9, #0
 80113a4:	bfb9      	ittee	lt
 80113a6:	ebaa 0609 	sublt.w	r6, sl, r9
 80113aa:	2300      	movlt	r3, #0
 80113ac:	4656      	movge	r6, sl
 80113ae:	464b      	movge	r3, r9
 80113b0:	e77b      	b.n	80112aa <_dtoa_r+0x632>
 80113b2:	4645      	mov	r5, r8
 80113b4:	4656      	mov	r6, sl
 80113b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80113b8:	e780      	b.n	80112bc <_dtoa_r+0x644>
 80113ba:	4642      	mov	r2, r8
 80113bc:	e7a8      	b.n	8011310 <_dtoa_r+0x698>
 80113be:	f04f 0800 	mov.w	r8, #0
 80113c2:	e7d2      	b.n	801136a <_dtoa_r+0x6f2>
 80113c4:	4698      	mov	r8, r3
 80113c6:	e7d0      	b.n	801136a <_dtoa_r+0x6f2>
 80113c8:	f04f 0800 	mov.w	r8, #0
 80113cc:	692b      	ldr	r3, [r5, #16]
 80113ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80113d2:	6918      	ldr	r0, [r3, #16]
 80113d4:	f000 fc1b 	bl	8011c0e <__hi0bits>
 80113d8:	f1c0 0020 	rsb	r0, r0, #32
 80113dc:	9b07      	ldr	r3, [sp, #28]
 80113de:	4418      	add	r0, r3
 80113e0:	f010 001f 	ands.w	r0, r0, #31
 80113e4:	d047      	beq.n	8011476 <_dtoa_r+0x7fe>
 80113e6:	f1c0 0320 	rsb	r3, r0, #32
 80113ea:	2b04      	cmp	r3, #4
 80113ec:	dd3b      	ble.n	8011466 <_dtoa_r+0x7ee>
 80113ee:	9b07      	ldr	r3, [sp, #28]
 80113f0:	f1c0 001c 	rsb	r0, r0, #28
 80113f4:	4482      	add	sl, r0
 80113f6:	4406      	add	r6, r0
 80113f8:	4403      	add	r3, r0
 80113fa:	9307      	str	r3, [sp, #28]
 80113fc:	f1ba 0f00 	cmp.w	sl, #0
 8011400:	dd05      	ble.n	801140e <_dtoa_r+0x796>
 8011402:	4652      	mov	r2, sl
 8011404:	9901      	ldr	r1, [sp, #4]
 8011406:	4620      	mov	r0, r4
 8011408:	f000 fd3c 	bl	8011e84 <__lshift>
 801140c:	9001      	str	r0, [sp, #4]
 801140e:	9b07      	ldr	r3, [sp, #28]
 8011410:	2b00      	cmp	r3, #0
 8011412:	dd05      	ble.n	8011420 <_dtoa_r+0x7a8>
 8011414:	4629      	mov	r1, r5
 8011416:	461a      	mov	r2, r3
 8011418:	4620      	mov	r0, r4
 801141a:	f000 fd33 	bl	8011e84 <__lshift>
 801141e:	4605      	mov	r5, r0
 8011420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011422:	b353      	cbz	r3, 801147a <_dtoa_r+0x802>
 8011424:	4629      	mov	r1, r5
 8011426:	9801      	ldr	r0, [sp, #4]
 8011428:	f000 fd80 	bl	8011f2c <__mcmp>
 801142c:	2800      	cmp	r0, #0
 801142e:	da24      	bge.n	801147a <_dtoa_r+0x802>
 8011430:	2300      	movs	r3, #0
 8011432:	220a      	movs	r2, #10
 8011434:	9901      	ldr	r1, [sp, #4]
 8011436:	4620      	mov	r0, r4
 8011438:	f000 fbae 	bl	8011b98 <__multadd>
 801143c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801143e:	9001      	str	r0, [sp, #4]
 8011440:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011444:	2b00      	cmp	r3, #0
 8011446:	f000 8142 	beq.w	80116ce <_dtoa_r+0xa56>
 801144a:	2300      	movs	r3, #0
 801144c:	4639      	mov	r1, r7
 801144e:	220a      	movs	r2, #10
 8011450:	4620      	mov	r0, r4
 8011452:	f000 fba1 	bl	8011b98 <__multadd>
 8011456:	9b06      	ldr	r3, [sp, #24]
 8011458:	2b00      	cmp	r3, #0
 801145a:	4607      	mov	r7, r0
 801145c:	dc4b      	bgt.n	80114f6 <_dtoa_r+0x87e>
 801145e:	9b08      	ldr	r3, [sp, #32]
 8011460:	2b02      	cmp	r3, #2
 8011462:	dd48      	ble.n	80114f6 <_dtoa_r+0x87e>
 8011464:	e011      	b.n	801148a <_dtoa_r+0x812>
 8011466:	d0c9      	beq.n	80113fc <_dtoa_r+0x784>
 8011468:	9a07      	ldr	r2, [sp, #28]
 801146a:	331c      	adds	r3, #28
 801146c:	441a      	add	r2, r3
 801146e:	449a      	add	sl, r3
 8011470:	441e      	add	r6, r3
 8011472:	4613      	mov	r3, r2
 8011474:	e7c1      	b.n	80113fa <_dtoa_r+0x782>
 8011476:	4603      	mov	r3, r0
 8011478:	e7f6      	b.n	8011468 <_dtoa_r+0x7f0>
 801147a:	f1b9 0f00 	cmp.w	r9, #0
 801147e:	dc34      	bgt.n	80114ea <_dtoa_r+0x872>
 8011480:	9b08      	ldr	r3, [sp, #32]
 8011482:	2b02      	cmp	r3, #2
 8011484:	dd31      	ble.n	80114ea <_dtoa_r+0x872>
 8011486:	f8cd 9018 	str.w	r9, [sp, #24]
 801148a:	9b06      	ldr	r3, [sp, #24]
 801148c:	b963      	cbnz	r3, 80114a8 <_dtoa_r+0x830>
 801148e:	4629      	mov	r1, r5
 8011490:	2205      	movs	r2, #5
 8011492:	4620      	mov	r0, r4
 8011494:	f000 fb80 	bl	8011b98 <__multadd>
 8011498:	4601      	mov	r1, r0
 801149a:	4605      	mov	r5, r0
 801149c:	9801      	ldr	r0, [sp, #4]
 801149e:	f000 fd45 	bl	8011f2c <__mcmp>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f73f adfc 	bgt.w	80110a0 <_dtoa_r+0x428>
 80114a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114aa:	9e04      	ldr	r6, [sp, #16]
 80114ac:	ea6f 0b03 	mvn.w	fp, r3
 80114b0:	f04f 0900 	mov.w	r9, #0
 80114b4:	4629      	mov	r1, r5
 80114b6:	4620      	mov	r0, r4
 80114b8:	f000 fb57 	bl	8011b6a <_Bfree>
 80114bc:	2f00      	cmp	r7, #0
 80114be:	f43f aebb 	beq.w	8011238 <_dtoa_r+0x5c0>
 80114c2:	f1b9 0f00 	cmp.w	r9, #0
 80114c6:	d005      	beq.n	80114d4 <_dtoa_r+0x85c>
 80114c8:	45b9      	cmp	r9, r7
 80114ca:	d003      	beq.n	80114d4 <_dtoa_r+0x85c>
 80114cc:	4649      	mov	r1, r9
 80114ce:	4620      	mov	r0, r4
 80114d0:	f000 fb4b 	bl	8011b6a <_Bfree>
 80114d4:	4639      	mov	r1, r7
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 fb47 	bl	8011b6a <_Bfree>
 80114dc:	e6ac      	b.n	8011238 <_dtoa_r+0x5c0>
 80114de:	2500      	movs	r5, #0
 80114e0:	462f      	mov	r7, r5
 80114e2:	e7e1      	b.n	80114a8 <_dtoa_r+0x830>
 80114e4:	469b      	mov	fp, r3
 80114e6:	462f      	mov	r7, r5
 80114e8:	e5da      	b.n	80110a0 <_dtoa_r+0x428>
 80114ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ec:	f8cd 9018 	str.w	r9, [sp, #24]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f000 80f3 	beq.w	80116dc <_dtoa_r+0xa64>
 80114f6:	2e00      	cmp	r6, #0
 80114f8:	dd05      	ble.n	8011506 <_dtoa_r+0x88e>
 80114fa:	4639      	mov	r1, r7
 80114fc:	4632      	mov	r2, r6
 80114fe:	4620      	mov	r0, r4
 8011500:	f000 fcc0 	bl	8011e84 <__lshift>
 8011504:	4607      	mov	r7, r0
 8011506:	f1b8 0f00 	cmp.w	r8, #0
 801150a:	d04c      	beq.n	80115a6 <_dtoa_r+0x92e>
 801150c:	6879      	ldr	r1, [r7, #4]
 801150e:	4620      	mov	r0, r4
 8011510:	f000 faf7 	bl	8011b02 <_Balloc>
 8011514:	693a      	ldr	r2, [r7, #16]
 8011516:	3202      	adds	r2, #2
 8011518:	4606      	mov	r6, r0
 801151a:	0092      	lsls	r2, r2, #2
 801151c:	f107 010c 	add.w	r1, r7, #12
 8011520:	300c      	adds	r0, #12
 8011522:	f000 fae1 	bl	8011ae8 <memcpy>
 8011526:	2201      	movs	r2, #1
 8011528:	4631      	mov	r1, r6
 801152a:	4620      	mov	r0, r4
 801152c:	f000 fcaa 	bl	8011e84 <__lshift>
 8011530:	9b02      	ldr	r3, [sp, #8]
 8011532:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	46b9      	mov	r9, r7
 801153c:	9307      	str	r3, [sp, #28]
 801153e:	4607      	mov	r7, r0
 8011540:	4629      	mov	r1, r5
 8011542:	9801      	ldr	r0, [sp, #4]
 8011544:	f7ff fb0c 	bl	8010b60 <quorem>
 8011548:	4649      	mov	r1, r9
 801154a:	4606      	mov	r6, r0
 801154c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011550:	9801      	ldr	r0, [sp, #4]
 8011552:	f000 fceb 	bl	8011f2c <__mcmp>
 8011556:	463a      	mov	r2, r7
 8011558:	9002      	str	r0, [sp, #8]
 801155a:	4629      	mov	r1, r5
 801155c:	4620      	mov	r0, r4
 801155e:	f000 fcff 	bl	8011f60 <__mdiff>
 8011562:	68c3      	ldr	r3, [r0, #12]
 8011564:	4602      	mov	r2, r0
 8011566:	bb03      	cbnz	r3, 80115aa <_dtoa_r+0x932>
 8011568:	4601      	mov	r1, r0
 801156a:	9009      	str	r0, [sp, #36]	; 0x24
 801156c:	9801      	ldr	r0, [sp, #4]
 801156e:	f000 fcdd 	bl	8011f2c <__mcmp>
 8011572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011574:	4603      	mov	r3, r0
 8011576:	4611      	mov	r1, r2
 8011578:	4620      	mov	r0, r4
 801157a:	9309      	str	r3, [sp, #36]	; 0x24
 801157c:	f000 faf5 	bl	8011b6a <_Bfree>
 8011580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011582:	b9a3      	cbnz	r3, 80115ae <_dtoa_r+0x936>
 8011584:	9a08      	ldr	r2, [sp, #32]
 8011586:	b992      	cbnz	r2, 80115ae <_dtoa_r+0x936>
 8011588:	9a07      	ldr	r2, [sp, #28]
 801158a:	b982      	cbnz	r2, 80115ae <_dtoa_r+0x936>
 801158c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011590:	d029      	beq.n	80115e6 <_dtoa_r+0x96e>
 8011592:	9b02      	ldr	r3, [sp, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	dd01      	ble.n	801159c <_dtoa_r+0x924>
 8011598:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801159c:	f10a 0601 	add.w	r6, sl, #1
 80115a0:	f88a 8000 	strb.w	r8, [sl]
 80115a4:	e786      	b.n	80114b4 <_dtoa_r+0x83c>
 80115a6:	4638      	mov	r0, r7
 80115a8:	e7c2      	b.n	8011530 <_dtoa_r+0x8b8>
 80115aa:	2301      	movs	r3, #1
 80115ac:	e7e3      	b.n	8011576 <_dtoa_r+0x8fe>
 80115ae:	9a02      	ldr	r2, [sp, #8]
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	db04      	blt.n	80115be <_dtoa_r+0x946>
 80115b4:	d124      	bne.n	8011600 <_dtoa_r+0x988>
 80115b6:	9a08      	ldr	r2, [sp, #32]
 80115b8:	bb12      	cbnz	r2, 8011600 <_dtoa_r+0x988>
 80115ba:	9a07      	ldr	r2, [sp, #28]
 80115bc:	bb02      	cbnz	r2, 8011600 <_dtoa_r+0x988>
 80115be:	2b00      	cmp	r3, #0
 80115c0:	ddec      	ble.n	801159c <_dtoa_r+0x924>
 80115c2:	2201      	movs	r2, #1
 80115c4:	9901      	ldr	r1, [sp, #4]
 80115c6:	4620      	mov	r0, r4
 80115c8:	f000 fc5c 	bl	8011e84 <__lshift>
 80115cc:	4629      	mov	r1, r5
 80115ce:	9001      	str	r0, [sp, #4]
 80115d0:	f000 fcac 	bl	8011f2c <__mcmp>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	dc03      	bgt.n	80115e0 <_dtoa_r+0x968>
 80115d8:	d1e0      	bne.n	801159c <_dtoa_r+0x924>
 80115da:	f018 0f01 	tst.w	r8, #1
 80115de:	d0dd      	beq.n	801159c <_dtoa_r+0x924>
 80115e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80115e4:	d1d8      	bne.n	8011598 <_dtoa_r+0x920>
 80115e6:	2339      	movs	r3, #57	; 0x39
 80115e8:	f10a 0601 	add.w	r6, sl, #1
 80115ec:	f88a 3000 	strb.w	r3, [sl]
 80115f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80115f4:	2b39      	cmp	r3, #57	; 0x39
 80115f6:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 80115fa:	d04c      	beq.n	8011696 <_dtoa_r+0xa1e>
 80115fc:	3301      	adds	r3, #1
 80115fe:	e051      	b.n	80116a4 <_dtoa_r+0xa2c>
 8011600:	2b00      	cmp	r3, #0
 8011602:	f10a 0601 	add.w	r6, sl, #1
 8011606:	dd05      	ble.n	8011614 <_dtoa_r+0x99c>
 8011608:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801160c:	d0eb      	beq.n	80115e6 <_dtoa_r+0x96e>
 801160e:	f108 0801 	add.w	r8, r8, #1
 8011612:	e7c5      	b.n	80115a0 <_dtoa_r+0x928>
 8011614:	9b04      	ldr	r3, [sp, #16]
 8011616:	9a06      	ldr	r2, [sp, #24]
 8011618:	f806 8c01 	strb.w	r8, [r6, #-1]
 801161c:	1af3      	subs	r3, r6, r3
 801161e:	4293      	cmp	r3, r2
 8011620:	d021      	beq.n	8011666 <_dtoa_r+0x9ee>
 8011622:	2300      	movs	r3, #0
 8011624:	220a      	movs	r2, #10
 8011626:	9901      	ldr	r1, [sp, #4]
 8011628:	4620      	mov	r0, r4
 801162a:	f000 fab5 	bl	8011b98 <__multadd>
 801162e:	45b9      	cmp	r9, r7
 8011630:	9001      	str	r0, [sp, #4]
 8011632:	f04f 0300 	mov.w	r3, #0
 8011636:	f04f 020a 	mov.w	r2, #10
 801163a:	4649      	mov	r1, r9
 801163c:	4620      	mov	r0, r4
 801163e:	d105      	bne.n	801164c <_dtoa_r+0x9d4>
 8011640:	f000 faaa 	bl	8011b98 <__multadd>
 8011644:	4681      	mov	r9, r0
 8011646:	4607      	mov	r7, r0
 8011648:	46b2      	mov	sl, r6
 801164a:	e779      	b.n	8011540 <_dtoa_r+0x8c8>
 801164c:	f000 faa4 	bl	8011b98 <__multadd>
 8011650:	4639      	mov	r1, r7
 8011652:	4681      	mov	r9, r0
 8011654:	2300      	movs	r3, #0
 8011656:	220a      	movs	r2, #10
 8011658:	4620      	mov	r0, r4
 801165a:	f000 fa9d 	bl	8011b98 <__multadd>
 801165e:	4607      	mov	r7, r0
 8011660:	e7f2      	b.n	8011648 <_dtoa_r+0x9d0>
 8011662:	f04f 0900 	mov.w	r9, #0
 8011666:	2201      	movs	r2, #1
 8011668:	9901      	ldr	r1, [sp, #4]
 801166a:	4620      	mov	r0, r4
 801166c:	f000 fc0a 	bl	8011e84 <__lshift>
 8011670:	4629      	mov	r1, r5
 8011672:	9001      	str	r0, [sp, #4]
 8011674:	f000 fc5a 	bl	8011f2c <__mcmp>
 8011678:	2800      	cmp	r0, #0
 801167a:	dcb9      	bgt.n	80115f0 <_dtoa_r+0x978>
 801167c:	d102      	bne.n	8011684 <_dtoa_r+0xa0c>
 801167e:	f018 0f01 	tst.w	r8, #1
 8011682:	d1b5      	bne.n	80115f0 <_dtoa_r+0x978>
 8011684:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011688:	2b30      	cmp	r3, #48	; 0x30
 801168a:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801168e:	f47f af11 	bne.w	80114b4 <_dtoa_r+0x83c>
 8011692:	4616      	mov	r6, r2
 8011694:	e7f6      	b.n	8011684 <_dtoa_r+0xa0c>
 8011696:	9b04      	ldr	r3, [sp, #16]
 8011698:	4293      	cmp	r3, r2
 801169a:	d105      	bne.n	80116a8 <_dtoa_r+0xa30>
 801169c:	9a04      	ldr	r2, [sp, #16]
 801169e:	f10b 0b01 	add.w	fp, fp, #1
 80116a2:	2331      	movs	r3, #49	; 0x31
 80116a4:	7013      	strb	r3, [r2, #0]
 80116a6:	e705      	b.n	80114b4 <_dtoa_r+0x83c>
 80116a8:	4616      	mov	r6, r2
 80116aa:	e7a1      	b.n	80115f0 <_dtoa_r+0x978>
 80116ac:	4b16      	ldr	r3, [pc, #88]	; (8011708 <_dtoa_r+0xa90>)
 80116ae:	f7ff bb48 	b.w	8010d42 <_dtoa_r+0xca>
 80116b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f47f ab23 	bne.w	8010d00 <_dtoa_r+0x88>
 80116ba:	4b14      	ldr	r3, [pc, #80]	; (801170c <_dtoa_r+0xa94>)
 80116bc:	f7ff bb41 	b.w	8010d42 <_dtoa_r+0xca>
 80116c0:	9b08      	ldr	r3, [sp, #32]
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	f77f ae3b 	ble.w	801133e <_dtoa_r+0x6c6>
 80116c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80116cc:	e64f      	b.n	801136e <_dtoa_r+0x6f6>
 80116ce:	9b06      	ldr	r3, [sp, #24]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dc03      	bgt.n	80116dc <_dtoa_r+0xa64>
 80116d4:	9b08      	ldr	r3, [sp, #32]
 80116d6:	2b02      	cmp	r3, #2
 80116d8:	f73f aed7 	bgt.w	801148a <_dtoa_r+0x812>
 80116dc:	9e04      	ldr	r6, [sp, #16]
 80116de:	9801      	ldr	r0, [sp, #4]
 80116e0:	4629      	mov	r1, r5
 80116e2:	f7ff fa3d 	bl	8010b60 <quorem>
 80116e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80116ea:	f806 8b01 	strb.w	r8, [r6], #1
 80116ee:	9b04      	ldr	r3, [sp, #16]
 80116f0:	9a06      	ldr	r2, [sp, #24]
 80116f2:	1af3      	subs	r3, r6, r3
 80116f4:	429a      	cmp	r2, r3
 80116f6:	ddb4      	ble.n	8011662 <_dtoa_r+0x9ea>
 80116f8:	2300      	movs	r3, #0
 80116fa:	220a      	movs	r2, #10
 80116fc:	9901      	ldr	r1, [sp, #4]
 80116fe:	4620      	mov	r0, r4
 8011700:	f000 fa4a 	bl	8011b98 <__multadd>
 8011704:	9001      	str	r0, [sp, #4]
 8011706:	e7ea      	b.n	80116de <_dtoa_r+0xa66>
 8011708:	08014084 	.word	0x08014084
 801170c:	080140a8 	.word	0x080140a8

08011710 <__sflush_r>:
 8011710:	898a      	ldrh	r2, [r1, #12]
 8011712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	4605      	mov	r5, r0
 8011718:	0710      	lsls	r0, r2, #28
 801171a:	460c      	mov	r4, r1
 801171c:	d458      	bmi.n	80117d0 <__sflush_r+0xc0>
 801171e:	684b      	ldr	r3, [r1, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	dc05      	bgt.n	8011730 <__sflush_r+0x20>
 8011724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011726:	2b00      	cmp	r3, #0
 8011728:	dc02      	bgt.n	8011730 <__sflush_r+0x20>
 801172a:	2000      	movs	r0, #0
 801172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011732:	2e00      	cmp	r6, #0
 8011734:	d0f9      	beq.n	801172a <__sflush_r+0x1a>
 8011736:	2300      	movs	r3, #0
 8011738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801173c:	682f      	ldr	r7, [r5, #0]
 801173e:	6a21      	ldr	r1, [r4, #32]
 8011740:	602b      	str	r3, [r5, #0]
 8011742:	d032      	beq.n	80117aa <__sflush_r+0x9a>
 8011744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	075a      	lsls	r2, r3, #29
 801174a:	d505      	bpl.n	8011758 <__sflush_r+0x48>
 801174c:	6863      	ldr	r3, [r4, #4]
 801174e:	1ac0      	subs	r0, r0, r3
 8011750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011752:	b10b      	cbz	r3, 8011758 <__sflush_r+0x48>
 8011754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011756:	1ac0      	subs	r0, r0, r3
 8011758:	2300      	movs	r3, #0
 801175a:	4602      	mov	r2, r0
 801175c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801175e:	6a21      	ldr	r1, [r4, #32]
 8011760:	4628      	mov	r0, r5
 8011762:	47b0      	blx	r6
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	89a3      	ldrh	r3, [r4, #12]
 8011768:	d106      	bne.n	8011778 <__sflush_r+0x68>
 801176a:	6829      	ldr	r1, [r5, #0]
 801176c:	291d      	cmp	r1, #29
 801176e:	d848      	bhi.n	8011802 <__sflush_r+0xf2>
 8011770:	4a29      	ldr	r2, [pc, #164]	; (8011818 <__sflush_r+0x108>)
 8011772:	40ca      	lsrs	r2, r1
 8011774:	07d6      	lsls	r6, r2, #31
 8011776:	d544      	bpl.n	8011802 <__sflush_r+0xf2>
 8011778:	2200      	movs	r2, #0
 801177a:	6062      	str	r2, [r4, #4]
 801177c:	04d9      	lsls	r1, r3, #19
 801177e:	6922      	ldr	r2, [r4, #16]
 8011780:	6022      	str	r2, [r4, #0]
 8011782:	d504      	bpl.n	801178e <__sflush_r+0x7e>
 8011784:	1c42      	adds	r2, r0, #1
 8011786:	d101      	bne.n	801178c <__sflush_r+0x7c>
 8011788:	682b      	ldr	r3, [r5, #0]
 801178a:	b903      	cbnz	r3, 801178e <__sflush_r+0x7e>
 801178c:	6560      	str	r0, [r4, #84]	; 0x54
 801178e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011790:	602f      	str	r7, [r5, #0]
 8011792:	2900      	cmp	r1, #0
 8011794:	d0c9      	beq.n	801172a <__sflush_r+0x1a>
 8011796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801179a:	4299      	cmp	r1, r3
 801179c:	d002      	beq.n	80117a4 <__sflush_r+0x94>
 801179e:	4628      	mov	r0, r5
 80117a0:	f7fe fbae 	bl	800ff00 <_free_r>
 80117a4:	2000      	movs	r0, #0
 80117a6:	6360      	str	r0, [r4, #52]	; 0x34
 80117a8:	e7c0      	b.n	801172c <__sflush_r+0x1c>
 80117aa:	2301      	movs	r3, #1
 80117ac:	4628      	mov	r0, r5
 80117ae:	47b0      	blx	r6
 80117b0:	1c41      	adds	r1, r0, #1
 80117b2:	d1c8      	bne.n	8011746 <__sflush_r+0x36>
 80117b4:	682b      	ldr	r3, [r5, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d0c5      	beq.n	8011746 <__sflush_r+0x36>
 80117ba:	2b1d      	cmp	r3, #29
 80117bc:	d001      	beq.n	80117c2 <__sflush_r+0xb2>
 80117be:	2b16      	cmp	r3, #22
 80117c0:	d101      	bne.n	80117c6 <__sflush_r+0xb6>
 80117c2:	602f      	str	r7, [r5, #0]
 80117c4:	e7b1      	b.n	801172a <__sflush_r+0x1a>
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	e7ad      	b.n	801172c <__sflush_r+0x1c>
 80117d0:	690f      	ldr	r7, [r1, #16]
 80117d2:	2f00      	cmp	r7, #0
 80117d4:	d0a9      	beq.n	801172a <__sflush_r+0x1a>
 80117d6:	0793      	lsls	r3, r2, #30
 80117d8:	680e      	ldr	r6, [r1, #0]
 80117da:	bf08      	it	eq
 80117dc:	694b      	ldreq	r3, [r1, #20]
 80117de:	600f      	str	r7, [r1, #0]
 80117e0:	bf18      	it	ne
 80117e2:	2300      	movne	r3, #0
 80117e4:	eba6 0807 	sub.w	r8, r6, r7
 80117e8:	608b      	str	r3, [r1, #8]
 80117ea:	f1b8 0f00 	cmp.w	r8, #0
 80117ee:	dd9c      	ble.n	801172a <__sflush_r+0x1a>
 80117f0:	4643      	mov	r3, r8
 80117f2:	463a      	mov	r2, r7
 80117f4:	6a21      	ldr	r1, [r4, #32]
 80117f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117f8:	4628      	mov	r0, r5
 80117fa:	47b0      	blx	r6
 80117fc:	2800      	cmp	r0, #0
 80117fe:	dc06      	bgt.n	801180e <__sflush_r+0xfe>
 8011800:	89a3      	ldrh	r3, [r4, #12]
 8011802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801180c:	e78e      	b.n	801172c <__sflush_r+0x1c>
 801180e:	4407      	add	r7, r0
 8011810:	eba8 0800 	sub.w	r8, r8, r0
 8011814:	e7e9      	b.n	80117ea <__sflush_r+0xda>
 8011816:	bf00      	nop
 8011818:	20400001 	.word	0x20400001

0801181c <_fflush_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	690b      	ldr	r3, [r1, #16]
 8011820:	4605      	mov	r5, r0
 8011822:	460c      	mov	r4, r1
 8011824:	b1db      	cbz	r3, 801185e <_fflush_r+0x42>
 8011826:	b118      	cbz	r0, 8011830 <_fflush_r+0x14>
 8011828:	6983      	ldr	r3, [r0, #24]
 801182a:	b90b      	cbnz	r3, 8011830 <_fflush_r+0x14>
 801182c:	f000 f860 	bl	80118f0 <__sinit>
 8011830:	4b0c      	ldr	r3, [pc, #48]	; (8011864 <_fflush_r+0x48>)
 8011832:	429c      	cmp	r4, r3
 8011834:	d109      	bne.n	801184a <_fflush_r+0x2e>
 8011836:	686c      	ldr	r4, [r5, #4]
 8011838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183c:	b17b      	cbz	r3, 801185e <_fflush_r+0x42>
 801183e:	4621      	mov	r1, r4
 8011840:	4628      	mov	r0, r5
 8011842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011846:	f7ff bf63 	b.w	8011710 <__sflush_r>
 801184a:	4b07      	ldr	r3, [pc, #28]	; (8011868 <_fflush_r+0x4c>)
 801184c:	429c      	cmp	r4, r3
 801184e:	d101      	bne.n	8011854 <_fflush_r+0x38>
 8011850:	68ac      	ldr	r4, [r5, #8]
 8011852:	e7f1      	b.n	8011838 <_fflush_r+0x1c>
 8011854:	4b05      	ldr	r3, [pc, #20]	; (801186c <_fflush_r+0x50>)
 8011856:	429c      	cmp	r4, r3
 8011858:	bf08      	it	eq
 801185a:	68ec      	ldreq	r4, [r5, #12]
 801185c:	e7ec      	b.n	8011838 <_fflush_r+0x1c>
 801185e:	2000      	movs	r0, #0
 8011860:	bd38      	pop	{r3, r4, r5, pc}
 8011862:	bf00      	nop
 8011864:	080140d8 	.word	0x080140d8
 8011868:	080140f8 	.word	0x080140f8
 801186c:	080140b8 	.word	0x080140b8

08011870 <std>:
 8011870:	2300      	movs	r3, #0
 8011872:	b510      	push	{r4, lr}
 8011874:	4604      	mov	r4, r0
 8011876:	e9c0 3300 	strd	r3, r3, [r0]
 801187a:	6083      	str	r3, [r0, #8]
 801187c:	8181      	strh	r1, [r0, #12]
 801187e:	6643      	str	r3, [r0, #100]	; 0x64
 8011880:	81c2      	strh	r2, [r0, #14]
 8011882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011886:	6183      	str	r3, [r0, #24]
 8011888:	4619      	mov	r1, r3
 801188a:	2208      	movs	r2, #8
 801188c:	305c      	adds	r0, #92	; 0x5c
 801188e:	f7fe fb2f 	bl	800fef0 <memset>
 8011892:	4b05      	ldr	r3, [pc, #20]	; (80118a8 <std+0x38>)
 8011894:	6263      	str	r3, [r4, #36]	; 0x24
 8011896:	4b05      	ldr	r3, [pc, #20]	; (80118ac <std+0x3c>)
 8011898:	62a3      	str	r3, [r4, #40]	; 0x28
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <std+0x40>)
 801189c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801189e:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <std+0x44>)
 80118a0:	6224      	str	r4, [r4, #32]
 80118a2:	6323      	str	r3, [r4, #48]	; 0x30
 80118a4:	bd10      	pop	{r4, pc}
 80118a6:	bf00      	nop
 80118a8:	08012355 	.word	0x08012355
 80118ac:	08012377 	.word	0x08012377
 80118b0:	080123af 	.word	0x080123af
 80118b4:	080123d3 	.word	0x080123d3

080118b8 <_cleanup_r>:
 80118b8:	4901      	ldr	r1, [pc, #4]	; (80118c0 <_cleanup_r+0x8>)
 80118ba:	f000 b885 	b.w	80119c8 <_fwalk_reent>
 80118be:	bf00      	nop
 80118c0:	0801181d 	.word	0x0801181d

080118c4 <__sfmoreglue>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	1e4a      	subs	r2, r1, #1
 80118c8:	2568      	movs	r5, #104	; 0x68
 80118ca:	4355      	muls	r5, r2
 80118cc:	460e      	mov	r6, r1
 80118ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118d2:	f7fe fb63 	bl	800ff9c <_malloc_r>
 80118d6:	4604      	mov	r4, r0
 80118d8:	b140      	cbz	r0, 80118ec <__sfmoreglue+0x28>
 80118da:	2100      	movs	r1, #0
 80118dc:	e9c0 1600 	strd	r1, r6, [r0]
 80118e0:	300c      	adds	r0, #12
 80118e2:	60a0      	str	r0, [r4, #8]
 80118e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118e8:	f7fe fb02 	bl	800fef0 <memset>
 80118ec:	4620      	mov	r0, r4
 80118ee:	bd70      	pop	{r4, r5, r6, pc}

080118f0 <__sinit>:
 80118f0:	6983      	ldr	r3, [r0, #24]
 80118f2:	b510      	push	{r4, lr}
 80118f4:	4604      	mov	r4, r0
 80118f6:	bb33      	cbnz	r3, 8011946 <__sinit+0x56>
 80118f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80118fc:	6503      	str	r3, [r0, #80]	; 0x50
 80118fe:	4b12      	ldr	r3, [pc, #72]	; (8011948 <__sinit+0x58>)
 8011900:	4a12      	ldr	r2, [pc, #72]	; (801194c <__sinit+0x5c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	6282      	str	r2, [r0, #40]	; 0x28
 8011906:	4298      	cmp	r0, r3
 8011908:	bf04      	itt	eq
 801190a:	2301      	moveq	r3, #1
 801190c:	6183      	streq	r3, [r0, #24]
 801190e:	f000 f81f 	bl	8011950 <__sfp>
 8011912:	6060      	str	r0, [r4, #4]
 8011914:	4620      	mov	r0, r4
 8011916:	f000 f81b 	bl	8011950 <__sfp>
 801191a:	60a0      	str	r0, [r4, #8]
 801191c:	4620      	mov	r0, r4
 801191e:	f000 f817 	bl	8011950 <__sfp>
 8011922:	2200      	movs	r2, #0
 8011924:	60e0      	str	r0, [r4, #12]
 8011926:	2104      	movs	r1, #4
 8011928:	6860      	ldr	r0, [r4, #4]
 801192a:	f7ff ffa1 	bl	8011870 <std>
 801192e:	2201      	movs	r2, #1
 8011930:	2109      	movs	r1, #9
 8011932:	68a0      	ldr	r0, [r4, #8]
 8011934:	f7ff ff9c 	bl	8011870 <std>
 8011938:	2202      	movs	r2, #2
 801193a:	2112      	movs	r1, #18
 801193c:	68e0      	ldr	r0, [r4, #12]
 801193e:	f7ff ff97 	bl	8011870 <std>
 8011942:	2301      	movs	r3, #1
 8011944:	61a3      	str	r3, [r4, #24]
 8011946:	bd10      	pop	{r4, pc}
 8011948:	08014070 	.word	0x08014070
 801194c:	080118b9 	.word	0x080118b9

08011950 <__sfp>:
 8011950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011952:	4b1b      	ldr	r3, [pc, #108]	; (80119c0 <__sfp+0x70>)
 8011954:	681e      	ldr	r6, [r3, #0]
 8011956:	69b3      	ldr	r3, [r6, #24]
 8011958:	4607      	mov	r7, r0
 801195a:	b913      	cbnz	r3, 8011962 <__sfp+0x12>
 801195c:	4630      	mov	r0, r6
 801195e:	f7ff ffc7 	bl	80118f0 <__sinit>
 8011962:	3648      	adds	r6, #72	; 0x48
 8011964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011968:	3b01      	subs	r3, #1
 801196a:	d503      	bpl.n	8011974 <__sfp+0x24>
 801196c:	6833      	ldr	r3, [r6, #0]
 801196e:	b133      	cbz	r3, 801197e <__sfp+0x2e>
 8011970:	6836      	ldr	r6, [r6, #0]
 8011972:	e7f7      	b.n	8011964 <__sfp+0x14>
 8011974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011978:	b16d      	cbz	r5, 8011996 <__sfp+0x46>
 801197a:	3468      	adds	r4, #104	; 0x68
 801197c:	e7f4      	b.n	8011968 <__sfp+0x18>
 801197e:	2104      	movs	r1, #4
 8011980:	4638      	mov	r0, r7
 8011982:	f7ff ff9f 	bl	80118c4 <__sfmoreglue>
 8011986:	6030      	str	r0, [r6, #0]
 8011988:	2800      	cmp	r0, #0
 801198a:	d1f1      	bne.n	8011970 <__sfp+0x20>
 801198c:	230c      	movs	r3, #12
 801198e:	603b      	str	r3, [r7, #0]
 8011990:	4604      	mov	r4, r0
 8011992:	4620      	mov	r0, r4
 8011994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011996:	4b0b      	ldr	r3, [pc, #44]	; (80119c4 <__sfp+0x74>)
 8011998:	6665      	str	r5, [r4, #100]	; 0x64
 801199a:	e9c4 5500 	strd	r5, r5, [r4]
 801199e:	60a5      	str	r5, [r4, #8]
 80119a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80119a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80119a8:	2208      	movs	r2, #8
 80119aa:	4629      	mov	r1, r5
 80119ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119b0:	f7fe fa9e 	bl	800fef0 <memset>
 80119b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119bc:	e7e9      	b.n	8011992 <__sfp+0x42>
 80119be:	bf00      	nop
 80119c0:	08014070 	.word	0x08014070
 80119c4:	ffff0001 	.word	0xffff0001

080119c8 <_fwalk_reent>:
 80119c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119cc:	4680      	mov	r8, r0
 80119ce:	4689      	mov	r9, r1
 80119d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119d4:	2600      	movs	r6, #0
 80119d6:	b914      	cbnz	r4, 80119de <_fwalk_reent+0x16>
 80119d8:	4630      	mov	r0, r6
 80119da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80119e2:	3f01      	subs	r7, #1
 80119e4:	d501      	bpl.n	80119ea <_fwalk_reent+0x22>
 80119e6:	6824      	ldr	r4, [r4, #0]
 80119e8:	e7f5      	b.n	80119d6 <_fwalk_reent+0xe>
 80119ea:	89ab      	ldrh	r3, [r5, #12]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d907      	bls.n	8011a00 <_fwalk_reent+0x38>
 80119f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119f4:	3301      	adds	r3, #1
 80119f6:	d003      	beq.n	8011a00 <_fwalk_reent+0x38>
 80119f8:	4629      	mov	r1, r5
 80119fa:	4640      	mov	r0, r8
 80119fc:	47c8      	blx	r9
 80119fe:	4306      	orrs	r6, r0
 8011a00:	3568      	adds	r5, #104	; 0x68
 8011a02:	e7ee      	b.n	80119e2 <_fwalk_reent+0x1a>

08011a04 <_localeconv_r>:
 8011a04:	4b04      	ldr	r3, [pc, #16]	; (8011a18 <_localeconv_r+0x14>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	6a18      	ldr	r0, [r3, #32]
 8011a0a:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <_localeconv_r+0x18>)
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	bf08      	it	eq
 8011a10:	4618      	moveq	r0, r3
 8011a12:	30f0      	adds	r0, #240	; 0xf0
 8011a14:	4770      	bx	lr
 8011a16:	bf00      	nop
 8011a18:	2400002c 	.word	0x2400002c
 8011a1c:	24000090 	.word	0x24000090

08011a20 <__swhatbuf_r>:
 8011a20:	b570      	push	{r4, r5, r6, lr}
 8011a22:	460e      	mov	r6, r1
 8011a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a28:	2900      	cmp	r1, #0
 8011a2a:	b096      	sub	sp, #88	; 0x58
 8011a2c:	4614      	mov	r4, r2
 8011a2e:	461d      	mov	r5, r3
 8011a30:	da07      	bge.n	8011a42 <__swhatbuf_r+0x22>
 8011a32:	2300      	movs	r3, #0
 8011a34:	602b      	str	r3, [r5, #0]
 8011a36:	89b3      	ldrh	r3, [r6, #12]
 8011a38:	061a      	lsls	r2, r3, #24
 8011a3a:	d410      	bmi.n	8011a5e <__swhatbuf_r+0x3e>
 8011a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a40:	e00e      	b.n	8011a60 <__swhatbuf_r+0x40>
 8011a42:	466a      	mov	r2, sp
 8011a44:	f000 fcec 	bl	8012420 <_fstat_r>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	dbf2      	blt.n	8011a32 <__swhatbuf_r+0x12>
 8011a4c:	9a01      	ldr	r2, [sp, #4]
 8011a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011a56:	425a      	negs	r2, r3
 8011a58:	415a      	adcs	r2, r3
 8011a5a:	602a      	str	r2, [r5, #0]
 8011a5c:	e7ee      	b.n	8011a3c <__swhatbuf_r+0x1c>
 8011a5e:	2340      	movs	r3, #64	; 0x40
 8011a60:	2000      	movs	r0, #0
 8011a62:	6023      	str	r3, [r4, #0]
 8011a64:	b016      	add	sp, #88	; 0x58
 8011a66:	bd70      	pop	{r4, r5, r6, pc}

08011a68 <__smakebuf_r>:
 8011a68:	898b      	ldrh	r3, [r1, #12]
 8011a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a6c:	079d      	lsls	r5, r3, #30
 8011a6e:	4606      	mov	r6, r0
 8011a70:	460c      	mov	r4, r1
 8011a72:	d507      	bpl.n	8011a84 <__smakebuf_r+0x1c>
 8011a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a78:	6023      	str	r3, [r4, #0]
 8011a7a:	6123      	str	r3, [r4, #16]
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	6163      	str	r3, [r4, #20]
 8011a80:	b002      	add	sp, #8
 8011a82:	bd70      	pop	{r4, r5, r6, pc}
 8011a84:	ab01      	add	r3, sp, #4
 8011a86:	466a      	mov	r2, sp
 8011a88:	f7ff ffca 	bl	8011a20 <__swhatbuf_r>
 8011a8c:	9900      	ldr	r1, [sp, #0]
 8011a8e:	4605      	mov	r5, r0
 8011a90:	4630      	mov	r0, r6
 8011a92:	f7fe fa83 	bl	800ff9c <_malloc_r>
 8011a96:	b948      	cbnz	r0, 8011aac <__smakebuf_r+0x44>
 8011a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a9c:	059a      	lsls	r2, r3, #22
 8011a9e:	d4ef      	bmi.n	8011a80 <__smakebuf_r+0x18>
 8011aa0:	f023 0303 	bic.w	r3, r3, #3
 8011aa4:	f043 0302 	orr.w	r3, r3, #2
 8011aa8:	81a3      	strh	r3, [r4, #12]
 8011aaa:	e7e3      	b.n	8011a74 <__smakebuf_r+0xc>
 8011aac:	4b0d      	ldr	r3, [pc, #52]	; (8011ae4 <__smakebuf_r+0x7c>)
 8011aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ab0:	89a3      	ldrh	r3, [r4, #12]
 8011ab2:	6020      	str	r0, [r4, #0]
 8011ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ab8:	81a3      	strh	r3, [r4, #12]
 8011aba:	9b00      	ldr	r3, [sp, #0]
 8011abc:	6163      	str	r3, [r4, #20]
 8011abe:	9b01      	ldr	r3, [sp, #4]
 8011ac0:	6120      	str	r0, [r4, #16]
 8011ac2:	b15b      	cbz	r3, 8011adc <__smakebuf_r+0x74>
 8011ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f000 fcbb 	bl	8012444 <_isatty_r>
 8011ace:	b128      	cbz	r0, 8011adc <__smakebuf_r+0x74>
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	f023 0303 	bic.w	r3, r3, #3
 8011ad6:	f043 0301 	orr.w	r3, r3, #1
 8011ada:	81a3      	strh	r3, [r4, #12]
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	431d      	orrs	r5, r3
 8011ae0:	81a5      	strh	r5, [r4, #12]
 8011ae2:	e7cd      	b.n	8011a80 <__smakebuf_r+0x18>
 8011ae4:	080118b9 	.word	0x080118b9

08011ae8 <memcpy>:
 8011ae8:	b510      	push	{r4, lr}
 8011aea:	1e43      	subs	r3, r0, #1
 8011aec:	440a      	add	r2, r1
 8011aee:	4291      	cmp	r1, r2
 8011af0:	d100      	bne.n	8011af4 <memcpy+0xc>
 8011af2:	bd10      	pop	{r4, pc}
 8011af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011afc:	e7f7      	b.n	8011aee <memcpy+0x6>

08011afe <__malloc_lock>:
 8011afe:	4770      	bx	lr

08011b00 <__malloc_unlock>:
 8011b00:	4770      	bx	lr

08011b02 <_Balloc>:
 8011b02:	b570      	push	{r4, r5, r6, lr}
 8011b04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b06:	4604      	mov	r4, r0
 8011b08:	460e      	mov	r6, r1
 8011b0a:	b93d      	cbnz	r5, 8011b1c <_Balloc+0x1a>
 8011b0c:	2010      	movs	r0, #16
 8011b0e:	f7fe f9e7 	bl	800fee0 <malloc>
 8011b12:	6260      	str	r0, [r4, #36]	; 0x24
 8011b14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b18:	6005      	str	r5, [r0, #0]
 8011b1a:	60c5      	str	r5, [r0, #12]
 8011b1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011b1e:	68eb      	ldr	r3, [r5, #12]
 8011b20:	b183      	cbz	r3, 8011b44 <_Balloc+0x42>
 8011b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011b2a:	b9b8      	cbnz	r0, 8011b5c <_Balloc+0x5a>
 8011b2c:	2101      	movs	r1, #1
 8011b2e:	fa01 f506 	lsl.w	r5, r1, r6
 8011b32:	1d6a      	adds	r2, r5, #5
 8011b34:	0092      	lsls	r2, r2, #2
 8011b36:	4620      	mov	r0, r4
 8011b38:	f000 fabe 	bl	80120b8 <_calloc_r>
 8011b3c:	b160      	cbz	r0, 8011b58 <_Balloc+0x56>
 8011b3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011b42:	e00e      	b.n	8011b62 <_Balloc+0x60>
 8011b44:	2221      	movs	r2, #33	; 0x21
 8011b46:	2104      	movs	r1, #4
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f000 fab5 	bl	80120b8 <_calloc_r>
 8011b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b50:	60e8      	str	r0, [r5, #12]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1e4      	bne.n	8011b22 <_Balloc+0x20>
 8011b58:	2000      	movs	r0, #0
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	6802      	ldr	r2, [r0, #0]
 8011b5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011b62:	2300      	movs	r3, #0
 8011b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b68:	e7f7      	b.n	8011b5a <_Balloc+0x58>

08011b6a <_Bfree>:
 8011b6a:	b570      	push	{r4, r5, r6, lr}
 8011b6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011b6e:	4606      	mov	r6, r0
 8011b70:	460d      	mov	r5, r1
 8011b72:	b93c      	cbnz	r4, 8011b84 <_Bfree+0x1a>
 8011b74:	2010      	movs	r0, #16
 8011b76:	f7fe f9b3 	bl	800fee0 <malloc>
 8011b7a:	6270      	str	r0, [r6, #36]	; 0x24
 8011b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b80:	6004      	str	r4, [r0, #0]
 8011b82:	60c4      	str	r4, [r0, #12]
 8011b84:	b13d      	cbz	r5, 8011b96 <_Bfree+0x2c>
 8011b86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011b88:	686a      	ldr	r2, [r5, #4]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b90:	6029      	str	r1, [r5, #0]
 8011b92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011b96:	bd70      	pop	{r4, r5, r6, pc}

08011b98 <__multadd>:
 8011b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9c:	690d      	ldr	r5, [r1, #16]
 8011b9e:	461f      	mov	r7, r3
 8011ba0:	4606      	mov	r6, r0
 8011ba2:	460c      	mov	r4, r1
 8011ba4:	f101 0c14 	add.w	ip, r1, #20
 8011ba8:	2300      	movs	r3, #0
 8011baa:	f8dc 0000 	ldr.w	r0, [ip]
 8011bae:	b281      	uxth	r1, r0
 8011bb0:	fb02 7101 	mla	r1, r2, r1, r7
 8011bb4:	0c0f      	lsrs	r7, r1, #16
 8011bb6:	0c00      	lsrs	r0, r0, #16
 8011bb8:	fb02 7000 	mla	r0, r2, r0, r7
 8011bbc:	b289      	uxth	r1, r1
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011bc4:	429d      	cmp	r5, r3
 8011bc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011bca:	f84c 1b04 	str.w	r1, [ip], #4
 8011bce:	dcec      	bgt.n	8011baa <__multadd+0x12>
 8011bd0:	b1d7      	cbz	r7, 8011c08 <__multadd+0x70>
 8011bd2:	68a3      	ldr	r3, [r4, #8]
 8011bd4:	42ab      	cmp	r3, r5
 8011bd6:	dc12      	bgt.n	8011bfe <__multadd+0x66>
 8011bd8:	6861      	ldr	r1, [r4, #4]
 8011bda:	4630      	mov	r0, r6
 8011bdc:	3101      	adds	r1, #1
 8011bde:	f7ff ff90 	bl	8011b02 <_Balloc>
 8011be2:	6922      	ldr	r2, [r4, #16]
 8011be4:	3202      	adds	r2, #2
 8011be6:	f104 010c 	add.w	r1, r4, #12
 8011bea:	4680      	mov	r8, r0
 8011bec:	0092      	lsls	r2, r2, #2
 8011bee:	300c      	adds	r0, #12
 8011bf0:	f7ff ff7a 	bl	8011ae8 <memcpy>
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7ff ffb7 	bl	8011b6a <_Bfree>
 8011bfc:	4644      	mov	r4, r8
 8011bfe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011c02:	3501      	adds	r5, #1
 8011c04:	615f      	str	r7, [r3, #20]
 8011c06:	6125      	str	r5, [r4, #16]
 8011c08:	4620      	mov	r0, r4
 8011c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c0e <__hi0bits>:
 8011c0e:	0c02      	lsrs	r2, r0, #16
 8011c10:	0412      	lsls	r2, r2, #16
 8011c12:	4603      	mov	r3, r0
 8011c14:	b9b2      	cbnz	r2, 8011c44 <__hi0bits+0x36>
 8011c16:	0403      	lsls	r3, r0, #16
 8011c18:	2010      	movs	r0, #16
 8011c1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011c1e:	bf04      	itt	eq
 8011c20:	021b      	lsleq	r3, r3, #8
 8011c22:	3008      	addeq	r0, #8
 8011c24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011c28:	bf04      	itt	eq
 8011c2a:	011b      	lsleq	r3, r3, #4
 8011c2c:	3004      	addeq	r0, #4
 8011c2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011c32:	bf04      	itt	eq
 8011c34:	009b      	lsleq	r3, r3, #2
 8011c36:	3002      	addeq	r0, #2
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	db06      	blt.n	8011c4a <__hi0bits+0x3c>
 8011c3c:	005b      	lsls	r3, r3, #1
 8011c3e:	d503      	bpl.n	8011c48 <__hi0bits+0x3a>
 8011c40:	3001      	adds	r0, #1
 8011c42:	4770      	bx	lr
 8011c44:	2000      	movs	r0, #0
 8011c46:	e7e8      	b.n	8011c1a <__hi0bits+0xc>
 8011c48:	2020      	movs	r0, #32
 8011c4a:	4770      	bx	lr

08011c4c <__lo0bits>:
 8011c4c:	6803      	ldr	r3, [r0, #0]
 8011c4e:	f013 0207 	ands.w	r2, r3, #7
 8011c52:	4601      	mov	r1, r0
 8011c54:	d00b      	beq.n	8011c6e <__lo0bits+0x22>
 8011c56:	07da      	lsls	r2, r3, #31
 8011c58:	d423      	bmi.n	8011ca2 <__lo0bits+0x56>
 8011c5a:	0798      	lsls	r0, r3, #30
 8011c5c:	bf49      	itett	mi
 8011c5e:	085b      	lsrmi	r3, r3, #1
 8011c60:	089b      	lsrpl	r3, r3, #2
 8011c62:	2001      	movmi	r0, #1
 8011c64:	600b      	strmi	r3, [r1, #0]
 8011c66:	bf5c      	itt	pl
 8011c68:	600b      	strpl	r3, [r1, #0]
 8011c6a:	2002      	movpl	r0, #2
 8011c6c:	4770      	bx	lr
 8011c6e:	b298      	uxth	r0, r3
 8011c70:	b9a8      	cbnz	r0, 8011c9e <__lo0bits+0x52>
 8011c72:	0c1b      	lsrs	r3, r3, #16
 8011c74:	2010      	movs	r0, #16
 8011c76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011c7a:	bf04      	itt	eq
 8011c7c:	0a1b      	lsreq	r3, r3, #8
 8011c7e:	3008      	addeq	r0, #8
 8011c80:	071a      	lsls	r2, r3, #28
 8011c82:	bf04      	itt	eq
 8011c84:	091b      	lsreq	r3, r3, #4
 8011c86:	3004      	addeq	r0, #4
 8011c88:	079a      	lsls	r2, r3, #30
 8011c8a:	bf04      	itt	eq
 8011c8c:	089b      	lsreq	r3, r3, #2
 8011c8e:	3002      	addeq	r0, #2
 8011c90:	07da      	lsls	r2, r3, #31
 8011c92:	d402      	bmi.n	8011c9a <__lo0bits+0x4e>
 8011c94:	085b      	lsrs	r3, r3, #1
 8011c96:	d006      	beq.n	8011ca6 <__lo0bits+0x5a>
 8011c98:	3001      	adds	r0, #1
 8011c9a:	600b      	str	r3, [r1, #0]
 8011c9c:	4770      	bx	lr
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	e7e9      	b.n	8011c76 <__lo0bits+0x2a>
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	4770      	bx	lr
 8011ca6:	2020      	movs	r0, #32
 8011ca8:	4770      	bx	lr

08011caa <__i2b>:
 8011caa:	b510      	push	{r4, lr}
 8011cac:	460c      	mov	r4, r1
 8011cae:	2101      	movs	r1, #1
 8011cb0:	f7ff ff27 	bl	8011b02 <_Balloc>
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	6144      	str	r4, [r0, #20]
 8011cb8:	6102      	str	r2, [r0, #16]
 8011cba:	bd10      	pop	{r4, pc}

08011cbc <__multiply>:
 8011cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc0:	4614      	mov	r4, r2
 8011cc2:	690a      	ldr	r2, [r1, #16]
 8011cc4:	6923      	ldr	r3, [r4, #16]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	bfb8      	it	lt
 8011cca:	460b      	movlt	r3, r1
 8011ccc:	4688      	mov	r8, r1
 8011cce:	bfbc      	itt	lt
 8011cd0:	46a0      	movlt	r8, r4
 8011cd2:	461c      	movlt	r4, r3
 8011cd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011cd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011cdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ce4:	eb07 0609 	add.w	r6, r7, r9
 8011ce8:	42b3      	cmp	r3, r6
 8011cea:	bfb8      	it	lt
 8011cec:	3101      	addlt	r1, #1
 8011cee:	f7ff ff08 	bl	8011b02 <_Balloc>
 8011cf2:	f100 0514 	add.w	r5, r0, #20
 8011cf6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	4573      	cmp	r3, lr
 8011d00:	d316      	bcc.n	8011d30 <__multiply+0x74>
 8011d02:	f104 0214 	add.w	r2, r4, #20
 8011d06:	f108 0114 	add.w	r1, r8, #20
 8011d0a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011d0e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	9b00      	ldr	r3, [sp, #0]
 8011d16:	9201      	str	r2, [sp, #4]
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d80c      	bhi.n	8011d36 <__multiply+0x7a>
 8011d1c:	2e00      	cmp	r6, #0
 8011d1e:	dd03      	ble.n	8011d28 <__multiply+0x6c>
 8011d20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d05d      	beq.n	8011de4 <__multiply+0x128>
 8011d28:	6106      	str	r6, [r0, #16]
 8011d2a:	b003      	add	sp, #12
 8011d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d30:	f843 2b04 	str.w	r2, [r3], #4
 8011d34:	e7e3      	b.n	8011cfe <__multiply+0x42>
 8011d36:	f8b2 b000 	ldrh.w	fp, [r2]
 8011d3a:	f1bb 0f00 	cmp.w	fp, #0
 8011d3e:	d023      	beq.n	8011d88 <__multiply+0xcc>
 8011d40:	4689      	mov	r9, r1
 8011d42:	46ac      	mov	ip, r5
 8011d44:	f04f 0800 	mov.w	r8, #0
 8011d48:	f859 4b04 	ldr.w	r4, [r9], #4
 8011d4c:	f8dc a000 	ldr.w	sl, [ip]
 8011d50:	b2a3      	uxth	r3, r4
 8011d52:	fa1f fa8a 	uxth.w	sl, sl
 8011d56:	fb0b a303 	mla	r3, fp, r3, sl
 8011d5a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011d5e:	f8dc 4000 	ldr.w	r4, [ip]
 8011d62:	4443      	add	r3, r8
 8011d64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011d68:	fb0b 840a 	mla	r4, fp, sl, r8
 8011d6c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011d70:	46e2      	mov	sl, ip
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011d78:	454f      	cmp	r7, r9
 8011d7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011d7e:	f84a 3b04 	str.w	r3, [sl], #4
 8011d82:	d82b      	bhi.n	8011ddc <__multiply+0x120>
 8011d84:	f8cc 8004 	str.w	r8, [ip, #4]
 8011d88:	9b01      	ldr	r3, [sp, #4]
 8011d8a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011d8e:	3204      	adds	r2, #4
 8011d90:	f1ba 0f00 	cmp.w	sl, #0
 8011d94:	d020      	beq.n	8011dd8 <__multiply+0x11c>
 8011d96:	682b      	ldr	r3, [r5, #0]
 8011d98:	4689      	mov	r9, r1
 8011d9a:	46a8      	mov	r8, r5
 8011d9c:	f04f 0b00 	mov.w	fp, #0
 8011da0:	f8b9 c000 	ldrh.w	ip, [r9]
 8011da4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011da8:	fb0a 440c 	mla	r4, sl, ip, r4
 8011dac:	445c      	add	r4, fp
 8011dae:	46c4      	mov	ip, r8
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011db6:	f84c 3b04 	str.w	r3, [ip], #4
 8011dba:	f859 3b04 	ldr.w	r3, [r9], #4
 8011dbe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011dc2:	0c1b      	lsrs	r3, r3, #16
 8011dc4:	fb0a b303 	mla	r3, sl, r3, fp
 8011dc8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011dcc:	454f      	cmp	r7, r9
 8011dce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011dd2:	d805      	bhi.n	8011de0 <__multiply+0x124>
 8011dd4:	f8c8 3004 	str.w	r3, [r8, #4]
 8011dd8:	3504      	adds	r5, #4
 8011dda:	e79b      	b.n	8011d14 <__multiply+0x58>
 8011ddc:	46d4      	mov	ip, sl
 8011dde:	e7b3      	b.n	8011d48 <__multiply+0x8c>
 8011de0:	46e0      	mov	r8, ip
 8011de2:	e7dd      	b.n	8011da0 <__multiply+0xe4>
 8011de4:	3e01      	subs	r6, #1
 8011de6:	e799      	b.n	8011d1c <__multiply+0x60>

08011de8 <__pow5mult>:
 8011de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dec:	4615      	mov	r5, r2
 8011dee:	f012 0203 	ands.w	r2, r2, #3
 8011df2:	4606      	mov	r6, r0
 8011df4:	460f      	mov	r7, r1
 8011df6:	d007      	beq.n	8011e08 <__pow5mult+0x20>
 8011df8:	3a01      	subs	r2, #1
 8011dfa:	4c21      	ldr	r4, [pc, #132]	; (8011e80 <__pow5mult+0x98>)
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e02:	f7ff fec9 	bl	8011b98 <__multadd>
 8011e06:	4607      	mov	r7, r0
 8011e08:	10ad      	asrs	r5, r5, #2
 8011e0a:	d035      	beq.n	8011e78 <__pow5mult+0x90>
 8011e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011e0e:	b93c      	cbnz	r4, 8011e20 <__pow5mult+0x38>
 8011e10:	2010      	movs	r0, #16
 8011e12:	f7fe f865 	bl	800fee0 <malloc>
 8011e16:	6270      	str	r0, [r6, #36]	; 0x24
 8011e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e1c:	6004      	str	r4, [r0, #0]
 8011e1e:	60c4      	str	r4, [r0, #12]
 8011e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e28:	b94c      	cbnz	r4, 8011e3e <__pow5mult+0x56>
 8011e2a:	f240 2171 	movw	r1, #625	; 0x271
 8011e2e:	4630      	mov	r0, r6
 8011e30:	f7ff ff3b 	bl	8011caa <__i2b>
 8011e34:	2300      	movs	r3, #0
 8011e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	6003      	str	r3, [r0, #0]
 8011e3e:	f04f 0800 	mov.w	r8, #0
 8011e42:	07eb      	lsls	r3, r5, #31
 8011e44:	d50a      	bpl.n	8011e5c <__pow5mult+0x74>
 8011e46:	4639      	mov	r1, r7
 8011e48:	4622      	mov	r2, r4
 8011e4a:	4630      	mov	r0, r6
 8011e4c:	f7ff ff36 	bl	8011cbc <__multiply>
 8011e50:	4639      	mov	r1, r7
 8011e52:	4681      	mov	r9, r0
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7ff fe88 	bl	8011b6a <_Bfree>
 8011e5a:	464f      	mov	r7, r9
 8011e5c:	106d      	asrs	r5, r5, #1
 8011e5e:	d00b      	beq.n	8011e78 <__pow5mult+0x90>
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	b938      	cbnz	r0, 8011e74 <__pow5mult+0x8c>
 8011e64:	4622      	mov	r2, r4
 8011e66:	4621      	mov	r1, r4
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f7ff ff27 	bl	8011cbc <__multiply>
 8011e6e:	6020      	str	r0, [r4, #0]
 8011e70:	f8c0 8000 	str.w	r8, [r0]
 8011e74:	4604      	mov	r4, r0
 8011e76:	e7e4      	b.n	8011e42 <__pow5mult+0x5a>
 8011e78:	4638      	mov	r0, r7
 8011e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e7e:	bf00      	nop
 8011e80:	08014208 	.word	0x08014208

08011e84 <__lshift>:
 8011e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e88:	460c      	mov	r4, r1
 8011e8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	6849      	ldr	r1, [r1, #4]
 8011e92:	eb0a 0903 	add.w	r9, sl, r3
 8011e96:	68a3      	ldr	r3, [r4, #8]
 8011e98:	4607      	mov	r7, r0
 8011e9a:	4616      	mov	r6, r2
 8011e9c:	f109 0501 	add.w	r5, r9, #1
 8011ea0:	42ab      	cmp	r3, r5
 8011ea2:	db32      	blt.n	8011f0a <__lshift+0x86>
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	f7ff fe2c 	bl	8011b02 <_Balloc>
 8011eaa:	2300      	movs	r3, #0
 8011eac:	4680      	mov	r8, r0
 8011eae:	f100 0114 	add.w	r1, r0, #20
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	4553      	cmp	r3, sl
 8011eb6:	db2b      	blt.n	8011f10 <__lshift+0x8c>
 8011eb8:	6920      	ldr	r0, [r4, #16]
 8011eba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ebe:	f104 0314 	add.w	r3, r4, #20
 8011ec2:	f016 021f 	ands.w	r2, r6, #31
 8011ec6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011eca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ece:	d025      	beq.n	8011f1c <__lshift+0x98>
 8011ed0:	f1c2 0e20 	rsb	lr, r2, #32
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	681e      	ldr	r6, [r3, #0]
 8011ed8:	468a      	mov	sl, r1
 8011eda:	4096      	lsls	r6, r2
 8011edc:	4330      	orrs	r0, r6
 8011ede:	f84a 0b04 	str.w	r0, [sl], #4
 8011ee2:	f853 0b04 	ldr.w	r0, [r3], #4
 8011ee6:	459c      	cmp	ip, r3
 8011ee8:	fa20 f00e 	lsr.w	r0, r0, lr
 8011eec:	d814      	bhi.n	8011f18 <__lshift+0x94>
 8011eee:	6048      	str	r0, [r1, #4]
 8011ef0:	b108      	cbz	r0, 8011ef6 <__lshift+0x72>
 8011ef2:	f109 0502 	add.w	r5, r9, #2
 8011ef6:	3d01      	subs	r5, #1
 8011ef8:	4638      	mov	r0, r7
 8011efa:	f8c8 5010 	str.w	r5, [r8, #16]
 8011efe:	4621      	mov	r1, r4
 8011f00:	f7ff fe33 	bl	8011b6a <_Bfree>
 8011f04:	4640      	mov	r0, r8
 8011f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f0a:	3101      	adds	r1, #1
 8011f0c:	005b      	lsls	r3, r3, #1
 8011f0e:	e7c7      	b.n	8011ea0 <__lshift+0x1c>
 8011f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011f14:	3301      	adds	r3, #1
 8011f16:	e7cd      	b.n	8011eb4 <__lshift+0x30>
 8011f18:	4651      	mov	r1, sl
 8011f1a:	e7dc      	b.n	8011ed6 <__lshift+0x52>
 8011f1c:	3904      	subs	r1, #4
 8011f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f22:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f26:	459c      	cmp	ip, r3
 8011f28:	d8f9      	bhi.n	8011f1e <__lshift+0x9a>
 8011f2a:	e7e4      	b.n	8011ef6 <__lshift+0x72>

08011f2c <__mcmp>:
 8011f2c:	6903      	ldr	r3, [r0, #16]
 8011f2e:	690a      	ldr	r2, [r1, #16]
 8011f30:	1a9b      	subs	r3, r3, r2
 8011f32:	b530      	push	{r4, r5, lr}
 8011f34:	d10c      	bne.n	8011f50 <__mcmp+0x24>
 8011f36:	0092      	lsls	r2, r2, #2
 8011f38:	3014      	adds	r0, #20
 8011f3a:	3114      	adds	r1, #20
 8011f3c:	1884      	adds	r4, r0, r2
 8011f3e:	4411      	add	r1, r2
 8011f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f48:	4295      	cmp	r5, r2
 8011f4a:	d003      	beq.n	8011f54 <__mcmp+0x28>
 8011f4c:	d305      	bcc.n	8011f5a <__mcmp+0x2e>
 8011f4e:	2301      	movs	r3, #1
 8011f50:	4618      	mov	r0, r3
 8011f52:	bd30      	pop	{r4, r5, pc}
 8011f54:	42a0      	cmp	r0, r4
 8011f56:	d3f3      	bcc.n	8011f40 <__mcmp+0x14>
 8011f58:	e7fa      	b.n	8011f50 <__mcmp+0x24>
 8011f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f5e:	e7f7      	b.n	8011f50 <__mcmp+0x24>

08011f60 <__mdiff>:
 8011f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f64:	460d      	mov	r5, r1
 8011f66:	4607      	mov	r7, r0
 8011f68:	4611      	mov	r1, r2
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	4614      	mov	r4, r2
 8011f6e:	f7ff ffdd 	bl	8011f2c <__mcmp>
 8011f72:	1e06      	subs	r6, r0, #0
 8011f74:	d108      	bne.n	8011f88 <__mdiff+0x28>
 8011f76:	4631      	mov	r1, r6
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7ff fdc2 	bl	8011b02 <_Balloc>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f88:	bfa4      	itt	ge
 8011f8a:	4623      	movge	r3, r4
 8011f8c:	462c      	movge	r4, r5
 8011f8e:	4638      	mov	r0, r7
 8011f90:	6861      	ldr	r1, [r4, #4]
 8011f92:	bfa6      	itte	ge
 8011f94:	461d      	movge	r5, r3
 8011f96:	2600      	movge	r6, #0
 8011f98:	2601      	movlt	r6, #1
 8011f9a:	f7ff fdb2 	bl	8011b02 <_Balloc>
 8011f9e:	692b      	ldr	r3, [r5, #16]
 8011fa0:	60c6      	str	r6, [r0, #12]
 8011fa2:	6926      	ldr	r6, [r4, #16]
 8011fa4:	f105 0914 	add.w	r9, r5, #20
 8011fa8:	f104 0214 	add.w	r2, r4, #20
 8011fac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011fb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011fb4:	f100 0514 	add.w	r5, r0, #20
 8011fb8:	f04f 0e00 	mov.w	lr, #0
 8011fbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8011fc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8011fc4:	fa1e f18a 	uxtah	r1, lr, sl
 8011fc8:	b2a3      	uxth	r3, r4
 8011fca:	1ac9      	subs	r1, r1, r3
 8011fcc:	0c23      	lsrs	r3, r4, #16
 8011fce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011fd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011fd6:	b289      	uxth	r1, r1
 8011fd8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011fdc:	45c8      	cmp	r8, r9
 8011fde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011fe2:	4694      	mov	ip, r2
 8011fe4:	f845 3b04 	str.w	r3, [r5], #4
 8011fe8:	d8e8      	bhi.n	8011fbc <__mdiff+0x5c>
 8011fea:	45bc      	cmp	ip, r7
 8011fec:	d304      	bcc.n	8011ff8 <__mdiff+0x98>
 8011fee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011ff2:	b183      	cbz	r3, 8012016 <__mdiff+0xb6>
 8011ff4:	6106      	str	r6, [r0, #16]
 8011ff6:	e7c5      	b.n	8011f84 <__mdiff+0x24>
 8011ff8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011ffc:	fa1e f381 	uxtah	r3, lr, r1
 8012000:	141a      	asrs	r2, r3, #16
 8012002:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012006:	b29b      	uxth	r3, r3
 8012008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801200c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012010:	f845 3b04 	str.w	r3, [r5], #4
 8012014:	e7e9      	b.n	8011fea <__mdiff+0x8a>
 8012016:	3e01      	subs	r6, #1
 8012018:	e7e9      	b.n	8011fee <__mdiff+0x8e>

0801201a <__d2b>:
 801201a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801201e:	460e      	mov	r6, r1
 8012020:	2101      	movs	r1, #1
 8012022:	ec59 8b10 	vmov	r8, r9, d0
 8012026:	4615      	mov	r5, r2
 8012028:	f7ff fd6b 	bl	8011b02 <_Balloc>
 801202c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012030:	4607      	mov	r7, r0
 8012032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012036:	bb34      	cbnz	r4, 8012086 <__d2b+0x6c>
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	f1b8 0300 	subs.w	r3, r8, #0
 801203e:	d027      	beq.n	8012090 <__d2b+0x76>
 8012040:	a802      	add	r0, sp, #8
 8012042:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012046:	f7ff fe01 	bl	8011c4c <__lo0bits>
 801204a:	9900      	ldr	r1, [sp, #0]
 801204c:	b1f0      	cbz	r0, 801208c <__d2b+0x72>
 801204e:	9a01      	ldr	r2, [sp, #4]
 8012050:	f1c0 0320 	rsb	r3, r0, #32
 8012054:	fa02 f303 	lsl.w	r3, r2, r3
 8012058:	430b      	orrs	r3, r1
 801205a:	40c2      	lsrs	r2, r0
 801205c:	617b      	str	r3, [r7, #20]
 801205e:	9201      	str	r2, [sp, #4]
 8012060:	9b01      	ldr	r3, [sp, #4]
 8012062:	61bb      	str	r3, [r7, #24]
 8012064:	2b00      	cmp	r3, #0
 8012066:	bf14      	ite	ne
 8012068:	2102      	movne	r1, #2
 801206a:	2101      	moveq	r1, #1
 801206c:	6139      	str	r1, [r7, #16]
 801206e:	b1c4      	cbz	r4, 80120a2 <__d2b+0x88>
 8012070:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012074:	4404      	add	r4, r0
 8012076:	6034      	str	r4, [r6, #0]
 8012078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801207c:	6028      	str	r0, [r5, #0]
 801207e:	4638      	mov	r0, r7
 8012080:	b003      	add	sp, #12
 8012082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801208a:	e7d5      	b.n	8012038 <__d2b+0x1e>
 801208c:	6179      	str	r1, [r7, #20]
 801208e:	e7e7      	b.n	8012060 <__d2b+0x46>
 8012090:	a801      	add	r0, sp, #4
 8012092:	f7ff fddb 	bl	8011c4c <__lo0bits>
 8012096:	9b01      	ldr	r3, [sp, #4]
 8012098:	617b      	str	r3, [r7, #20]
 801209a:	2101      	movs	r1, #1
 801209c:	6139      	str	r1, [r7, #16]
 801209e:	3020      	adds	r0, #32
 80120a0:	e7e5      	b.n	801206e <__d2b+0x54>
 80120a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80120a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120aa:	6030      	str	r0, [r6, #0]
 80120ac:	6918      	ldr	r0, [r3, #16]
 80120ae:	f7ff fdae 	bl	8011c0e <__hi0bits>
 80120b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80120b6:	e7e1      	b.n	801207c <__d2b+0x62>

080120b8 <_calloc_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	fb02 f401 	mul.w	r4, r2, r1
 80120be:	4621      	mov	r1, r4
 80120c0:	f7fd ff6c 	bl	800ff9c <_malloc_r>
 80120c4:	4605      	mov	r5, r0
 80120c6:	b118      	cbz	r0, 80120d0 <_calloc_r+0x18>
 80120c8:	4622      	mov	r2, r4
 80120ca:	2100      	movs	r1, #0
 80120cc:	f7fd ff10 	bl	800fef0 <memset>
 80120d0:	4628      	mov	r0, r5
 80120d2:	bd38      	pop	{r3, r4, r5, pc}

080120d4 <__sfputc_r>:
 80120d4:	6893      	ldr	r3, [r2, #8]
 80120d6:	3b01      	subs	r3, #1
 80120d8:	2b00      	cmp	r3, #0
 80120da:	b410      	push	{r4}
 80120dc:	6093      	str	r3, [r2, #8]
 80120de:	da08      	bge.n	80120f2 <__sfputc_r+0x1e>
 80120e0:	6994      	ldr	r4, [r2, #24]
 80120e2:	42a3      	cmp	r3, r4
 80120e4:	db01      	blt.n	80120ea <__sfputc_r+0x16>
 80120e6:	290a      	cmp	r1, #10
 80120e8:	d103      	bne.n	80120f2 <__sfputc_r+0x1e>
 80120ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ee:	f7fe bc77 	b.w	80109e0 <__swbuf_r>
 80120f2:	6813      	ldr	r3, [r2, #0]
 80120f4:	1c58      	adds	r0, r3, #1
 80120f6:	6010      	str	r0, [r2, #0]
 80120f8:	7019      	strb	r1, [r3, #0]
 80120fa:	4608      	mov	r0, r1
 80120fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012100:	4770      	bx	lr

08012102 <__sfputs_r>:
 8012102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012104:	4606      	mov	r6, r0
 8012106:	460f      	mov	r7, r1
 8012108:	4614      	mov	r4, r2
 801210a:	18d5      	adds	r5, r2, r3
 801210c:	42ac      	cmp	r4, r5
 801210e:	d101      	bne.n	8012114 <__sfputs_r+0x12>
 8012110:	2000      	movs	r0, #0
 8012112:	e007      	b.n	8012124 <__sfputs_r+0x22>
 8012114:	463a      	mov	r2, r7
 8012116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211a:	4630      	mov	r0, r6
 801211c:	f7ff ffda 	bl	80120d4 <__sfputc_r>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	d1f3      	bne.n	801210c <__sfputs_r+0xa>
 8012124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012128 <_vfiprintf_r>:
 8012128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	460c      	mov	r4, r1
 801212e:	b09d      	sub	sp, #116	; 0x74
 8012130:	4617      	mov	r7, r2
 8012132:	461d      	mov	r5, r3
 8012134:	4606      	mov	r6, r0
 8012136:	b118      	cbz	r0, 8012140 <_vfiprintf_r+0x18>
 8012138:	6983      	ldr	r3, [r0, #24]
 801213a:	b90b      	cbnz	r3, 8012140 <_vfiprintf_r+0x18>
 801213c:	f7ff fbd8 	bl	80118f0 <__sinit>
 8012140:	4b7c      	ldr	r3, [pc, #496]	; (8012334 <_vfiprintf_r+0x20c>)
 8012142:	429c      	cmp	r4, r3
 8012144:	d158      	bne.n	80121f8 <_vfiprintf_r+0xd0>
 8012146:	6874      	ldr	r4, [r6, #4]
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	0718      	lsls	r0, r3, #28
 801214c:	d55e      	bpl.n	801220c <_vfiprintf_r+0xe4>
 801214e:	6923      	ldr	r3, [r4, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d05b      	beq.n	801220c <_vfiprintf_r+0xe4>
 8012154:	2300      	movs	r3, #0
 8012156:	9309      	str	r3, [sp, #36]	; 0x24
 8012158:	2320      	movs	r3, #32
 801215a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801215e:	2330      	movs	r3, #48	; 0x30
 8012160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012164:	9503      	str	r5, [sp, #12]
 8012166:	f04f 0b01 	mov.w	fp, #1
 801216a:	46b8      	mov	r8, r7
 801216c:	4645      	mov	r5, r8
 801216e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012172:	b10b      	cbz	r3, 8012178 <_vfiprintf_r+0x50>
 8012174:	2b25      	cmp	r3, #37	; 0x25
 8012176:	d154      	bne.n	8012222 <_vfiprintf_r+0xfa>
 8012178:	ebb8 0a07 	subs.w	sl, r8, r7
 801217c:	d00b      	beq.n	8012196 <_vfiprintf_r+0x6e>
 801217e:	4653      	mov	r3, sl
 8012180:	463a      	mov	r2, r7
 8012182:	4621      	mov	r1, r4
 8012184:	4630      	mov	r0, r6
 8012186:	f7ff ffbc 	bl	8012102 <__sfputs_r>
 801218a:	3001      	adds	r0, #1
 801218c:	f000 80c2 	beq.w	8012314 <_vfiprintf_r+0x1ec>
 8012190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012192:	4453      	add	r3, sl
 8012194:	9309      	str	r3, [sp, #36]	; 0x24
 8012196:	f898 3000 	ldrb.w	r3, [r8]
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 80ba 	beq.w	8012314 <_vfiprintf_r+0x1ec>
 80121a0:	2300      	movs	r3, #0
 80121a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121aa:	9304      	str	r3, [sp, #16]
 80121ac:	9307      	str	r3, [sp, #28]
 80121ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121b2:	931a      	str	r3, [sp, #104]	; 0x68
 80121b4:	46a8      	mov	r8, r5
 80121b6:	2205      	movs	r2, #5
 80121b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80121bc:	485e      	ldr	r0, [pc, #376]	; (8012338 <_vfiprintf_r+0x210>)
 80121be:	f7ee f897 	bl	80002f0 <memchr>
 80121c2:	9b04      	ldr	r3, [sp, #16]
 80121c4:	bb78      	cbnz	r0, 8012226 <_vfiprintf_r+0xfe>
 80121c6:	06d9      	lsls	r1, r3, #27
 80121c8:	bf44      	itt	mi
 80121ca:	2220      	movmi	r2, #32
 80121cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121d0:	071a      	lsls	r2, r3, #28
 80121d2:	bf44      	itt	mi
 80121d4:	222b      	movmi	r2, #43	; 0x2b
 80121d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121da:	782a      	ldrb	r2, [r5, #0]
 80121dc:	2a2a      	cmp	r2, #42	; 0x2a
 80121de:	d02a      	beq.n	8012236 <_vfiprintf_r+0x10e>
 80121e0:	9a07      	ldr	r2, [sp, #28]
 80121e2:	46a8      	mov	r8, r5
 80121e4:	2000      	movs	r0, #0
 80121e6:	250a      	movs	r5, #10
 80121e8:	4641      	mov	r1, r8
 80121ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121ee:	3b30      	subs	r3, #48	; 0x30
 80121f0:	2b09      	cmp	r3, #9
 80121f2:	d969      	bls.n	80122c8 <_vfiprintf_r+0x1a0>
 80121f4:	b360      	cbz	r0, 8012250 <_vfiprintf_r+0x128>
 80121f6:	e024      	b.n	8012242 <_vfiprintf_r+0x11a>
 80121f8:	4b50      	ldr	r3, [pc, #320]	; (801233c <_vfiprintf_r+0x214>)
 80121fa:	429c      	cmp	r4, r3
 80121fc:	d101      	bne.n	8012202 <_vfiprintf_r+0xda>
 80121fe:	68b4      	ldr	r4, [r6, #8]
 8012200:	e7a2      	b.n	8012148 <_vfiprintf_r+0x20>
 8012202:	4b4f      	ldr	r3, [pc, #316]	; (8012340 <_vfiprintf_r+0x218>)
 8012204:	429c      	cmp	r4, r3
 8012206:	bf08      	it	eq
 8012208:	68f4      	ldreq	r4, [r6, #12]
 801220a:	e79d      	b.n	8012148 <_vfiprintf_r+0x20>
 801220c:	4621      	mov	r1, r4
 801220e:	4630      	mov	r0, r6
 8012210:	f7fe fc38 	bl	8010a84 <__swsetup_r>
 8012214:	2800      	cmp	r0, #0
 8012216:	d09d      	beq.n	8012154 <_vfiprintf_r+0x2c>
 8012218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801221c:	b01d      	add	sp, #116	; 0x74
 801221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012222:	46a8      	mov	r8, r5
 8012224:	e7a2      	b.n	801216c <_vfiprintf_r+0x44>
 8012226:	4a44      	ldr	r2, [pc, #272]	; (8012338 <_vfiprintf_r+0x210>)
 8012228:	1a80      	subs	r0, r0, r2
 801222a:	fa0b f000 	lsl.w	r0, fp, r0
 801222e:	4318      	orrs	r0, r3
 8012230:	9004      	str	r0, [sp, #16]
 8012232:	4645      	mov	r5, r8
 8012234:	e7be      	b.n	80121b4 <_vfiprintf_r+0x8c>
 8012236:	9a03      	ldr	r2, [sp, #12]
 8012238:	1d11      	adds	r1, r2, #4
 801223a:	6812      	ldr	r2, [r2, #0]
 801223c:	9103      	str	r1, [sp, #12]
 801223e:	2a00      	cmp	r2, #0
 8012240:	db01      	blt.n	8012246 <_vfiprintf_r+0x11e>
 8012242:	9207      	str	r2, [sp, #28]
 8012244:	e004      	b.n	8012250 <_vfiprintf_r+0x128>
 8012246:	4252      	negs	r2, r2
 8012248:	f043 0302 	orr.w	r3, r3, #2
 801224c:	9207      	str	r2, [sp, #28]
 801224e:	9304      	str	r3, [sp, #16]
 8012250:	f898 3000 	ldrb.w	r3, [r8]
 8012254:	2b2e      	cmp	r3, #46	; 0x2e
 8012256:	d10e      	bne.n	8012276 <_vfiprintf_r+0x14e>
 8012258:	f898 3001 	ldrb.w	r3, [r8, #1]
 801225c:	2b2a      	cmp	r3, #42	; 0x2a
 801225e:	d138      	bne.n	80122d2 <_vfiprintf_r+0x1aa>
 8012260:	9b03      	ldr	r3, [sp, #12]
 8012262:	1d1a      	adds	r2, r3, #4
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	9203      	str	r2, [sp, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	bfb8      	it	lt
 801226c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012270:	f108 0802 	add.w	r8, r8, #2
 8012274:	9305      	str	r3, [sp, #20]
 8012276:	4d33      	ldr	r5, [pc, #204]	; (8012344 <_vfiprintf_r+0x21c>)
 8012278:	f898 1000 	ldrb.w	r1, [r8]
 801227c:	2203      	movs	r2, #3
 801227e:	4628      	mov	r0, r5
 8012280:	f7ee f836 	bl	80002f0 <memchr>
 8012284:	b140      	cbz	r0, 8012298 <_vfiprintf_r+0x170>
 8012286:	2340      	movs	r3, #64	; 0x40
 8012288:	1b40      	subs	r0, r0, r5
 801228a:	fa03 f000 	lsl.w	r0, r3, r0
 801228e:	9b04      	ldr	r3, [sp, #16]
 8012290:	4303      	orrs	r3, r0
 8012292:	f108 0801 	add.w	r8, r8, #1
 8012296:	9304      	str	r3, [sp, #16]
 8012298:	f898 1000 	ldrb.w	r1, [r8]
 801229c:	482a      	ldr	r0, [pc, #168]	; (8012348 <_vfiprintf_r+0x220>)
 801229e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122a2:	2206      	movs	r2, #6
 80122a4:	f108 0701 	add.w	r7, r8, #1
 80122a8:	f7ee f822 	bl	80002f0 <memchr>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d037      	beq.n	8012320 <_vfiprintf_r+0x1f8>
 80122b0:	4b26      	ldr	r3, [pc, #152]	; (801234c <_vfiprintf_r+0x224>)
 80122b2:	bb1b      	cbnz	r3, 80122fc <_vfiprintf_r+0x1d4>
 80122b4:	9b03      	ldr	r3, [sp, #12]
 80122b6:	3307      	adds	r3, #7
 80122b8:	f023 0307 	bic.w	r3, r3, #7
 80122bc:	3308      	adds	r3, #8
 80122be:	9303      	str	r3, [sp, #12]
 80122c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c2:	444b      	add	r3, r9
 80122c4:	9309      	str	r3, [sp, #36]	; 0x24
 80122c6:	e750      	b.n	801216a <_vfiprintf_r+0x42>
 80122c8:	fb05 3202 	mla	r2, r5, r2, r3
 80122cc:	2001      	movs	r0, #1
 80122ce:	4688      	mov	r8, r1
 80122d0:	e78a      	b.n	80121e8 <_vfiprintf_r+0xc0>
 80122d2:	2300      	movs	r3, #0
 80122d4:	f108 0801 	add.w	r8, r8, #1
 80122d8:	9305      	str	r3, [sp, #20]
 80122da:	4619      	mov	r1, r3
 80122dc:	250a      	movs	r5, #10
 80122de:	4640      	mov	r0, r8
 80122e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122e4:	3a30      	subs	r2, #48	; 0x30
 80122e6:	2a09      	cmp	r2, #9
 80122e8:	d903      	bls.n	80122f2 <_vfiprintf_r+0x1ca>
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d0c3      	beq.n	8012276 <_vfiprintf_r+0x14e>
 80122ee:	9105      	str	r1, [sp, #20]
 80122f0:	e7c1      	b.n	8012276 <_vfiprintf_r+0x14e>
 80122f2:	fb05 2101 	mla	r1, r5, r1, r2
 80122f6:	2301      	movs	r3, #1
 80122f8:	4680      	mov	r8, r0
 80122fa:	e7f0      	b.n	80122de <_vfiprintf_r+0x1b6>
 80122fc:	ab03      	add	r3, sp, #12
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	4622      	mov	r2, r4
 8012302:	4b13      	ldr	r3, [pc, #76]	; (8012350 <_vfiprintf_r+0x228>)
 8012304:	a904      	add	r1, sp, #16
 8012306:	4630      	mov	r0, r6
 8012308:	f7fd ff2a 	bl	8010160 <_printf_float>
 801230c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012310:	4681      	mov	r9, r0
 8012312:	d1d5      	bne.n	80122c0 <_vfiprintf_r+0x198>
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	065b      	lsls	r3, r3, #25
 8012318:	f53f af7e 	bmi.w	8012218 <_vfiprintf_r+0xf0>
 801231c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801231e:	e77d      	b.n	801221c <_vfiprintf_r+0xf4>
 8012320:	ab03      	add	r3, sp, #12
 8012322:	9300      	str	r3, [sp, #0]
 8012324:	4622      	mov	r2, r4
 8012326:	4b0a      	ldr	r3, [pc, #40]	; (8012350 <_vfiprintf_r+0x228>)
 8012328:	a904      	add	r1, sp, #16
 801232a:	4630      	mov	r0, r6
 801232c:	f7fe f9ba 	bl	80106a4 <_printf_i>
 8012330:	e7ec      	b.n	801230c <_vfiprintf_r+0x1e4>
 8012332:	bf00      	nop
 8012334:	080140d8 	.word	0x080140d8
 8012338:	08014214 	.word	0x08014214
 801233c:	080140f8 	.word	0x080140f8
 8012340:	080140b8 	.word	0x080140b8
 8012344:	0801421a 	.word	0x0801421a
 8012348:	0801421e 	.word	0x0801421e
 801234c:	08010161 	.word	0x08010161
 8012350:	08012103 	.word	0x08012103

08012354 <__sread>:
 8012354:	b510      	push	{r4, lr}
 8012356:	460c      	mov	r4, r1
 8012358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801235c:	f000 f8a6 	bl	80124ac <_read_r>
 8012360:	2800      	cmp	r0, #0
 8012362:	bfab      	itete	ge
 8012364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012366:	89a3      	ldrhlt	r3, [r4, #12]
 8012368:	181b      	addge	r3, r3, r0
 801236a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801236e:	bfac      	ite	ge
 8012370:	6563      	strge	r3, [r4, #84]	; 0x54
 8012372:	81a3      	strhlt	r3, [r4, #12]
 8012374:	bd10      	pop	{r4, pc}

08012376 <__swrite>:
 8012376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237a:	461f      	mov	r7, r3
 801237c:	898b      	ldrh	r3, [r1, #12]
 801237e:	05db      	lsls	r3, r3, #23
 8012380:	4605      	mov	r5, r0
 8012382:	460c      	mov	r4, r1
 8012384:	4616      	mov	r6, r2
 8012386:	d505      	bpl.n	8012394 <__swrite+0x1e>
 8012388:	2302      	movs	r3, #2
 801238a:	2200      	movs	r2, #0
 801238c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012390:	f000 f868 	bl	8012464 <_lseek_r>
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801239a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801239e:	81a3      	strh	r3, [r4, #12]
 80123a0:	4632      	mov	r2, r6
 80123a2:	463b      	mov	r3, r7
 80123a4:	4628      	mov	r0, r5
 80123a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123aa:	f000 b817 	b.w	80123dc <_write_r>

080123ae <__sseek>:
 80123ae:	b510      	push	{r4, lr}
 80123b0:	460c      	mov	r4, r1
 80123b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b6:	f000 f855 	bl	8012464 <_lseek_r>
 80123ba:	1c43      	adds	r3, r0, #1
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	bf15      	itete	ne
 80123c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80123c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123ca:	81a3      	strheq	r3, [r4, #12]
 80123cc:	bf18      	it	ne
 80123ce:	81a3      	strhne	r3, [r4, #12]
 80123d0:	bd10      	pop	{r4, pc}

080123d2 <__sclose>:
 80123d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123d6:	f000 b813 	b.w	8012400 <_close_r>
	...

080123dc <_write_r>:
 80123dc:	b538      	push	{r3, r4, r5, lr}
 80123de:	4c07      	ldr	r4, [pc, #28]	; (80123fc <_write_r+0x20>)
 80123e0:	4605      	mov	r5, r0
 80123e2:	4608      	mov	r0, r1
 80123e4:	4611      	mov	r1, r2
 80123e6:	2200      	movs	r2, #0
 80123e8:	6022      	str	r2, [r4, #0]
 80123ea:	461a      	mov	r2, r3
 80123ec:	f7ee ff21 	bl	8001232 <_write>
 80123f0:	1c43      	adds	r3, r0, #1
 80123f2:	d102      	bne.n	80123fa <_write_r+0x1e>
 80123f4:	6823      	ldr	r3, [r4, #0]
 80123f6:	b103      	cbz	r3, 80123fa <_write_r+0x1e>
 80123f8:	602b      	str	r3, [r5, #0]
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	2400bdb4 	.word	0x2400bdb4

08012400 <_close_r>:
 8012400:	b538      	push	{r3, r4, r5, lr}
 8012402:	4c06      	ldr	r4, [pc, #24]	; (801241c <_close_r+0x1c>)
 8012404:	2300      	movs	r3, #0
 8012406:	4605      	mov	r5, r0
 8012408:	4608      	mov	r0, r1
 801240a:	6023      	str	r3, [r4, #0]
 801240c:	f7ee ff5a 	bl	80012c4 <_close>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_close_r+0x1a>
 8012414:	6823      	ldr	r3, [r4, #0]
 8012416:	b103      	cbz	r3, 801241a <_close_r+0x1a>
 8012418:	602b      	str	r3, [r5, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	2400bdb4 	.word	0x2400bdb4

08012420 <_fstat_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4c07      	ldr	r4, [pc, #28]	; (8012440 <_fstat_r+0x20>)
 8012424:	2300      	movs	r3, #0
 8012426:	4605      	mov	r5, r0
 8012428:	4608      	mov	r0, r1
 801242a:	4611      	mov	r1, r2
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	f7ee ff55 	bl	80012dc <_fstat>
 8012432:	1c43      	adds	r3, r0, #1
 8012434:	d102      	bne.n	801243c <_fstat_r+0x1c>
 8012436:	6823      	ldr	r3, [r4, #0]
 8012438:	b103      	cbz	r3, 801243c <_fstat_r+0x1c>
 801243a:	602b      	str	r3, [r5, #0]
 801243c:	bd38      	pop	{r3, r4, r5, pc}
 801243e:	bf00      	nop
 8012440:	2400bdb4 	.word	0x2400bdb4

08012444 <_isatty_r>:
 8012444:	b538      	push	{r3, r4, r5, lr}
 8012446:	4c06      	ldr	r4, [pc, #24]	; (8012460 <_isatty_r+0x1c>)
 8012448:	2300      	movs	r3, #0
 801244a:	4605      	mov	r5, r0
 801244c:	4608      	mov	r0, r1
 801244e:	6023      	str	r3, [r4, #0]
 8012450:	f7ee ff54 	bl	80012fc <_isatty>
 8012454:	1c43      	adds	r3, r0, #1
 8012456:	d102      	bne.n	801245e <_isatty_r+0x1a>
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	b103      	cbz	r3, 801245e <_isatty_r+0x1a>
 801245c:	602b      	str	r3, [r5, #0]
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	2400bdb4 	.word	0x2400bdb4

08012464 <_lseek_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4c07      	ldr	r4, [pc, #28]	; (8012484 <_lseek_r+0x20>)
 8012468:	4605      	mov	r5, r0
 801246a:	4608      	mov	r0, r1
 801246c:	4611      	mov	r1, r2
 801246e:	2200      	movs	r2, #0
 8012470:	6022      	str	r2, [r4, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	f7ee ff4d 	bl	8001312 <_lseek>
 8012478:	1c43      	adds	r3, r0, #1
 801247a:	d102      	bne.n	8012482 <_lseek_r+0x1e>
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	b103      	cbz	r3, 8012482 <_lseek_r+0x1e>
 8012480:	602b      	str	r3, [r5, #0]
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	2400bdb4 	.word	0x2400bdb4

08012488 <__ascii_mbtowc>:
 8012488:	b082      	sub	sp, #8
 801248a:	b901      	cbnz	r1, 801248e <__ascii_mbtowc+0x6>
 801248c:	a901      	add	r1, sp, #4
 801248e:	b142      	cbz	r2, 80124a2 <__ascii_mbtowc+0x1a>
 8012490:	b14b      	cbz	r3, 80124a6 <__ascii_mbtowc+0x1e>
 8012492:	7813      	ldrb	r3, [r2, #0]
 8012494:	600b      	str	r3, [r1, #0]
 8012496:	7812      	ldrb	r2, [r2, #0]
 8012498:	1c10      	adds	r0, r2, #0
 801249a:	bf18      	it	ne
 801249c:	2001      	movne	r0, #1
 801249e:	b002      	add	sp, #8
 80124a0:	4770      	bx	lr
 80124a2:	4610      	mov	r0, r2
 80124a4:	e7fb      	b.n	801249e <__ascii_mbtowc+0x16>
 80124a6:	f06f 0001 	mvn.w	r0, #1
 80124aa:	e7f8      	b.n	801249e <__ascii_mbtowc+0x16>

080124ac <_read_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4c07      	ldr	r4, [pc, #28]	; (80124cc <_read_r+0x20>)
 80124b0:	4605      	mov	r5, r0
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	2200      	movs	r2, #0
 80124b8:	6022      	str	r2, [r4, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f7ee fe9c 	bl	80011f8 <_read>
 80124c0:	1c43      	adds	r3, r0, #1
 80124c2:	d102      	bne.n	80124ca <_read_r+0x1e>
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	b103      	cbz	r3, 80124ca <_read_r+0x1e>
 80124c8:	602b      	str	r3, [r5, #0]
 80124ca:	bd38      	pop	{r3, r4, r5, pc}
 80124cc:	2400bdb4 	.word	0x2400bdb4

080124d0 <__ascii_wctomb>:
 80124d0:	b149      	cbz	r1, 80124e6 <__ascii_wctomb+0x16>
 80124d2:	2aff      	cmp	r2, #255	; 0xff
 80124d4:	bf85      	ittet	hi
 80124d6:	238a      	movhi	r3, #138	; 0x8a
 80124d8:	6003      	strhi	r3, [r0, #0]
 80124da:	700a      	strbls	r2, [r1, #0]
 80124dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80124e0:	bf98      	it	ls
 80124e2:	2001      	movls	r0, #1
 80124e4:	4770      	bx	lr
 80124e6:	4608      	mov	r0, r1
 80124e8:	4770      	bx	lr
 80124ea:	0000      	movs	r0, r0
 80124ec:	0000      	movs	r0, r0
	...

080124f0 <sin>:
 80124f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124f2:	eeb0 7b40 	vmov.f64	d7, d0
 80124f6:	ee17 3a90 	vmov	r3, s15
 80124fa:	4a19      	ldr	r2, [pc, #100]	; (8012560 <sin+0x70>)
 80124fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012500:	4293      	cmp	r3, r2
 8012502:	dc05      	bgt.n	8012510 <sin+0x20>
 8012504:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8012558 <sin+0x68>
 8012508:	2000      	movs	r0, #0
 801250a:	f001 f92d 	bl	8013768 <__kernel_sin>
 801250e:	e004      	b.n	801251a <sin+0x2a>
 8012510:	4a14      	ldr	r2, [pc, #80]	; (8012564 <sin+0x74>)
 8012512:	4293      	cmp	r3, r2
 8012514:	dd04      	ble.n	8012520 <sin+0x30>
 8012516:	ee30 0b40 	vsub.f64	d0, d0, d0
 801251a:	b005      	add	sp, #20
 801251c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012520:	4668      	mov	r0, sp
 8012522:	f000 fcd9 	bl	8012ed8 <__ieee754_rem_pio2>
 8012526:	f000 0003 	and.w	r0, r0, #3
 801252a:	2801      	cmp	r0, #1
 801252c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012530:	ed9d 0b00 	vldr	d0, [sp]
 8012534:	d004      	beq.n	8012540 <sin+0x50>
 8012536:	2802      	cmp	r0, #2
 8012538:	d005      	beq.n	8012546 <sin+0x56>
 801253a:	b950      	cbnz	r0, 8012552 <sin+0x62>
 801253c:	2001      	movs	r0, #1
 801253e:	e7e4      	b.n	801250a <sin+0x1a>
 8012540:	f000 fe0a 	bl	8013158 <__kernel_cos>
 8012544:	e7e9      	b.n	801251a <sin+0x2a>
 8012546:	2001      	movs	r0, #1
 8012548:	f001 f90e 	bl	8013768 <__kernel_sin>
 801254c:	eeb1 0b40 	vneg.f64	d0, d0
 8012550:	e7e3      	b.n	801251a <sin+0x2a>
 8012552:	f000 fe01 	bl	8013158 <__kernel_cos>
 8012556:	e7f9      	b.n	801254c <sin+0x5c>
	...
 8012560:	3fe921fb 	.word	0x3fe921fb
 8012564:	7fefffff 	.word	0x7fefffff

08012568 <pow>:
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	ed2d 8b0a 	vpush	{d8-d12}
 801256e:	eeb0 9b40 	vmov.f64	d9, d0
 8012572:	eeb0 8b41 	vmov.f64	d8, d1
 8012576:	4c8c      	ldr	r4, [pc, #560]	; (80127a8 <pow+0x240>)
 8012578:	b08a      	sub	sp, #40	; 0x28
 801257a:	f000 f925 	bl	80127c8 <__ieee754_pow>
 801257e:	f994 3000 	ldrsb.w	r3, [r4]
 8012582:	eeb0 ab40 	vmov.f64	d10, d0
 8012586:	1c5a      	adds	r2, r3, #1
 8012588:	4626      	mov	r6, r4
 801258a:	d04b      	beq.n	8012624 <pow+0xbc>
 801258c:	eeb4 8b48 	vcmp.f64	d8, d8
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	d646      	bvs.n	8012624 <pow+0xbc>
 8012596:	eeb4 9b49 	vcmp.f64	d9, d9
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	d719      	bvc.n	80125d4 <pow+0x6c>
 80125a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a8:	d13c      	bne.n	8012624 <pow+0xbc>
 80125aa:	2201      	movs	r2, #1
 80125ac:	9200      	str	r2, [sp, #0]
 80125ae:	497f      	ldr	r1, [pc, #508]	; (80127ac <pow+0x244>)
 80125b0:	4a7f      	ldr	r2, [pc, #508]	; (80127b0 <pow+0x248>)
 80125b2:	9201      	str	r2, [sp, #4]
 80125b4:	2000      	movs	r0, #0
 80125b6:	2200      	movs	r2, #0
 80125b8:	2b02      	cmp	r3, #2
 80125ba:	9208      	str	r2, [sp, #32]
 80125bc:	ed8d 9b02 	vstr	d9, [sp, #8]
 80125c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80125c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80125c8:	d02a      	beq.n	8012620 <pow+0xb8>
 80125ca:	4668      	mov	r0, sp
 80125cc:	f001 f9b0 	bl	8013930 <matherr>
 80125d0:	bb00      	cbnz	r0, 8012614 <pow+0xac>
 80125d2:	e04e      	b.n	8012672 <pow+0x10a>
 80125d4:	ed9f bb72 	vldr	d11, [pc, #456]	; 80127a0 <pow+0x238>
 80125d8:	eeb4 9b4b 	vcmp.f64	d9, d11
 80125dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e0:	eeb0 cb4b 	vmov.f64	d12, d11
 80125e4:	d14a      	bne.n	801267c <pow+0x114>
 80125e6:	eeb4 8b4b 	vcmp.f64	d8, d11
 80125ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ee:	d11f      	bne.n	8012630 <pow+0xc8>
 80125f0:	2201      	movs	r2, #1
 80125f2:	9200      	str	r2, [sp, #0]
 80125f4:	4a6e      	ldr	r2, [pc, #440]	; (80127b0 <pow+0x248>)
 80125f6:	9201      	str	r2, [sp, #4]
 80125f8:	2200      	movs	r2, #0
 80125fa:	9208      	str	r2, [sp, #32]
 80125fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8012600:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012604:	ed8d bb06 	vstr	d11, [sp, #24]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d0de      	beq.n	80125ca <pow+0x62>
 801260c:	4b67      	ldr	r3, [pc, #412]	; (80127ac <pow+0x244>)
 801260e:	2200      	movs	r2, #0
 8012610:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012614:	9b08      	ldr	r3, [sp, #32]
 8012616:	b11b      	cbz	r3, 8012620 <pow+0xb8>
 8012618:	f7fd fc38 	bl	800fe8c <__errno>
 801261c:	9b08      	ldr	r3, [sp, #32]
 801261e:	6003      	str	r3, [r0, #0]
 8012620:	ed9d ab06 	vldr	d10, [sp, #24]
 8012624:	eeb0 0b4a 	vmov.f64	d0, d10
 8012628:	b00a      	add	sp, #40	; 0x28
 801262a:	ecbd 8b0a 	vpop	{d8-d12}
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	eeb0 0b48 	vmov.f64	d0, d8
 8012634:	f001 f8f9 	bl	801382a <finite>
 8012638:	2800      	cmp	r0, #0
 801263a:	d0f3      	beq.n	8012624 <pow+0xbc>
 801263c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8012640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012644:	d5ee      	bpl.n	8012624 <pow+0xbc>
 8012646:	2301      	movs	r3, #1
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	4b59      	ldr	r3, [pc, #356]	; (80127b0 <pow+0x248>)
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	2300      	movs	r3, #0
 8012650:	9308      	str	r3, [sp, #32]
 8012652:	f994 3000 	ldrsb.w	r3, [r4]
 8012656:	ed8d 9b02 	vstr	d9, [sp, #8]
 801265a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801265e:	b913      	cbnz	r3, 8012666 <pow+0xfe>
 8012660:	ed8d bb06 	vstr	d11, [sp, #24]
 8012664:	e7b1      	b.n	80125ca <pow+0x62>
 8012666:	4953      	ldr	r1, [pc, #332]	; (80127b4 <pow+0x24c>)
 8012668:	2000      	movs	r0, #0
 801266a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801266e:	2b02      	cmp	r3, #2
 8012670:	d1ab      	bne.n	80125ca <pow+0x62>
 8012672:	f7fd fc0b 	bl	800fe8c <__errno>
 8012676:	2321      	movs	r3, #33	; 0x21
 8012678:	6003      	str	r3, [r0, #0]
 801267a:	e7cb      	b.n	8012614 <pow+0xac>
 801267c:	f001 f8d5 	bl	801382a <finite>
 8012680:	4605      	mov	r5, r0
 8012682:	2800      	cmp	r0, #0
 8012684:	d164      	bne.n	8012750 <pow+0x1e8>
 8012686:	eeb0 0b49 	vmov.f64	d0, d9
 801268a:	f001 f8ce 	bl	801382a <finite>
 801268e:	2800      	cmp	r0, #0
 8012690:	d05e      	beq.n	8012750 <pow+0x1e8>
 8012692:	eeb0 0b48 	vmov.f64	d0, d8
 8012696:	f001 f8c8 	bl	801382a <finite>
 801269a:	2800      	cmp	r0, #0
 801269c:	d058      	beq.n	8012750 <pow+0x1e8>
 801269e:	eeb4 ab4a 	vcmp.f64	d10, d10
 80126a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a6:	f994 3000 	ldrsb.w	r3, [r4]
 80126aa:	4a41      	ldr	r2, [pc, #260]	; (80127b0 <pow+0x248>)
 80126ac:	d70e      	bvc.n	80126cc <pow+0x164>
 80126ae:	2101      	movs	r1, #1
 80126b0:	e9cd 1200 	strd	r1, r2, [sp]
 80126b4:	9508      	str	r5, [sp, #32]
 80126b6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80126ba:	ed8d 8b04 	vstr	d8, [sp, #16]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d0ce      	beq.n	8012660 <pow+0xf8>
 80126c2:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 80126c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126ca:	e7d0      	b.n	801266e <pow+0x106>
 80126cc:	2103      	movs	r1, #3
 80126ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 80126d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80126d6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80126da:	e9cd 1200 	strd	r1, r2, [sp]
 80126de:	9508      	str	r5, [sp, #32]
 80126e0:	ed8d 9b02 	vstr	d9, [sp, #8]
 80126e4:	b9fb      	cbnz	r3, 8012726 <pow+0x1be>
 80126e6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80126ea:	4b33      	ldr	r3, [pc, #204]	; (80127b8 <pow+0x250>)
 80126ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80126f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80126f8:	d54b      	bpl.n	8012792 <pow+0x22a>
 80126fa:	eeb0 0b48 	vmov.f64	d0, d8
 80126fe:	f001 f923 	bl	8013948 <rint>
 8012702:	eeb4 0b48 	vcmp.f64	d0, d8
 8012706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270a:	d004      	beq.n	8012716 <pow+0x1ae>
 801270c:	4b2b      	ldr	r3, [pc, #172]	; (80127bc <pow+0x254>)
 801270e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012712:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012716:	f996 3000 	ldrsb.w	r3, [r6]
 801271a:	2b02      	cmp	r3, #2
 801271c:	d139      	bne.n	8012792 <pow+0x22a>
 801271e:	f7fd fbb5 	bl	800fe8c <__errno>
 8012722:	2322      	movs	r3, #34	; 0x22
 8012724:	e7a8      	b.n	8012678 <pow+0x110>
 8012726:	4b26      	ldr	r3, [pc, #152]	; (80127c0 <pow+0x258>)
 8012728:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801272c:	2200      	movs	r2, #0
 801272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012732:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012736:	d5ee      	bpl.n	8012716 <pow+0x1ae>
 8012738:	eeb0 0b48 	vmov.f64	d0, d8
 801273c:	f001 f904 	bl	8013948 <rint>
 8012740:	eeb4 0b48 	vcmp.f64	d0, d8
 8012744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012748:	d0e5      	beq.n	8012716 <pow+0x1ae>
 801274a:	2200      	movs	r2, #0
 801274c:	4b19      	ldr	r3, [pc, #100]	; (80127b4 <pow+0x24c>)
 801274e:	e7e0      	b.n	8012712 <pow+0x1aa>
 8012750:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8012754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012758:	f47f af64 	bne.w	8012624 <pow+0xbc>
 801275c:	eeb0 0b49 	vmov.f64	d0, d9
 8012760:	f001 f863 	bl	801382a <finite>
 8012764:	2800      	cmp	r0, #0
 8012766:	f43f af5d 	beq.w	8012624 <pow+0xbc>
 801276a:	eeb0 0b48 	vmov.f64	d0, d8
 801276e:	f001 f85c 	bl	801382a <finite>
 8012772:	2800      	cmp	r0, #0
 8012774:	f43f af56 	beq.w	8012624 <pow+0xbc>
 8012778:	2304      	movs	r3, #4
 801277a:	9300      	str	r3, [sp, #0]
 801277c:	4b0c      	ldr	r3, [pc, #48]	; (80127b0 <pow+0x248>)
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	2300      	movs	r3, #0
 8012782:	9308      	str	r3, [sp, #32]
 8012784:	ed8d 9b02 	vstr	d9, [sp, #8]
 8012788:	ed8d 8b04 	vstr	d8, [sp, #16]
 801278c:	ed8d cb06 	vstr	d12, [sp, #24]
 8012790:	e7c1      	b.n	8012716 <pow+0x1ae>
 8012792:	4668      	mov	r0, sp
 8012794:	f001 f8cc 	bl	8013930 <matherr>
 8012798:	2800      	cmp	r0, #0
 801279a:	f47f af3b 	bne.w	8012614 <pow+0xac>
 801279e:	e7be      	b.n	801271e <pow+0x1b6>
	...
 80127a8:	240001fc 	.word	0x240001fc
 80127ac:	3ff00000 	.word	0x3ff00000
 80127b0:	08014330 	.word	0x08014330
 80127b4:	fff00000 	.word	0xfff00000
 80127b8:	47efffff 	.word	0x47efffff
 80127bc:	c7efffff 	.word	0xc7efffff
 80127c0:	7ff00000 	.word	0x7ff00000
 80127c4:	00000000 	.word	0x00000000

080127c8 <__ieee754_pow>:
 80127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127cc:	ec57 6b11 	vmov	r6, r7, d1
 80127d0:	ed2d 8b02 	vpush	{d8}
 80127d4:	eeb0 8b40 	vmov.f64	d8, d0
 80127d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80127dc:	ea58 0306 	orrs.w	r3, r8, r6
 80127e0:	b085      	sub	sp, #20
 80127e2:	46b9      	mov	r9, r7
 80127e4:	ee11 2a10 	vmov	r2, s2
 80127e8:	f000 8306 	beq.w	8012df8 <__ieee754_pow+0x630>
 80127ec:	ee18 aa90 	vmov	sl, s17
 80127f0:	4bb9      	ldr	r3, [pc, #740]	; (8012ad8 <__ieee754_pow+0x310>)
 80127f2:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 80127f6:	429c      	cmp	r4, r3
 80127f8:	ee10 ba10 	vmov	fp, s0
 80127fc:	dc0b      	bgt.n	8012816 <__ieee754_pow+0x4e>
 80127fe:	d105      	bne.n	801280c <__ieee754_pow+0x44>
 8012800:	f1bb 0f00 	cmp.w	fp, #0
 8012804:	d107      	bne.n	8012816 <__ieee754_pow+0x4e>
 8012806:	45a0      	cmp	r8, r4
 8012808:	dc0d      	bgt.n	8012826 <__ieee754_pow+0x5e>
 801280a:	e001      	b.n	8012810 <__ieee754_pow+0x48>
 801280c:	4598      	cmp	r8, r3
 801280e:	dc02      	bgt.n	8012816 <__ieee754_pow+0x4e>
 8012810:	4598      	cmp	r8, r3
 8012812:	d110      	bne.n	8012836 <__ieee754_pow+0x6e>
 8012814:	b17a      	cbz	r2, 8012836 <__ieee754_pow+0x6e>
 8012816:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801281a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801281e:	ea54 030b 	orrs.w	r3, r4, fp
 8012822:	f000 82e9 	beq.w	8012df8 <__ieee754_pow+0x630>
 8012826:	48ad      	ldr	r0, [pc, #692]	; (8012adc <__ieee754_pow+0x314>)
 8012828:	b005      	add	sp, #20
 801282a:	ecbd 8b02 	vpop	{d8}
 801282e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012832:	f001 b881 	b.w	8013938 <nan>
 8012836:	f1ba 0f00 	cmp.w	sl, #0
 801283a:	da4e      	bge.n	80128da <__ieee754_pow+0x112>
 801283c:	4ba8      	ldr	r3, [pc, #672]	; (8012ae0 <__ieee754_pow+0x318>)
 801283e:	4598      	cmp	r8, r3
 8012840:	dc49      	bgt.n	80128d6 <__ieee754_pow+0x10e>
 8012842:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012846:	4598      	cmp	r8, r3
 8012848:	dd47      	ble.n	80128da <__ieee754_pow+0x112>
 801284a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801284e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012852:	2b14      	cmp	r3, #20
 8012854:	dd24      	ble.n	80128a0 <__ieee754_pow+0xd8>
 8012856:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801285a:	fa22 f503 	lsr.w	r5, r2, r3
 801285e:	fa05 f303 	lsl.w	r3, r5, r3
 8012862:	4293      	cmp	r3, r2
 8012864:	d139      	bne.n	80128da <__ieee754_pow+0x112>
 8012866:	f005 0501 	and.w	r5, r5, #1
 801286a:	f1c5 0502 	rsb	r5, r5, #2
 801286e:	2a00      	cmp	r2, #0
 8012870:	d15a      	bne.n	8012928 <__ieee754_pow+0x160>
 8012872:	4b99      	ldr	r3, [pc, #612]	; (8012ad8 <__ieee754_pow+0x310>)
 8012874:	4598      	cmp	r8, r3
 8012876:	d122      	bne.n	80128be <__ieee754_pow+0xf6>
 8012878:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801287c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012880:	ea53 030b 	orrs.w	r3, r3, fp
 8012884:	f000 82b8 	beq.w	8012df8 <__ieee754_pow+0x630>
 8012888:	4b96      	ldr	r3, [pc, #600]	; (8012ae4 <__ieee754_pow+0x31c>)
 801288a:	429c      	cmp	r4, r3
 801288c:	dd27      	ble.n	80128de <__ieee754_pow+0x116>
 801288e:	f1b9 0f00 	cmp.w	r9, #0
 8012892:	f280 82b4 	bge.w	8012dfe <__ieee754_pow+0x636>
 8012896:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8012aa8 <__ieee754_pow+0x2e0>
 801289a:	ed8d 7b00 	vstr	d7, [sp]
 801289e:	e026      	b.n	80128ee <__ieee754_pow+0x126>
 80128a0:	2a00      	cmp	r2, #0
 80128a2:	d140      	bne.n	8012926 <__ieee754_pow+0x15e>
 80128a4:	f1c3 0314 	rsb	r3, r3, #20
 80128a8:	fa48 f503 	asr.w	r5, r8, r3
 80128ac:	fa05 f303 	lsl.w	r3, r5, r3
 80128b0:	4543      	cmp	r3, r8
 80128b2:	f040 82aa 	bne.w	8012e0a <__ieee754_pow+0x642>
 80128b6:	f005 0501 	and.w	r5, r5, #1
 80128ba:	f1c5 0502 	rsb	r5, r5, #2
 80128be:	4b8a      	ldr	r3, [pc, #552]	; (8012ae8 <__ieee754_pow+0x320>)
 80128c0:	4598      	cmp	r8, r3
 80128c2:	d11b      	bne.n	80128fc <__ieee754_pow+0x134>
 80128c4:	f1b9 0f00 	cmp.w	r9, #0
 80128c8:	f280 829c 	bge.w	8012e04 <__ieee754_pow+0x63c>
 80128cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80128d0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80128d4:	e7e1      	b.n	801289a <__ieee754_pow+0xd2>
 80128d6:	2502      	movs	r5, #2
 80128d8:	e7c9      	b.n	801286e <__ieee754_pow+0xa6>
 80128da:	2500      	movs	r5, #0
 80128dc:	e7c7      	b.n	801286e <__ieee754_pow+0xa6>
 80128de:	f1b9 0f00 	cmp.w	r9, #0
 80128e2:	dad8      	bge.n	8012896 <__ieee754_pow+0xce>
 80128e4:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 80128e8:	4633      	mov	r3, r6
 80128ea:	e9cd 3400 	strd	r3, r4, [sp]
 80128ee:	ed9d 0b00 	vldr	d0, [sp]
 80128f2:	b005      	add	sp, #20
 80128f4:	ecbd 8b02 	vpop	{d8}
 80128f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012900:	d102      	bne.n	8012908 <__ieee754_pow+0x140>
 8012902:	ee28 7b08 	vmul.f64	d7, d8, d8
 8012906:	e7c8      	b.n	801289a <__ieee754_pow+0xd2>
 8012908:	4b78      	ldr	r3, [pc, #480]	; (8012aec <__ieee754_pow+0x324>)
 801290a:	4599      	cmp	r9, r3
 801290c:	d10c      	bne.n	8012928 <__ieee754_pow+0x160>
 801290e:	f1ba 0f00 	cmp.w	sl, #0
 8012912:	db09      	blt.n	8012928 <__ieee754_pow+0x160>
 8012914:	eeb0 0b48 	vmov.f64	d0, d8
 8012918:	b005      	add	sp, #20
 801291a:	ecbd 8b02 	vpop	{d8}
 801291e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012922:	f000 bc15 	b.w	8013150 <__ieee754_sqrt>
 8012926:	2500      	movs	r5, #0
 8012928:	eeb0 0b48 	vmov.f64	d0, d8
 801292c:	f000 ff74 	bl	8013818 <fabs>
 8012930:	ed8d 0b00 	vstr	d0, [sp]
 8012934:	f1bb 0f00 	cmp.w	fp, #0
 8012938:	d128      	bne.n	801298c <__ieee754_pow+0x1c4>
 801293a:	b124      	cbz	r4, 8012946 <__ieee754_pow+0x17e>
 801293c:	4b6a      	ldr	r3, [pc, #424]	; (8012ae8 <__ieee754_pow+0x320>)
 801293e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8012942:	429a      	cmp	r2, r3
 8012944:	d122      	bne.n	801298c <__ieee754_pow+0x1c4>
 8012946:	f1b9 0f00 	cmp.w	r9, #0
 801294a:	da07      	bge.n	801295c <__ieee754_pow+0x194>
 801294c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012950:	ed9d 6b00 	vldr	d6, [sp]
 8012954:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8012958:	ed8d 7b00 	vstr	d7, [sp]
 801295c:	f1ba 0f00 	cmp.w	sl, #0
 8012960:	dac5      	bge.n	80128ee <__ieee754_pow+0x126>
 8012962:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012966:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801296a:	ea54 0305 	orrs.w	r3, r4, r5
 801296e:	d106      	bne.n	801297e <__ieee754_pow+0x1b6>
 8012970:	ed9d 7b00 	vldr	d7, [sp]
 8012974:	ee37 7b47 	vsub.f64	d7, d7, d7
 8012978:	ee87 7b07 	vdiv.f64	d7, d7, d7
 801297c:	e78d      	b.n	801289a <__ieee754_pow+0xd2>
 801297e:	2d01      	cmp	r5, #1
 8012980:	d1b5      	bne.n	80128ee <__ieee754_pow+0x126>
 8012982:	ed9d 7b00 	vldr	d7, [sp]
 8012986:	eeb1 7b47 	vneg.f64	d7, d7
 801298a:	e786      	b.n	801289a <__ieee754_pow+0xd2>
 801298c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8012990:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012994:	ea55 030a 	orrs.w	r3, r5, sl
 8012998:	d104      	bne.n	80129a4 <__ieee754_pow+0x1dc>
 801299a:	ee38 8b48 	vsub.f64	d8, d8, d8
 801299e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 80129a2:	e77a      	b.n	801289a <__ieee754_pow+0xd2>
 80129a4:	4b52      	ldr	r3, [pc, #328]	; (8012af0 <__ieee754_pow+0x328>)
 80129a6:	4598      	cmp	r8, r3
 80129a8:	f340 80a8 	ble.w	8012afc <__ieee754_pow+0x334>
 80129ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80129b0:	4598      	cmp	r8, r3
 80129b2:	dd0b      	ble.n	80129cc <__ieee754_pow+0x204>
 80129b4:	4b4b      	ldr	r3, [pc, #300]	; (8012ae4 <__ieee754_pow+0x31c>)
 80129b6:	429c      	cmp	r4, r3
 80129b8:	dc0e      	bgt.n	80129d8 <__ieee754_pow+0x210>
 80129ba:	f1b9 0f00 	cmp.w	r9, #0
 80129be:	f6bf af6a 	bge.w	8012896 <__ieee754_pow+0xce>
 80129c2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8012ab0 <__ieee754_pow+0x2e8>
 80129c6:	ee27 7b07 	vmul.f64	d7, d7, d7
 80129ca:	e766      	b.n	801289a <__ieee754_pow+0xd2>
 80129cc:	4b49      	ldr	r3, [pc, #292]	; (8012af4 <__ieee754_pow+0x32c>)
 80129ce:	429c      	cmp	r4, r3
 80129d0:	ddf3      	ble.n	80129ba <__ieee754_pow+0x1f2>
 80129d2:	4b45      	ldr	r3, [pc, #276]	; (8012ae8 <__ieee754_pow+0x320>)
 80129d4:	429c      	cmp	r4, r3
 80129d6:	dd03      	ble.n	80129e0 <__ieee754_pow+0x218>
 80129d8:	f1b9 0f00 	cmp.w	r9, #0
 80129dc:	dcf1      	bgt.n	80129c2 <__ieee754_pow+0x1fa>
 80129de:	e75a      	b.n	8012896 <__ieee754_pow+0xce>
 80129e0:	ed9d 7b00 	vldr	d7, [sp]
 80129e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80129e8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8012ab8 <__ieee754_pow+0x2f0>
 80129ec:	ee37 6b46 	vsub.f64	d6, d7, d6
 80129f0:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80129f4:	eeb1 3b46 	vneg.f64	d3, d6
 80129f8:	eea3 5b07 	vfma.f64	d5, d3, d7
 80129fc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012a00:	eea5 7b46 	vfms.f64	d7, d5, d6
 8012a04:	ee26 5b06 	vmul.f64	d5, d6, d6
 8012a08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012a0c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8012ac0 <__ieee754_pow+0x2f8>
 8012a10:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012a14:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012ac8 <__ieee754_pow+0x300>
 8012a18:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012a1c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012ad0 <__ieee754_pow+0x308>
 8012a20:	eeb0 4b47 	vmov.f64	d4, d7
 8012a24:	eea6 4b05 	vfma.f64	d4, d6, d5
 8012a28:	ec53 2b14 	vmov	r2, r3, d4
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	ec43 2b14 	vmov	d4, r2, r3
 8012a32:	eeb0 6b44 	vmov.f64	d6, d4
 8012a36:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012a3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012a3e:	3d01      	subs	r5, #1
 8012a40:	ea55 030a 	orrs.w	r3, r5, sl
 8012a44:	f04f 0200 	mov.w	r2, #0
 8012a48:	463b      	mov	r3, r7
 8012a4a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012a4e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8012a52:	ec47 6b15 	vmov	d5, r6, r7
 8012a56:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8012a5a:	ec47 6b13 	vmov	d3, r6, r7
 8012a5e:	ec43 2b16 	vmov	d6, r2, r3
 8012a62:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a66:	ee35 5b46 	vsub.f64	d5, d5, d6
 8012a6a:	4b23      	ldr	r3, [pc, #140]	; (8012af8 <__ieee754_pow+0x330>)
 8012a6c:	eea5 7b04 	vfma.f64	d7, d5, d4
 8012a70:	ee24 6b06 	vmul.f64	d6, d4, d6
 8012a74:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012a78:	ee15 1a90 	vmov	r1, s11
 8012a7c:	4299      	cmp	r1, r3
 8012a7e:	ee15 2a10 	vmov	r2, s10
 8012a82:	f340 819b 	ble.w	8012dbc <__ieee754_pow+0x5f4>
 8012a86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012a8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	f000 810a 	beq.w	8012ca8 <__ieee754_pow+0x4e0>
 8012a94:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8012ab0 <__ieee754_pow+0x2e8>
 8012a98:	ee28 8b07 	vmul.f64	d8, d8, d7
 8012a9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012aa0:	e6fb      	b.n	801289a <__ieee754_pow+0xd2>
 8012aa2:	bf00      	nop
 8012aa4:	f3af 8000 	nop.w
	...
 8012ab0:	8800759c 	.word	0x8800759c
 8012ab4:	7e37e43c 	.word	0x7e37e43c
 8012ab8:	55555555 	.word	0x55555555
 8012abc:	3fd55555 	.word	0x3fd55555
 8012ac0:	652b82fe 	.word	0x652b82fe
 8012ac4:	3ff71547 	.word	0x3ff71547
 8012ac8:	f85ddf44 	.word	0xf85ddf44
 8012acc:	3e54ae0b 	.word	0x3e54ae0b
 8012ad0:	60000000 	.word	0x60000000
 8012ad4:	3ff71547 	.word	0x3ff71547
 8012ad8:	7ff00000 	.word	0x7ff00000
 8012adc:	08014219 	.word	0x08014219
 8012ae0:	433fffff 	.word	0x433fffff
 8012ae4:	3fefffff 	.word	0x3fefffff
 8012ae8:	3ff00000 	.word	0x3ff00000
 8012aec:	3fe00000 	.word	0x3fe00000
 8012af0:	41e00000 	.word	0x41e00000
 8012af4:	3feffffe 	.word	0x3feffffe
 8012af8:	408fffff 	.word	0x408fffff
 8012afc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012b00:	f280 80ce 	bge.w	8012ca0 <__ieee754_pow+0x4d8>
 8012b04:	ed9d 6b00 	vldr	d6, [sp]
 8012b08:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8012e10 <__ieee754_pow+0x648>
 8012b0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012b10:	ed8d 7b00 	vstr	d7, [sp]
 8012b14:	9c01      	ldr	r4, [sp, #4]
 8012b16:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8012b1a:	1521      	asrs	r1, r4, #20
 8012b1c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012b20:	4419      	add	r1, r3
 8012b22:	4be3      	ldr	r3, [pc, #908]	; (8012eb0 <__ieee754_pow+0x6e8>)
 8012b24:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012b28:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8012b2c:	429c      	cmp	r4, r3
 8012b2e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8012b32:	dd06      	ble.n	8012b42 <__ieee754_pow+0x37a>
 8012b34:	4bdf      	ldr	r3, [pc, #892]	; (8012eb4 <__ieee754_pow+0x6ec>)
 8012b36:	429c      	cmp	r4, r3
 8012b38:	f340 80b4 	ble.w	8012ca4 <__ieee754_pow+0x4dc>
 8012b3c:	3101      	adds	r1, #1
 8012b3e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012b42:	2400      	movs	r4, #0
 8012b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b48:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	ec43 2b17 	vmov	d7, r2, r3
 8012b52:	4bd9      	ldr	r3, [pc, #868]	; (8012eb8 <__ieee754_pow+0x6f0>)
 8012b54:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8012b58:	4463      	add	r3, ip
 8012b5a:	ed93 5b00 	vldr	d5, [r3]
 8012b5e:	1040      	asrs	r0, r0, #1
 8012b60:	ee37 2b45 	vsub.f64	d2, d7, d5
 8012b64:	ee35 6b07 	vadd.f64	d6, d5, d7
 8012b68:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8012b6c:	ee22 6b01 	vmul.f64	d6, d2, d1
 8012b70:	ed8d 6b00 	vstr	d6, [sp]
 8012b74:	e9dd 8900 	ldrd	r8, r9, [sp]
 8012b78:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8012b7c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8012b80:	f04f 0800 	mov.w	r8, #0
 8012b84:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8012b88:	2200      	movs	r2, #0
 8012b8a:	ec49 8b14 	vmov	d4, r8, r9
 8012b8e:	ec43 2b16 	vmov	d6, r2, r3
 8012b92:	eeb1 3b44 	vneg.f64	d3, d4
 8012b96:	eea3 2b06 	vfma.f64	d2, d3, d6
 8012b9a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ba2:	eea3 2b07 	vfma.f64	d2, d3, d7
 8012ba6:	ed9d 7b00 	vldr	d7, [sp]
 8012baa:	ee22 2b01 	vmul.f64	d2, d2, d1
 8012bae:	ee27 5b07 	vmul.f64	d5, d7, d7
 8012bb2:	ee37 6b04 	vadd.f64	d6, d7, d4
 8012bb6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8012e18 <__ieee754_pow+0x650>
 8012bba:	ee25 0b05 	vmul.f64	d0, d5, d5
 8012bbe:	ee26 6b02 	vmul.f64	d6, d6, d2
 8012bc2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8012e20 <__ieee754_pow+0x658>
 8012bc6:	eea5 7b01 	vfma.f64	d7, d5, d1
 8012bca:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8012e28 <__ieee754_pow+0x660>
 8012bce:	eea7 1b05 	vfma.f64	d1, d7, d5
 8012bd2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8012e30 <__ieee754_pow+0x668>
 8012bd6:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012bda:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8012e38 <__ieee754_pow+0x670>
 8012bde:	eea7 1b05 	vfma.f64	d1, d7, d5
 8012be2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8012e40 <__ieee754_pow+0x678>
 8012be6:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012bea:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012bee:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8012bf2:	eeb0 5b47 	vmov.f64	d5, d7
 8012bf6:	eea4 5b04 	vfma.f64	d5, d4, d4
 8012bfa:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012bfe:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012c02:	f8cd 8008 	str.w	r8, [sp, #8]
 8012c06:	ed9d 5b02 	vldr	d5, [sp, #8]
 8012c0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012c0e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8012c12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012c16:	ed9d 6b00 	vldr	d6, [sp]
 8012c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c1e:	eea2 7b05 	vfma.f64	d7, d2, d5
 8012c22:	eeb0 6b47 	vmov.f64	d6, d7
 8012c26:	eea4 6b05 	vfma.f64	d6, d4, d5
 8012c2a:	ed8d 6b00 	vstr	d6, [sp]
 8012c2e:	f8cd 8000 	str.w	r8, [sp]
 8012c32:	ed9d 2b00 	vldr	d2, [sp]
 8012c36:	eeb0 6b42 	vmov.f64	d6, d2
 8012c3a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012c3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c42:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8012e48 <__ieee754_pow+0x680>
 8012c46:	4b9d      	ldr	r3, [pc, #628]	; (8012ebc <__ieee754_pow+0x6f4>)
 8012c48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c4c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8012e50 <__ieee754_pow+0x688>
 8012c50:	4463      	add	r3, ip
 8012c52:	eea2 7b06 	vfma.f64	d7, d2, d6
 8012c56:	ed93 6b00 	vldr	d6, [r3]
 8012c5a:	4b99      	ldr	r3, [pc, #612]	; (8012ec0 <__ieee754_pow+0x6f8>)
 8012c5c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8012c60:	449c      	add	ip, r3
 8012c62:	ed9c 1b00 	vldr	d1, [ip]
 8012c66:	eeb0 4b46 	vmov.f64	d4, d6
 8012c6a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8012e58 <__ieee754_pow+0x690>
 8012c6e:	ee07 1a90 	vmov	s15, r1
 8012c72:	eea2 4b03 	vfma.f64	d4, d2, d3
 8012c76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012c7a:	ee34 4b01 	vadd.f64	d4, d4, d1
 8012c7e:	ee34 5b07 	vadd.f64	d5, d4, d7
 8012c82:	ed8d 5b00 	vstr	d5, [sp]
 8012c86:	f8cd 8000 	str.w	r8, [sp]
 8012c8a:	ed9d 4b00 	vldr	d4, [sp]
 8012c8e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8012c92:	ee37 7b41 	vsub.f64	d7, d7, d1
 8012c96:	eea2 7b43 	vfms.f64	d7, d2, d3
 8012c9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012c9e:	e6ce      	b.n	8012a3e <__ieee754_pow+0x276>
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	e73a      	b.n	8012b1a <__ieee754_pow+0x352>
 8012ca4:	2401      	movs	r4, #1
 8012ca6:	e74d      	b.n	8012b44 <__ieee754_pow+0x37c>
 8012ca8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8012e60 <__ieee754_pow+0x698>
 8012cac:	ee35 5b46 	vsub.f64	d5, d5, d6
 8012cb0:	ee37 4b04 	vadd.f64	d4, d7, d4
 8012cb4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbc:	f73f aeea 	bgt.w	8012a94 <__ieee754_pow+0x2cc>
 8012cc0:	4a80      	ldr	r2, [pc, #512]	; (8012ec4 <__ieee754_pow+0x6fc>)
 8012cc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	f340 808e 	ble.w	8012de8 <__ieee754_pow+0x620>
 8012ccc:	151b      	asrs	r3, r3, #20
 8012cce:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8012cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012cd6:	4103      	asrs	r3, r0
 8012cd8:	440b      	add	r3, r1
 8012cda:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012cde:	487a      	ldr	r0, [pc, #488]	; (8012ec8 <__ieee754_pow+0x700>)
 8012ce0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012ce4:	4110      	asrs	r0, r2
 8012ce6:	ea23 0500 	bic.w	r5, r3, r0
 8012cea:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8012cee:	2400      	movs	r4, #0
 8012cf0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8012cf4:	f1c2 0214 	rsb	r2, r2, #20
 8012cf8:	ec45 4b15 	vmov	d5, r4, r5
 8012cfc:	4110      	asrs	r0, r2
 8012cfe:	2900      	cmp	r1, #0
 8012d00:	bfb8      	it	lt
 8012d02:	4240      	neglt	r0, r0
 8012d04:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012d08:	ee36 5b07 	vadd.f64	d5, d6, d7
 8012d0c:	ec53 2b15 	vmov	r2, r3, d5
 8012d10:	2200      	movs	r2, #0
 8012d12:	ec43 2b15 	vmov	d5, r2, r3
 8012d16:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8012e68 <__ieee754_pow+0x6a0>
 8012d1a:	ee35 6b46 	vsub.f64	d6, d5, d6
 8012d1e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8012d22:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012e70 <__ieee754_pow+0x6a8>
 8012d26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012d2a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012d2e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8012e78 <__ieee754_pow+0x6b0>
 8012d32:	eeb0 4b47 	vmov.f64	d4, d7
 8012d36:	eea5 4b06 	vfma.f64	d4, d5, d6
 8012d3a:	eeb0 3b44 	vmov.f64	d3, d4
 8012d3e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8012d42:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8012e80 <__ieee754_pow+0x6b8>
 8012d46:	ee37 7b43 	vsub.f64	d7, d7, d3
 8012d4a:	ee24 6b04 	vmul.f64	d6, d4, d4
 8012d4e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8012e88 <__ieee754_pow+0x6c0>
 8012d52:	eea4 7b07 	vfma.f64	d7, d4, d7
 8012d56:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012d5a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8012e90 <__ieee754_pow+0x6c8>
 8012d5e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8012d62:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8012e98 <__ieee754_pow+0x6d0>
 8012d66:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012d6a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8012ea0 <__ieee754_pow+0x6d8>
 8012d6e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8012d72:	eeb0 3b44 	vmov.f64	d3, d4
 8012d76:	eea5 3b46 	vfms.f64	d3, d5, d6
 8012d7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012d7e:	eeb0 6b43 	vmov.f64	d6, d3
 8012d82:	ee24 3b03 	vmul.f64	d3, d4, d3
 8012d86:	ee36 5b45 	vsub.f64	d5, d6, d5
 8012d8a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8012d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012d92:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012d96:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012d9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012d9e:	ed8d 7b00 	vstr	d7, [sp]
 8012da2:	9901      	ldr	r1, [sp, #4]
 8012da4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8012da8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012dac:	da1e      	bge.n	8012dec <__ieee754_pow+0x624>
 8012dae:	eeb0 0b47 	vmov.f64	d0, d7
 8012db2:	f000 fe55 	bl	8013a60 <scalbn>
 8012db6:	ee20 7b08 	vmul.f64	d7, d0, d8
 8012dba:	e56e      	b.n	801289a <__ieee754_pow+0xd2>
 8012dbc:	4b43      	ldr	r3, [pc, #268]	; (8012ecc <__ieee754_pow+0x704>)
 8012dbe:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8012dc2:	4298      	cmp	r0, r3
 8012dc4:	f77f af7c 	ble.w	8012cc0 <__ieee754_pow+0x4f8>
 8012dc8:	4b41      	ldr	r3, [pc, #260]	; (8012ed0 <__ieee754_pow+0x708>)
 8012dca:	440b      	add	r3, r1
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	d002      	beq.n	8012dd6 <__ieee754_pow+0x60e>
 8012dd0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012ea8 <__ieee754_pow+0x6e0>
 8012dd4:	e660      	b.n	8012a98 <__ieee754_pow+0x2d0>
 8012dd6:	ee35 5b46 	vsub.f64	d5, d5, d6
 8012dda:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de2:	f6ff af6d 	blt.w	8012cc0 <__ieee754_pow+0x4f8>
 8012de6:	e7f3      	b.n	8012dd0 <__ieee754_pow+0x608>
 8012de8:	2000      	movs	r0, #0
 8012dea:	e78d      	b.n	8012d08 <__ieee754_pow+0x540>
 8012dec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012df0:	460b      	mov	r3, r1
 8012df2:	ec43 2b10 	vmov	d0, r2, r3
 8012df6:	e7de      	b.n	8012db6 <__ieee754_pow+0x5ee>
 8012df8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012dfc:	e54d      	b.n	801289a <__ieee754_pow+0xd2>
 8012dfe:	e9cd 6700 	strd	r6, r7, [sp]
 8012e02:	e574      	b.n	80128ee <__ieee754_pow+0x126>
 8012e04:	ed8d 8b00 	vstr	d8, [sp]
 8012e08:	e571      	b.n	80128ee <__ieee754_pow+0x126>
 8012e0a:	4615      	mov	r5, r2
 8012e0c:	e557      	b.n	80128be <__ieee754_pow+0xf6>
 8012e0e:	bf00      	nop
 8012e10:	00000000 	.word	0x00000000
 8012e14:	43400000 	.word	0x43400000
 8012e18:	4a454eef 	.word	0x4a454eef
 8012e1c:	3fca7e28 	.word	0x3fca7e28
 8012e20:	93c9db65 	.word	0x93c9db65
 8012e24:	3fcd864a 	.word	0x3fcd864a
 8012e28:	a91d4101 	.word	0xa91d4101
 8012e2c:	3fd17460 	.word	0x3fd17460
 8012e30:	518f264d 	.word	0x518f264d
 8012e34:	3fd55555 	.word	0x3fd55555
 8012e38:	db6fabff 	.word	0xdb6fabff
 8012e3c:	3fdb6db6 	.word	0x3fdb6db6
 8012e40:	33333303 	.word	0x33333303
 8012e44:	3fe33333 	.word	0x3fe33333
 8012e48:	dc3a03fd 	.word	0xdc3a03fd
 8012e4c:	3feec709 	.word	0x3feec709
 8012e50:	145b01f5 	.word	0x145b01f5
 8012e54:	be3e2fe0 	.word	0xbe3e2fe0
 8012e58:	e0000000 	.word	0xe0000000
 8012e5c:	3feec709 	.word	0x3feec709
 8012e60:	652b82fe 	.word	0x652b82fe
 8012e64:	3c971547 	.word	0x3c971547
 8012e68:	fefa39ef 	.word	0xfefa39ef
 8012e6c:	3fe62e42 	.word	0x3fe62e42
 8012e70:	0ca86c39 	.word	0x0ca86c39
 8012e74:	be205c61 	.word	0xbe205c61
 8012e78:	00000000 	.word	0x00000000
 8012e7c:	3fe62e43 	.word	0x3fe62e43
 8012e80:	72bea4d0 	.word	0x72bea4d0
 8012e84:	3e663769 	.word	0x3e663769
 8012e88:	c5d26bf1 	.word	0xc5d26bf1
 8012e8c:	bebbbd41 	.word	0xbebbbd41
 8012e90:	af25de2c 	.word	0xaf25de2c
 8012e94:	3f11566a 	.word	0x3f11566a
 8012e98:	16bebd93 	.word	0x16bebd93
 8012e9c:	bf66c16c 	.word	0xbf66c16c
 8012ea0:	5555553e 	.word	0x5555553e
 8012ea4:	3fc55555 	.word	0x3fc55555
 8012ea8:	c2f8f359 	.word	0xc2f8f359
 8012eac:	01a56e1f 	.word	0x01a56e1f
 8012eb0:	0003988e 	.word	0x0003988e
 8012eb4:	000bb679 	.word	0x000bb679
 8012eb8:	08014338 	.word	0x08014338
 8012ebc:	08014358 	.word	0x08014358
 8012ec0:	08014348 	.word	0x08014348
 8012ec4:	3fe00000 	.word	0x3fe00000
 8012ec8:	000fffff 	.word	0x000fffff
 8012ecc:	4090cbff 	.word	0x4090cbff
 8012ed0:	3f6f3400 	.word	0x3f6f3400
 8012ed4:	00000000 	.word	0x00000000

08012ed8 <__ieee754_rem_pio2>:
 8012ed8:	b570      	push	{r4, r5, r6, lr}
 8012eda:	eeb0 7b40 	vmov.f64	d7, d0
 8012ede:	ee17 5a90 	vmov	r5, s15
 8012ee2:	4b95      	ldr	r3, [pc, #596]	; (8013138 <__ieee754_rem_pio2+0x260>)
 8012ee4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ee8:	429e      	cmp	r6, r3
 8012eea:	b088      	sub	sp, #32
 8012eec:	4604      	mov	r4, r0
 8012eee:	dc07      	bgt.n	8012f00 <__ieee754_rem_pio2+0x28>
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	ed84 0b00 	vstr	d0, [r4]
 8012ef8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012efc:	2000      	movs	r0, #0
 8012efe:	e01b      	b.n	8012f38 <__ieee754_rem_pio2+0x60>
 8012f00:	4b8e      	ldr	r3, [pc, #568]	; (801313c <__ieee754_rem_pio2+0x264>)
 8012f02:	429e      	cmp	r6, r3
 8012f04:	dc3b      	bgt.n	8012f7e <__ieee754_rem_pio2+0xa6>
 8012f06:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8012f0a:	2d00      	cmp	r5, #0
 8012f0c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80130f8 <__ieee754_rem_pio2+0x220>
 8012f10:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8012f14:	dd19      	ble.n	8012f4a <__ieee754_rem_pio2+0x72>
 8012f16:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012f1a:	429e      	cmp	r6, r3
 8012f1c:	d00e      	beq.n	8012f3c <__ieee754_rem_pio2+0x64>
 8012f1e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8013100 <__ieee754_rem_pio2+0x228>
 8012f22:	ee37 5b46 	vsub.f64	d5, d7, d6
 8012f26:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012f2a:	ed84 5b00 	vstr	d5, [r4]
 8012f2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f32:	ed84 7b02 	vstr	d7, [r4, #8]
 8012f36:	2001      	movs	r0, #1
 8012f38:	b008      	add	sp, #32
 8012f3a:	bd70      	pop	{r4, r5, r6, pc}
 8012f3c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8013108 <__ieee754_rem_pio2+0x230>
 8012f40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f44:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8013110 <__ieee754_rem_pio2+0x238>
 8012f48:	e7eb      	b.n	8012f22 <__ieee754_rem_pio2+0x4a>
 8012f4a:	429e      	cmp	r6, r3
 8012f4c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012f50:	d00e      	beq.n	8012f70 <__ieee754_rem_pio2+0x98>
 8012f52:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8013100 <__ieee754_rem_pio2+0x228>
 8012f56:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012f5a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012f5e:	ed84 5b00 	vstr	d5, [r4]
 8012f62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8012f6e:	e7e3      	b.n	8012f38 <__ieee754_rem_pio2+0x60>
 8012f70:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8013108 <__ieee754_rem_pio2+0x230>
 8012f74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012f78:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8013110 <__ieee754_rem_pio2+0x238>
 8012f7c:	e7eb      	b.n	8012f56 <__ieee754_rem_pio2+0x7e>
 8012f7e:	4b70      	ldr	r3, [pc, #448]	; (8013140 <__ieee754_rem_pio2+0x268>)
 8012f80:	429e      	cmp	r6, r3
 8012f82:	dc6c      	bgt.n	801305e <__ieee754_rem_pio2+0x186>
 8012f84:	f000 fc48 	bl	8013818 <fabs>
 8012f88:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012f8c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8013118 <__ieee754_rem_pio2+0x240>
 8012f90:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012f94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012f98:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012f9c:	ee17 0a90 	vmov	r0, s15
 8012fa0:	eeb1 5b44 	vneg.f64	d5, d4
 8012fa4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80130f8 <__ieee754_rem_pio2+0x220>
 8012fa8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8012fac:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8013100 <__ieee754_rem_pio2+0x228>
 8012fb0:	281f      	cmp	r0, #31
 8012fb2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012fb6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012fba:	dc08      	bgt.n	8012fce <__ieee754_rem_pio2+0xf6>
 8012fbc:	1e42      	subs	r2, r0, #1
 8012fbe:	4b61      	ldr	r3, [pc, #388]	; (8013144 <__ieee754_rem_pio2+0x26c>)
 8012fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fc4:	42b3      	cmp	r3, r6
 8012fc6:	d002      	beq.n	8012fce <__ieee754_rem_pio2+0xf6>
 8012fc8:	ed84 6b00 	vstr	d6, [r4]
 8012fcc:	e022      	b.n	8013014 <__ieee754_rem_pio2+0x13c>
 8012fce:	ee16 3a90 	vmov	r3, s13
 8012fd2:	1536      	asrs	r6, r6, #20
 8012fd4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012fd8:	1af3      	subs	r3, r6, r3
 8012fda:	2b10      	cmp	r3, #16
 8012fdc:	ddf4      	ble.n	8012fc8 <__ieee754_rem_pio2+0xf0>
 8012fde:	eeb0 6b40 	vmov.f64	d6, d0
 8012fe2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8013108 <__ieee754_rem_pio2+0x230>
 8012fe6:	eea5 6b03 	vfma.f64	d6, d5, d3
 8012fea:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012fee:	eea5 7b03 	vfma.f64	d7, d5, d3
 8012ff2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8013110 <__ieee754_rem_pio2+0x238>
 8012ff6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8012ffa:	ee36 3b47 	vsub.f64	d3, d6, d7
 8012ffe:	ee13 3a90 	vmov	r3, s7
 8013002:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013006:	1af6      	subs	r6, r6, r3
 8013008:	2e31      	cmp	r6, #49	; 0x31
 801300a:	dc17      	bgt.n	801303c <__ieee754_rem_pio2+0x164>
 801300c:	eeb0 0b46 	vmov.f64	d0, d6
 8013010:	ed84 3b00 	vstr	d3, [r4]
 8013014:	ed94 6b00 	vldr	d6, [r4]
 8013018:	2d00      	cmp	r5, #0
 801301a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801301e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8013022:	ed84 7b02 	vstr	d7, [r4, #8]
 8013026:	da87      	bge.n	8012f38 <__ieee754_rem_pio2+0x60>
 8013028:	eeb1 6b46 	vneg.f64	d6, d6
 801302c:	ed84 6b00 	vstr	d6, [r4]
 8013030:	eeb1 7b47 	vneg.f64	d7, d7
 8013034:	4240      	negs	r0, r0
 8013036:	ed84 7b02 	vstr	d7, [r4, #8]
 801303a:	e77d      	b.n	8012f38 <__ieee754_rem_pio2+0x60>
 801303c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8013120 <__ieee754_rem_pio2+0x248>
 8013040:	eeb0 0b46 	vmov.f64	d0, d6
 8013044:	eea5 0b03 	vfma.f64	d0, d5, d3
 8013048:	ee36 7b40 	vsub.f64	d7, d6, d0
 801304c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8013128 <__ieee754_rem_pio2+0x250>
 8013050:	eea5 7b03 	vfma.f64	d7, d5, d3
 8013054:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8013058:	ee30 6b47 	vsub.f64	d6, d0, d7
 801305c:	e7b4      	b.n	8012fc8 <__ieee754_rem_pio2+0xf0>
 801305e:	4b3a      	ldr	r3, [pc, #232]	; (8013148 <__ieee754_rem_pio2+0x270>)
 8013060:	429e      	cmp	r6, r3
 8013062:	dd06      	ble.n	8013072 <__ieee754_rem_pio2+0x19a>
 8013064:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013068:	ed80 7b02 	vstr	d7, [r0, #8]
 801306c:	ed80 7b00 	vstr	d7, [r0]
 8013070:	e744      	b.n	8012efc <__ieee754_rem_pio2+0x24>
 8013072:	1532      	asrs	r2, r6, #20
 8013074:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013078:	ee10 0a10 	vmov	r0, s0
 801307c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013080:	ec41 0b17 	vmov	d7, r0, r1
 8013084:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013088:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8013130 <__ieee754_rem_pio2+0x258>
 801308c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013090:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013094:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013098:	ee27 7b05 	vmul.f64	d7, d7, d5
 801309c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80130a0:	a908      	add	r1, sp, #32
 80130a2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80130a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80130aa:	ed8d 6b04 	vstr	d6, [sp, #16]
 80130ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80130b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80130b6:	2303      	movs	r3, #3
 80130b8:	ed31 7b02 	vldmdb	r1!, {d7}
 80130bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80130c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80130c8:	d013      	beq.n	80130f2 <__ieee754_rem_pio2+0x21a>
 80130ca:	4920      	ldr	r1, [pc, #128]	; (801314c <__ieee754_rem_pio2+0x274>)
 80130cc:	9101      	str	r1, [sp, #4]
 80130ce:	2102      	movs	r1, #2
 80130d0:	9100      	str	r1, [sp, #0]
 80130d2:	a802      	add	r0, sp, #8
 80130d4:	4621      	mov	r1, r4
 80130d6:	f000 f8ab 	bl	8013230 <__kernel_rem_pio2>
 80130da:	2d00      	cmp	r5, #0
 80130dc:	f6bf af2c 	bge.w	8012f38 <__ieee754_rem_pio2+0x60>
 80130e0:	ed94 7b00 	vldr	d7, [r4]
 80130e4:	eeb1 7b47 	vneg.f64	d7, d7
 80130e8:	ed84 7b00 	vstr	d7, [r4]
 80130ec:	ed94 7b02 	vldr	d7, [r4, #8]
 80130f0:	e79e      	b.n	8013030 <__ieee754_rem_pio2+0x158>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e7e0      	b.n	80130b8 <__ieee754_rem_pio2+0x1e0>
 80130f6:	bf00      	nop
 80130f8:	54400000 	.word	0x54400000
 80130fc:	3ff921fb 	.word	0x3ff921fb
 8013100:	1a626331 	.word	0x1a626331
 8013104:	3dd0b461 	.word	0x3dd0b461
 8013108:	1a600000 	.word	0x1a600000
 801310c:	3dd0b461 	.word	0x3dd0b461
 8013110:	2e037073 	.word	0x2e037073
 8013114:	3ba3198a 	.word	0x3ba3198a
 8013118:	6dc9c883 	.word	0x6dc9c883
 801311c:	3fe45f30 	.word	0x3fe45f30
 8013120:	2e000000 	.word	0x2e000000
 8013124:	3ba3198a 	.word	0x3ba3198a
 8013128:	252049c1 	.word	0x252049c1
 801312c:	397b839a 	.word	0x397b839a
 8013130:	00000000 	.word	0x00000000
 8013134:	41700000 	.word	0x41700000
 8013138:	3fe921fb 	.word	0x3fe921fb
 801313c:	4002d97b 	.word	0x4002d97b
 8013140:	413921fb 	.word	0x413921fb
 8013144:	08014368 	.word	0x08014368
 8013148:	7fefffff 	.word	0x7fefffff
 801314c:	080143e8 	.word	0x080143e8

08013150 <__ieee754_sqrt>:
 8013150:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013154:	4770      	bx	lr
	...

08013158 <__kernel_cos>:
 8013158:	ee10 1a90 	vmov	r1, s1
 801315c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013160:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013164:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013168:	da05      	bge.n	8013176 <__kernel_cos+0x1e>
 801316a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801316e:	ee16 3a90 	vmov	r3, s13
 8013172:	2b00      	cmp	r3, #0
 8013174:	d03d      	beq.n	80131f2 <__kernel_cos+0x9a>
 8013176:	ee20 4b00 	vmul.f64	d4, d0, d0
 801317a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801317e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80131f8 <__kernel_cos+0xa0>
 8013182:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8013186:	ee24 6b06 	vmul.f64	d6, d4, d6
 801318a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8013200 <__kernel_cos+0xa8>
 801318e:	eea4 5b03 	vfma.f64	d5, d4, d3
 8013192:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8013208 <__kernel_cos+0xb0>
 8013196:	eea5 3b04 	vfma.f64	d3, d5, d4
 801319a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8013210 <__kernel_cos+0xb8>
 801319e:	eea3 5b04 	vfma.f64	d5, d3, d4
 80131a2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8013218 <__kernel_cos+0xc0>
 80131a6:	4b20      	ldr	r3, [pc, #128]	; (8013228 <__kernel_cos+0xd0>)
 80131a8:	eea5 3b04 	vfma.f64	d3, d5, d4
 80131ac:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8013220 <__kernel_cos+0xc8>
 80131b0:	4299      	cmp	r1, r3
 80131b2:	eea3 5b04 	vfma.f64	d5, d3, d4
 80131b6:	ee25 5b04 	vmul.f64	d5, d5, d4
 80131ba:	eea4 1b05 	vfma.f64	d1, d4, d5
 80131be:	dc04      	bgt.n	80131ca <__kernel_cos+0x72>
 80131c0:	ee36 6b41 	vsub.f64	d6, d6, d1
 80131c4:	ee37 0b46 	vsub.f64	d0, d7, d6
 80131c8:	4770      	bx	lr
 80131ca:	4b18      	ldr	r3, [pc, #96]	; (801322c <__kernel_cos+0xd4>)
 80131cc:	4299      	cmp	r1, r3
 80131ce:	dc0d      	bgt.n	80131ec <__kernel_cos+0x94>
 80131d0:	2200      	movs	r2, #0
 80131d2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80131d6:	ec43 2b15 	vmov	d5, r2, r3
 80131da:	ee37 0b45 	vsub.f64	d0, d7, d5
 80131de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80131e2:	ee36 6b41 	vsub.f64	d6, d6, d1
 80131e6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80131ea:	4770      	bx	lr
 80131ec:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80131f0:	e7f3      	b.n	80131da <__kernel_cos+0x82>
 80131f2:	eeb0 0b47 	vmov.f64	d0, d7
 80131f6:	4770      	bx	lr
 80131f8:	be8838d4 	.word	0xbe8838d4
 80131fc:	bda8fae9 	.word	0xbda8fae9
 8013200:	bdb4b1c4 	.word	0xbdb4b1c4
 8013204:	3e21ee9e 	.word	0x3e21ee9e
 8013208:	809c52ad 	.word	0x809c52ad
 801320c:	be927e4f 	.word	0xbe927e4f
 8013210:	19cb1590 	.word	0x19cb1590
 8013214:	3efa01a0 	.word	0x3efa01a0
 8013218:	16c15177 	.word	0x16c15177
 801321c:	bf56c16c 	.word	0xbf56c16c
 8013220:	5555554c 	.word	0x5555554c
 8013224:	3fa55555 	.word	0x3fa55555
 8013228:	3fd33332 	.word	0x3fd33332
 801322c:	3fe90000 	.word	0x3fe90000

08013230 <__kernel_rem_pio2>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	ed2d 8b06 	vpush	{d8-d10}
 8013238:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801323c:	469b      	mov	fp, r3
 801323e:	460e      	mov	r6, r1
 8013240:	4bc7      	ldr	r3, [pc, #796]	; (8013560 <__kernel_rem_pio2+0x330>)
 8013242:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8013244:	9002      	str	r0, [sp, #8]
 8013246:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801324a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801324c:	1ed1      	subs	r1, r2, #3
 801324e:	2318      	movs	r3, #24
 8013250:	f06f 0417 	mvn.w	r4, #23
 8013254:	fb91 f1f3 	sdiv	r1, r1, r3
 8013258:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801325c:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8013260:	fb01 4404 	mla	r4, r1, r4, r4
 8013264:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8013548 <__kernel_rem_pio2+0x318>
 8013268:	4414      	add	r4, r2
 801326a:	eba1 050a 	sub.w	r5, r1, sl
 801326e:	aa1a      	add	r2, sp, #104	; 0x68
 8013270:	eb09 070a 	add.w	r7, r9, sl
 8013274:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8013278:	4696      	mov	lr, r2
 801327a:	2300      	movs	r3, #0
 801327c:	42bb      	cmp	r3, r7
 801327e:	dd0f      	ble.n	80132a0 <__kernel_rem_pio2+0x70>
 8013280:	af6a      	add	r7, sp, #424	; 0x1a8
 8013282:	2200      	movs	r2, #0
 8013284:	454a      	cmp	r2, r9
 8013286:	dc28      	bgt.n	80132da <__kernel_rem_pio2+0xaa>
 8013288:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801328c:	eb0b 0302 	add.w	r3, fp, r2
 8013290:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8013294:	9d02      	ldr	r5, [sp, #8]
 8013296:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8013548 <__kernel_rem_pio2+0x318>
 801329a:	f04f 0c00 	mov.w	ip, #0
 801329e:	e016      	b.n	80132ce <__kernel_rem_pio2+0x9e>
 80132a0:	42dd      	cmn	r5, r3
 80132a2:	d409      	bmi.n	80132b8 <__kernel_rem_pio2+0x88>
 80132a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80132a8:	ee07 2a90 	vmov	s15, r2
 80132ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80132b0:	ecae 7b02 	vstmia	lr!, {d7}
 80132b4:	3301      	adds	r3, #1
 80132b6:	e7e1      	b.n	801327c <__kernel_rem_pio2+0x4c>
 80132b8:	eeb0 7b46 	vmov.f64	d7, d6
 80132bc:	e7f8      	b.n	80132b0 <__kernel_rem_pio2+0x80>
 80132be:	ecb5 5b02 	vldmia	r5!, {d5}
 80132c2:	ed33 6b02 	vldmdb	r3!, {d6}
 80132c6:	f10c 0c01 	add.w	ip, ip, #1
 80132ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 80132ce:	45d4      	cmp	ip, sl
 80132d0:	ddf5      	ble.n	80132be <__kernel_rem_pio2+0x8e>
 80132d2:	eca7 7b02 	vstmia	r7!, {d7}
 80132d6:	3201      	adds	r2, #1
 80132d8:	e7d4      	b.n	8013284 <__kernel_rem_pio2+0x54>
 80132da:	ab06      	add	r3, sp, #24
 80132dc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80132e0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8013550 <__kernel_rem_pio2+0x320>
 80132e4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8013558 <__kernel_rem_pio2+0x328>
 80132e8:	9304      	str	r3, [sp, #16]
 80132ea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	464d      	mov	r5, r9
 80132f2:	ab92      	add	r3, sp, #584	; 0x248
 80132f4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80132f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80132fc:	3f01      	subs	r7, #1
 80132fe:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8013302:	00ff      	lsls	r7, r7, #3
 8013304:	ab92      	add	r3, sp, #584	; 0x248
 8013306:	19da      	adds	r2, r3, r7
 8013308:	3a98      	subs	r2, #152	; 0x98
 801330a:	2300      	movs	r3, #0
 801330c:	1ae9      	subs	r1, r5, r3
 801330e:	2900      	cmp	r1, #0
 8013310:	dc4e      	bgt.n	80133b0 <__kernel_rem_pio2+0x180>
 8013312:	4620      	mov	r0, r4
 8013314:	f000 fba4 	bl	8013a60 <scalbn>
 8013318:	eeb0 8b40 	vmov.f64	d8, d0
 801331c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8013320:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013324:	f000 fa8c 	bl	8013840 <floor>
 8013328:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801332c:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013330:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013334:	2c00      	cmp	r4, #0
 8013336:	edcd 7a01 	vstr	s15, [sp, #4]
 801333a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801333e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013342:	dd4a      	ble.n	80133da <__kernel_rem_pio2+0x1aa>
 8013344:	1e69      	subs	r1, r5, #1
 8013346:	ab06      	add	r3, sp, #24
 8013348:	f1c4 0018 	rsb	r0, r4, #24
 801334c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8013350:	9a01      	ldr	r2, [sp, #4]
 8013352:	fa4c f300 	asr.w	r3, ip, r0
 8013356:	441a      	add	r2, r3
 8013358:	4083      	lsls	r3, r0
 801335a:	9201      	str	r2, [sp, #4]
 801335c:	ebac 0203 	sub.w	r2, ip, r3
 8013360:	ab06      	add	r3, sp, #24
 8013362:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8013366:	f1c4 0317 	rsb	r3, r4, #23
 801336a:	fa42 f803 	asr.w	r8, r2, r3
 801336e:	f1b8 0f00 	cmp.w	r8, #0
 8013372:	dd43      	ble.n	80133fc <__kernel_rem_pio2+0x1cc>
 8013374:	9b01      	ldr	r3, [sp, #4]
 8013376:	2000      	movs	r0, #0
 8013378:	3301      	adds	r3, #1
 801337a:	9301      	str	r3, [sp, #4]
 801337c:	4601      	mov	r1, r0
 801337e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8013382:	4285      	cmp	r5, r0
 8013384:	dc6e      	bgt.n	8013464 <__kernel_rem_pio2+0x234>
 8013386:	2c00      	cmp	r4, #0
 8013388:	dd04      	ble.n	8013394 <__kernel_rem_pio2+0x164>
 801338a:	2c01      	cmp	r4, #1
 801338c:	d07f      	beq.n	801348e <__kernel_rem_pio2+0x25e>
 801338e:	2c02      	cmp	r4, #2
 8013390:	f000 8087 	beq.w	80134a2 <__kernel_rem_pio2+0x272>
 8013394:	f1b8 0f02 	cmp.w	r8, #2
 8013398:	d130      	bne.n	80133fc <__kernel_rem_pio2+0x1cc>
 801339a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801339e:	ee30 8b48 	vsub.f64	d8, d0, d8
 80133a2:	b359      	cbz	r1, 80133fc <__kernel_rem_pio2+0x1cc>
 80133a4:	4620      	mov	r0, r4
 80133a6:	f000 fb5b 	bl	8013a60 <scalbn>
 80133aa:	ee38 8b40 	vsub.f64	d8, d8, d0
 80133ae:	e025      	b.n	80133fc <__kernel_rem_pio2+0x1cc>
 80133b0:	ee20 7b09 	vmul.f64	d7, d0, d9
 80133b4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80133b8:	a806      	add	r0, sp, #24
 80133ba:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80133be:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80133c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80133c6:	ee10 1a10 	vmov	r1, s0
 80133ca:	ed32 0b02 	vldmdb	r2!, {d0}
 80133ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80133d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80133d6:	3301      	adds	r3, #1
 80133d8:	e798      	b.n	801330c <__kernel_rem_pio2+0xdc>
 80133da:	d106      	bne.n	80133ea <__kernel_rem_pio2+0x1ba>
 80133dc:	1e6b      	subs	r3, r5, #1
 80133de:	aa06      	add	r2, sp, #24
 80133e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80133e4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 80133e8:	e7c1      	b.n	801336e <__kernel_rem_pio2+0x13e>
 80133ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80133ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80133f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f6:	da32      	bge.n	801345e <__kernel_rem_pio2+0x22e>
 80133f8:	f04f 0800 	mov.w	r8, #0
 80133fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013404:	f040 80b0 	bne.w	8013568 <__kernel_rem_pio2+0x338>
 8013408:	1e6b      	subs	r3, r5, #1
 801340a:	4618      	mov	r0, r3
 801340c:	2200      	movs	r2, #0
 801340e:	4548      	cmp	r0, r9
 8013410:	da4e      	bge.n	80134b0 <__kernel_rem_pio2+0x280>
 8013412:	2a00      	cmp	r2, #0
 8013414:	f000 8088 	beq.w	8013528 <__kernel_rem_pio2+0x2f8>
 8013418:	aa06      	add	r2, sp, #24
 801341a:	3c18      	subs	r4, #24
 801341c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013420:	2900      	cmp	r1, #0
 8013422:	f000 808e 	beq.w	8013542 <__kernel_rem_pio2+0x312>
 8013426:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801342a:	4620      	mov	r0, r4
 801342c:	9302      	str	r3, [sp, #8]
 801342e:	f000 fb17 	bl	8013a60 <scalbn>
 8013432:	9b02      	ldr	r3, [sp, #8]
 8013434:	aa6a      	add	r2, sp, #424	; 0x1a8
 8013436:	00d9      	lsls	r1, r3, #3
 8013438:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8013550 <__kernel_rem_pio2+0x320>
 801343c:	1850      	adds	r0, r2, r1
 801343e:	f100 0508 	add.w	r5, r0, #8
 8013442:	461c      	mov	r4, r3
 8013444:	2c00      	cmp	r4, #0
 8013446:	f280 80bd 	bge.w	80135c4 <__kernel_rem_pio2+0x394>
 801344a:	2500      	movs	r5, #0
 801344c:	1b5c      	subs	r4, r3, r5
 801344e:	2c00      	cmp	r4, #0
 8013450:	f2c0 80dd 	blt.w	801360e <__kernel_rem_pio2+0x3de>
 8013454:	4f43      	ldr	r7, [pc, #268]	; (8013564 <__kernel_rem_pio2+0x334>)
 8013456:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8013548 <__kernel_rem_pio2+0x318>
 801345a:	2400      	movs	r4, #0
 801345c:	e0cb      	b.n	80135f6 <__kernel_rem_pio2+0x3c6>
 801345e:	f04f 0802 	mov.w	r8, #2
 8013462:	e787      	b.n	8013374 <__kernel_rem_pio2+0x144>
 8013464:	ab06      	add	r3, sp, #24
 8013466:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801346a:	b949      	cbnz	r1, 8013480 <__kernel_rem_pio2+0x250>
 801346c:	b12b      	cbz	r3, 801347a <__kernel_rem_pio2+0x24a>
 801346e:	aa06      	add	r2, sp, #24
 8013470:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013474:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013478:	2301      	movs	r3, #1
 801347a:	3001      	adds	r0, #1
 801347c:	4619      	mov	r1, r3
 801347e:	e780      	b.n	8013382 <__kernel_rem_pio2+0x152>
 8013480:	aa06      	add	r2, sp, #24
 8013482:	ebac 0303 	sub.w	r3, ip, r3
 8013486:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801348a:	460b      	mov	r3, r1
 801348c:	e7f5      	b.n	801347a <__kernel_rem_pio2+0x24a>
 801348e:	1e68      	subs	r0, r5, #1
 8013490:	ab06      	add	r3, sp, #24
 8013492:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013496:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801349a:	aa06      	add	r2, sp, #24
 801349c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80134a0:	e778      	b.n	8013394 <__kernel_rem_pio2+0x164>
 80134a2:	1e68      	subs	r0, r5, #1
 80134a4:	ab06      	add	r3, sp, #24
 80134a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80134aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80134ae:	e7f4      	b.n	801349a <__kernel_rem_pio2+0x26a>
 80134b0:	a906      	add	r1, sp, #24
 80134b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80134b6:	3801      	subs	r0, #1
 80134b8:	430a      	orrs	r2, r1
 80134ba:	e7a8      	b.n	801340e <__kernel_rem_pio2+0x1de>
 80134bc:	f10c 0c01 	add.w	ip, ip, #1
 80134c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80134c4:	2a00      	cmp	r2, #0
 80134c6:	d0f9      	beq.n	80134bc <__kernel_rem_pio2+0x28c>
 80134c8:	eb0b 0305 	add.w	r3, fp, r5
 80134cc:	aa1a      	add	r2, sp, #104	; 0x68
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	1898      	adds	r0, r3, r2
 80134d2:	3008      	adds	r0, #8
 80134d4:	1c69      	adds	r1, r5, #1
 80134d6:	3708      	adds	r7, #8
 80134d8:	2200      	movs	r2, #0
 80134da:	4465      	add	r5, ip
 80134dc:	9005      	str	r0, [sp, #20]
 80134de:	428d      	cmp	r5, r1
 80134e0:	f6ff af07 	blt.w	80132f2 <__kernel_rem_pio2+0xc2>
 80134e4:	a81a      	add	r0, sp, #104	; 0x68
 80134e6:	eb02 0c03 	add.w	ip, r2, r3
 80134ea:	4484      	add	ip, r0
 80134ec:	9803      	ldr	r0, [sp, #12]
 80134ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 80134f2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80134f6:	9001      	str	r0, [sp, #4]
 80134f8:	ee07 0a90 	vmov	s15, r0
 80134fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013500:	9805      	ldr	r0, [sp, #20]
 8013502:	ed8c 7b00 	vstr	d7, [ip]
 8013506:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8013548 <__kernel_rem_pio2+0x318>
 801350a:	eb00 0802 	add.w	r8, r0, r2
 801350e:	f04f 0c00 	mov.w	ip, #0
 8013512:	45d4      	cmp	ip, sl
 8013514:	dd0c      	ble.n	8013530 <__kernel_rem_pio2+0x300>
 8013516:	eb02 0c07 	add.w	ip, r2, r7
 801351a:	a86a      	add	r0, sp, #424	; 0x1a8
 801351c:	4484      	add	ip, r0
 801351e:	ed8c 7b02 	vstr	d7, [ip, #8]
 8013522:	3101      	adds	r1, #1
 8013524:	3208      	adds	r2, #8
 8013526:	e7da      	b.n	80134de <__kernel_rem_pio2+0x2ae>
 8013528:	9b04      	ldr	r3, [sp, #16]
 801352a:	f04f 0c01 	mov.w	ip, #1
 801352e:	e7c7      	b.n	80134c0 <__kernel_rem_pio2+0x290>
 8013530:	ecbe 5b02 	vldmia	lr!, {d5}
 8013534:	ed38 6b02 	vldmdb	r8!, {d6}
 8013538:	f10c 0c01 	add.w	ip, ip, #1
 801353c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013540:	e7e7      	b.n	8013512 <__kernel_rem_pio2+0x2e2>
 8013542:	3b01      	subs	r3, #1
 8013544:	e768      	b.n	8013418 <__kernel_rem_pio2+0x1e8>
 8013546:	bf00      	nop
	...
 8013554:	3e700000 	.word	0x3e700000
 8013558:	00000000 	.word	0x00000000
 801355c:	41700000 	.word	0x41700000
 8013560:	08014530 	.word	0x08014530
 8013564:	080144f0 	.word	0x080144f0
 8013568:	4260      	negs	r0, r4
 801356a:	eeb0 0b48 	vmov.f64	d0, d8
 801356e:	f000 fa77 	bl	8013a60 <scalbn>
 8013572:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8013750 <__kernel_rem_pio2+0x520>
 8013576:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357e:	db18      	blt.n	80135b2 <__kernel_rem_pio2+0x382>
 8013580:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8013758 <__kernel_rem_pio2+0x528>
 8013584:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013588:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801358c:	aa06      	add	r2, sp, #24
 801358e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013592:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013596:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801359a:	a906      	add	r1, sp, #24
 801359c:	ee10 3a10 	vmov	r3, s0
 80135a0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80135a4:	1c6b      	adds	r3, r5, #1
 80135a6:	ee17 2a10 	vmov	r2, s14
 80135aa:	3418      	adds	r4, #24
 80135ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80135b0:	e739      	b.n	8013426 <__kernel_rem_pio2+0x1f6>
 80135b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80135b6:	aa06      	add	r2, sp, #24
 80135b8:	ee10 3a10 	vmov	r3, s0
 80135bc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80135c0:	462b      	mov	r3, r5
 80135c2:	e730      	b.n	8013426 <__kernel_rem_pio2+0x1f6>
 80135c4:	aa06      	add	r2, sp, #24
 80135c6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80135ca:	9202      	str	r2, [sp, #8]
 80135cc:	ee07 2a90 	vmov	s15, r2
 80135d0:	3c01      	subs	r4, #1
 80135d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80135d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80135da:	ee20 0b06 	vmul.f64	d0, d0, d6
 80135de:	ed25 7b02 	vstmdb	r5!, {d7}
 80135e2:	e72f      	b.n	8013444 <__kernel_rem_pio2+0x214>
 80135e4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80135e8:	ecb7 5b02 	vldmia	r7!, {d5}
 80135ec:	ed9c 6b00 	vldr	d6, [ip]
 80135f0:	3401      	adds	r4, #1
 80135f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80135f6:	454c      	cmp	r4, r9
 80135f8:	dc01      	bgt.n	80135fe <__kernel_rem_pio2+0x3ce>
 80135fa:	42a5      	cmp	r5, r4
 80135fc:	daf2      	bge.n	80135e4 <__kernel_rem_pio2+0x3b4>
 80135fe:	aa42      	add	r2, sp, #264	; 0x108
 8013600:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8013604:	ed84 7b00 	vstr	d7, [r4]
 8013608:	3501      	adds	r5, #1
 801360a:	3808      	subs	r0, #8
 801360c:	e71e      	b.n	801344c <__kernel_rem_pio2+0x21c>
 801360e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8013610:	2a03      	cmp	r2, #3
 8013612:	d84e      	bhi.n	80136b2 <__kernel_rem_pio2+0x482>
 8013614:	e8df f002 	tbb	[pc, r2]
 8013618:	021f1f3e 	.word	0x021f1f3e
 801361c:	3108      	adds	r1, #8
 801361e:	aa42      	add	r2, sp, #264	; 0x108
 8013620:	4411      	add	r1, r2
 8013622:	4608      	mov	r0, r1
 8013624:	461c      	mov	r4, r3
 8013626:	2c00      	cmp	r4, #0
 8013628:	dc61      	bgt.n	80136ee <__kernel_rem_pio2+0x4be>
 801362a:	4608      	mov	r0, r1
 801362c:	461c      	mov	r4, r3
 801362e:	2c01      	cmp	r4, #1
 8013630:	dc6d      	bgt.n	801370e <__kernel_rem_pio2+0x4de>
 8013632:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013760 <__kernel_rem_pio2+0x530>
 8013636:	2b01      	cmp	r3, #1
 8013638:	dc79      	bgt.n	801372e <__kernel_rem_pio2+0x4fe>
 801363a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801363e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8013642:	f1b8 0f00 	cmp.w	r8, #0
 8013646:	d178      	bne.n	801373a <__kernel_rem_pio2+0x50a>
 8013648:	ed86 5b00 	vstr	d5, [r6]
 801364c:	ed86 6b02 	vstr	d6, [r6, #8]
 8013650:	ed86 7b04 	vstr	d7, [r6, #16]
 8013654:	e02d      	b.n	80136b2 <__kernel_rem_pio2+0x482>
 8013656:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8013760 <__kernel_rem_pio2+0x530>
 801365a:	3108      	adds	r1, #8
 801365c:	aa42      	add	r2, sp, #264	; 0x108
 801365e:	4411      	add	r1, r2
 8013660:	4618      	mov	r0, r3
 8013662:	2800      	cmp	r0, #0
 8013664:	da34      	bge.n	80136d0 <__kernel_rem_pio2+0x4a0>
 8013666:	f1b8 0f00 	cmp.w	r8, #0
 801366a:	d037      	beq.n	80136dc <__kernel_rem_pio2+0x4ac>
 801366c:	eeb1 7b46 	vneg.f64	d7, d6
 8013670:	ed86 7b00 	vstr	d7, [r6]
 8013674:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8013678:	a844      	add	r0, sp, #272	; 0x110
 801367a:	2101      	movs	r1, #1
 801367c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013680:	428b      	cmp	r3, r1
 8013682:	da2e      	bge.n	80136e2 <__kernel_rem_pio2+0x4b2>
 8013684:	f1b8 0f00 	cmp.w	r8, #0
 8013688:	d001      	beq.n	801368e <__kernel_rem_pio2+0x45e>
 801368a:	eeb1 7b47 	vneg.f64	d7, d7
 801368e:	ed86 7b02 	vstr	d7, [r6, #8]
 8013692:	e00e      	b.n	80136b2 <__kernel_rem_pio2+0x482>
 8013694:	aa92      	add	r2, sp, #584	; 0x248
 8013696:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8013760 <__kernel_rem_pio2+0x530>
 801369a:	4411      	add	r1, r2
 801369c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	da0f      	bge.n	80136c4 <__kernel_rem_pio2+0x494>
 80136a4:	f1b8 0f00 	cmp.w	r8, #0
 80136a8:	d001      	beq.n	80136ae <__kernel_rem_pio2+0x47e>
 80136aa:	eeb1 7b47 	vneg.f64	d7, d7
 80136ae:	ed86 7b00 	vstr	d7, [r6]
 80136b2:	9b01      	ldr	r3, [sp, #4]
 80136b4:	f003 0007 	and.w	r0, r3, #7
 80136b8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80136bc:	ecbd 8b06 	vpop	{d8-d10}
 80136c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c4:	ed31 6b02 	vldmdb	r1!, {d6}
 80136c8:	3b01      	subs	r3, #1
 80136ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80136ce:	e7e7      	b.n	80136a0 <__kernel_rem_pio2+0x470>
 80136d0:	ed31 7b02 	vldmdb	r1!, {d7}
 80136d4:	3801      	subs	r0, #1
 80136d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80136da:	e7c2      	b.n	8013662 <__kernel_rem_pio2+0x432>
 80136dc:	eeb0 7b46 	vmov.f64	d7, d6
 80136e0:	e7c6      	b.n	8013670 <__kernel_rem_pio2+0x440>
 80136e2:	ecb0 6b02 	vldmia	r0!, {d6}
 80136e6:	3101      	adds	r1, #1
 80136e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80136ec:	e7c8      	b.n	8013680 <__kernel_rem_pio2+0x450>
 80136ee:	ed10 7b04 	vldr	d7, [r0, #-16]
 80136f2:	ed30 5b02 	vldmdb	r0!, {d5}
 80136f6:	3c01      	subs	r4, #1
 80136f8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80136fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013700:	ed00 6b02 	vstr	d6, [r0, #-8]
 8013704:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013708:	ed80 7b00 	vstr	d7, [r0]
 801370c:	e78b      	b.n	8013626 <__kernel_rem_pio2+0x3f6>
 801370e:	ed10 7b04 	vldr	d7, [r0, #-16]
 8013712:	ed30 5b02 	vldmdb	r0!, {d5}
 8013716:	3c01      	subs	r4, #1
 8013718:	ee37 6b05 	vadd.f64	d6, d7, d5
 801371c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013720:	ed00 6b02 	vstr	d6, [r0, #-8]
 8013724:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013728:	ed80 7b00 	vstr	d7, [r0]
 801372c:	e77f      	b.n	801362e <__kernel_rem_pio2+0x3fe>
 801372e:	ed31 6b02 	vldmdb	r1!, {d6}
 8013732:	3b01      	subs	r3, #1
 8013734:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013738:	e77d      	b.n	8013636 <__kernel_rem_pio2+0x406>
 801373a:	eeb1 5b45 	vneg.f64	d5, d5
 801373e:	eeb1 6b46 	vneg.f64	d6, d6
 8013742:	ed86 5b00 	vstr	d5, [r6]
 8013746:	eeb1 7b47 	vneg.f64	d7, d7
 801374a:	ed86 6b02 	vstr	d6, [r6, #8]
 801374e:	e77f      	b.n	8013650 <__kernel_rem_pio2+0x420>
 8013750:	00000000 	.word	0x00000000
 8013754:	41700000 	.word	0x41700000
 8013758:	00000000 	.word	0x00000000
 801375c:	3e700000 	.word	0x3e700000
	...

08013768 <__kernel_sin>:
 8013768:	ee10 3a90 	vmov	r3, s1
 801376c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013770:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013774:	da04      	bge.n	8013780 <__kernel_sin+0x18>
 8013776:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801377a:	ee17 3a90 	vmov	r3, s15
 801377e:	b35b      	cbz	r3, 80137d8 <__kernel_sin+0x70>
 8013780:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013784:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013788:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80137e0 <__kernel_sin+0x78>
 801378c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80137e8 <__kernel_sin+0x80>
 8013790:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013794:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80137f0 <__kernel_sin+0x88>
 8013798:	eea4 7b06 	vfma.f64	d7, d4, d6
 801379c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80137f8 <__kernel_sin+0x90>
 80137a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80137a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013800 <__kernel_sin+0x98>
 80137a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80137ac:	b930      	cbnz	r0, 80137bc <__kernel_sin+0x54>
 80137ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013808 <__kernel_sin+0xa0>
 80137b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80137b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80137ba:	4770      	bx	lr
 80137bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80137c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80137c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80137c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80137cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8013810 <__kernel_sin+0xa8>
 80137d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80137d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop
 80137dc:	f3af 8000 	nop.w
 80137e0:	5acfd57c 	.word	0x5acfd57c
 80137e4:	3de5d93a 	.word	0x3de5d93a
 80137e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80137ec:	be5ae5e6 	.word	0xbe5ae5e6
 80137f0:	57b1fe7d 	.word	0x57b1fe7d
 80137f4:	3ec71de3 	.word	0x3ec71de3
 80137f8:	19c161d5 	.word	0x19c161d5
 80137fc:	bf2a01a0 	.word	0xbf2a01a0
 8013800:	1110f8a6 	.word	0x1110f8a6
 8013804:	3f811111 	.word	0x3f811111
 8013808:	55555549 	.word	0x55555549
 801380c:	bfc55555 	.word	0xbfc55555
 8013810:	55555549 	.word	0x55555549
 8013814:	3fc55555 	.word	0x3fc55555

08013818 <fabs>:
 8013818:	ec51 0b10 	vmov	r0, r1, d0
 801381c:	ee10 2a10 	vmov	r2, s0
 8013820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013824:	ec43 2b10 	vmov	d0, r2, r3
 8013828:	4770      	bx	lr

0801382a <finite>:
 801382a:	ee10 3a90 	vmov	r3, s1
 801382e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013832:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013836:	0fc0      	lsrs	r0, r0, #31
 8013838:	4770      	bx	lr
 801383a:	0000      	movs	r0, r0
 801383c:	0000      	movs	r0, r0
	...

08013840 <floor>:
 8013840:	ee10 1a90 	vmov	r1, s1
 8013844:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013848:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801384c:	2b13      	cmp	r3, #19
 801384e:	b530      	push	{r4, r5, lr}
 8013850:	ee10 0a10 	vmov	r0, s0
 8013854:	ee10 5a10 	vmov	r5, s0
 8013858:	dc33      	bgt.n	80138c2 <floor+0x82>
 801385a:	2b00      	cmp	r3, #0
 801385c:	da17      	bge.n	801388e <floor+0x4e>
 801385e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8013920 <floor+0xe0>
 8013862:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013866:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801386e:	dd09      	ble.n	8013884 <floor+0x44>
 8013870:	2900      	cmp	r1, #0
 8013872:	da50      	bge.n	8013916 <floor+0xd6>
 8013874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013878:	4a2b      	ldr	r2, [pc, #172]	; (8013928 <floor+0xe8>)
 801387a:	4303      	orrs	r3, r0
 801387c:	2000      	movs	r0, #0
 801387e:	4283      	cmp	r3, r0
 8013880:	bf18      	it	ne
 8013882:	4611      	movne	r1, r2
 8013884:	460b      	mov	r3, r1
 8013886:	4602      	mov	r2, r0
 8013888:	ec43 2b10 	vmov	d0, r2, r3
 801388c:	e020      	b.n	80138d0 <floor+0x90>
 801388e:	4a27      	ldr	r2, [pc, #156]	; (801392c <floor+0xec>)
 8013890:	411a      	asrs	r2, r3
 8013892:	ea01 0402 	and.w	r4, r1, r2
 8013896:	4304      	orrs	r4, r0
 8013898:	d01a      	beq.n	80138d0 <floor+0x90>
 801389a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013920 <floor+0xe0>
 801389e:	ee30 0b07 	vadd.f64	d0, d0, d7
 80138a2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80138a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138aa:	ddeb      	ble.n	8013884 <floor+0x44>
 80138ac:	2900      	cmp	r1, #0
 80138ae:	bfbe      	ittt	lt
 80138b0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80138b4:	fa40 f303 	asrlt.w	r3, r0, r3
 80138b8:	18c9      	addlt	r1, r1, r3
 80138ba:	ea21 0102 	bic.w	r1, r1, r2
 80138be:	2000      	movs	r0, #0
 80138c0:	e7e0      	b.n	8013884 <floor+0x44>
 80138c2:	2b33      	cmp	r3, #51	; 0x33
 80138c4:	dd05      	ble.n	80138d2 <floor+0x92>
 80138c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138ca:	d101      	bne.n	80138d0 <floor+0x90>
 80138cc:	ee30 0b00 	vadd.f64	d0, d0, d0
 80138d0:	bd30      	pop	{r4, r5, pc}
 80138d2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80138d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138da:	40e2      	lsrs	r2, r4
 80138dc:	4202      	tst	r2, r0
 80138de:	d0f7      	beq.n	80138d0 <floor+0x90>
 80138e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013920 <floor+0xe0>
 80138e4:	ee30 0b07 	vadd.f64	d0, d0, d7
 80138e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f0:	ddc8      	ble.n	8013884 <floor+0x44>
 80138f2:	2900      	cmp	r1, #0
 80138f4:	da02      	bge.n	80138fc <floor+0xbc>
 80138f6:	2b14      	cmp	r3, #20
 80138f8:	d103      	bne.n	8013902 <floor+0xc2>
 80138fa:	3101      	adds	r1, #1
 80138fc:	ea20 0002 	bic.w	r0, r0, r2
 8013900:	e7c0      	b.n	8013884 <floor+0x44>
 8013902:	2401      	movs	r4, #1
 8013904:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013908:	fa04 f303 	lsl.w	r3, r4, r3
 801390c:	4418      	add	r0, r3
 801390e:	42a8      	cmp	r0, r5
 8013910:	bf38      	it	cc
 8013912:	1909      	addcc	r1, r1, r4
 8013914:	e7f2      	b.n	80138fc <floor+0xbc>
 8013916:	2000      	movs	r0, #0
 8013918:	4601      	mov	r1, r0
 801391a:	e7b3      	b.n	8013884 <floor+0x44>
 801391c:	f3af 8000 	nop.w
 8013920:	8800759c 	.word	0x8800759c
 8013924:	7e37e43c 	.word	0x7e37e43c
 8013928:	bff00000 	.word	0xbff00000
 801392c:	000fffff 	.word	0x000fffff

08013930 <matherr>:
 8013930:	2000      	movs	r0, #0
 8013932:	4770      	bx	lr
 8013934:	0000      	movs	r0, r0
	...

08013938 <nan>:
 8013938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013940 <nan+0x8>
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	00000000 	.word	0x00000000
 8013944:	7ff80000 	.word	0x7ff80000

08013948 <rint>:
 8013948:	b530      	push	{r4, r5, lr}
 801394a:	b085      	sub	sp, #20
 801394c:	ed8d 0b00 	vstr	d0, [sp]
 8013950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013954:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8013958:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801395c:	2813      	cmp	r0, #19
 801395e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8013962:	dc5a      	bgt.n	8013a1a <rint+0xd2>
 8013964:	2800      	cmp	r0, #0
 8013966:	da2f      	bge.n	80139c8 <rint+0x80>
 8013968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801396c:	4311      	orrs	r1, r2
 801396e:	d027      	beq.n	80139c0 <rint+0x78>
 8013970:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8013974:	4315      	orrs	r5, r2
 8013976:	426a      	negs	r2, r5
 8013978:	432a      	orrs	r2, r5
 801397a:	0b12      	lsrs	r2, r2, #12
 801397c:	0c5b      	lsrs	r3, r3, #17
 801397e:	045b      	lsls	r3, r3, #17
 8013980:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8013984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013988:	ea42 0103 	orr.w	r1, r2, r3
 801398c:	4b31      	ldr	r3, [pc, #196]	; (8013a54 <rint+0x10c>)
 801398e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013992:	ed93 6b00 	vldr	d6, [r3]
 8013996:	ec41 0b17 	vmov	d7, r0, r1
 801399a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801399e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80139aa:	ed8d 7b00 	vstr	d7, [sp]
 80139ae:	9b01      	ldr	r3, [sp, #4]
 80139b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139b8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 80139bc:	e9cd 0100 	strd	r0, r1, [sp]
 80139c0:	ed9d 0b00 	vldr	d0, [sp]
 80139c4:	b005      	add	sp, #20
 80139c6:	bd30      	pop	{r4, r5, pc}
 80139c8:	4923      	ldr	r1, [pc, #140]	; (8013a58 <rint+0x110>)
 80139ca:	4101      	asrs	r1, r0
 80139cc:	ea03 0501 	and.w	r5, r3, r1
 80139d0:	4315      	orrs	r5, r2
 80139d2:	d0f5      	beq.n	80139c0 <rint+0x78>
 80139d4:	0849      	lsrs	r1, r1, #1
 80139d6:	ea03 0501 	and.w	r5, r3, r1
 80139da:	432a      	orrs	r2, r5
 80139dc:	d00b      	beq.n	80139f6 <rint+0xae>
 80139de:	ea23 0101 	bic.w	r1, r3, r1
 80139e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80139e6:	2813      	cmp	r0, #19
 80139e8:	fa43 f300 	asr.w	r3, r3, r0
 80139ec:	bf0c      	ite	eq
 80139ee:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80139f2:	2200      	movne	r2, #0
 80139f4:	430b      	orrs	r3, r1
 80139f6:	4619      	mov	r1, r3
 80139f8:	4b16      	ldr	r3, [pc, #88]	; (8013a54 <rint+0x10c>)
 80139fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80139fe:	ed94 6b00 	vldr	d6, [r4]
 8013a02:	4610      	mov	r0, r2
 8013a04:	ec41 0b17 	vmov	d7, r0, r1
 8013a08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8013a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a18:	e008      	b.n	8013a2c <rint+0xe4>
 8013a1a:	2833      	cmp	r0, #51	; 0x33
 8013a1c:	dd09      	ble.n	8013a32 <rint+0xea>
 8013a1e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013a22:	d1cd      	bne.n	80139c0 <rint+0x78>
 8013a24:	ed9d 7b00 	vldr	d7, [sp]
 8013a28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013a2c:	ed8d 7b00 	vstr	d7, [sp]
 8013a30:	e7c6      	b.n	80139c0 <rint+0x78>
 8013a32:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8013a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013a3a:	40c1      	lsrs	r1, r0
 8013a3c:	420a      	tst	r2, r1
 8013a3e:	d0bf      	beq.n	80139c0 <rint+0x78>
 8013a40:	0849      	lsrs	r1, r1, #1
 8013a42:	420a      	tst	r2, r1
 8013a44:	bf1f      	itttt	ne
 8013a46:	ea22 0101 	bicne.w	r1, r2, r1
 8013a4a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8013a4e:	4102      	asrne	r2, r0
 8013a50:	430a      	orrne	r2, r1
 8013a52:	e7d0      	b.n	80139f6 <rint+0xae>
 8013a54:	08014540 	.word	0x08014540
 8013a58:	000fffff 	.word	0x000fffff
 8013a5c:	00000000 	.word	0x00000000

08013a60 <scalbn>:
 8013a60:	b500      	push	{lr}
 8013a62:	ed2d 8b02 	vpush	{d8}
 8013a66:	b083      	sub	sp, #12
 8013a68:	ed8d 0b00 	vstr	d0, [sp]
 8013a6c:	9b01      	ldr	r3, [sp, #4]
 8013a6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013a72:	b9a2      	cbnz	r2, 8013a9e <scalbn+0x3e>
 8013a74:	9a00      	ldr	r2, [sp, #0]
 8013a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	d03a      	beq.n	8013af4 <scalbn+0x94>
 8013a7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013b38 <scalbn+0xd8>
 8013a82:	4b35      	ldr	r3, [pc, #212]	; (8013b58 <scalbn+0xf8>)
 8013a84:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013a88:	4298      	cmp	r0, r3
 8013a8a:	ed8d 7b00 	vstr	d7, [sp]
 8013a8e:	da11      	bge.n	8013ab4 <scalbn+0x54>
 8013a90:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8013b40 <scalbn+0xe0>
 8013a94:	ed9d 6b00 	vldr	d6, [sp]
 8013a98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a9c:	e007      	b.n	8013aae <scalbn+0x4e>
 8013a9e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013aa2:	428a      	cmp	r2, r1
 8013aa4:	d10a      	bne.n	8013abc <scalbn+0x5c>
 8013aa6:	ed9d 7b00 	vldr	d7, [sp]
 8013aaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013aae:	ed8d 7b00 	vstr	d7, [sp]
 8013ab2:	e01f      	b.n	8013af4 <scalbn+0x94>
 8013ab4:	9b01      	ldr	r3, [sp, #4]
 8013ab6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013aba:	3a36      	subs	r2, #54	; 0x36
 8013abc:	4402      	add	r2, r0
 8013abe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013ac2:	428a      	cmp	r2, r1
 8013ac4:	dd0a      	ble.n	8013adc <scalbn+0x7c>
 8013ac6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8013b48 <scalbn+0xe8>
 8013aca:	eeb0 0b48 	vmov.f64	d0, d8
 8013ace:	ed9d 1b00 	vldr	d1, [sp]
 8013ad2:	f000 f843 	bl	8013b5c <copysign>
 8013ad6:	ee20 7b08 	vmul.f64	d7, d0, d8
 8013ada:	e7e8      	b.n	8013aae <scalbn+0x4e>
 8013adc:	2a00      	cmp	r2, #0
 8013ade:	dd10      	ble.n	8013b02 <scalbn+0xa2>
 8013ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ae4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ae8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013aec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013af0:	e9cd 0100 	strd	r0, r1, [sp]
 8013af4:	ed9d 0b00 	vldr	d0, [sp]
 8013af8:	b003      	add	sp, #12
 8013afa:	ecbd 8b02 	vpop	{d8}
 8013afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b02:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013b06:	da06      	bge.n	8013b16 <scalbn+0xb6>
 8013b08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013b0c:	4298      	cmp	r0, r3
 8013b0e:	dcda      	bgt.n	8013ac6 <scalbn+0x66>
 8013b10:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8013b40 <scalbn+0xe0>
 8013b14:	e7d9      	b.n	8013aca <scalbn+0x6a>
 8013b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013b1e:	3236      	adds	r2, #54	; 0x36
 8013b20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013b24:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013b28:	ec41 0b17 	vmov	d7, r0, r1
 8013b2c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8013b50 <scalbn+0xf0>
 8013b30:	e7b2      	b.n	8013a98 <scalbn+0x38>
 8013b32:	bf00      	nop
 8013b34:	f3af 8000 	nop.w
 8013b38:	00000000 	.word	0x00000000
 8013b3c:	43500000 	.word	0x43500000
 8013b40:	c2f8f359 	.word	0xc2f8f359
 8013b44:	01a56e1f 	.word	0x01a56e1f
 8013b48:	8800759c 	.word	0x8800759c
 8013b4c:	7e37e43c 	.word	0x7e37e43c
 8013b50:	00000000 	.word	0x00000000
 8013b54:	3c900000 	.word	0x3c900000
 8013b58:	ffff3cb0 	.word	0xffff3cb0

08013b5c <copysign>:
 8013b5c:	ec51 0b10 	vmov	r0, r1, d0
 8013b60:	ee11 0a90 	vmov	r0, s3
 8013b64:	ee10 2a10 	vmov	r2, s0
 8013b68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013b6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013b70:	ea41 0300 	orr.w	r3, r1, r0
 8013b74:	ec43 2b10 	vmov	d0, r2, r3
 8013b78:	4770      	bx	lr
	...

08013b7c <_init>:
 8013b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7e:	bf00      	nop
 8013b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b82:	bc08      	pop	{r3}
 8013b84:	469e      	mov	lr, r3
 8013b86:	4770      	bx	lr

08013b88 <_fini>:
 8013b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8a:	bf00      	nop
 8013b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b8e:	bc08      	pop	{r3}
 8013b90:	469e      	mov	lr, r3
 8013b92:	4770      	bx	lr
